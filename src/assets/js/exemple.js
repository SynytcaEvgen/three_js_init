/*
─╔╗─────────────────╔═╗────╔╗     ╔╗─╔╦╗
╔╝║╔═╗╔═╦═╗╔═╗╔╗─╔═╗║╬║╔═╗╔╝║     ║╚╗║║║
║╬║║╩╣╚╗║╔╝║╩╣║╚╗║╬║║╔╝║╩╣║╬║     ║╬║╠╗║
╚═╝╚═╝─╚═╝─╚═╝╚═╝╚═╝╚╝─╚═╝╚═╝     ╚═╝╚═╝

─────╔╗────────────────────╔╗     ╔╗────────────
╔═╗─╔╝║╔═╦═╗╔═╗─╔═╦╗╔═╗╔═╗╔╝║     ║╚╗╔═╗╔═╗─╔══╗
║╬╚╗║╬║╚╗║╔╝║╬╚╗║║║║║═╣║╩╣║╬║     ║╔╣║╩╣║╬╚╗║║║║
╚══╝╚═╝─╚═╝─╚══╝╚╩═╝╚═╝╚═╝╚═╝     ╚═╝╚═╝╚══╝╚╩╩╝

─────────╔╗     ────────────────╔╗─
╔═╗─╔═╦╗╔╝║     ╔═╦═╗╔═╗╔═╦═╗╔═╗║╚╗
║╬╚╗║║║║║╬║     ╚╗║╔╝║╩╣╚╗║╔╝║╩╣║╔╣
╚══╝╚╩═╝╚═╝     ─╚═╝─╚═╝─╚═╝─╚═╝╚═╝
*/
(window.webpackJsonp = window.webpackJsonp || []).push([
    [1],
    Array(58).concat([
        function (t, e, n) {
            "use strict";
            function i(t) {
                if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                return t;
            }
            function r(t, e) {
                (t.prototype = Object.create(e.prototype)), (t.prototype.constructor = t), (t.__proto__ = e);
            }
            n.d(e, "a", function () {
                return Ie;
            }),
                n.d(e, "c", function () {
                    return on;
                }),
                n.d(e, "y", function () {
                    return ln;
                }),
                n.d(e, "b", function () {
                    return un;
                }),
                n.d(e, "w", function () {
                    return ln;
                }),
                n.d(e, "x", function () {
                    return Qt;
                }),
                n.d(e, "i", function () {
                    return yt;
                }),
                n.d(e, "n", function () {
                    return Z;
                }),
                n.d(e, "o", function () {
                    return J;
                }),
                n.d(e, "k", function () {
                    return F;
                }),
                n.d(e, "l", function () {
                    return G;
                }),
                n.d(e, "r", function () {
                    return Ke;
                }),
                n.d(e, "q", function () {
                    return $;
                }),
                n.d(e, "g", function () {
                    return xt;
                }),
                n.d(e, "u", function () {
                    return rn;
                }),
                n.d(e, "e", function () {
                    return _e;
                }),
                n.d(e, "s", function () {
                    return ce;
                }),
                n.d(e, "d", function () {
                    return Fe;
                }),
                n.d(e, "p", function () {
                    return ht;
                }),
                n.d(e, "v", function () {
                    return be;
                }),
                n.d(e, "f", function () {
                    return C;
                }),
                n.d(e, "t", function () {
                    return _t;
                }),
                n.d(e, "m", function () {
                    return rt;
                }),
                n.d(e, "j", function () {
                    return Ze;
                }),
                n.d(e, "h", function () {
                    return gt;
                });
            var o,
                a,
                s,
                c,
                l,
                u,
                h,
                p,
                d,
                f,
                m,
                v,
                g,
                y,
                x,
                _,
                b,
                w,
                M,
                S,
                T,
                E,
                A,
                P,
                L,
                C = { autoSleep: 120, force3D: "auto", nullTargetWarn: 1, units: { lineHeight: "" } },
                R = { duration: 0.5, overwrite: !1, delay: 0 },
                O = 1e-8,
                D = 2 * Math.PI,
                I = D / 4,
                N = 0,
                k = Math.sqrt,
                B = Math.cos,
                z = Math.sin,
                F = function (t) {
                    return "string" == typeof t;
                },
                U = function (t) {
                    return "function" == typeof t;
                },
                j = function (t) {
                    return "number" == typeof t;
                },
                G = function (t) {
                    return void 0 === t;
                },
                H = function (t) {
                    return "object" == typeof t;
                },
                V = function (t) {
                    return !1 !== t;
                },
                W = function () {
                    return "undefined" != typeof window;
                },
                q = function (t) {
                    return U(t) || F(t);
                },
                X = Array.isArray,
                Y = /(?:-?\.?\d|\.)+/gi,
                Z = /[-+=.]*\d+[.e\-+]*\d*[e\-\+]*\d*/g,
                J = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g,
                Q = /[-+=.]*\d+(?:\.|e-|e)*\d*/gi,
                K = /\(([^()]+)\)/i,
                $ = /[+-]=-?[\.\d]+/,
                tt = /[#\-+.]*\b[a-z\d-=+%.]+/gi,
                et = {},
                nt = {},
                it = function (t) {
                    return (nt = Lt(t, et)) && ln;
                },
                rt = function (t, e) {
                    return console.warn("Invalid property", t, "set to", e, "Missing plugin? gsap.registerPlugin()");
                },
                ot = function (t, e) {
                    return !e && console.warn(t);
                },
                at = function (t, e) {
                    return (t && (et[t] = e) && nt && (nt[t] = e)) || et;
                },
                st = function () {
                    return 0;
                },
                ct = {},
                lt = [],
                ut = {},
                ht = {},
                pt = {},
                dt = 30,
                ft = [],
                mt = "",
                vt = function (t) {
                    var e,
                        n,
                        i = t[0];
                    if ((H(i) || U(i) || (t = [t]), !(e = (i._gsap || {}).harness))) {
                        for (n = ft.length; n-- && !ft[n].targetTest(i); );
                        e = ft[n];
                    }
                    for (n = t.length; n--; ) (t[n] && (t[n]._gsap || (t[n]._gsap = new Ie(t[n], e)))) || t.splice(n, 1);
                    return t;
                },
                gt = function (t) {
                    return t._gsap || vt(ee(t))[0]._gsap;
                },
                yt = function (t, e) {
                    var n = t[e];
                    return U(n) ? t[e]() : (G(n) && t.getAttribute(e)) || n;
                },
                xt = function (t, e) {
                    return (t = t.split(",")).forEach(e) || t;
                },
                _t = function (t) {
                    return Math.round(1e5 * t) / 1e5 || 0;
                },
                bt = function (t, e) {
                    for (var n = e.length, i = 0; t.indexOf(e[i]) < 0 && ++i < n; );
                    return i < n;
                },
                wt = function (t, e, n) {
                    var i,
                        r = j(t[1]),
                        o = (r ? 2 : 1) + (e < 2 ? 0 : 1),
                        a = t[o];
                    if ((r && (a.duration = t[1]), (a.parent = n), e)) {
                        for (i = a; n && !("immediateRender" in i); ) (i = n.vars.defaults || {}), (n = V(n.vars.inherit) && n.parent);
                        (a.immediateRender = V(i.immediateRender)), e < 2 ? (a.runBackwards = 1) : (a.startAt = t[o - 1]);
                    }
                    return a;
                },
                Mt = function () {
                    var t,
                        e,
                        n = lt.length,
                        i = lt.slice(0);
                    for (ut = {}, lt.length = 0, t = 0; t < n; t++) (e = i[t]) && e._lazy && (e.render(e._lazy[0], e._lazy[1], !0)._lazy = 0);
                },
                St = function (t, e, n, i) {
                    lt.length && Mt(), t.render(e, n, i), lt.length && Mt();
                },
                Tt = function (t) {
                    var e = parseFloat(t);
                    return (e || 0 === e) && (t + "").match(tt).length < 2 ? e : t;
                },
                Et = function (t) {
                    return t;
                },
                At = function (t, e) {
                    for (var n in e) n in t || (t[n] = e[n]);
                    return t;
                },
                Pt = function (t, e) {
                    for (var n in e) n in t || "duration" === n || "ease" === n || (t[n] = e[n]);
                },
                Lt = function (t, e) {
                    for (var n in e) t[n] = e[n];
                    return t;
                },
                Ct = function t(e, n) {
                    for (var i in n) e[i] = H(n[i]) ? t(e[i] || (e[i] = {}), n[i]) : n[i];
                    return e;
                },
                Rt = function (t, e) {
                    var n,
                        i = {};
                    for (n in t) n in e || (i[n] = t[n]);
                    return i;
                },
                Ot = function (t) {
                    var e = t.parent || o,
                        n = t.keyframes ? Pt : At;
                    if (V(t.inherit)) for (; e; ) n(t, e.vars.defaults), (e = e.parent || e._dp);
                    return t;
                },
                Dt = function (t, e, n, i) {
                    void 0 === n && (n = "_first"), void 0 === i && (i = "_last");
                    var r = e._prev,
                        o = e._next;
                    r ? (r._next = o) : t[n] === e && (t[n] = o), o ? (o._prev = r) : t[i] === e && (t[i] = r), (e._next = e._prev = e.parent = null);
                },
                It = function (t, e) {
                    !t.parent || (e && !t.parent.autoRemoveChildren) || t.parent.remove(t), (t._act = 0);
                },
                Nt = function (t) {
                    for (var e = t; e; ) (e._dirty = 1), (e = e.parent);
                    return t;
                },
                kt = function t(e) {
                    return !e || (e._ts && t(e.parent));
                },
                Bt = function (t) {
                    return t._repeat ? zt(t._tTime, (t = t.duration() + t._rDelay)) * t : 0;
                },
                zt = function (t, e) {
                    return (t /= e) && ~~t === t ? ~~t - 1 : ~~t;
                },
                Ft = function (t, e) {
                    return (t - e._start) * e._ts + (e._ts >= 0 ? 0 : e._dirty ? e.totalDuration() : e._tDur);
                },
                Ut = function (t) {
                    return (t._end = _t(t._start + (t._tDur / Math.abs(t._ts || t._rts || O) || 0)));
                },
                jt = function (t, e) {
                    var n;
                    if (((e._time || (e._initted && !e._dur)) && ((n = Ft(t.rawTime(), e)), (!e._dur || Jt(0, e.totalDuration(), n) - e._tTime > O) && e.render(n, !0)), Nt(t)._dp && t._initted && t._time >= t._dur && t._ts)) {
                        if (t._dur < t.duration()) for (n = t; n._dp; ) n.rawTime() >= 0 && n.totalTime(n._tTime), (n = n._dp);
                        t._zTime = -O;
                    }
                },
                Gt = function (t, e, n, i) {
                    return (
                        e.parent && It(e),
                        (e._start = _t(n + e._delay)),
                        (e._end = _t(e._start + (e.totalDuration() / Math.abs(e.timeScale()) || 0))),
                        (function (t, e, n, i, r) {
                            void 0 === n && (n = "_first"), void 0 === i && (i = "_last");
                            var o,
                                a = t[i];
                            if (r) for (o = e[r]; a && a[r] > o; ) a = a._prev;
                            a ? ((e._next = a._next), (a._next = e)) : ((e._next = t[n]), (t[n] = e)), e._next ? (e._next._prev = e) : (t[i] = e), (e._prev = a), (e.parent = e._dp = t);
                        })(t, e, "_first", "_last", t._sort ? "_start" : 0),
                        (t._recent = e),
                        i || jt(t, e),
                        t
                    );
                },
                Ht = function (t, e) {
                    return (et.ScrollTrigger || rt("scrollTrigger", e)) && et.ScrollTrigger.create(e, t);
                },
                Vt = function (t, e, n, i) {
                    return Ue(t, e), t._initted ? (!n && t._pt && ((t._dur && !1 !== t.vars.lazy) || (!t._dur && t.vars.lazy)) && u !== be.frame ? (lt.push(t), (t._lazy = [e, i]), 1) : void 0) : 1;
                },
                Wt = function (t, e, n) {
                    var i = t._repeat,
                        r = _t(e) || 0;
                    return (t._dur = r), (t._tDur = i ? (i < 0 ? 1e10 : _t(r * (i + 1) + t._rDelay * i)) : r), t._time > r && ((t._time = r), (t._tTime = Math.min(t._tTime, t._tDur))), !n && Nt(t.parent), t.parent && Ut(t), t;
                },
                qt = function (t) {
                    return t instanceof ke ? Nt(t) : Wt(t, t._dur);
                },
                Xt = { _start: 0, endTime: st },
                Yt = function t(e, n) {
                    var i,
                        r,
                        o = e.labels,
                        a = e._recent || Xt,
                        s = e.duration() >= 1e8 ? a.endTime(!1) : e._dur;
                    return F(n) && (isNaN(n) || n in o)
                        ? "<" === (i = n.charAt(0)) || ">" === i
                            ? ("<" === i ? a._start : a.endTime(a._repeat >= 0)) + (parseFloat(n.substr(1)) || 0)
                            : (i = n.indexOf("=")) < 0
                            ? (n in o || (o[n] = s), o[n])
                            : ((r = +(n.charAt(i - 1) + n.substr(i + 1))), i > 1 ? t(e, n.substr(0, i - 1)) + r : s + r)
                        : null == n
                        ? s
                        : +n;
                },
                Zt = function (t, e) {
                    return t || 0 === t ? e(t) : e;
                },
                Jt = function (t, e, n) {
                    return n < t ? t : n > e ? e : n;
                },
                Qt = function (t) {
                    return (t + "").substr((parseFloat(t) + "").length);
                },
                Kt = [].slice,
                $t = function (t, e) {
                    return t && H(t) && "length" in t && ((!e && !t.length) || (t.length - 1 in t && H(t[0]))) && !t.nodeType && t !== a;
                },
                te = function (t, e, n) {
                    return (
                        void 0 === n && (n = []),
                        t.forEach(function (t) {
                            var i;
                            return (F(t) && !e) || $t(t, 1) ? (i = n).push.apply(i, ee(t)) : n.push(t);
                        }) || n
                    );
                },
                ee = function (t, e) {
                    return !F(t) || e || (!s && we()) ? (X(t) ? te(t, e) : $t(t) ? Kt.call(t, 0) : t ? [t] : []) : Kt.call(c.querySelectorAll(t), 0);
                },
                ne = function (t) {
                    return t.sort(function () {
                        return 0.5 - Math.random();
                    });
                },
                ie = function (t) {
                    if (U(t)) return t;
                    var e = H(t) ? t : { each: t },
                        n = Le(e.ease),
                        i = e.from || 0,
                        r = parseFloat(e.base) || 0,
                        o = {},
                        a = i > 0 && i < 1,
                        s = isNaN(i) || a,
                        c = e.axis,
                        l = i,
                        u = i;
                    return (
                        F(i) ? (l = u = { center: 0.5, edges: 0.5, end: 1 }[i] || 0) : !a && s && ((l = i[0]), (u = i[1])),
                        function (t, a, h) {
                            var p,
                                d,
                                f,
                                m,
                                v,
                                g,
                                y,
                                x,
                                _,
                                b = (h || e).length,
                                w = o[b];
                            if (!w) {
                                if (!(_ = "auto" === e.grid ? 0 : (e.grid || [1, 1e8])[1])) {
                                    for (y = -1e8; y < (y = h[_++].getBoundingClientRect().left) && _ < b; );
                                    _--;
                                }
                                for (w = o[b] = [], p = s ? Math.min(_, b) * l - 0.5 : i % _, d = s ? (b * u) / _ - 0.5 : (i / _) | 0, y = 0, x = 1e8, g = 0; g < b; g++)
                                    (f = (g % _) - p), (m = d - ((g / _) | 0)), (w[g] = v = c ? Math.abs("y" === c ? m : f) : k(f * f + m * m)), v > y && (y = v), v < x && (x = v);
                                "random" === i && ne(w),
                                    (w.max = y - x),
                                    (w.min = x),
                                    (w.v = b = (parseFloat(e.amount) || parseFloat(e.each) * (_ > b ? b - 1 : c ? ("y" === c ? b / _ : _) : Math.max(_, b / _)) || 0) * ("edges" === i ? -1 : 1)),
                                    (w.b = b < 0 ? r - b : r),
                                    (w.u = Qt(e.amount || e.each) || 0),
                                    (n = n && b < 0 ? Ae(n) : n);
                            }
                            return (b = (w[t] - w.min) / w.max || 0), _t(w.b + (n ? n(b) : b) * w.v) + w.u;
                        }
                    );
                },
                re = function (t) {
                    var e = t < 1 ? Math.pow(10, (t + "").length - 2) : 1;
                    return function (n) {
                        return Math.floor(Math.round(parseFloat(n) / t) * t * e) / e + (j(n) ? 0 : Qt(n));
                    };
                },
                oe = function (t, e) {
                    var n,
                        i,
                        r = X(t);
                    return (
                        !r && H(t) && ((n = r = t.radius || 1e8), t.values ? ((t = ee(t.values)), (i = !j(t[0])) && (n *= n)) : (t = re(t.increment))),
                        Zt(
                            e,
                            r
                                ? U(t)
                                    ? function (e) {
                                          return (i = t(e)), Math.abs(i - e) <= n ? i : e;
                                      }
                                    : function (e) {
                                          for (var r, o, a = parseFloat(i ? e.x : e), s = parseFloat(i ? e.y : 0), c = 1e8, l = 0, u = t.length; u--; )
                                              (r = i ? (r = t[u].x - a) * r + (o = t[u].y - s) * o : Math.abs(t[u] - a)) < c && ((c = r), (l = u));
                                          return (l = !n || c <= n ? t[l] : e), i || l === e || j(e) ? l : l + Qt(e);
                                      }
                                : re(t)
                        )
                    );
                },
                ae = function (t, e, n, i) {
                    return Zt(X(t) ? !e : !0 === n ? !!(n = 0) : !i, function () {
                        return X(t) ? t[~~(Math.random() * t.length)] : (n = n || 1e-5) && (i = n < 1 ? Math.pow(10, (n + "").length - 2) : 1) && Math.floor(Math.round((t + Math.random() * (e - t)) / n) * n * i) / i;
                    });
                },
                se = function (t, e, n) {
                    return Zt(n, function (n) {
                        return t[~~e(n)];
                    });
                },
                ce = function (t) {
                    for (var e, n, i, r, o = 0, a = ""; ~(e = t.indexOf("random(", o)); )
                        (i = t.indexOf(")", e)), (r = "[" === t.charAt(e + 7)), (n = t.substr(e + 7, i - e - 7).match(r ? tt : Y)), (a += t.substr(o, e - o) + ae(r ? n : +n[0], +n[1], +n[2] || 1e-5)), (o = i + 1);
                    return a + t.substr(o, t.length - o);
                },
                le = function (t, e, n, i, r) {
                    var o = e - t,
                        a = i - n;
                    return Zt(r, function (e) {
                        return n + (((e - t) / o) * a || 0);
                    });
                },
                ue = function (t, e, n) {
                    var i,
                        r,
                        o,
                        a = t.labels,
                        s = 1e8;
                    for (i in a) (r = a[i] - e) < 0 == !!n && r && s > (r = Math.abs(r)) && ((o = i), (s = r));
                    return o;
                },
                he = function (t, e, n) {
                    var i,
                        r,
                        o = t.vars,
                        a = o[e];
                    if (a) return (i = o[e + "Params"]), (r = o.callbackScope || t), n && lt.length && Mt(), i ? a.apply(r, i) : a.call(r);
                },
                pe = function (t) {
                    return It(t), t.progress() < 1 && he(t, "onInterrupt"), t;
                },
                de = {
                    aqua: [0, 255, 255],
                    lime: [0, 255, 0],
                    silver: [192, 192, 192],
                    black: [0, 0, 0],
                    maroon: [128, 0, 0],
                    teal: [0, 128, 128],
                    blue: [0, 0, 255],
                    navy: [0, 0, 128],
                    white: [255, 255, 255],
                    olive: [128, 128, 0],
                    yellow: [255, 255, 0],
                    orange: [255, 165, 0],
                    gray: [128, 128, 128],
                    purple: [128, 0, 128],
                    green: [0, 128, 0],
                    red: [255, 0, 0],
                    pink: [255, 192, 203],
                    cyan: [0, 255, 255],
                    transparent: [255, 255, 255, 0],
                },
                fe = function (t, e, n) {
                    return (255 * (6 * (t = t < 0 ? t + 1 : t > 1 ? t - 1 : t) < 1 ? e + (n - e) * t * 6 : t < 0.5 ? n : 3 * t < 2 ? e + (n - e) * (2 / 3 - t) * 6 : e) + 0.5) | 0;
                },
                me = function (t, e, n) {
                    var i,
                        r,
                        o,
                        a,
                        s,
                        c,
                        l,
                        u,
                        h,
                        p,
                        d = t ? (j(t) ? [t >> 16, (t >> 8) & 255, 255 & t] : 0) : de.black;
                    if (!d) {
                        if (("," === t.substr(-1) && (t = t.substr(0, t.length - 1)), de[t])) d = de[t];
                        else if ("#" === t.charAt(0)) 4 === t.length && (t = "#" + (i = t.charAt(1)) + i + (r = t.charAt(2)) + r + (o = t.charAt(3)) + o), (d = [(t = parseInt(t.substr(1), 16)) >> 16, (t >> 8) & 255, 255 & t]);
                        else if ("hsl" === t.substr(0, 3))
                            if (((d = p = t.match(Y)), e)) {
                                if (~t.indexOf("=")) return (d = t.match(Z)), n && d.length < 4 && (d[3] = 1), d;
                            } else
                                (a = (+d[0] % 360) / 360),
                                    (s = +d[1] / 100),
                                    (i = 2 * (c = +d[2] / 100) - (r = c <= 0.5 ? c * (s + 1) : c + s - c * s)),
                                    d.length > 3 && (d[3] *= 1),
                                    (d[0] = fe(a + 1 / 3, i, r)),
                                    (d[1] = fe(a, i, r)),
                                    (d[2] = fe(a - 1 / 3, i, r));
                        else d = t.match(Y) || de.transparent;
                        d = d.map(Number);
                    }
                    return (
                        e &&
                            !p &&
                            ((i = d[0] / 255),
                            (r = d[1] / 255),
                            (o = d[2] / 255),
                            (c = ((l = Math.max(i, r, o)) + (u = Math.min(i, r, o))) / 2),
                            l === u ? (a = s = 0) : ((h = l - u), (s = c > 0.5 ? h / (2 - l - u) : h / (l + u)), (a = l === i ? (r - o) / h + (r < o ? 6 : 0) : l === r ? (o - i) / h + 2 : (i - r) / h + 4), (a *= 60)),
                            (d[0] = ~~(a + 0.5)),
                            (d[1] = ~~(100 * s + 0.5)),
                            (d[2] = ~~(100 * c + 0.5))),
                        n && d.length < 4 && (d[3] = 1),
                        d
                    );
                },
                ve = function (t) {
                    var e = [],
                        n = [],
                        i = -1;
                    return (
                        t.split(ye).forEach(function (t) {
                            var r = t.match(J) || [];
                            e.push.apply(e, r), n.push((i += r.length + 1));
                        }),
                        (e.c = n),
                        e
                    );
                },
                ge = function (t, e, n) {
                    var i,
                        r,
                        o,
                        a,
                        s = "",
                        c = (t + s).match(ye),
                        l = e ? "hsla(" : "rgba(",
                        u = 0;
                    if (!c) return t;
                    if (
                        ((c = c.map(function (t) {
                            return (t = me(t, e, 1)) && l + (e ? t[0] + "," + t[1] + "%," + t[2] + "%," + t[3] : t.join(",")) + ")";
                        })),
                        n && ((o = ve(t)), (i = n.c).join(s) !== o.c.join(s)))
                    )
                        for (a = (r = t.replace(ye, "1").split(J)).length - 1; u < a; u++) s += r[u] + (~i.indexOf(u) ? c.shift() || l + "0,0,0,0)" : (o.length ? o : c.length ? c : n).shift());
                    if (!r) for (a = (r = t.split(ye)).length - 1; u < a; u++) s += r[u] + c[u];
                    return s + r[a];
                },
                ye = (function () {
                    var t,
                        e = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b";
                    for (t in de) e += "|" + t + "\\b";
                    return new RegExp(e + ")", "gi");
                })(),
                xe = /hsl[a]?\(/,
                _e = function (t) {
                    var e,
                        n = t.join(" ");
                    if (((ye.lastIndex = 0), ye.test(n))) return (e = xe.test(n)), (t[1] = ge(t[1], e)), (t[0] = ge(t[0], e, ve(t[1]))), !0;
                },
                be =
                    ((g = Date.now),
                    (y = 500),
                    (x = 33),
                    (_ = g()),
                    (b = _),
                    (M = w = 1 / 240),
                    (T = function t(e) {
                        var n,
                            i,
                            r = g() - b,
                            o = !0 === e;
                        r > y && (_ += r - x),
                            (b += r),
                            (v.time = (b - _) / 1e3),
                            ((n = v.time - M) > 0 || o) && (v.frame++, (M += n + (n >= w ? 0.004 : w - n)), (i = 1)),
                            o || (d = f(t)),
                            i &&
                                S.forEach(function (t) {
                                    return t(v.time, r, v.frame, e);
                                });
                    }),
                    (v = {
                        time: 0,
                        frame: 0,
                        tick: function () {
                            T(!0);
                        },
                        wake: function () {
                            l &&
                                (!s &&
                                    W() &&
                                    ((a = s = window), (c = a.document || {}), (et.gsap = ln), (a.gsapVersions || (a.gsapVersions = [])).push(ln.version), it(nt || a.GreenSockGlobals || (!a.gsap && a) || {}), (m = a.requestAnimationFrame)),
                                d && v.sleep(),
                                (f =
                                    m ||
                                    function (t) {
                                        return setTimeout(t, (1e3 * (M - v.time) + 1) | 0);
                                    }),
                                (p = 1),
                                T(2));
                        },
                        sleep: function () {
                            (m ? a.cancelAnimationFrame : clearTimeout)(d), (p = 0), (f = st);
                        },
                        lagSmoothing: function (t, e) {
                            (y = t || 1 / O), (x = Math.min(e, y, 0));
                        },
                        fps: function (t) {
                            (w = 1 / (t || 240)), (M = v.time + w);
                        },
                        add: function (t) {
                            S.indexOf(t) < 0 && S.push(t), we();
                        },
                        remove: function (t) {
                            var e;
                            ~(e = S.indexOf(t)) && S.splice(e, 1);
                        },
                        _listeners: (S = []),
                    })),
                we = function () {
                    return !p && be.wake();
                },
                Me = {},
                Se = /^[\d.\-M][\d.\-,\s]/,
                Te = /["']/g,
                Ee = function (t) {
                    var e = (t + "").split("("),
                        n = Me[e[0]];
                    return n && e.length > 1 && n.config
                        ? n.config.apply(
                              null,
                              ~t.indexOf("{")
                                  ? [
                                        (function (t) {
                                            for (var e, n, i, r = {}, o = t.substr(1, t.length - 3).split(":"), a = o[0], s = 1, c = o.length; s < c; s++)
                                                (n = o[s]), (e = s !== c - 1 ? n.lastIndexOf(",") : n.length), (i = n.substr(0, e)), (r[a] = isNaN(i) ? i.replace(Te, "").trim() : +i), (a = n.substr(e + 1).trim());
                                            return r;
                                        })(e[1]),
                                    ]
                                  : K.exec(t)[1].split(",").map(Tt)
                          )
                        : Me._CE && Se.test(t)
                        ? Me._CE("", t)
                        : n;
                },
                Ae = function (t) {
                    return function (e) {
                        return 1 - t(1 - e);
                    };
                },
                Pe = function t(e, n) {
                    for (var i, r = e._first; r; )
                        r instanceof ke ? t(r, n) : !r.vars.yoyoEase || (r._yoyo && r._repeat) || r._yoyo === n || (r.timeline ? t(r.timeline, n) : ((i = r._ease), (r._ease = r._yEase), (r._yEase = i), (r._yoyo = n))), (r = r._next);
                },
                Le = function (t, e) {
                    return (t && (U(t) ? t : Me[t] || Ee(t))) || e;
                },
                Ce = function (t, e, n, i) {
                    void 0 === n &&
                        (n = function (t) {
                            return 1 - e(1 - t);
                        }),
                        void 0 === i &&
                            (i = function (t) {
                                return t < 0.5 ? e(2 * t) / 2 : 1 - e(2 * (1 - t)) / 2;
                            });
                    var r,
                        o = { easeIn: e, easeOut: n, easeInOut: i };
                    return (
                        xt(t, function (t) {
                            for (var e in ((Me[t] = et[t] = o), (Me[(r = t.toLowerCase())] = n), o)) Me[r + ("easeIn" === e ? ".in" : "easeOut" === e ? ".out" : ".inOut")] = Me[t + "." + e] = o[e];
                        }),
                        o
                    );
                },
                Re = function (t) {
                    return function (e) {
                        return e < 0.5 ? (1 - t(1 - 2 * e)) / 2 : 0.5 + t(2 * (e - 0.5)) / 2;
                    };
                },
                Oe = function t(e, n, i) {
                    var r = n >= 1 ? n : 1,
                        o = (i || (e ? 0.3 : 0.45)) / (n < 1 ? n : 1),
                        a = (o / D) * (Math.asin(1 / r) || 0),
                        s = function (t) {
                            return 1 === t ? 1 : r * Math.pow(2, -10 * t) * z((t - a) * o) + 1;
                        },
                        c =
                            "out" === e
                                ? s
                                : "in" === e
                                ? function (t) {
                                      return 1 - s(1 - t);
                                  }
                                : Re(s);
                    return (
                        (o = D / o),
                        (c.config = function (n, i) {
                            return t(e, n, i);
                        }),
                        c
                    );
                },
                De = function t(e, n) {
                    void 0 === n && (n = 1.70158);
                    var i = function (t) {
                            return t ? --t * t * ((n + 1) * t + n) + 1 : 0;
                        },
                        r =
                            "out" === e
                                ? i
                                : "in" === e
                                ? function (t) {
                                      return 1 - i(1 - t);
                                  }
                                : Re(i);
                    return (
                        (r.config = function (n) {
                            return t(e, n);
                        }),
                        r
                    );
                };
            xt("Linear,Quad,Cubic,Quart,Quint,Strong", function (t, e) {
                var n = e < 5 ? e + 1 : e;
                Ce(
                    t + ",Power" + (n - 1),
                    e
                        ? function (t) {
                              return Math.pow(t, n);
                          }
                        : function (t) {
                              return t;
                          },
                    function (t) {
                        return 1 - Math.pow(1 - t, n);
                    },
                    function (t) {
                        return t < 0.5 ? Math.pow(2 * t, n) / 2 : 1 - Math.pow(2 * (1 - t), n) / 2;
                    }
                );
            }),
                (Me.Linear.easeNone = Me.none = Me.Linear.easeIn),
                Ce("Elastic", Oe("in"), Oe("out"), Oe()),
                (E = 7.5625),
                (P = 1 / (A = 2.75)),
                Ce(
                    "Bounce",
                    function (t) {
                        return 1 - L(1 - t);
                    },
                    (L = function (t) {
                        return t < P ? E * t * t : t < 0.7272727272727273 ? E * Math.pow(t - 1.5 / A, 2) + 0.75 : t < 0.9090909090909092 ? E * (t -= 2.25 / A) * t + 0.9375 : E * Math.pow(t - 2.625 / A, 2) + 0.984375;
                    })
                ),
                Ce("Expo", function (t) {
                    return t ? Math.pow(2, 10 * (t - 1)) : 0;
                }),
                Ce("Circ", function (t) {
                    return -(k(1 - t * t) - 1);
                }),
                Ce("Sine", function (t) {
                    return 1 === t ? 1 : 1 - B(t * I);
                }),
                Ce("Back", De("in"), De("out"), De()),
                (Me.SteppedEase = Me.steps = et.SteppedEase = {
                    config: function (t, e) {
                        void 0 === t && (t = 1);
                        var n = 1 / t,
                            i = t + (e ? 0 : 1),
                            r = e ? 1 : 0,
                            o = 1 - O;
                        return function (t) {
                            return (((i * Jt(0, o, t)) | 0) + r) * n;
                        };
                    },
                }),
                (R.ease = Me["quad.out"]),
                xt("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt", function (t) {
                    return (mt += t + "," + t + "Params,");
                });
            var Ie = function (t, e) {
                    (this.id = N++), (t._gsap = this), (this.target = t), (this.harness = e), (this.get = e ? e.get : yt), (this.set = e ? e.getSetter : Ze);
                },
                Ne = (function () {
                    function t(t, e) {
                        var n = t.parent || o;
                        (this.vars = t),
                            (this._delay = +t.delay || 0),
                            (this._repeat = t.repeat || 0) && ((this._rDelay = t.repeatDelay || 0), (this._yoyo = !!t.yoyo || !!t.yoyoEase)),
                            (this._ts = 1),
                            Wt(this, +t.duration, 1),
                            (this.data = t.data),
                            p || be.wake(),
                            n && Gt(n, this, e || 0 === e ? e : n._time, 1),
                            t.reversed && this.reverse(),
                            t.paused && this.paused(!0);
                    }
                    var e = t.prototype;
                    return (
                        (e.delay = function (t) {
                            return t || 0 === t ? (this.parent && this.parent.smoothChildTiming && this.startTime(this._start + t - this._delay), (this._delay = t), this) : this._delay;
                        }),
                        (e.duration = function (t) {
                            return arguments.length ? this.totalDuration(this._repeat > 0 ? t + (t + this._rDelay) * this._repeat : t) : this.totalDuration() && this._dur;
                        }),
                        (e.totalDuration = function (t) {
                            return arguments.length ? ((this._dirty = 0), Wt(this, this._repeat < 0 ? t : (t - this._repeat * this._rDelay) / (this._repeat + 1))) : this._tDur;
                        }),
                        (e.totalTime = function (t, e) {
                            if ((we(), !arguments.length)) return this._tTime;
                            var n = this.parent || this._dp;
                            if (n && n.smoothChildTiming && this._ts) {
                                for (this._start = _t(n._time - (this._ts > 0 ? t / this._ts : ((this._dirty ? this.totalDuration() : this._tDur) - t) / -this._ts)), Ut(this), n._dirty || Nt(n); n.parent; )
                                    n.parent._time !== n._start + (n._ts >= 0 ? n._tTime / n._ts : (n.totalDuration() - n._tTime) / -n._ts) && n.totalTime(n._tTime, !0), (n = n.parent);
                                !this.parent && this._dp.autoRemoveChildren && Gt(this._dp, this, this._start - this._delay);
                            }
                            return (this._tTime !== t || (!this._dur && !e) || (this._initted && Math.abs(this._zTime) === O) || (!t && !this._initted)) && (this._ts || (this._pTime = t), St(this, t, e)), this;
                        }),
                        (e.time = function (t, e) {
                            return arguments.length ? this.totalTime(Math.min(this.totalDuration(), t + Bt(this)) % this._dur || (t ? this._dur : 0), e) : this._time;
                        }),
                        (e.totalProgress = function (t, e) {
                            return arguments.length ? this.totalTime(this.totalDuration() * t, e) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.ratio;
                        }),
                        (e.progress = function (t, e) {
                            return arguments.length ? this.totalTime(this.duration() * (!this._yoyo || 1 & this.iteration() ? t : 1 - t) + Bt(this), e) : this.duration() ? Math.min(1, this._time / this._dur) : this.ratio;
                        }),
                        (e.iteration = function (t, e) {
                            var n = this.duration() + this._rDelay;
                            return arguments.length ? this.totalTime(this._time + (t - 1) * n, e) : this._repeat ? zt(this._tTime, n) + 1 : 1;
                        }),
                        (e.timeScale = function (t) {
                            if (!arguments.length) return this._rts === -O ? 0 : this._rts;
                            if (this._rts === t) return this;
                            var e = this.parent && this._ts ? Ft(this.parent._time, this) : this._tTime;
                            return (
                                (this._rts = +t || 0),
                                (this._ts = this._ps || t === -O ? 0 : this._rts),
                                (function (t) {
                                    for (var e = t.parent; e && e.parent; ) (e._dirty = 1), e.totalDuration(), (e = e.parent);
                                    return t;
                                })(this.totalTime(Jt(0, this._tDur, e), !0))
                            );
                        }),
                        (e.paused = function (t) {
                            return arguments.length
                                ? (this._ps !== t &&
                                      ((this._ps = t),
                                      t
                                          ? ((this._pTime = this._tTime || Math.max(-this._delay, this.rawTime())), (this._ts = this._act = 0))
                                          : (we(),
                                            (this._ts = this._rts),
                                            this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, 1 === this.progress() && (this._tTime -= O) && Math.abs(this._zTime) !== O))),
                                  this)
                                : this._ps;
                        }),
                        (e.startTime = function (t) {
                            if (arguments.length) {
                                this._start = t;
                                var e = this.parent || this._dp;
                                return e && (e._sort || !this.parent) && Gt(e, this, t - this._delay), this;
                            }
                            return this._start;
                        }),
                        (e.endTime = function (t) {
                            return this._start + (V(t) ? this.totalDuration() : this.duration()) / Math.abs(this._ts);
                        }),
                        (e.rawTime = function (t) {
                            var e = this.parent || this._dp;
                            return e ? (t && (!this._ts || (this._repeat && this._time && this.totalProgress() < 1)) ? this._tTime % (this._dur + this._rDelay) : this._ts ? Ft(e.rawTime(t), this) : this._tTime) : this._tTime;
                        }),
                        (e.repeat = function (t) {
                            return arguments.length ? ((this._repeat = t), qt(this)) : this._repeat;
                        }),
                        (e.repeatDelay = function (t) {
                            return arguments.length ? ((this._rDelay = t), qt(this)) : this._rDelay;
                        }),
                        (e.yoyo = function (t) {
                            return arguments.length ? ((this._yoyo = t), this) : this._yoyo;
                        }),
                        (e.seek = function (t, e) {
                            return this.totalTime(Yt(this, t), V(e));
                        }),
                        (e.restart = function (t, e) {
                            return this.play().totalTime(t ? -this._delay : 0, V(e));
                        }),
                        (e.play = function (t, e) {
                            return null != t && this.seek(t, e), this.reversed(!1).paused(!1);
                        }),
                        (e.reverse = function (t, e) {
                            return null != t && this.seek(t || this.totalDuration(), e), this.reversed(!0).paused(!1);
                        }),
                        (e.pause = function (t, e) {
                            return null != t && this.seek(t, e), this.paused(!0);
                        }),
                        (e.resume = function () {
                            return this.paused(!1);
                        }),
                        (e.reversed = function (t) {
                            return arguments.length ? (!!t !== this.reversed() && this.timeScale(-this._rts || (t ? -O : 0)), this) : this._rts < 0;
                        }),
                        (e.invalidate = function () {
                            return (this._initted = 0), (this._zTime = -O), this;
                        }),
                        (e.isActive = function (t) {
                            var e,
                                n = this.parent || this._dp,
                                i = this._start;
                            return !(n && !(this._ts && (this._initted || !t) && n.isActive(t) && (e = n.rawTime(!0)) >= i && e < this.endTime(!0) - O));
                        }),
                        (e.eventCallback = function (t, e, n) {
                            var i = this.vars;
                            return arguments.length > 1 ? (e ? ((i[t] = e), n && (i[t + "Params"] = n), "onUpdate" === t && (this._onUpdate = e)) : delete i[t], this) : i[t];
                        }),
                        (e.then = function (t) {
                            var e = this;
                            return new Promise(function (n) {
                                var i = U(t) ? t : Et,
                                    r = function () {
                                        var t = e.then;
                                        (e.then = null), U(i) && (i = i(e)) && (i.then || i === e) && (e.then = t), n(i), (e.then = t);
                                    };
                                (e._initted && 1 === e.totalProgress() && e._ts >= 0) || (!e._tTime && e._ts < 0) ? r() : (e._prom = r);
                            });
                        }),
                        (e.kill = function () {
                            pe(this);
                        }),
                        t
                    );
                })();
            At(Ne.prototype, { _time: 0, _start: 0, _end: 0, _tTime: 0, _tDur: 0, _dirty: 0, _repeat: 0, _yoyo: !1, parent: null, _initted: !1, _rDelay: 0, _ts: 1, _dp: 0, ratio: 0, _zTime: -O, _prom: 0, _ps: !1, _rts: 1 });
            var ke = (function (t) {
                function e(e, n) {
                    var r;
                    return (
                        void 0 === e && (e = {}),
                        ((r = t.call(this, e, n) || this).labels = {}),
                        (r.smoothChildTiming = !!e.smoothChildTiming),
                        (r.autoRemoveChildren = !!e.autoRemoveChildren),
                        (r._sort = V(e.sortChildren)),
                        r.parent && jt(r.parent, i(r)),
                        e.scrollTrigger && Ht(i(r), e.scrollTrigger),
                        r
                    );
                }
                r(e, t);
                var n = e.prototype;
                return (
                    (n.to = function (t, e, n) {
                        return new Ve(t, wt(arguments, 0, this), Yt(this, j(e) ? arguments[3] : n)), this;
                    }),
                    (n.from = function (t, e, n) {
                        return new Ve(t, wt(arguments, 1, this), Yt(this, j(e) ? arguments[3] : n)), this;
                    }),
                    (n.fromTo = function (t, e, n, i) {
                        return new Ve(t, wt(arguments, 2, this), Yt(this, j(e) ? arguments[4] : i)), this;
                    }),
                    (n.set = function (t, e, n) {
                        return (e.duration = 0), (e.parent = this), Ot(e).repeatDelay || (e.repeat = 0), (e.immediateRender = !!e.immediateRender), new Ve(t, e, Yt(this, n), 1), this;
                    }),
                    (n.call = function (t, e, n) {
                        return Gt(this, Ve.delayedCall(0, t, e), Yt(this, n));
                    }),
                    (n.staggerTo = function (t, e, n, i, r, o, a) {
                        return (n.duration = e), (n.stagger = n.stagger || i), (n.onComplete = o), (n.onCompleteParams = a), (n.parent = this), new Ve(t, n, Yt(this, r)), this;
                    }),
                    (n.staggerFrom = function (t, e, n, i, r, o, a) {
                        return (n.runBackwards = 1), (Ot(n).immediateRender = V(n.immediateRender)), this.staggerTo(t, e, n, i, r, o, a);
                    }),
                    (n.staggerFromTo = function (t, e, n, i, r, o, a, s) {
                        return (i.startAt = n), (Ot(i).immediateRender = V(i.immediateRender)), this.staggerTo(t, e, i, r, o, a, s);
                    }),
                    (n.render = function (t, e, n) {
                        var i,
                            r,
                            a,
                            s,
                            c,
                            l,
                            u,
                            h,
                            p,
                            d,
                            f,
                            m,
                            v = this._time,
                            g = this._dirty ? this.totalDuration() : this._tDur,
                            y = this._dur,
                            x = this !== o && t > g - O && t >= 0 ? g : t < O ? 0 : t,
                            _ = this._zTime < 0 != t < 0 && (this._initted || !y);
                        if (x !== this._tTime || n || _) {
                            if (
                                (v !== this._time && y && ((x += this._time - v), (t += this._time - v)),
                                (i = x),
                                (p = this._start),
                                (l = !(h = this._ts)),
                                _ && (y || (v = this._zTime), (t || !e) && (this._zTime = t)),
                                this._repeat &&
                                    ((f = this._yoyo),
                                    (c = y + this._rDelay),
                                    ((i = _t(x % c)) > y || g === x) && (i = y),
                                    (s = ~~(x / c)) && s === x / c && ((i = y), s--),
                                    (d = zt(this._tTime, c)),
                                    !v && this._tTime && d !== s && (d = s),
                                    f && 1 & s && ((i = y - i), (m = 1)),
                                    s !== d && !this._lock))
                            ) {
                                var b = f && 1 & d,
                                    w = b === (f && 1 & s);
                                if (
                                    (s < d && (b = !b),
                                    (v = b ? 0 : y),
                                    (this._lock = 1),
                                    (this.render(v || (m ? 0 : _t(s * c)), e, !y)._lock = 0),
                                    !e && this.parent && he(this, "onRepeat"),
                                    this.vars.repeatRefresh && !m && (this.invalidate()._lock = 1),
                                    v !== this._time || l !== !this._ts)
                                )
                                    return this;
                                if ((w && ((this._lock = 2), (v = b ? y + 1e-4 : -1e-4), this.render(v, !0), this.vars.repeatRefresh && !m && this.invalidate()), (this._lock = 0), !this._ts && !l)) return this;
                                Pe(this, m);
                            }
                            if (
                                (this._hasPause &&
                                    !this._forcing &&
                                    this._lock < 2 &&
                                    (u = (function (t, e, n) {
                                        var i;
                                        if (n > e)
                                            for (i = t._first; i && i._start <= n; ) {
                                                if (!i._dur && "isPause" === i.data && i._start > e) return i;
                                                i = i._next;
                                            }
                                        else
                                            for (i = t._last; i && i._start >= n; ) {
                                                if (!i._dur && "isPause" === i.data && i._start < e) return i;
                                                i = i._prev;
                                            }
                                    })(this, _t(v), _t(i))) &&
                                    (x -= i - (i = u._start)),
                                (this._tTime = x),
                                (this._time = i),
                                (this._act = !h),
                                this._initted || ((this._onUpdate = this.vars.onUpdate), (this._initted = 1), (this._zTime = t)),
                                v || !i || e || he(this, "onStart"),
                                i >= v && t >= 0)
                            )
                                for (r = this._first; r; ) {
                                    if (((a = r._next), (r._act || i >= r._start) && r._ts && u !== r)) {
                                        if (r.parent !== this) return this.render(t, e, n);
                                        if ((r.render(r._ts > 0 ? (i - r._start) * r._ts : (r._dirty ? r.totalDuration() : r._tDur) + (i - r._start) * r._ts, e, n), i !== this._time || (!this._ts && !l))) {
                                            (u = 0), a && (x += this._zTime = -O);
                                            break;
                                        }
                                    }
                                    r = a;
                                }
                            else {
                                r = this._last;
                                for (var M = t < 0 ? t : i; r; ) {
                                    if (((a = r._prev), (r._act || M <= r._end) && r._ts && u !== r)) {
                                        if (r.parent !== this) return this.render(t, e, n);
                                        if ((r.render(r._ts > 0 ? (M - r._start) * r._ts : (r._dirty ? r.totalDuration() : r._tDur) + (M - r._start) * r._ts, e, n), i !== this._time || (!this._ts && !l))) {
                                            (u = 0), a && (x += this._zTime = M ? -O : O);
                                            break;
                                        }
                                    }
                                    r = a;
                                }
                            }
                            if (u && !e && (this.pause(), (u.render(i >= v ? 0 : -O)._zTime = i >= v ? 1 : -1), this._ts)) return (this._start = p), Ut(this), this.render(t, e, n);
                            this._onUpdate && !e && he(this, "onUpdate", !0),
                                ((x === g && g >= this.totalDuration()) || (!x && v)) &&
                                    ((p !== this._start && Math.abs(h) === Math.abs(this._ts)) ||
                                        this._lock ||
                                        ((t || !y) && ((x === g && this._ts > 0) || (!x && this._ts < 0)) && It(this, 1),
                                        e || (t < 0 && !v) || (!x && !v) || (he(this, x === g ? "onComplete" : "onReverseComplete", !0), this._prom && !(x < g && this.timeScale() > 0) && this._prom())));
                        }
                        return this;
                    }),
                    (n.add = function (t, e) {
                        var n = this;
                        if ((j(e) || (e = Yt(this, e)), !(t instanceof Ne))) {
                            if (X(t))
                                return (
                                    t.forEach(function (t) {
                                        return n.add(t, e);
                                    }),
                                    Nt(this)
                                );
                            if (F(t)) return this.addLabel(t, e);
                            if (!U(t)) return this;
                            t = Ve.delayedCall(0, t);
                        }
                        return this !== t ? Gt(this, t, e) : this;
                    }),
                    (n.getChildren = function (t, e, n, i) {
                        void 0 === t && (t = !0), void 0 === e && (e = !0), void 0 === n && (n = !0), void 0 === i && (i = -1e8);
                        for (var r = [], o = this._first; o; ) o._start >= i && (o instanceof Ve ? e && r.push(o) : (n && r.push(o), t && r.push.apply(r, o.getChildren(!0, e, n)))), (o = o._next);
                        return r;
                    }),
                    (n.getById = function (t) {
                        for (var e = this.getChildren(1, 1, 1), n = e.length; n--; ) if (e[n].vars.id === t) return e[n];
                    }),
                    (n.remove = function (t) {
                        return F(t) ? this.removeLabel(t) : U(t) ? this.killTweensOf(t) : (Dt(this, t), t === this._recent && (this._recent = this._last), Nt(this));
                    }),
                    (n.totalTime = function (e, n) {
                        return arguments.length
                            ? ((this._forcing = 1),
                              this.parent || this._dp || !this._ts || (this._start = _t(be.time - (this._ts > 0 ? e / this._ts : (this.totalDuration() - e) / -this._ts))),
                              t.prototype.totalTime.call(this, e, n),
                              (this._forcing = 0),
                              this)
                            : this._tTime;
                    }),
                    (n.addLabel = function (t, e) {
                        return (this.labels[t] = Yt(this, e)), this;
                    }),
                    (n.removeLabel = function (t) {
                        return delete this.labels[t], this;
                    }),
                    (n.addPause = function (t, e, n) {
                        var i = Ve.delayedCall(0, e || st, n);
                        return (i.data = "isPause"), (this._hasPause = 1), Gt(this, i, Yt(this, t));
                    }),
                    (n.removePause = function (t) {
                        var e = this._first;
                        for (t = Yt(this, t); e; ) e._start === t && "isPause" === e.data && It(e), (e = e._next);
                    }),
                    (n.killTweensOf = function (t, e, n) {
                        for (var i = this.getTweensOf(t, n), r = i.length; r--; ) Be !== i[r] && i[r].kill(t, e);
                        return this;
                    }),
                    (n.getTweensOf = function (t, e) {
                        for (var n, i = [], r = ee(t), o = this._first; o; ) o instanceof Ve ? !bt(o._targets, r) || (e && !o.isActive("started" === e)) || i.push(o) : (n = o.getTweensOf(r, e)).length && i.push.apply(i, n), (o = o._next);
                        return i;
                    }),
                    (n.tweenTo = function (t, e) {
                        e = e || {};
                        var n = this,
                            i = Yt(n, t),
                            r = e,
                            o = r.startAt,
                            a = r.onStart,
                            s = r.onStartParams,
                            c = Ve.to(
                                n,
                                At(e, {
                                    ease: "none",
                                    lazy: !1,
                                    time: i,
                                    duration: e.duration || Math.abs((i - (o && "time" in o ? o.time : n._time)) / n.timeScale()) || O,
                                    onStart: function () {
                                        n.pause();
                                        var t = e.duration || Math.abs((i - n._time) / n.timeScale());
                                        c._dur !== t && Wt(c, t).render(c._time, !0, !0), a && a.apply(c, s || []);
                                    },
                                })
                            );
                        return c;
                    }),
                    (n.tweenFromTo = function (t, e, n) {
                        return this.tweenTo(e, At({ startAt: { time: Yt(this, t) } }, n));
                    }),
                    (n.recent = function () {
                        return this._recent;
                    }),
                    (n.nextLabel = function (t) {
                        return void 0 === t && (t = this._time), ue(this, Yt(this, t));
                    }),
                    (n.previousLabel = function (t) {
                        return void 0 === t && (t = this._time), ue(this, Yt(this, t), 1);
                    }),
                    (n.currentLabel = function (t) {
                        return arguments.length ? this.seek(t, !0) : this.previousLabel(this._time + O);
                    }),
                    (n.shiftChildren = function (t, e, n) {
                        void 0 === n && (n = 0);
                        for (var i, r = this._first, o = this.labels; r; ) r._start >= n && (r._start += t), (r = r._next);
                        if (e) for (i in o) o[i] >= n && (o[i] += t);
                        return Nt(this);
                    }),
                    (n.invalidate = function () {
                        var e = this._first;
                        for (this._lock = 0; e; ) e.invalidate(), (e = e._next);
                        return t.prototype.invalidate.call(this);
                    }),
                    (n.clear = function (t) {
                        void 0 === t && (t = !0);
                        for (var e, n = this._first; n; ) (e = n._next), this.remove(n), (n = e);
                        return (this._time = this._tTime = this._pTime = 0), t && (this.labels = {}), Nt(this);
                    }),
                    (n.totalDuration = function (t) {
                        var e,
                            n,
                            i,
                            r,
                            a = 0,
                            s = this._last,
                            c = 1e8;
                        if (arguments.length) return this.timeScale((this._repeat < 0 ? this.duration() : this.totalDuration()) / (this.reversed() ? -t : t));
                        if (this._dirty) {
                            for (r = this.parent; s; )
                                (e = s._prev),
                                    s._dirty && s.totalDuration(),
                                    (i = s._start) > c && this._sort && s._ts && !this._lock ? ((this._lock = 1), (Gt(this, s, i - s._delay, 1)._lock = 0)) : (c = i),
                                    i < 0 && s._ts && ((a -= i), ((!r && !this._dp) || (r && r.smoothChildTiming)) && ((this._start += i / this._ts), (this._time -= i), (this._tTime -= i)), this.shiftChildren(-i, !1, -Infinity), (c = 0)),
                                    (n = Ut(s)) > a && s._ts && (a = n),
                                    (s = e);
                            Wt(this, this === o && this._time > a ? this._time : a, 1), (this._dirty = 0);
                        }
                        return this._tDur;
                    }),
                    (e.updateRoot = function (t) {
                        if ((o._ts && (St(o, Ft(t, o)), (u = be.frame)), be.frame >= dt)) {
                            dt += C.autoSleep || 120;
                            var e = o._first;
                            if ((!e || !e._ts) && C.autoSleep && be._listeners.length < 2) {
                                for (; e && !e._ts; ) e = e._next;
                                e || be.sleep();
                            }
                        }
                    }),
                    e
                );
            })(Ne);
            At(ke.prototype, { _lock: 0, _hasPause: 0, _forcing: 0 });
            var Be,
                ze = function (t, e, n, i, r, o, a, s, c) {
                    U(i) && (i = i(r || 0, t, o));
                    var l,
                        u = t[e],
                        h = "get" !== n ? n : U(u) ? (c ? t[e.indexOf("set") || !U(t["get" + e.substr(3)]) ? e : "get" + e.substr(3)](c) : t[e]()) : u,
                        p = U(u) ? (c ? Xe : qe) : We;
                    if ((F(i) && (~i.indexOf("random(") && (i = ce(i)), "=" === i.charAt(1) && (i = parseFloat(h) + parseFloat(i.substr(2)) * ("-" === i.charAt(0) ? -1 : 1) + (Qt(h) || 0))), h !== i))
                        return isNaN(h + i)
                            ? (!u && !(e in t) && rt(e, i),
                              function (t, e, n, i, r, o, a) {
                                  var s,
                                      c,
                                      l,
                                      u,
                                      h,
                                      p,
                                      d,
                                      f,
                                      m = new on(this._pt, t, e, 0, 1, Ke, null, r),
                                      v = 0,
                                      g = 0;
                                  for (m.b = n, m.e = i, n += "", (d = ~(i += "").indexOf("random(")) && (i = ce(i)), o && (o((f = [n, i]), t, e), (n = f[0]), (i = f[1])), c = n.match(Q) || []; (s = Q.exec(i)); )
                                      (u = s[0]),
                                          (h = i.substring(v, s.index)),
                                          l ? (l = (l + 1) % 5) : "rgba(" === h.substr(-5) && (l = 1),
                                          u !== c[g++] &&
                                              ((p = parseFloat(c[g - 1]) || 0),
                                              (m._pt = {
                                                  _next: m._pt,
                                                  p: h || 1 === g ? h : ",",
                                                  s: p,
                                                  c: "=" === u.charAt(1) ? parseFloat(u.substr(2)) * ("-" === u.charAt(0) ? -1 : 1) : parseFloat(u) - p,
                                                  m: l && l < 4 ? Math.round : 0,
                                              }),
                                              (v = Q.lastIndex));
                                  return (m.c = v < i.length ? i.substring(v, i.length) : ""), (m.fp = a), ($.test(i) || d) && (m.e = 0), (this._pt = m), m;
                              }.call(this, t, e, h, i, p, s || C.stringFilter, c))
                            : ((l = new on(this._pt, t, e, +h || 0, i - (h || 0), "boolean" == typeof u ? Qe : Je, 0, p)), c && (l.fp = c), a && l.modifier(a, this, t), (this._pt = l));
                },
                Fe = function (t, e, n, i, r, o) {
                    var a, s, c, l;
                    if (
                        ht[t] &&
                        !1 !==
                            (a = new ht[t]()).init(
                                r,
                                a.rawVars
                                    ? e[t]
                                    : (function (t, e, n, i, r) {
                                          if ((U(t) && (t = je(t, r, e, n, i)), !H(t) || (t.style && t.nodeType) || X(t))) return F(t) ? je(t, r, e, n, i) : t;
                                          var o,
                                              a = {};
                                          for (o in t) a[o] = je(t[o], r, e, n, i);
                                          return a;
                                      })(e[t], i, r, o, n),
                                n,
                                i,
                                o
                            ) &&
                        ((n._pt = s = new on(n._pt, r, t, 0, 1, a.render, a, 0, a.priority)), n !== h)
                    )
                        for (c = n._ptLookup[n._targets.indexOf(r)], l = a._props.length; l--; ) c[a._props[l]] = s;
                    return a;
                },
                Ue = function t(e, n) {
                    var i,
                        r,
                        a,
                        s,
                        c,
                        l,
                        u,
                        h,
                        p,
                        d,
                        f,
                        m,
                        v = e.vars,
                        g = v.ease,
                        y = v.startAt,
                        x = v.immediateRender,
                        _ = v.lazy,
                        b = v.onUpdate,
                        w = v.onUpdateParams,
                        M = v.callbackScope,
                        S = v.runBackwards,
                        T = v.yoyoEase,
                        E = v.keyframes,
                        A = v.autoRevert,
                        P = e._dur,
                        L = e._startAt,
                        C = e._targets,
                        D = e.parent,
                        I = D && "nested" === D.data ? D.parent._targets : C,
                        N = "auto" === e._overwrite,
                        k = e.timeline;
                    if ((k && (!E || !g) && (g = "none"), (e._ease = Le(g, R.ease)), (e._yEase = T ? Ae(Le(!0 === T ? g : T, R.ease)) : 0), T && e._yoyo && !e._repeat && ((T = e._yEase), (e._yEase = e._ease), (e._ease = T)), !k)) {
                        if (((m = (h = C[0] ? gt(C[0]).harness : 0) && v[h.prop]), (i = Rt(v, ct)), L && L.render(-1, !0).kill(), y)) {
                            if ((It((e._startAt = Ve.set(C, At({ data: "isStart", overwrite: !1, parent: D, immediateRender: !0, lazy: V(_), startAt: null, delay: 0, onUpdate: b, onUpdateParams: w, callbackScope: M, stagger: 0 }, y)))), x))
                                if (n > 0) !A && (e._startAt = 0);
                                else if (P) return;
                        } else if (S && P)
                            if (L) !A && (e._startAt = 0);
                            else if ((n && (x = !1), (a = Lt(i, { overwrite: !1, data: "isFromStart", lazy: x && V(_), immediateRender: x, stagger: 0, parent: D })), m && (a[h.prop] = m), It((e._startAt = Ve.set(C, a))), x)) {
                                if (!n) return;
                            } else t(e._startAt, O);
                        for (e._pt = 0, _ = (P && V(_)) || (_ && !P), r = 0; r < C.length; r++) {
                            if (
                                ((u = (c = C[r])._gsap || vt(C)[r]._gsap),
                                (e._ptLookup[r] = d = {}),
                                ut[u.id] && Mt(),
                                (f = I === C ? r : I.indexOf(c)),
                                h &&
                                    !1 !== (p = new h()).init(c, m || i, e, f, I) &&
                                    ((e._pt = s = new on(e._pt, c, p.name, 0, 1, p.render, p, 0, p.priority)),
                                    p._props.forEach(function (t) {
                                        d[t] = s;
                                    }),
                                    p.priority && (l = 1)),
                                !h || m)
                            )
                                for (a in i) ht[a] && (p = Fe(a, i, e, f, c, I)) ? p.priority && (l = 1) : (d[a] = s = ze.call(e, c, a, "get", i[a], f, I, 0, v.stringFilter));
                            e._op && e._op[r] && e.kill(c, e._op[r]), N && e._pt && ((Be = e), o.killTweensOf(c, d, "started"), (Be = 0)), e._pt && _ && (ut[u.id] = 1);
                        }
                        l && rn(e), e._onInit && e._onInit(e);
                    }
                    (e._from = !k && !!v.runBackwards), (e._onUpdate = b), (e._initted = 1);
                },
                je = function (t, e, n, i, r) {
                    return U(t) ? t.call(e, n, i, r) : F(t) && ~t.indexOf("random(") ? ce(t) : t;
                },
                Ge = mt + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase",
                He = (Ge + ",id,stagger,delay,duration,paused,scrollTrigger").split(","),
                Ve = (function (t) {
                    function e(e, n, r, a) {
                        var s;
                        "number" == typeof n && ((r.duration = n), (n = r), (r = null));
                        var c,
                            l,
                            u,
                            h,
                            p,
                            d,
                            f,
                            m,
                            v = (s = t.call(this, a ? n : Ot(n), r) || this).vars,
                            g = v.duration,
                            y = v.delay,
                            x = v.immediateRender,
                            _ = v.stagger,
                            b = v.overwrite,
                            w = v.keyframes,
                            M = v.defaults,
                            S = v.scrollTrigger,
                            T = v.yoyoEase,
                            E = s.parent,
                            A = (X(e) ? j(e[0]) : "length" in n) ? [e] : ee(e);
                        if (((s._targets = A.length ? vt(A) : ot("GSAP target " + e + " not found. https://greensock.com", !C.nullTargetWarn) || []), (s._ptLookup = []), (s._overwrite = b), w || _ || q(g) || q(y))) {
                            if (((n = s.vars), (c = s.timeline = new ke({ data: "nested", defaults: M || {} })).kill(), (c.parent = i(s)), w))
                                At(c.vars.defaults, { ease: "none" }),
                                    w.forEach(function (t) {
                                        return c.to(A, t, ">");
                                    });
                            else {
                                if (((h = A.length), (f = _ ? ie(_) : st), H(_))) for (p in _) ~Ge.indexOf(p) && (m || (m = {}), (m[p] = _[p]));
                                for (l = 0; l < h; l++) {
                                    for (p in ((u = {}), n)) He.indexOf(p) < 0 && (u[p] = n[p]);
                                    (u.stagger = 0),
                                        T && (u.yoyoEase = T),
                                        m && Lt(u, m),
                                        (d = A[l]),
                                        (u.duration = +je(g, i(s), l, d, A)),
                                        (u.delay = (+je(y, i(s), l, d, A) || 0) - s._delay),
                                        !_ && 1 === h && u.delay && ((s._delay = y = u.delay), (s._start += y), (u.delay = 0)),
                                        c.to(d, u, f(l, d, A));
                                }
                                c.duration() ? (g = y = 0) : (s.timeline = 0);
                            }
                            g || s.duration((g = c.duration()));
                        } else s.timeline = 0;
                        return (
                            !0 === b && ((Be = i(s)), o.killTweensOf(A), (Be = 0)),
                            E && jt(E, i(s)),
                            (x || (!g && !w && s._start === _t(E._time) && V(x) && kt(i(s)) && "nested" !== E.data)) && ((s._tTime = -O), s.render(Math.max(0, -y))),
                            S && Ht(i(s), S),
                            s
                        );
                    }
                    r(e, t);
                    var n = e.prototype;
                    return (
                        (n.render = function (t, e, n) {
                            var i,
                                r,
                                o,
                                a,
                                s,
                                c,
                                l,
                                u,
                                h,
                                p = this._time,
                                d = this._tDur,
                                f = this._dur,
                                m = t > d - O && t >= 0 ? d : t < O ? 0 : t;
                            if (f) {
                                if (m !== this._tTime || !t || n || (this._startAt && this._zTime < 0 != t < 0)) {
                                    if (((i = m), (u = this.timeline), this._repeat)) {
                                        if (
                                            ((a = f + this._rDelay),
                                            ((i = _t(m % a)) > f || d === m) && (i = f),
                                            (o = ~~(m / a)) && o === m / a && ((i = f), o--),
                                            (c = this._yoyo && 1 & o) && ((h = this._yEase), (i = f - i)),
                                            (s = zt(this._tTime, a)),
                                            i === p && !n && this._initted)
                                        )
                                            return this;
                                        o !== s && (u && this._yEase && Pe(u, c), !this.vars.repeatRefresh || c || this._lock || ((this._lock = n = 1), (this.render(_t(a * o), !0).invalidate()._lock = 0)));
                                    }
                                    if (!this._initted) {
                                        if (Vt(this, i, n, e)) return (this._tTime = 0), this;
                                        if (f !== this._dur) return this.render(t, e, n);
                                    }
                                    for (
                                        this._tTime = m,
                                            this._time = i,
                                            !this._act && this._ts && ((this._act = 1), (this._lazy = 0)),
                                            this.ratio = l = (h || this._ease)(i / f),
                                            this._from && (this.ratio = l = 1 - l),
                                            i && !p && !e && he(this, "onStart"),
                                            r = this._pt;
                                        r;

                                    )
                                        r.r(l, r.d), (r = r._next);
                                    (u && u.render(t < 0 ? t : !i && c ? -O : u._dur * l, e, n)) || (this._startAt && (this._zTime = t)),
                                        this._onUpdate && !e && (t < 0 && this._startAt && this._startAt.render(t, !0, n), he(this, "onUpdate")),
                                        this._repeat && o !== s && this.vars.onRepeat && !e && this.parent && he(this, "onRepeat"),
                                        (m !== this._tDur && m) ||
                                            this._tTime !== m ||
                                            (t < 0 && this._startAt && !this._onUpdate && this._startAt.render(t, !0, n),
                                            (t || !f) && ((m === this._tDur && this._ts > 0) || (!m && this._ts < 0)) && It(this, 1),
                                            e || (t < 0 && !p) || (!m && !p) || (he(this, m === d ? "onComplete" : "onReverseComplete", !0), this._prom && !(m < d && this.timeScale() > 0) && this._prom()));
                                }
                            } else
                                !(function (t, e, n, i) {
                                    var r,
                                        o,
                                        a = t.ratio,
                                        s = e < 0 || (a && !e && !t._start && !t._dp._lock) ? 0 : 1,
                                        c = t._rDelay,
                                        l = 0;
                                    if ((c && t._repeat && ((l = Jt(0, t._tDur, e)), zt(l, c) !== (o = zt(t._tTime, c)) && ((a = 1 - s), t.vars.repeatRefresh && t._initted && t.invalidate())), t._initted || !Vt(t, e, i, n)))
                                        if (s !== a || i || t._zTime === O || (!e && t._zTime)) {
                                            for (o = t._zTime, t._zTime = e || (n ? O : 0), n || (n = e && !o), t.ratio = s, t._from && (s = 1 - s), t._time = 0, t._tTime = l, n || he(t, "onStart"), r = t._pt; r; )
                                                r.r(s, r.d), (r = r._next);
                                            !s && t._startAt && !t._onUpdate && t._start && t._startAt.render(e, !0, i),
                                                t._onUpdate && !n && he(t, "onUpdate"),
                                                l && t._repeat && !n && t.parent && he(t, "onRepeat"),
                                                (e >= t._tDur || e < 0) && t.ratio === s && (s && It(t, 1), n || (he(t, s ? "onComplete" : "onReverseComplete", !0), t._prom && t._prom()));
                                        } else t._zTime || (t._zTime = e);
                                })(this, t, e, n);
                            return this;
                        }),
                        (n.targets = function () {
                            return this._targets;
                        }),
                        (n.invalidate = function () {
                            return (this._pt = this._op = this._startAt = this._onUpdate = this._act = this._lazy = 0), (this._ptLookup = []), this.timeline && this.timeline.invalidate(), t.prototype.invalidate.call(this);
                        }),
                        (n.kill = function (t, e) {
                            if ((void 0 === e && (e = "all"), !(t || (e && "all" !== e)) && ((this._lazy = 0), this.parent))) return pe(this);
                            if (this.timeline) {
                                var n = this.timeline.totalDuration();
                                return this.timeline.killTweensOf(t, e, Be && !0 !== Be.vars.overwrite)._first || pe(this), this.parent && n !== this.timeline.totalDuration() && Wt(this, (this._dur * this.timeline._tDur) / n), this;
                            }
                            var i,
                                r,
                                o,
                                a,
                                s,
                                c,
                                l,
                                u = this._targets,
                                h = t ? ee(t) : u,
                                p = this._ptLookup,
                                d = this._pt;
                            if (
                                (!e || "all" === e) &&
                                (function (t, e) {
                                    for (var n = t.length, i = n === e.length; i && n-- && t[n] === e[n]; );
                                    return n < 0;
                                })(u, h)
                            )
                                return pe(this);
                            for (
                                i = this._op = this._op || [],
                                    "all" !== e &&
                                        (F(e) &&
                                            ((s = {}),
                                            xt(e, function (t) {
                                                return (s[t] = 1);
                                            }),
                                            (e = s)),
                                        (e = (function (t, e) {
                                            var n,
                                                i,
                                                r,
                                                o,
                                                a = t[0] ? gt(t[0]).harness : 0,
                                                s = a && a.aliases;
                                            if (!s) return e;
                                            for (i in ((n = Lt({}, e)), s)) if ((i in n)) for (r = (o = s[i].split(",")).length; r--; ) n[o[r]] = n[i];
                                            return n;
                                        })(u, e))),
                                    l = u.length;
                                l--;

                            )
                                if (~h.indexOf(u[l]))
                                    for (s in ((r = p[l]), "all" === e ? ((i[l] = e), (a = r), (o = {})) : ((o = i[l] = i[l] || {}), (a = e)), a))
                                        (c = r && r[s]) && (("kill" in c.d && !0 !== c.d.kill(s)) || Dt(this, c, "_pt"), delete r[s]), "all" !== o && (o[s] = 1);
                            return this._initted && !this._pt && d && pe(this), this;
                        }),
                        (e.to = function (t, n) {
                            return new e(t, n, arguments[2]);
                        }),
                        (e.from = function (t) {
                            return new e(t, wt(arguments, 1));
                        }),
                        (e.delayedCall = function (t, n, i, r) {
                            return new e(n, 0, { immediateRender: !1, lazy: !1, overwrite: !1, delay: t, onComplete: n, onReverseComplete: n, onCompleteParams: i, onReverseCompleteParams: i, callbackScope: r });
                        }),
                        (e.fromTo = function (t) {
                            return new e(t, wt(arguments, 2));
                        }),
                        (e.set = function (t, n) {
                            return (n.duration = 0), n.repeatDelay || (n.repeat = 0), new e(t, n);
                        }),
                        (e.killTweensOf = function (t, e, n) {
                            return o.killTweensOf(t, e, n);
                        }),
                        e
                    );
                })(Ne);
            At(Ve.prototype, { _targets: [], _lazy: 0, _startAt: 0, _op: 0, _onInit: 0 }),
                xt("staggerTo,staggerFrom,staggerFromTo", function (t) {
                    Ve[t] = function () {
                        var e = new ke(),
                            n = Kt.call(arguments, 0);
                        return n.splice("staggerFromTo" === t ? 5 : 4, 0, 0), e[t].apply(e, n);
                    };
                });
            var We = function (t, e, n) {
                    return (t[e] = n);
                },
                qe = function (t, e, n) {
                    return t[e](n);
                },
                Xe = function (t, e, n, i) {
                    return t[e](i.fp, n);
                },
                Ye = function (t, e, n) {
                    return t.setAttribute(e, n);
                },
                Ze = function (t, e) {
                    return U(t[e]) ? qe : G(t[e]) && t.setAttribute ? Ye : We;
                },
                Je = function (t, e) {
                    return e.set(e.t, e.p, Math.round(1e4 * (e.s + e.c * t)) / 1e4, e);
                },
                Qe = function (t, e) {
                    return e.set(e.t, e.p, !!(e.s + e.c * t), e);
                },
                Ke = function (t, e) {
                    var n = e._pt,
                        i = "";
                    if (!t && e.b) i = e.b;
                    else if (1 === t && e.e) i = e.e;
                    else {
                        for (; n; ) (i = n.p + (n.m ? n.m(n.s + n.c * t) : Math.round(1e4 * (n.s + n.c * t)) / 1e4) + i), (n = n._next);
                        i += e.c;
                    }
                    e.set(e.t, e.p, i, e);
                },
                $e = function (t, e) {
                    for (var n = e._pt; n; ) n.r(t, n.d), (n = n._next);
                },
                tn = function (t, e, n, i) {
                    for (var r, o = this._pt; o; ) (r = o._next), o.p === i && o.modifier(t, e, n), (o = r);
                },
                en = function (t) {
                    for (var e, n, i = this._pt; i; ) (n = i._next), (i.p === t && !i.op) || i.op === t ? Dt(this, i, "_pt") : i.dep || (e = 1), (i = n);
                    return !e;
                },
                nn = function (t, e, n, i) {
                    i.mSet(t, e, i.m.call(i.tween, n, i.mt), i);
                },
                rn = function (t) {
                    for (var e, n, i, r, o = t._pt; o; ) {
                        for (e = o._next, n = i; n && n.pr > o.pr; ) n = n._next;
                        (o._prev = n ? n._prev : r) ? (o._prev._next = o) : (i = o), (o._next = n) ? (n._prev = o) : (r = o), (o = e);
                    }
                    t._pt = i;
                },
                on = (function () {
                    function t(t, e, n, i, r, o, a, s, c) {
                        (this.t = e), (this.s = i), (this.c = r), (this.p = n), (this.r = o || Je), (this.d = a || this), (this.set = s || We), (this.pr = c || 0), (this._next = t), t && (t._prev = this);
                    }
                    return (
                        (t.prototype.modifier = function (t, e, n) {
                            (this.mSet = this.mSet || this.set), (this.set = nn), (this.m = t), (this.mt = n), (this.tween = e);
                        }),
                        t
                    );
                })();
            xt(
                mt +
                    "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",
                function (t) {
                    return (ct[t] = 1);
                }
            ),
                (et.TweenMax = et.TweenLite = Ve),
                (et.TimelineLite = et.TimelineMax = ke),
                (o = new ke({ sortChildren: !1, defaults: R, autoRemoveChildren: !0, id: "root", smoothChildTiming: !0 })),
                (C.stringFilter = _e);
            var an = {
                registerPlugin: function () {
                    for (var t = arguments.length, e = new Array(t), n = 0; n < t; n++) e[n] = arguments[n];
                    e.forEach(function (t) {
                        return (function (t) {
                            var e = (t = (!t.name && t.default) || t).name,
                                n = U(t),
                                i =
                                    e && !n && t.init
                                        ? function () {
                                              this._props = [];
                                          }
                                        : t,
                                r = { init: st, render: $e, add: ze, kill: en, modifier: tn, rawVars: 0 },
                                o = { targetTest: 0, get: 0, getSetter: Ze, aliases: {}, register: 0 };
                            if ((we(), t !== i)) {
                                if (ht[e]) return;
                                At(i, At(Rt(t, r), o)), Lt(i.prototype, Lt(r, Rt(t, o))), (ht[(i.prop = e)] = i), t.targetTest && (ft.push(i), (ct[e] = 1)), (e = ("css" === e ? "CSS" : e.charAt(0).toUpperCase() + e.substr(1)) + "Plugin");
                            }
                            at(e, i), t.register && t.register(ln, i, on);
                        })(t);
                    });
                },
                timeline: function (t) {
                    return new ke(t);
                },
                getTweensOf: function (t, e) {
                    return o.getTweensOf(t, e);
                },
                getProperty: function (t, e, n, i) {
                    F(t) && (t = ee(t)[0]);
                    var r = gt(t || {}).get,
                        o = n ? Et : Tt;
                    return (
                        "native" === n && (n = ""),
                        t
                            ? e
                                ? o(((ht[e] && ht[e].get) || r)(t, e, n, i))
                                : function (e, n, i) {
                                      return o(((ht[e] && ht[e].get) || r)(t, e, n, i));
                                  }
                            : t
                    );
                },
                quickSetter: function (t, e, n) {
                    if ((t = ee(t)).length > 1) {
                        var i = t.map(function (t) {
                                return ln.quickSetter(t, e, n);
                            }),
                            r = i.length;
                        return function (t) {
                            for (var e = r; e--; ) i[e](t);
                        };
                    }
                    t = t[0] || {};
                    var o = ht[e],
                        a = gt(t),
                        s = (a.harness && (a.harness.aliases || {})[e]) || e,
                        c = o
                            ? function (e) {
                                  var i = new o();
                                  (h._pt = 0), i.init(t, n ? e + n : e, h, 0, [t]), i.render(1, i), h._pt && $e(1, h);
                              }
                            : a.set(t, s);
                    return o
                        ? c
                        : function (e) {
                              return c(t, s, n ? e + n : e, a, 1);
                          };
                },
                isTweening: function (t) {
                    return o.getTweensOf(t, !0).length > 0;
                },
                defaults: function (t) {
                    return t && t.ease && (t.ease = Le(t.ease, R.ease)), Ct(R, t || {});
                },
                config: function (t) {
                    return Ct(C, t || {});
                },
                registerEffect: function (t) {
                    var e = t.name,
                        n = t.effect,
                        i = t.plugins,
                        r = t.defaults,
                        o = t.extendTimeline;
                    (i || "").split(",").forEach(function (t) {
                        return t && !ht[t] && !et[t] && ot(e + " effect requires " + t + " plugin.");
                    }),
                        (pt[e] = function (t, e, i) {
                            return n(ee(t), At(e || {}, r), i);
                        }),
                        o &&
                            (ke.prototype[e] = function (t, n, i) {
                                return this.add(pt[e](t, H(n) ? n : (i = n) && {}, this), i);
                            });
                },
                registerEase: function (t, e) {
                    Me[t] = Le(e);
                },
                parseEase: function (t, e) {
                    return arguments.length ? Le(t, e) : Me;
                },
                getById: function (t) {
                    return o.getById(t);
                },
                exportRoot: function (t, e) {
                    void 0 === t && (t = {});
                    var n,
                        i,
                        r = new ke(t);
                    for (r.smoothChildTiming = V(t.smoothChildTiming), o.remove(r), r._dp = 0, r._time = r._tTime = o._time, n = o._first; n; )
                        (i = n._next), (!e && !n._dur && n instanceof Ve && n.vars.onComplete === n._targets[0]) || Gt(r, n, n._start - n._delay), (n = i);
                    return Gt(o, r, 0), r;
                },
                utils: {
                    wrap: function t(e, n, i) {
                        var r = n - e;
                        return X(e)
                            ? se(e, t(0, e.length), n)
                            : Zt(i, function (t) {
                                  return ((r + ((t - e) % r)) % r) + e;
                              });
                    },
                    wrapYoyo: function t(e, n, i) {
                        var r = n - e,
                            o = 2 * r;
                        return X(e)
                            ? se(e, t(0, e.length - 1), n)
                            : Zt(i, function (t) {
                                  return e + ((t = (o + ((t - e) % o)) % o) > r ? o - t : t);
                              });
                    },
                    distribute: ie,
                    random: ae,
                    snap: oe,
                    normalize: function (t, e, n) {
                        return le(t, e, 0, 1, n);
                    },
                    getUnit: Qt,
                    clamp: function (t, e, n) {
                        return Zt(n, function (n) {
                            return Jt(t, e, n);
                        });
                    },
                    splitColor: me,
                    toArray: ee,
                    mapRange: le,
                    pipe: function () {
                        for (var t = arguments.length, e = new Array(t), n = 0; n < t; n++) e[n] = arguments[n];
                        return function (t) {
                            return e.reduce(function (t, e) {
                                return e(t);
                            }, t);
                        };
                    },
                    unitize: function (t, e) {
                        return function (n) {
                            return t(parseFloat(n)) + (e || Qt(n));
                        };
                    },
                    interpolate: function t(e, n, i, r) {
                        var o = isNaN(e + n)
                            ? 0
                            : function (t) {
                                  return (1 - t) * e + t * n;
                              };
                        if (!o) {
                            var a,
                                s,
                                c,
                                l,
                                u,
                                h = F(e),
                                p = {};
                            if ((!0 === i && (r = 1) && (i = null), h)) (e = { p: e }), (n = { p: n });
                            else if (X(e) && !X(n)) {
                                for (c = [], l = e.length, u = l - 2, s = 1; s < l; s++) c.push(t(e[s - 1], e[s]));
                                l--,
                                    (o = function (t) {
                                        t *= l;
                                        var e = Math.min(u, ~~t);
                                        return c[e](t - e);
                                    }),
                                    (i = n);
                            } else r || (e = Lt(X(e) ? [] : {}, e));
                            if (!c) {
                                for (a in n) ze.call(p, e, a, "get", n[a]);
                                o = function (t) {
                                    return $e(t, p) || (h ? e.p : e);
                                };
                            }
                        }
                        return Zt(i, o);
                    },
                    shuffle: ne,
                },
                install: it,
                effects: pt,
                ticker: be,
                updateRoot: ke.updateRoot,
                plugins: ht,
                globalTimeline: o,
                core: { PropTween: on, globals: at, Tween: Ve, Timeline: ke, Animation: Ne, getCache: gt, _removeLinkedListItem: Dt },
            };
            xt("to,from,fromTo,delayedCall,set,killTweensOf", function (t) {
                return (an[t] = Ve[t]);
            }),
                be.add(ke.updateRoot),
                (h = an.to({}, { duration: 0 }));
            var sn = function (t, e) {
                    for (var n = t._pt; n && n.p !== e && n.op !== e && n.fp !== e; ) n = n._next;
                    return n;
                },
                cn = function (t, e) {
                    return {
                        name: t,
                        rawVars: 1,
                        init: function (t, n, i) {
                            i._onInit = function (t) {
                                var i, r;
                                if (
                                    (F(n) &&
                                        ((i = {}),
                                        xt(n, function (t) {
                                            return (i[t] = 1);
                                        }),
                                        (n = i)),
                                    e)
                                ) {
                                    for (r in ((i = {}), n)) i[r] = e(n[r]);
                                    n = i;
                                }
                                !(function (t, e) {
                                    var n,
                                        i,
                                        r,
                                        o = t._targets;
                                    for (n in e) for (i = o.length; i--; ) (r = t._ptLookup[i][n]) && (r = r.d) && (r._pt && (r = sn(r, n)), r && r.modifier && r.modifier(e[n], t, o[i], n));
                                })(t, n);
                            };
                        },
                    };
                },
                ln =
                    an.registerPlugin(
                        {
                            name: "attr",
                            init: function (t, e, n, i, r) {
                                var o, a;
                                for (o in e) (a = this.add(t, "setAttribute", (t.getAttribute(o) || 0) + "", e[o], i, r, 0, 0, o)) && (a.op = o), this._props.push(o);
                            },
                        },
                        {
                            name: "endArray",
                            init: function (t, e) {
                                for (var n = e.length; n--; ) this.add(t, n, t[n] || 0, e[n]);
                            },
                        },
                        cn("roundProps", re),
                        cn("modifiers"),
                        cn("snap", oe)
                    ) || an;
            (Ve.version = ke.version = ln.version = "3.3.1"), (l = 1), W() && we();
            Me.Power0, Me.Power1;
            var un = Me.Power2;
            Me.Power3, Me.Power4, Me.Linear, Me.Quad, Me.Cubic, Me.Quart, Me.Quint, Me.Strong, Me.Elastic, Me.Back, Me.SteppedEase, Me.Bounce, Me.Sine, Me.Expo, Me.Circ;
        },
        function (t, e, n) {
            "use strict";
            n.d(e, "a", function () {
                return f;
            }),
                n.d(e, "b", function () {
                    return Ls;
                }),
                n.d(e, "c", function () {
                    return Du;
                }),
                n.d(e, "d", function () {
                    return it;
                }),
                n.d(e, "e", function () {
                    return Bc;
                }),
                n.d(e, "f", function () {
                    return h;
                }),
                n.d(e, "g", function () {
                    return ut;
                }),
                n.d(e, "h", function () {
                    return mr;
                }),
                n.d(e, "i", function () {
                    return Ci;
                }),
                n.d(e, "j", function () {
                    return ru;
                }),
                n.d(e, "k", function () {
                    return Rr;
                }),
                n.d(e, "l", function () {
                    return Vr;
                }),
                n.d(e, "m", function () {
                    return At;
                }),
                n.d(e, "n", function () {
                    return Dn;
                }),
                n.d(e, "o", function () {
                    return Lr;
                }),
                n.d(e, "p", function () {
                    return Ke;
                }),
                n.d(e, "q", function () {
                    return Er;
                }),
                n.d(e, "r", function () {
                    return Ye;
                }),
                n.d(e, "s", function () {
                    return As;
                }),
                n.d(e, "t", function () {
                    return tn;
                }),
                n.d(e, "u", function () {
                    return Pa;
                }),
                void 0 === Number.EPSILON && (Number.EPSILON = Math.pow(2, -52)),
                void 0 === Number.isInteger &&
                    (Number.isInteger = function (t) {
                        return "number" == typeof t && isFinite(t) && Math.floor(t) === t;
                    }),
                void 0 === Math.sign &&
                    (Math.sign = function (t) {
                        return t < 0 ? -1 : t > 0 ? 1 : +t;
                    }),
                "name" in Function.prototype == !1 &&
                    Object.defineProperty(Function.prototype, "name", {
                        get: function () {
                            return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1];
                        },
                    }),
                void 0 === Object.assign &&
                    (Object.assign = function (t) {
                        if (void 0 === t || null === t) throw new TypeError("Cannot convert undefined or null to object");
                        for (var e = Object(t), n = 1; n < arguments.length; n++) {
                            var i = arguments[n];
                            if (void 0 !== i && null !== i) for (var r in i) Object.prototype.hasOwnProperty.call(i, r) && (e[r] = i[r]);
                        }
                        return e;
                    });
            var i = 0,
                r = 1,
                o = 2,
                a = 1,
                s = 2,
                c = 3,
                l = 0,
                u = 1,
                h = 2,
                p = 0,
                d = 1,
                f = 2,
                m = 3,
                v = 4,
                g = 5,
                y = 100,
                x = 101,
                _ = 102,
                b = 103,
                w = 104,
                M = 200,
                S = 201,
                T = 202,
                E = 203,
                A = 204,
                P = 205,
                L = 206,
                C = 207,
                R = 208,
                O = 209,
                D = 210,
                I = 0,
                N = 1,
                k = 2,
                B = 3,
                z = 4,
                F = 5,
                U = 6,
                j = 7,
                G = 0,
                H = 1,
                V = 2,
                W = 0,
                q = 1,
                X = 2,
                Y = 3,
                Z = 4,
                J = 5,
                Q = 301,
                K = 302,
                $ = 303,
                tt = 304,
                et = 305,
                nt = 306,
                it = 307,
                rt = 1e3,
                ot = 1001,
                at = 1002,
                st = 1003,
                ct = 1004,
                lt = 1005,
                ut = 1006,
                ht = 1007,
                pt = 1008,
                dt = 1009,
                ft = 1010,
                mt = 1011,
                vt = 1012,
                gt = 1013,
                yt = 1014,
                xt = 1015,
                _t = 1016,
                bt = 1017,
                wt = 1018,
                Mt = 1019,
                St = 1020,
                Tt = 1021,
                Et = 1022,
                At = 1023,
                Pt = 1024,
                Lt = 1025,
                Ct = At,
                Rt = 1026,
                Ot = 1027,
                Dt = 1028,
                It = 1029,
                Nt = 1030,
                kt = 1031,
                Bt = 1032,
                zt = 1033,
                Ft = 33776,
                Ut = 33777,
                jt = 33778,
                Gt = 33779,
                Ht = 35840,
                Vt = 35841,
                Wt = 35842,
                qt = 35843,
                Xt = 36196,
                Yt = 37492,
                Zt = 37496,
                Jt = 37808,
                Qt = 37809,
                Kt = 37810,
                $t = 37811,
                te = 37812,
                ee = 37813,
                ne = 37814,
                ie = 37815,
                re = 37816,
                oe = 37817,
                ae = 37818,
                se = 37819,
                ce = 37820,
                le = 37821,
                ue = 36492,
                he = 37840,
                pe = 37841,
                de = 37842,
                fe = 37843,
                me = 37844,
                ve = 37845,
                ge = 37846,
                ye = 37847,
                xe = 37848,
                _e = 37849,
                be = 37850,
                we = 37851,
                Me = 37852,
                Se = 37853,
                Te = 2201,
                Ee = 2400,
                Ae = 3e3,
                Pe = 3001,
                Le = 3007,
                Ce = 3002,
                Re = 3003,
                Oe = 3004,
                De = 3005,
                Ie = 3006,
                Ne = 3200,
                ke = 3201,
                Be = 0,
                ze = 1,
                Fe = 7680,
                Ue = 519,
                je = 35044,
                Ge = 35048;
            function He() {}
            Object.assign(He.prototype, {
                addEventListener: function (t, e) {
                    void 0 === this._listeners && (this._listeners = {});
                    var n = this._listeners;
                    void 0 === n[t] && (n[t] = []), -1 === n[t].indexOf(e) && n[t].push(e);
                },
                hasEventListener: function (t, e) {
                    if (void 0 === this._listeners) return !1;
                    var n = this._listeners;
                    return void 0 !== n[t] && -1 !== n[t].indexOf(e);
                },
                removeEventListener: function (t, e) {
                    if (void 0 !== this._listeners) {
                        var n = this._listeners[t];
                        if (void 0 !== n) {
                            var i = n.indexOf(e);
                            -1 !== i && n.splice(i, 1);
                        }
                    }
                },
                dispatchEvent: function (t) {
                    if (void 0 !== this._listeners) {
                        var e = this._listeners[t.type];
                        if (void 0 !== e) {
                            t.target = this;
                            for (var n = e.slice(0), i = 0, r = n.length; i < r; i++) n[i].call(this, t);
                        }
                    }
                },
            });
            for (var Ve = [], We = 0; We < 256; We++) Ve[We] = (We < 16 ? "0" : "") + We.toString(16);
            var qe,
                Xe = {
                    DEG2RAD: Math.PI / 180,
                    RAD2DEG: 180 / Math.PI,
                    generateUUID: function () {
                        var t = (4294967295 * Math.random()) | 0,
                            e = (4294967295 * Math.random()) | 0,
                            n = (4294967295 * Math.random()) | 0,
                            i = (4294967295 * Math.random()) | 0;
                        return (
                            Ve[255 & t] +
                            Ve[(t >> 8) & 255] +
                            Ve[(t >> 16) & 255] +
                            Ve[(t >> 24) & 255] +
                            "-" +
                            Ve[255 & e] +
                            Ve[(e >> 8) & 255] +
                            "-" +
                            Ve[((e >> 16) & 15) | 64] +
                            Ve[(e >> 24) & 255] +
                            "-" +
                            Ve[(63 & n) | 128] +
                            Ve[(n >> 8) & 255] +
                            "-" +
                            Ve[(n >> 16) & 255] +
                            Ve[(n >> 24) & 255] +
                            Ve[255 & i] +
                            Ve[(i >> 8) & 255] +
                            Ve[(i >> 16) & 255] +
                            Ve[(i >> 24) & 255]
                        ).toUpperCase();
                    },
                    clamp: function (t, e, n) {
                        return Math.max(e, Math.min(n, t));
                    },
                    euclideanModulo: function (t, e) {
                        return ((t % e) + e) % e;
                    },
                    mapLinear: function (t, e, n, i, r) {
                        return i + ((t - e) * (r - i)) / (n - e);
                    },
                    lerp: function (t, e, n) {
                        return (1 - n) * t + n * e;
                    },
                    smoothstep: function (t, e, n) {
                        return t <= e ? 0 : t >= n ? 1 : (t = (t - e) / (n - e)) * t * (3 - 2 * t);
                    },
                    smootherstep: function (t, e, n) {
                        return t <= e ? 0 : t >= n ? 1 : (t = (t - e) / (n - e)) * t * t * (t * (6 * t - 15) + 10);
                    },
                    randInt: function (t, e) {
                        return t + Math.floor(Math.random() * (e - t + 1));
                    },
                    randFloat: function (t, e) {
                        return t + Math.random() * (e - t);
                    },
                    randFloatSpread: function (t) {
                        return t * (0.5 - Math.random());
                    },
                    degToRad: function (t) {
                        return t * Xe.DEG2RAD;
                    },
                    radToDeg: function (t) {
                        return t * Xe.RAD2DEG;
                    },
                    isPowerOfTwo: function (t) {
                        return 0 == (t & (t - 1)) && 0 !== t;
                    },
                    ceilPowerOfTwo: function (t) {
                        return Math.pow(2, Math.ceil(Math.log(t) / Math.LN2));
                    },
                    floorPowerOfTwo: function (t) {
                        return Math.pow(2, Math.floor(Math.log(t) / Math.LN2));
                    },
                    setQuaternionFromProperEuler: function (t, e, n, i, r) {
                        var o = Math.cos,
                            a = Math.sin,
                            s = o(n / 2),
                            c = a(n / 2),
                            l = o((e + i) / 2),
                            u = a((e + i) / 2),
                            h = o((e - i) / 2),
                            p = a((e - i) / 2),
                            d = o((i - e) / 2),
                            f = a((i - e) / 2);
                        "XYX" === r
                            ? t.set(s * u, c * h, c * p, s * l)
                            : "YZY" === r
                            ? t.set(c * p, s * u, c * h, s * l)
                            : "ZXZ" === r
                            ? t.set(c * h, c * p, s * u, s * l)
                            : "XZX" === r
                            ? t.set(s * u, c * f, c * d, s * l)
                            : "YXY" === r
                            ? t.set(c * d, s * u, c * f, s * l)
                            : "ZYZ" === r
                            ? t.set(c * f, c * d, s * u, s * l)
                            : console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order.");
                    },
                };
            function Ye(t, e) {
                (this.x = t || 0), (this.y = e || 0);
            }
            function Ze() {
                (this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1]), arguments.length > 0 && console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.");
            }
            Object.defineProperties(Ye.prototype, {
                width: {
                    get: function () {
                        return this.x;
                    },
                    set: function (t) {
                        this.x = t;
                    },
                },
                height: {
                    get: function () {
                        return this.y;
                    },
                    set: function (t) {
                        this.y = t;
                    },
                },
            }),
                Object.assign(Ye.prototype, {
                    isVector2: !0,
                    set: function (t, e) {
                        return (this.x = t), (this.y = e), this;
                    },
                    setScalar: function (t) {
                        return (this.x = t), (this.y = t), this;
                    },
                    setX: function (t) {
                        return (this.x = t), this;
                    },
                    setY: function (t) {
                        return (this.y = t), this;
                    },
                    setComponent: function (t, e) {
                        switch (t) {
                            case 0:
                                this.x = e;
                                break;
                            case 1:
                                this.y = e;
                                break;
                            default:
                                throw new Error("index is out of range: " + t);
                        }
                        return this;
                    },
                    getComponent: function (t) {
                        switch (t) {
                            case 0:
                                return this.x;
                            case 1:
                                return this.y;
                            default:
                                throw new Error("index is out of range: " + t);
                        }
                    },
                    clone: function () {
                        return new this.constructor(this.x, this.y);
                    },
                    copy: function (t) {
                        return (this.x = t.x), (this.y = t.y), this;
                    },
                    add: function (t, e) {
                        return void 0 !== e ? (console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(t, e)) : ((this.x += t.x), (this.y += t.y), this);
                    },
                    addScalar: function (t) {
                        return (this.x += t), (this.y += t), this;
                    },
                    addVectors: function (t, e) {
                        return (this.x = t.x + e.x), (this.y = t.y + e.y), this;
                    },
                    addScaledVector: function (t, e) {
                        return (this.x += t.x * e), (this.y += t.y * e), this;
                    },
                    sub: function (t, e) {
                        return void 0 !== e ? (console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(t, e)) : ((this.x -= t.x), (this.y -= t.y), this);
                    },
                    subScalar: function (t) {
                        return (this.x -= t), (this.y -= t), this;
                    },
                    subVectors: function (t, e) {
                        return (this.x = t.x - e.x), (this.y = t.y - e.y), this;
                    },
                    multiply: function (t) {
                        return (this.x *= t.x), (this.y *= t.y), this;
                    },
                    multiplyScalar: function (t) {
                        return (this.x *= t), (this.y *= t), this;
                    },
                    divide: function (t) {
                        return (this.x /= t.x), (this.y /= t.y), this;
                    },
                    divideScalar: function (t) {
                        return this.multiplyScalar(1 / t);
                    },
                    applyMatrix3: function (t) {
                        var e = this.x,
                            n = this.y,
                            i = t.elements;
                        return (this.x = i[0] * e + i[3] * n + i[6]), (this.y = i[1] * e + i[4] * n + i[7]), this;
                    },
                    min: function (t) {
                        return (this.x = Math.min(this.x, t.x)), (this.y = Math.min(this.y, t.y)), this;
                    },
                    max: function (t) {
                        return (this.x = Math.max(this.x, t.x)), (this.y = Math.max(this.y, t.y)), this;
                    },
                    clamp: function (t, e) {
                        return (this.x = Math.max(t.x, Math.min(e.x, this.x))), (this.y = Math.max(t.y, Math.min(e.y, this.y))), this;
                    },
                    clampScalar: function (t, e) {
                        return (this.x = Math.max(t, Math.min(e, this.x))), (this.y = Math.max(t, Math.min(e, this.y))), this;
                    },
                    clampLength: function (t, e) {
                        var n = this.length();
                        return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n)));
                    },
                    floor: function () {
                        return (this.x = Math.floor(this.x)), (this.y = Math.floor(this.y)), this;
                    },
                    ceil: function () {
                        return (this.x = Math.ceil(this.x)), (this.y = Math.ceil(this.y)), this;
                    },
                    round: function () {
                        return (this.x = Math.round(this.x)), (this.y = Math.round(this.y)), this;
                    },
                    roundToZero: function () {
                        return (this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x)), (this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y)), this;
                    },
                    negate: function () {
                        return (this.x = -this.x), (this.y = -this.y), this;
                    },
                    dot: function (t) {
                        return this.x * t.x + this.y * t.y;
                    },
                    cross: function (t) {
                        return this.x * t.y - this.y * t.x;
                    },
                    lengthSq: function () {
                        return this.x * this.x + this.y * this.y;
                    },
                    length: function () {
                        return Math.sqrt(this.x * this.x + this.y * this.y);
                    },
                    manhattanLength: function () {
                        return Math.abs(this.x) + Math.abs(this.y);
                    },
                    normalize: function () {
                        return this.divideScalar(this.length() || 1);
                    },
                    angle: function () {
                        return Math.atan2(-this.y, -this.x) + Math.PI;
                    },
                    distanceTo: function (t) {
                        return Math.sqrt(this.distanceToSquared(t));
                    },
                    distanceToSquared: function (t) {
                        var e = this.x - t.x,
                            n = this.y - t.y;
                        return e * e + n * n;
                    },
                    manhattanDistanceTo: function (t) {
                        return Math.abs(this.x - t.x) + Math.abs(this.y - t.y);
                    },
                    setLength: function (t) {
                        return this.normalize().multiplyScalar(t);
                    },
                    lerp: function (t, e) {
                        return (this.x += (t.x - this.x) * e), (this.y += (t.y - this.y) * e), this;
                    },
                    lerpVectors: function (t, e, n) {
                        return this.subVectors(e, t).multiplyScalar(n).add(t);
                    },
                    equals: function (t) {
                        return t.x === this.x && t.y === this.y;
                    },
                    fromArray: function (t, e) {
                        return void 0 === e && (e = 0), (this.x = t[e]), (this.y = t[e + 1]), this;
                    },
                    toArray: function (t, e) {
                        return void 0 === t && (t = []), void 0 === e && (e = 0), (t[e] = this.x), (t[e + 1] = this.y), t;
                    },
                    fromBufferAttribute: function (t, e, n) {
                        return void 0 !== n && console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."), (this.x = t.getX(e)), (this.y = t.getY(e)), this;
                    },
                    rotateAround: function (t, e) {
                        var n = Math.cos(e),
                            i = Math.sin(e),
                            r = this.x - t.x,
                            o = this.y - t.y;
                        return (this.x = r * n - o * i + t.x), (this.y = r * i + o * n + t.y), this;
                    },
                }),
                Object.assign(Ze.prototype, {
                    isMatrix3: !0,
                    set: function (t, e, n, i, r, o, a, s, c) {
                        var l = this.elements;
                        return (l[0] = t), (l[1] = i), (l[2] = a), (l[3] = e), (l[4] = r), (l[5] = s), (l[6] = n), (l[7] = o), (l[8] = c), this;
                    },
                    identity: function () {
                        return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1), this;
                    },
                    clone: function () {
                        return new this.constructor().fromArray(this.elements);
                    },
                    copy: function (t) {
                        var e = this.elements,
                            n = t.elements;
                        return (e[0] = n[0]), (e[1] = n[1]), (e[2] = n[2]), (e[3] = n[3]), (e[4] = n[4]), (e[5] = n[5]), (e[6] = n[6]), (e[7] = n[7]), (e[8] = n[8]), this;
                    },
                    extractBasis: function (t, e, n) {
                        return t.setFromMatrix3Column(this, 0), e.setFromMatrix3Column(this, 1), n.setFromMatrix3Column(this, 2), this;
                    },
                    setFromMatrix4: function (t) {
                        var e = t.elements;
                        return this.set(e[0], e[4], e[8], e[1], e[5], e[9], e[2], e[6], e[10]), this;
                    },
                    multiply: function (t) {
                        return this.multiplyMatrices(this, t);
                    },
                    premultiply: function (t) {
                        return this.multiplyMatrices(t, this);
                    },
                    multiplyMatrices: function (t, e) {
                        var n = t.elements,
                            i = e.elements,
                            r = this.elements,
                            o = n[0],
                            a = n[3],
                            s = n[6],
                            c = n[1],
                            l = n[4],
                            u = n[7],
                            h = n[2],
                            p = n[5],
                            d = n[8],
                            f = i[0],
                            m = i[3],
                            v = i[6],
                            g = i[1],
                            y = i[4],
                            x = i[7],
                            _ = i[2],
                            b = i[5],
                            w = i[8];
                        return (
                            (r[0] = o * f + a * g + s * _),
                            (r[3] = o * m + a * y + s * b),
                            (r[6] = o * v + a * x + s * w),
                            (r[1] = c * f + l * g + u * _),
                            (r[4] = c * m + l * y + u * b),
                            (r[7] = c * v + l * x + u * w),
                            (r[2] = h * f + p * g + d * _),
                            (r[5] = h * m + p * y + d * b),
                            (r[8] = h * v + p * x + d * w),
                            this
                        );
                    },
                    multiplyScalar: function (t) {
                        var e = this.elements;
                        return (e[0] *= t), (e[3] *= t), (e[6] *= t), (e[1] *= t), (e[4] *= t), (e[7] *= t), (e[2] *= t), (e[5] *= t), (e[8] *= t), this;
                    },
                    determinant: function () {
                        var t = this.elements,
                            e = t[0],
                            n = t[1],
                            i = t[2],
                            r = t[3],
                            o = t[4],
                            a = t[5],
                            s = t[6],
                            c = t[7],
                            l = t[8];
                        return e * o * l - e * a * c - n * r * l + n * a * s + i * r * c - i * o * s;
                    },
                    getInverse: function (t, e) {
                        void 0 !== e && console.warn("THREE.Matrix3: .getInverse() can no longer be configured to throw on degenerate.");
                        var n = t.elements,
                            i = this.elements,
                            r = n[0],
                            o = n[1],
                            a = n[2],
                            s = n[3],
                            c = n[4],
                            l = n[5],
                            u = n[6],
                            h = n[7],
                            p = n[8],
                            d = p * c - l * h,
                            f = l * u - p * s,
                            m = h * s - c * u,
                            v = r * d + o * f + a * m;
                        if (0 === v) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
                        var g = 1 / v;
                        return (
                            (i[0] = d * g),
                            (i[1] = (a * h - p * o) * g),
                            (i[2] = (l * o - a * c) * g),
                            (i[3] = f * g),
                            (i[4] = (p * r - a * u) * g),
                            (i[5] = (a * s - l * r) * g),
                            (i[6] = m * g),
                            (i[7] = (o * u - h * r) * g),
                            (i[8] = (c * r - o * s) * g),
                            this
                        );
                    },
                    transpose: function () {
                        var t,
                            e = this.elements;
                        return (t = e[1]), (e[1] = e[3]), (e[3] = t), (t = e[2]), (e[2] = e[6]), (e[6] = t), (t = e[5]), (e[5] = e[7]), (e[7] = t), this;
                    },
                    getNormalMatrix: function (t) {
                        return this.setFromMatrix4(t).getInverse(this).transpose();
                    },
                    transposeIntoArray: function (t) {
                        var e = this.elements;
                        return (t[0] = e[0]), (t[1] = e[3]), (t[2] = e[6]), (t[3] = e[1]), (t[4] = e[4]), (t[5] = e[7]), (t[6] = e[2]), (t[7] = e[5]), (t[8] = e[8]), this;
                    },
                    setUvTransform: function (t, e, n, i, r, o, a) {
                        var s = Math.cos(r),
                            c = Math.sin(r);
                        this.set(n * s, n * c, -n * (s * o + c * a) + o + t, -i * c, i * s, -i * (-c * o + s * a) + a + e, 0, 0, 1);
                    },
                    scale: function (t, e) {
                        var n = this.elements;
                        return (n[0] *= t), (n[3] *= t), (n[6] *= t), (n[1] *= e), (n[4] *= e), (n[7] *= e), this;
                    },
                    rotate: function (t) {
                        var e = Math.cos(t),
                            n = Math.sin(t),
                            i = this.elements,
                            r = i[0],
                            o = i[3],
                            a = i[6],
                            s = i[1],
                            c = i[4],
                            l = i[7];
                        return (i[0] = e * r + n * s), (i[3] = e * o + n * c), (i[6] = e * a + n * l), (i[1] = -n * r + e * s), (i[4] = -n * o + e * c), (i[7] = -n * a + e * l), this;
                    },
                    translate: function (t, e) {
                        var n = this.elements;
                        return (n[0] += t * n[2]), (n[3] += t * n[5]), (n[6] += t * n[8]), (n[1] += e * n[2]), (n[4] += e * n[5]), (n[7] += e * n[8]), this;
                    },
                    equals: function (t) {
                        for (var e = this.elements, n = t.elements, i = 0; i < 9; i++) if (e[i] !== n[i]) return !1;
                        return !0;
                    },
                    fromArray: function (t, e) {
                        void 0 === e && (e = 0);
                        for (var n = 0; n < 9; n++) this.elements[n] = t[n + e];
                        return this;
                    },
                    toArray: function (t, e) {
                        void 0 === t && (t = []), void 0 === e && (e = 0);
                        var n = this.elements;
                        return (t[e] = n[0]), (t[e + 1] = n[1]), (t[e + 2] = n[2]), (t[e + 3] = n[3]), (t[e + 4] = n[4]), (t[e + 5] = n[5]), (t[e + 6] = n[6]), (t[e + 7] = n[7]), (t[e + 8] = n[8]), t;
                    },
                });
            var Je = {
                    getDataURL: function (t) {
                        var e;
                        if ("undefined" == typeof HTMLCanvasElement) return t.src;
                        if (t instanceof HTMLCanvasElement) e = t;
                        else {
                            void 0 === qe && (qe = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas")), (qe.width = t.width), (qe.height = t.height);
                            var n = qe.getContext("2d");
                            t instanceof ImageData ? n.putImageData(t, 0, 0) : n.drawImage(t, 0, 0, t.width, t.height), (e = qe);
                        }
                        return e.width > 2048 || e.height > 2048 ? e.toDataURL("image/jpeg", 0.6) : e.toDataURL("image/png");
                    },
                },
                Qe = 0;
            function Ke(t, e, n, i, r, o, a, s, c, l) {
                Object.defineProperty(this, "id", { value: Qe++ }),
                    (this.uuid = Xe.generateUUID()),
                    (this.name = ""),
                    (this.image = void 0 !== t ? t : Ke.DEFAULT_IMAGE),
                    (this.mipmaps = []),
                    (this.mapping = void 0 !== e ? e : Ke.DEFAULT_MAPPING),
                    (this.wrapS = void 0 !== n ? n : ot),
                    (this.wrapT = void 0 !== i ? i : ot),
                    (this.magFilter = void 0 !== r ? r : ut),
                    (this.minFilter = void 0 !== o ? o : pt),
                    (this.anisotropy = void 0 !== c ? c : 1),
                    (this.format = void 0 !== a ? a : At),
                    (this.internalFormat = null),
                    (this.type = void 0 !== s ? s : dt),
                    (this.offset = new Ye(0, 0)),
                    (this.repeat = new Ye(1, 1)),
                    (this.center = new Ye(0, 0)),
                    (this.rotation = 0),
                    (this.matrixAutoUpdate = !0),
                    (this.matrix = new Ze()),
                    (this.generateMipmaps = !0),
                    (this.premultiplyAlpha = !1),
                    (this.flipY = !0),
                    (this.unpackAlignment = 4),
                    (this.encoding = void 0 !== l ? l : Ae),
                    (this.version = 0),
                    (this.onUpdate = null);
            }
            function $e(t, e, n, i) {
                (this.x = t || 0), (this.y = e || 0), (this.z = n || 0), (this.w = void 0 !== i ? i : 1);
            }
            function tn(t, e, n) {
                (this.width = t),
                    (this.height = e),
                    (this.scissor = new $e(0, 0, t, e)),
                    (this.scissorTest = !1),
                    (this.viewport = new $e(0, 0, t, e)),
                    (n = n || {}),
                    (this.texture = new Ke(void 0, n.mapping, n.wrapS, n.wrapT, n.magFilter, n.minFilter, n.format, n.type, n.anisotropy, n.encoding)),
                    (this.texture.image = {}),
                    (this.texture.image.width = t),
                    (this.texture.image.height = e),
                    (this.texture.generateMipmaps = void 0 !== n.generateMipmaps && n.generateMipmaps),
                    (this.texture.minFilter = void 0 !== n.minFilter ? n.minFilter : ut),
                    (this.depthBuffer = void 0 === n.depthBuffer || n.depthBuffer),
                    (this.stencilBuffer = void 0 === n.stencilBuffer || n.stencilBuffer),
                    (this.depthTexture = void 0 !== n.depthTexture ? n.depthTexture : null);
            }
            function en(t, e, n) {
                tn.call(this, t, e, n), (this.samples = 4);
            }
            function nn(t, e, n, i) {
                (this._x = t || 0), (this._y = e || 0), (this._z = n || 0), (this._w = void 0 !== i ? i : 1);
            }
            (Ke.DEFAULT_IMAGE = void 0),
                (Ke.DEFAULT_MAPPING = 300),
                (Ke.prototype = Object.assign(Object.create(He.prototype), {
                    constructor: Ke,
                    isTexture: !0,
                    updateMatrix: function () {
                        this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
                    },
                    clone: function () {
                        return new this.constructor().copy(this);
                    },
                    copy: function (t) {
                        return (
                            (this.name = t.name),
                            (this.image = t.image),
                            (this.mipmaps = t.mipmaps.slice(0)),
                            (this.mapping = t.mapping),
                            (this.wrapS = t.wrapS),
                            (this.wrapT = t.wrapT),
                            (this.magFilter = t.magFilter),
                            (this.minFilter = t.minFilter),
                            (this.anisotropy = t.anisotropy),
                            (this.format = t.format),
                            (this.internalFormat = t.internalFormat),
                            (this.type = t.type),
                            this.offset.copy(t.offset),
                            this.repeat.copy(t.repeat),
                            this.center.copy(t.center),
                            (this.rotation = t.rotation),
                            (this.matrixAutoUpdate = t.matrixAutoUpdate),
                            this.matrix.copy(t.matrix),
                            (this.generateMipmaps = t.generateMipmaps),
                            (this.premultiplyAlpha = t.premultiplyAlpha),
                            (this.flipY = t.flipY),
                            (this.unpackAlignment = t.unpackAlignment),
                            (this.encoding = t.encoding),
                            this
                        );
                    },
                    toJSON: function (t) {
                        var e = void 0 === t || "string" == typeof t;
                        if (!e && void 0 !== t.textures[this.uuid]) return t.textures[this.uuid];
                        var n = {
                            metadata: { version: 4.5, type: "Texture", generator: "Texture.toJSON" },
                            uuid: this.uuid,
                            name: this.name,
                            mapping: this.mapping,
                            repeat: [this.repeat.x, this.repeat.y],
                            offset: [this.offset.x, this.offset.y],
                            center: [this.center.x, this.center.y],
                            rotation: this.rotation,
                            wrap: [this.wrapS, this.wrapT],
                            format: this.format,
                            type: this.type,
                            encoding: this.encoding,
                            minFilter: this.minFilter,
                            magFilter: this.magFilter,
                            anisotropy: this.anisotropy,
                            flipY: this.flipY,
                            premultiplyAlpha: this.premultiplyAlpha,
                            unpackAlignment: this.unpackAlignment,
                        };
                        if (void 0 !== this.image) {
                            var i = this.image;
                            if ((void 0 === i.uuid && (i.uuid = Xe.generateUUID()), !e && void 0 === t.images[i.uuid])) {
                                var r;
                                if (Array.isArray(i)) {
                                    r = [];
                                    for (var o = 0, a = i.length; o < a; o++) r.push(Je.getDataURL(i[o]));
                                } else r = Je.getDataURL(i);
                                t.images[i.uuid] = { uuid: i.uuid, url: r };
                            }
                            n.image = i.uuid;
                        }
                        return e || (t.textures[this.uuid] = n), n;
                    },
                    dispose: function () {
                        this.dispatchEvent({ type: "dispose" });
                    },
                    transformUv: function (t) {
                        if (300 !== this.mapping) return t;
                        if ((t.applyMatrix3(this.matrix), t.x < 0 || t.x > 1))
                            switch (this.wrapS) {
                                case rt:
                                    t.x = t.x - Math.floor(t.x);
                                    break;
                                case ot:
                                    t.x = t.x < 0 ? 0 : 1;
                                    break;
                                case at:
                                    1 === Math.abs(Math.floor(t.x) % 2) ? (t.x = Math.ceil(t.x) - t.x) : (t.x = t.x - Math.floor(t.x));
                            }
                        if (t.y < 0 || t.y > 1)
                            switch (this.wrapT) {
                                case rt:
                                    t.y = t.y - Math.floor(t.y);
                                    break;
                                case ot:
                                    t.y = t.y < 0 ? 0 : 1;
                                    break;
                                case at:
                                    1 === Math.abs(Math.floor(t.y) % 2) ? (t.y = Math.ceil(t.y) - t.y) : (t.y = t.y - Math.floor(t.y));
                            }
                        return this.flipY && (t.y = 1 - t.y), t;
                    },
                })),
                Object.defineProperty(Ke.prototype, "needsUpdate", {
                    set: function (t) {
                        !0 === t && this.version++;
                    },
                }),
                Object.defineProperties($e.prototype, {
                    width: {
                        get: function () {
                            return this.z;
                        },
                        set: function (t) {
                            this.z = t;
                        },
                    },
                    height: {
                        get: function () {
                            return this.w;
                        },
                        set: function (t) {
                            this.w = t;
                        },
                    },
                }),
                Object.assign($e.prototype, {
                    isVector4: !0,
                    set: function (t, e, n, i) {
                        return (this.x = t), (this.y = e), (this.z = n), (this.w = i), this;
                    },
                    setScalar: function (t) {
                        return (this.x = t), (this.y = t), (this.z = t), (this.w = t), this;
                    },
                    setX: function (t) {
                        return (this.x = t), this;
                    },
                    setY: function (t) {
                        return (this.y = t), this;
                    },
                    setZ: function (t) {
                        return (this.z = t), this;
                    },
                    setW: function (t) {
                        return (this.w = t), this;
                    },
                    setComponent: function (t, e) {
                        switch (t) {
                            case 0:
                                this.x = e;
                                break;
                            case 1:
                                this.y = e;
                                break;
                            case 2:
                                this.z = e;
                                break;
                            case 3:
                                this.w = e;
                                break;
                            default:
                                throw new Error("index is out of range: " + t);
                        }
                        return this;
                    },
                    getComponent: function (t) {
                        switch (t) {
                            case 0:
                                return this.x;
                            case 1:
                                return this.y;
                            case 2:
                                return this.z;
                            case 3:
                                return this.w;
                            default:
                                throw new Error("index is out of range: " + t);
                        }
                    },
                    clone: function () {
                        return new this.constructor(this.x, this.y, this.z, this.w);
                    },
                    copy: function (t) {
                        return (this.x = t.x), (this.y = t.y), (this.z = t.z), (this.w = void 0 !== t.w ? t.w : 1), this;
                    },
                    add: function (t, e) {
                        return void 0 !== e
                            ? (console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(t, e))
                            : ((this.x += t.x), (this.y += t.y), (this.z += t.z), (this.w += t.w), this);
                    },
                    addScalar: function (t) {
                        return (this.x += t), (this.y += t), (this.z += t), (this.w += t), this;
                    },
                    addVectors: function (t, e) {
                        return (this.x = t.x + e.x), (this.y = t.y + e.y), (this.z = t.z + e.z), (this.w = t.w + e.w), this;
                    },
                    addScaledVector: function (t, e) {
                        return (this.x += t.x * e), (this.y += t.y * e), (this.z += t.z * e), (this.w += t.w * e), this;
                    },
                    sub: function (t, e) {
                        return void 0 !== e
                            ? (console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(t, e))
                            : ((this.x -= t.x), (this.y -= t.y), (this.z -= t.z), (this.w -= t.w), this);
                    },
                    subScalar: function (t) {
                        return (this.x -= t), (this.y -= t), (this.z -= t), (this.w -= t), this;
                    },
                    subVectors: function (t, e) {
                        return (this.x = t.x - e.x), (this.y = t.y - e.y), (this.z = t.z - e.z), (this.w = t.w - e.w), this;
                    },
                    multiplyScalar: function (t) {
                        return (this.x *= t), (this.y *= t), (this.z *= t), (this.w *= t), this;
                    },
                    applyMatrix4: function (t) {
                        var e = this.x,
                            n = this.y,
                            i = this.z,
                            r = this.w,
                            o = t.elements;
                        return (
                            (this.x = o[0] * e + o[4] * n + o[8] * i + o[12] * r),
                            (this.y = o[1] * e + o[5] * n + o[9] * i + o[13] * r),
                            (this.z = o[2] * e + o[6] * n + o[10] * i + o[14] * r),
                            (this.w = o[3] * e + o[7] * n + o[11] * i + o[15] * r),
                            this
                        );
                    },
                    divideScalar: function (t) {
                        return this.multiplyScalar(1 / t);
                    },
                    setAxisAngleFromQuaternion: function (t) {
                        this.w = 2 * Math.acos(t.w);
                        var e = Math.sqrt(1 - t.w * t.w);
                        return e < 1e-4 ? ((this.x = 1), (this.y = 0), (this.z = 0)) : ((this.x = t.x / e), (this.y = t.y / e), (this.z = t.z / e)), this;
                    },
                    setAxisAngleFromRotationMatrix: function (t) {
                        var e,
                            n,
                            i,
                            r,
                            o = t.elements,
                            a = o[0],
                            s = o[4],
                            c = o[8],
                            l = o[1],
                            u = o[5],
                            h = o[9],
                            p = o[2],
                            d = o[6],
                            f = o[10];
                        if (Math.abs(s - l) < 0.01 && Math.abs(c - p) < 0.01 && Math.abs(h - d) < 0.01) {
                            if (Math.abs(s + l) < 0.1 && Math.abs(c + p) < 0.1 && Math.abs(h + d) < 0.1 && Math.abs(a + u + f - 3) < 0.1) return this.set(1, 0, 0, 0), this;
                            e = Math.PI;
                            var m = (a + 1) / 2,
                                v = (u + 1) / 2,
                                g = (f + 1) / 2,
                                y = (s + l) / 4,
                                x = (c + p) / 4,
                                _ = (h + d) / 4;
                            return (
                                m > v && m > g
                                    ? m < 0.01
                                        ? ((n = 0), (i = 0.707106781), (r = 0.707106781))
                                        : ((i = y / (n = Math.sqrt(m))), (r = x / n))
                                    : v > g
                                    ? v < 0.01
                                        ? ((n = 0.707106781), (i = 0), (r = 0.707106781))
                                        : ((n = y / (i = Math.sqrt(v))), (r = _ / i))
                                    : g < 0.01
                                    ? ((n = 0.707106781), (i = 0.707106781), (r = 0))
                                    : ((n = x / (r = Math.sqrt(g))), (i = _ / r)),
                                this.set(n, i, r, e),
                                this
                            );
                        }
                        var b = Math.sqrt((d - h) * (d - h) + (c - p) * (c - p) + (l - s) * (l - s));
                        return Math.abs(b) < 0.001 && (b = 1), (this.x = (d - h) / b), (this.y = (c - p) / b), (this.z = (l - s) / b), (this.w = Math.acos((a + u + f - 1) / 2)), this;
                    },
                    min: function (t) {
                        return (this.x = Math.min(this.x, t.x)), (this.y = Math.min(this.y, t.y)), (this.z = Math.min(this.z, t.z)), (this.w = Math.min(this.w, t.w)), this;
                    },
                    max: function (t) {
                        return (this.x = Math.max(this.x, t.x)), (this.y = Math.max(this.y, t.y)), (this.z = Math.max(this.z, t.z)), (this.w = Math.max(this.w, t.w)), this;
                    },
                    clamp: function (t, e) {
                        return (this.x = Math.max(t.x, Math.min(e.x, this.x))), (this.y = Math.max(t.y, Math.min(e.y, this.y))), (this.z = Math.max(t.z, Math.min(e.z, this.z))), (this.w = Math.max(t.w, Math.min(e.w, this.w))), this;
                    },
                    clampScalar: function (t, e) {
                        return (this.x = Math.max(t, Math.min(e, this.x))), (this.y = Math.max(t, Math.min(e, this.y))), (this.z = Math.max(t, Math.min(e, this.z))), (this.w = Math.max(t, Math.min(e, this.w))), this;
                    },
                    clampLength: function (t, e) {
                        var n = this.length();
                        return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n)));
                    },
                    floor: function () {
                        return (this.x = Math.floor(this.x)), (this.y = Math.floor(this.y)), (this.z = Math.floor(this.z)), (this.w = Math.floor(this.w)), this;
                    },
                    ceil: function () {
                        return (this.x = Math.ceil(this.x)), (this.y = Math.ceil(this.y)), (this.z = Math.ceil(this.z)), (this.w = Math.ceil(this.w)), this;
                    },
                    round: function () {
                        return (this.x = Math.round(this.x)), (this.y = Math.round(this.y)), (this.z = Math.round(this.z)), (this.w = Math.round(this.w)), this;
                    },
                    roundToZero: function () {
                        return (
                            (this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x)),
                            (this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y)),
                            (this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z)),
                            (this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w)),
                            this
                        );
                    },
                    negate: function () {
                        return (this.x = -this.x), (this.y = -this.y), (this.z = -this.z), (this.w = -this.w), this;
                    },
                    dot: function (t) {
                        return this.x * t.x + this.y * t.y + this.z * t.z + this.w * t.w;
                    },
                    lengthSq: function () {
                        return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
                    },
                    length: function () {
                        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
                    },
                    manhattanLength: function () {
                        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
                    },
                    normalize: function () {
                        return this.divideScalar(this.length() || 1);
                    },
                    setLength: function (t) {
                        return this.normalize().multiplyScalar(t);
                    },
                    lerp: function (t, e) {
                        return (this.x += (t.x - this.x) * e), (this.y += (t.y - this.y) * e), (this.z += (t.z - this.z) * e), (this.w += (t.w - this.w) * e), this;
                    },
                    lerpVectors: function (t, e, n) {
                        return this.subVectors(e, t).multiplyScalar(n).add(t);
                    },
                    equals: function (t) {
                        return t.x === this.x && t.y === this.y && t.z === this.z && t.w === this.w;
                    },
                    fromArray: function (t, e) {
                        return void 0 === e && (e = 0), (this.x = t[e]), (this.y = t[e + 1]), (this.z = t[e + 2]), (this.w = t[e + 3]), this;
                    },
                    toArray: function (t, e) {
                        return void 0 === t && (t = []), void 0 === e && (e = 0), (t[e] = this.x), (t[e + 1] = this.y), (t[e + 2] = this.z), (t[e + 3] = this.w), t;
                    },
                    fromBufferAttribute: function (t, e, n) {
                        return void 0 !== n && console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."), (this.x = t.getX(e)), (this.y = t.getY(e)), (this.z = t.getZ(e)), (this.w = t.getW(e)), this;
                    },
                }),
                (tn.prototype = Object.assign(Object.create(He.prototype), {
                    constructor: tn,
                    isWebGLRenderTarget: !0,
                    setSize: function (t, e) {
                        (this.width === t && this.height === e) || ((this.width = t), (this.height = e), (this.texture.image.width = t), (this.texture.image.height = e), this.dispose()),
                            this.viewport.set(0, 0, t, e),
                            this.scissor.set(0, 0, t, e);
                    },
                    clone: function () {
                        return new this.constructor().copy(this);
                    },
                    copy: function (t) {
                        return (
                            (this.width = t.width),
                            (this.height = t.height),
                            this.viewport.copy(t.viewport),
                            (this.texture = t.texture.clone()),
                            (this.depthBuffer = t.depthBuffer),
                            (this.stencilBuffer = t.stencilBuffer),
                            (this.depthTexture = t.depthTexture),
                            this
                        );
                    },
                    dispose: function () {
                        this.dispatchEvent({ type: "dispose" });
                    },
                })),
                (en.prototype = Object.assign(Object.create(tn.prototype), {
                    constructor: en,
                    isWebGLMultisampleRenderTarget: !0,
                    copy: function (t) {
                        return tn.prototype.copy.call(this, t), (this.samples = t.samples), this;
                    },
                })),
                Object.assign(nn, {
                    slerp: function (t, e, n, i) {
                        return n.copy(t).slerp(e, i);
                    },
                    slerpFlat: function (t, e, n, i, r, o, a) {
                        var s = n[i + 0],
                            c = n[i + 1],
                            l = n[i + 2],
                            u = n[i + 3],
                            h = r[o + 0],
                            p = r[o + 1],
                            d = r[o + 2],
                            f = r[o + 3];
                        if (u !== f || s !== h || c !== p || l !== d) {
                            var m = 1 - a,
                                v = s * h + c * p + l * d + u * f,
                                g = v >= 0 ? 1 : -1,
                                y = 1 - v * v;
                            if (y > Number.EPSILON) {
                                var x = Math.sqrt(y),
                                    _ = Math.atan2(x, v * g);
                                (m = Math.sin(m * _) / x), (a = Math.sin(a * _) / x);
                            }
                            var b = a * g;
                            if (((s = s * m + h * b), (c = c * m + p * b), (l = l * m + d * b), (u = u * m + f * b), m === 1 - a)) {
                                var w = 1 / Math.sqrt(s * s + c * c + l * l + u * u);
                                (s *= w), (c *= w), (l *= w), (u *= w);
                            }
                        }
                        (t[e] = s), (t[e + 1] = c), (t[e + 2] = l), (t[e + 3] = u);
                    },
                }),
                Object.defineProperties(nn.prototype, {
                    x: {
                        get: function () {
                            return this._x;
                        },
                        set: function (t) {
                            (this._x = t), this._onChangeCallback();
                        },
                    },
                    y: {
                        get: function () {
                            return this._y;
                        },
                        set: function (t) {
                            (this._y = t), this._onChangeCallback();
                        },
                    },
                    z: {
                        get: function () {
                            return this._z;
                        },
                        set: function (t) {
                            (this._z = t), this._onChangeCallback();
                        },
                    },
                    w: {
                        get: function () {
                            return this._w;
                        },
                        set: function (t) {
                            (this._w = t), this._onChangeCallback();
                        },
                    },
                }),
                Object.assign(nn.prototype, {
                    isQuaternion: !0,
                    set: function (t, e, n, i) {
                        return (this._x = t), (this._y = e), (this._z = n), (this._w = i), this._onChangeCallback(), this;
                    },
                    clone: function () {
                        return new this.constructor(this._x, this._y, this._z, this._w);
                    },
                    copy: function (t) {
                        return (this._x = t.x), (this._y = t.y), (this._z = t.z), (this._w = t.w), this._onChangeCallback(), this;
                    },
                    setFromEuler: function (t, e) {
                        if (!t || !t.isEuler) throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
                        var n = t._x,
                            i = t._y,
                            r = t._z,
                            o = t.order,
                            a = Math.cos,
                            s = Math.sin,
                            c = a(n / 2),
                            l = a(i / 2),
                            u = a(r / 2),
                            h = s(n / 2),
                            p = s(i / 2),
                            d = s(r / 2);
                        return (
                            "XYZ" === o
                                ? ((this._x = h * l * u + c * p * d), (this._y = c * p * u - h * l * d), (this._z = c * l * d + h * p * u), (this._w = c * l * u - h * p * d))
                                : "YXZ" === o
                                ? ((this._x = h * l * u + c * p * d), (this._y = c * p * u - h * l * d), (this._z = c * l * d - h * p * u), (this._w = c * l * u + h * p * d))
                                : "ZXY" === o
                                ? ((this._x = h * l * u - c * p * d), (this._y = c * p * u + h * l * d), (this._z = c * l * d + h * p * u), (this._w = c * l * u - h * p * d))
                                : "ZYX" === o
                                ? ((this._x = h * l * u - c * p * d), (this._y = c * p * u + h * l * d), (this._z = c * l * d - h * p * u), (this._w = c * l * u + h * p * d))
                                : "YZX" === o
                                ? ((this._x = h * l * u + c * p * d), (this._y = c * p * u + h * l * d), (this._z = c * l * d - h * p * u), (this._w = c * l * u - h * p * d))
                                : "XZY" === o && ((this._x = h * l * u - c * p * d), (this._y = c * p * u - h * l * d), (this._z = c * l * d + h * p * u), (this._w = c * l * u + h * p * d)),
                            !1 !== e && this._onChangeCallback(),
                            this
                        );
                    },
                    setFromAxisAngle: function (t, e) {
                        var n = e / 2,
                            i = Math.sin(n);
                        return (this._x = t.x * i), (this._y = t.y * i), (this._z = t.z * i), (this._w = Math.cos(n)), this._onChangeCallback(), this;
                    },
                    setFromRotationMatrix: function (t) {
                        var e,
                            n = t.elements,
                            i = n[0],
                            r = n[4],
                            o = n[8],
                            a = n[1],
                            s = n[5],
                            c = n[9],
                            l = n[2],
                            u = n[6],
                            h = n[10],
                            p = i + s + h;
                        return (
                            p > 0
                                ? ((e = 0.5 / Math.sqrt(p + 1)), (this._w = 0.25 / e), (this._x = (u - c) * e), (this._y = (o - l) * e), (this._z = (a - r) * e))
                                : i > s && i > h
                                ? ((e = 2 * Math.sqrt(1 + i - s - h)), (this._w = (u - c) / e), (this._x = 0.25 * e), (this._y = (r + a) / e), (this._z = (o + l) / e))
                                : s > h
                                ? ((e = 2 * Math.sqrt(1 + s - i - h)), (this._w = (o - l) / e), (this._x = (r + a) / e), (this._y = 0.25 * e), (this._z = (c + u) / e))
                                : ((e = 2 * Math.sqrt(1 + h - i - s)), (this._w = (a - r) / e), (this._x = (o + l) / e), (this._y = (c + u) / e), (this._z = 0.25 * e)),
                            this._onChangeCallback(),
                            this
                        );
                    },
                    setFromUnitVectors: function (t, e) {
                        var n = t.dot(e) + 1;
                        return (
                            n < 1e-6
                                ? ((n = 0), Math.abs(t.x) > Math.abs(t.z) ? ((this._x = -t.y), (this._y = t.x), (this._z = 0), (this._w = n)) : ((this._x = 0), (this._y = -t.z), (this._z = t.y), (this._w = n)))
                                : ((this._x = t.y * e.z - t.z * e.y), (this._y = t.z * e.x - t.x * e.z), (this._z = t.x * e.y - t.y * e.x), (this._w = n)),
                            this.normalize()
                        );
                    },
                    angleTo: function (t) {
                        return 2 * Math.acos(Math.abs(Xe.clamp(this.dot(t), -1, 1)));
                    },
                    rotateTowards: function (t, e) {
                        var n = this.angleTo(t);
                        if (0 === n) return this;
                        var i = Math.min(1, e / n);
                        return this.slerp(t, i), this;
                    },
                    inverse: function () {
                        return this.conjugate();
                    },
                    conjugate: function () {
                        return (this._x *= -1), (this._y *= -1), (this._z *= -1), this._onChangeCallback(), this;
                    },
                    dot: function (t) {
                        return this._x * t._x + this._y * t._y + this._z * t._z + this._w * t._w;
                    },
                    lengthSq: function () {
                        return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
                    },
                    length: function () {
                        return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
                    },
                    normalize: function () {
                        var t = this.length();
                        return (
                            0 === t ? ((this._x = 0), (this._y = 0), (this._z = 0), (this._w = 1)) : ((t = 1 / t), (this._x = this._x * t), (this._y = this._y * t), (this._z = this._z * t), (this._w = this._w * t)),
                            this._onChangeCallback(),
                            this
                        );
                    },
                    multiply: function (t, e) {
                        return void 0 !== e ? (console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."), this.multiplyQuaternions(t, e)) : this.multiplyQuaternions(this, t);
                    },
                    premultiply: function (t) {
                        return this.multiplyQuaternions(t, this);
                    },
                    multiplyQuaternions: function (t, e) {
                        var n = t._x,
                            i = t._y,
                            r = t._z,
                            o = t._w,
                            a = e._x,
                            s = e._y,
                            c = e._z,
                            l = e._w;
                        return (this._x = n * l + o * a + i * c - r * s), (this._y = i * l + o * s + r * a - n * c), (this._z = r * l + o * c + n * s - i * a), (this._w = o * l - n * a - i * s - r * c), this._onChangeCallback(), this;
                    },
                    slerp: function (t, e) {
                        if (0 === e) return this;
                        if (1 === e) return this.copy(t);
                        var n = this._x,
                            i = this._y,
                            r = this._z,
                            o = this._w,
                            a = o * t._w + n * t._x + i * t._y + r * t._z;
                        if ((a < 0 ? ((this._w = -t._w), (this._x = -t._x), (this._y = -t._y), (this._z = -t._z), (a = -a)) : this.copy(t), a >= 1)) return (this._w = o), (this._x = n), (this._y = i), (this._z = r), this;
                        var s = 1 - a * a;
                        if (s <= Number.EPSILON) {
                            var c = 1 - e;
                            return (this._w = c * o + e * this._w), (this._x = c * n + e * this._x), (this._y = c * i + e * this._y), (this._z = c * r + e * this._z), this.normalize(), this._onChangeCallback(), this;
                        }
                        var l = Math.sqrt(s),
                            u = Math.atan2(l, a),
                            h = Math.sin((1 - e) * u) / l,
                            p = Math.sin(e * u) / l;
                        return (this._w = o * h + this._w * p), (this._x = n * h + this._x * p), (this._y = i * h + this._y * p), (this._z = r * h + this._z * p), this._onChangeCallback(), this;
                    },
                    equals: function (t) {
                        return t._x === this._x && t._y === this._y && t._z === this._z && t._w === this._w;
                    },
                    fromArray: function (t, e) {
                        return void 0 === e && (e = 0), (this._x = t[e]), (this._y = t[e + 1]), (this._z = t[e + 2]), (this._w = t[e + 3]), this._onChangeCallback(), this;
                    },
                    toArray: function (t, e) {
                        return void 0 === t && (t = []), void 0 === e && (e = 0), (t[e] = this._x), (t[e + 1] = this._y), (t[e + 2] = this._z), (t[e + 3] = this._w), t;
                    },
                    fromBufferAttribute: function (t, e) {
                        return (this._x = t.getX(e)), (this._y = t.getY(e)), (this._z = t.getZ(e)), (this._w = t.getW(e)), this;
                    },
                    _onChange: function (t) {
                        return (this._onChangeCallback = t), this;
                    },
                    _onChangeCallback: function () {},
                });
            var rn = new an(),
                on = new nn();
            function an(t, e, n) {
                (this.x = t || 0), (this.y = e || 0), (this.z = n || 0);
            }
            Object.assign(an.prototype, {
                isVector3: !0,
                set: function (t, e, n) {
                    return (this.x = t), (this.y = e), (this.z = n), this;
                },
                setScalar: function (t) {
                    return (this.x = t), (this.y = t), (this.z = t), this;
                },
                setX: function (t) {
                    return (this.x = t), this;
                },
                setY: function (t) {
                    return (this.y = t), this;
                },
                setZ: function (t) {
                    return (this.z = t), this;
                },
                setComponent: function (t, e) {
                    switch (t) {
                        case 0:
                            this.x = e;
                            break;
                        case 1:
                            this.y = e;
                            break;
                        case 2:
                            this.z = e;
                            break;
                        default:
                            throw new Error("index is out of range: " + t);
                    }
                    return this;
                },
                getComponent: function (t) {
                    switch (t) {
                        case 0:
                            return this.x;
                        case 1:
                            return this.y;
                        case 2:
                            return this.z;
                        default:
                            throw new Error("index is out of range: " + t);
                    }
                },
                clone: function () {
                    return new this.constructor(this.x, this.y, this.z);
                },
                copy: function (t) {
                    return (this.x = t.x), (this.y = t.y), (this.z = t.z), this;
                },
                add: function (t, e) {
                    return void 0 !== e ? (console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(t, e)) : ((this.x += t.x), (this.y += t.y), (this.z += t.z), this);
                },
                addScalar: function (t) {
                    return (this.x += t), (this.y += t), (this.z += t), this;
                },
                addVectors: function (t, e) {
                    return (this.x = t.x + e.x), (this.y = t.y + e.y), (this.z = t.z + e.z), this;
                },
                addScaledVector: function (t, e) {
                    return (this.x += t.x * e), (this.y += t.y * e), (this.z += t.z * e), this;
                },
                sub: function (t, e) {
                    return void 0 !== e ? (console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(t, e)) : ((this.x -= t.x), (this.y -= t.y), (this.z -= t.z), this);
                },
                subScalar: function (t) {
                    return (this.x -= t), (this.y -= t), (this.z -= t), this;
                },
                subVectors: function (t, e) {
                    return (this.x = t.x - e.x), (this.y = t.y - e.y), (this.z = t.z - e.z), this;
                },
                multiply: function (t, e) {
                    return void 0 !== e
                        ? (console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."), this.multiplyVectors(t, e))
                        : ((this.x *= t.x), (this.y *= t.y), (this.z *= t.z), this);
                },
                multiplyScalar: function (t) {
                    return (this.x *= t), (this.y *= t), (this.z *= t), this;
                },
                multiplyVectors: function (t, e) {
                    return (this.x = t.x * e.x), (this.y = t.y * e.y), (this.z = t.z * e.z), this;
                },
                applyEuler: function (t) {
                    return (t && t.isEuler) || console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."), this.applyQuaternion(on.setFromEuler(t));
                },
                applyAxisAngle: function (t, e) {
                    return this.applyQuaternion(on.setFromAxisAngle(t, e));
                },
                applyMatrix3: function (t) {
                    var e = this.x,
                        n = this.y,
                        i = this.z,
                        r = t.elements;
                    return (this.x = r[0] * e + r[3] * n + r[6] * i), (this.y = r[1] * e + r[4] * n + r[7] * i), (this.z = r[2] * e + r[5] * n + r[8] * i), this;
                },
                applyNormalMatrix: function (t) {
                    return this.applyMatrix3(t).normalize();
                },
                applyMatrix4: function (t) {
                    var e = this.x,
                        n = this.y,
                        i = this.z,
                        r = t.elements,
                        o = 1 / (r[3] * e + r[7] * n + r[11] * i + r[15]);
                    return (this.x = (r[0] * e + r[4] * n + r[8] * i + r[12]) * o), (this.y = (r[1] * e + r[5] * n + r[9] * i + r[13]) * o), (this.z = (r[2] * e + r[6] * n + r[10] * i + r[14]) * o), this;
                },
                applyQuaternion: function (t) {
                    var e = this.x,
                        n = this.y,
                        i = this.z,
                        r = t.x,
                        o = t.y,
                        a = t.z,
                        s = t.w,
                        c = s * e + o * i - a * n,
                        l = s * n + a * e - r * i,
                        u = s * i + r * n - o * e,
                        h = -r * e - o * n - a * i;
                    return (this.x = c * s + h * -r + l * -a - u * -o), (this.y = l * s + h * -o + u * -r - c * -a), (this.z = u * s + h * -a + c * -o - l * -r), this;
                },
                project: function (t) {
                    return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix);
                },
                unproject: function (t) {
                    return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld);
                },
                transformDirection: function (t) {
                    var e = this.x,
                        n = this.y,
                        i = this.z,
                        r = t.elements;
                    return (this.x = r[0] * e + r[4] * n + r[8] * i), (this.y = r[1] * e + r[5] * n + r[9] * i), (this.z = r[2] * e + r[6] * n + r[10] * i), this.normalize();
                },
                divide: function (t) {
                    return (this.x /= t.x), (this.y /= t.y), (this.z /= t.z), this;
                },
                divideScalar: function (t) {
                    return this.multiplyScalar(1 / t);
                },
                min: function (t) {
                    return (this.x = Math.min(this.x, t.x)), (this.y = Math.min(this.y, t.y)), (this.z = Math.min(this.z, t.z)), this;
                },
                max: function (t) {
                    return (this.x = Math.max(this.x, t.x)), (this.y = Math.max(this.y, t.y)), (this.z = Math.max(this.z, t.z)), this;
                },
                clamp: function (t, e) {
                    return (this.x = Math.max(t.x, Math.min(e.x, this.x))), (this.y = Math.max(t.y, Math.min(e.y, this.y))), (this.z = Math.max(t.z, Math.min(e.z, this.z))), this;
                },
                clampScalar: function (t, e) {
                    return (this.x = Math.max(t, Math.min(e, this.x))), (this.y = Math.max(t, Math.min(e, this.y))), (this.z = Math.max(t, Math.min(e, this.z))), this;
                },
                clampLength: function (t, e) {
                    var n = this.length();
                    return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n)));
                },
                floor: function () {
                    return (this.x = Math.floor(this.x)), (this.y = Math.floor(this.y)), (this.z = Math.floor(this.z)), this;
                },
                ceil: function () {
                    return (this.x = Math.ceil(this.x)), (this.y = Math.ceil(this.y)), (this.z = Math.ceil(this.z)), this;
                },
                round: function () {
                    return (this.x = Math.round(this.x)), (this.y = Math.round(this.y)), (this.z = Math.round(this.z)), this;
                },
                roundToZero: function () {
                    return (this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x)), (this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y)), (this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z)), this;
                },
                negate: function () {
                    return (this.x = -this.x), (this.y = -this.y), (this.z = -this.z), this;
                },
                dot: function (t) {
                    return this.x * t.x + this.y * t.y + this.z * t.z;
                },
                lengthSq: function () {
                    return this.x * this.x + this.y * this.y + this.z * this.z;
                },
                length: function () {
                    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
                },
                manhattanLength: function () {
                    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
                },
                normalize: function () {
                    return this.divideScalar(this.length() || 1);
                },
                setLength: function (t) {
                    return this.normalize().multiplyScalar(t);
                },
                lerp: function (t, e) {
                    return (this.x += (t.x - this.x) * e), (this.y += (t.y - this.y) * e), (this.z += (t.z - this.z) * e), this;
                },
                lerpVectors: function (t, e, n) {
                    return this.subVectors(e, t).multiplyScalar(n).add(t);
                },
                cross: function (t, e) {
                    return void 0 !== e ? (console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."), this.crossVectors(t, e)) : this.crossVectors(this, t);
                },
                crossVectors: function (t, e) {
                    var n = t.x,
                        i = t.y,
                        r = t.z,
                        o = e.x,
                        a = e.y,
                        s = e.z;
                    return (this.x = i * s - r * a), (this.y = r * o - n * s), (this.z = n * a - i * o), this;
                },
                projectOnVector: function (t) {
                    var e = t.lengthSq();
                    if (0 === e) return this.set(0, 0, 0);
                    var n = t.dot(this) / e;
                    return this.copy(t).multiplyScalar(n);
                },
                projectOnPlane: function (t) {
                    return rn.copy(this).projectOnVector(t), this.sub(rn);
                },
                reflect: function (t) {
                    return this.sub(rn.copy(t).multiplyScalar(2 * this.dot(t)));
                },
                angleTo: function (t) {
                    var e = Math.sqrt(this.lengthSq() * t.lengthSq());
                    if (0 === e) return Math.PI / 2;
                    var n = this.dot(t) / e;
                    return Math.acos(Xe.clamp(n, -1, 1));
                },
                distanceTo: function (t) {
                    return Math.sqrt(this.distanceToSquared(t));
                },
                distanceToSquared: function (t) {
                    var e = this.x - t.x,
                        n = this.y - t.y,
                        i = this.z - t.z;
                    return e * e + n * n + i * i;
                },
                manhattanDistanceTo: function (t) {
                    return Math.abs(this.x - t.x) + Math.abs(this.y - t.y) + Math.abs(this.z - t.z);
                },
                setFromSpherical: function (t) {
                    return this.setFromSphericalCoords(t.radius, t.phi, t.theta);
                },
                setFromSphericalCoords: function (t, e, n) {
                    var i = Math.sin(e) * t;
                    return (this.x = i * Math.sin(n)), (this.y = Math.cos(e) * t), (this.z = i * Math.cos(n)), this;
                },
                setFromCylindrical: function (t) {
                    return this.setFromCylindricalCoords(t.radius, t.theta, t.y);
                },
                setFromCylindricalCoords: function (t, e, n) {
                    return (this.x = t * Math.sin(e)), (this.y = n), (this.z = t * Math.cos(e)), this;
                },
                setFromMatrixPosition: function (t) {
                    var e = t.elements;
                    return (this.x = e[12]), (this.y = e[13]), (this.z = e[14]), this;
                },
                setFromMatrixScale: function (t) {
                    var e = this.setFromMatrixColumn(t, 0).length(),
                        n = this.setFromMatrixColumn(t, 1).length(),
                        i = this.setFromMatrixColumn(t, 2).length();
                    return (this.x = e), (this.y = n), (this.z = i), this;
                },
                setFromMatrixColumn: function (t, e) {
                    return this.fromArray(t.elements, 4 * e);
                },
                setFromMatrix3Column: function (t, e) {
                    return this.fromArray(t.elements, 3 * e);
                },
                equals: function (t) {
                    return t.x === this.x && t.y === this.y && t.z === this.z;
                },
                fromArray: function (t, e) {
                    return void 0 === e && (e = 0), (this.x = t[e]), (this.y = t[e + 1]), (this.z = t[e + 2]), this;
                },
                toArray: function (t, e) {
                    return void 0 === t && (t = []), void 0 === e && (e = 0), (t[e] = this.x), (t[e + 1] = this.y), (t[e + 2] = this.z), t;
                },
                fromBufferAttribute: function (t, e, n) {
                    return void 0 !== n && console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."), (this.x = t.getX(e)), (this.y = t.getY(e)), (this.z = t.getZ(e)), this;
                },
            });
            var sn = new an(),
                cn = new fn(),
                ln = new an(0, 0, 0),
                un = new an(1, 1, 1),
                hn = new an(),
                pn = new an(),
                dn = new an();
            function fn() {
                (this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]), arguments.length > 0 && console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.");
            }
            Object.assign(fn.prototype, {
                isMatrix4: !0,
                set: function (t, e, n, i, r, o, a, s, c, l, u, h, p, d, f, m) {
                    var v = this.elements;
                    return (v[0] = t), (v[4] = e), (v[8] = n), (v[12] = i), (v[1] = r), (v[5] = o), (v[9] = a), (v[13] = s), (v[2] = c), (v[6] = l), (v[10] = u), (v[14] = h), (v[3] = p), (v[7] = d), (v[11] = f), (v[15] = m), this;
                },
                identity: function () {
                    return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
                },
                clone: function () {
                    return new fn().fromArray(this.elements);
                },
                copy: function (t) {
                    var e = this.elements,
                        n = t.elements;
                    return (
                        (e[0] = n[0]),
                        (e[1] = n[1]),
                        (e[2] = n[2]),
                        (e[3] = n[3]),
                        (e[4] = n[4]),
                        (e[5] = n[5]),
                        (e[6] = n[6]),
                        (e[7] = n[7]),
                        (e[8] = n[8]),
                        (e[9] = n[9]),
                        (e[10] = n[10]),
                        (e[11] = n[11]),
                        (e[12] = n[12]),
                        (e[13] = n[13]),
                        (e[14] = n[14]),
                        (e[15] = n[15]),
                        this
                    );
                },
                copyPosition: function (t) {
                    var e = this.elements,
                        n = t.elements;
                    return (e[12] = n[12]), (e[13] = n[13]), (e[14] = n[14]), this;
                },
                extractBasis: function (t, e, n) {
                    return t.setFromMatrixColumn(this, 0), e.setFromMatrixColumn(this, 1), n.setFromMatrixColumn(this, 2), this;
                },
                makeBasis: function (t, e, n) {
                    return this.set(t.x, e.x, n.x, 0, t.y, e.y, n.y, 0, t.z, e.z, n.z, 0, 0, 0, 0, 1), this;
                },
                extractRotation: function (t) {
                    var e = this.elements,
                        n = t.elements,
                        i = 1 / sn.setFromMatrixColumn(t, 0).length(),
                        r = 1 / sn.setFromMatrixColumn(t, 1).length(),
                        o = 1 / sn.setFromMatrixColumn(t, 2).length();
                    return (
                        (e[0] = n[0] * i),
                        (e[1] = n[1] * i),
                        (e[2] = n[2] * i),
                        (e[3] = 0),
                        (e[4] = n[4] * r),
                        (e[5] = n[5] * r),
                        (e[6] = n[6] * r),
                        (e[7] = 0),
                        (e[8] = n[8] * o),
                        (e[9] = n[9] * o),
                        (e[10] = n[10] * o),
                        (e[11] = 0),
                        (e[12] = 0),
                        (e[13] = 0),
                        (e[14] = 0),
                        (e[15] = 1),
                        this
                    );
                },
                makeRotationFromEuler: function (t) {
                    (t && t.isEuler) || console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
                    var e = this.elements,
                        n = t.x,
                        i = t.y,
                        r = t.z,
                        o = Math.cos(n),
                        a = Math.sin(n),
                        s = Math.cos(i),
                        c = Math.sin(i),
                        l = Math.cos(r),
                        u = Math.sin(r);
                    if ("XYZ" === t.order) {
                        var h = o * l,
                            p = o * u,
                            d = a * l,
                            f = a * u;
                        (e[0] = s * l), (e[4] = -s * u), (e[8] = c), (e[1] = p + d * c), (e[5] = h - f * c), (e[9] = -a * s), (e[2] = f - h * c), (e[6] = d + p * c), (e[10] = o * s);
                    } else if ("YXZ" === t.order) {
                        var m = s * l,
                            v = s * u,
                            g = c * l,
                            y = c * u;
                        (e[0] = m + y * a), (e[4] = g * a - v), (e[8] = o * c), (e[1] = o * u), (e[5] = o * l), (e[9] = -a), (e[2] = v * a - g), (e[6] = y + m * a), (e[10] = o * s);
                    } else if ("ZXY" === t.order) {
                        (m = s * l), (v = s * u), (g = c * l), (y = c * u);
                        (e[0] = m - y * a), (e[4] = -o * u), (e[8] = g + v * a), (e[1] = v + g * a), (e[5] = o * l), (e[9] = y - m * a), (e[2] = -o * c), (e[6] = a), (e[10] = o * s);
                    } else if ("ZYX" === t.order) {
                        (h = o * l), (p = o * u), (d = a * l), (f = a * u);
                        (e[0] = s * l), (e[4] = d * c - p), (e[8] = h * c + f), (e[1] = s * u), (e[5] = f * c + h), (e[9] = p * c - d), (e[2] = -c), (e[6] = a * s), (e[10] = o * s);
                    } else if ("YZX" === t.order) {
                        var x = o * s,
                            _ = o * c,
                            b = a * s,
                            w = a * c;
                        (e[0] = s * l), (e[4] = w - x * u), (e[8] = b * u + _), (e[1] = u), (e[5] = o * l), (e[9] = -a * l), (e[2] = -c * l), (e[6] = _ * u + b), (e[10] = x - w * u);
                    } else if ("XZY" === t.order) {
                        (x = o * s), (_ = o * c), (b = a * s), (w = a * c);
                        (e[0] = s * l), (e[4] = -u), (e[8] = c * l), (e[1] = x * u + w), (e[5] = o * l), (e[9] = _ * u - b), (e[2] = b * u - _), (e[6] = a * l), (e[10] = w * u + x);
                    }
                    return (e[3] = 0), (e[7] = 0), (e[11] = 0), (e[12] = 0), (e[13] = 0), (e[14] = 0), (e[15] = 1), this;
                },
                makeRotationFromQuaternion: function (t) {
                    return this.compose(ln, t, un);
                },
                lookAt: function (t, e, n) {
                    var i = this.elements;
                    return (
                        dn.subVectors(t, e),
                        0 === dn.lengthSq() && (dn.z = 1),
                        dn.normalize(),
                        hn.crossVectors(n, dn),
                        0 === hn.lengthSq() && (1 === Math.abs(n.z) ? (dn.x += 1e-4) : (dn.z += 1e-4), dn.normalize(), hn.crossVectors(n, dn)),
                        hn.normalize(),
                        pn.crossVectors(dn, hn),
                        (i[0] = hn.x),
                        (i[4] = pn.x),
                        (i[8] = dn.x),
                        (i[1] = hn.y),
                        (i[5] = pn.y),
                        (i[9] = dn.y),
                        (i[2] = hn.z),
                        (i[6] = pn.z),
                        (i[10] = dn.z),
                        this
                    );
                },
                multiply: function (t, e) {
                    return void 0 !== e ? (console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."), this.multiplyMatrices(t, e)) : this.multiplyMatrices(this, t);
                },
                premultiply: function (t) {
                    return this.multiplyMatrices(t, this);
                },
                multiplyMatrices: function (t, e) {
                    var n = t.elements,
                        i = e.elements,
                        r = this.elements,
                        o = n[0],
                        a = n[4],
                        s = n[8],
                        c = n[12],
                        l = n[1],
                        u = n[5],
                        h = n[9],
                        p = n[13],
                        d = n[2],
                        f = n[6],
                        m = n[10],
                        v = n[14],
                        g = n[3],
                        y = n[7],
                        x = n[11],
                        _ = n[15],
                        b = i[0],
                        w = i[4],
                        M = i[8],
                        S = i[12],
                        T = i[1],
                        E = i[5],
                        A = i[9],
                        P = i[13],
                        L = i[2],
                        C = i[6],
                        R = i[10],
                        O = i[14],
                        D = i[3],
                        I = i[7],
                        N = i[11],
                        k = i[15];
                    return (
                        (r[0] = o * b + a * T + s * L + c * D),
                        (r[4] = o * w + a * E + s * C + c * I),
                        (r[8] = o * M + a * A + s * R + c * N),
                        (r[12] = o * S + a * P + s * O + c * k),
                        (r[1] = l * b + u * T + h * L + p * D),
                        (r[5] = l * w + u * E + h * C + p * I),
                        (r[9] = l * M + u * A + h * R + p * N),
                        (r[13] = l * S + u * P + h * O + p * k),
                        (r[2] = d * b + f * T + m * L + v * D),
                        (r[6] = d * w + f * E + m * C + v * I),
                        (r[10] = d * M + f * A + m * R + v * N),
                        (r[14] = d * S + f * P + m * O + v * k),
                        (r[3] = g * b + y * T + x * L + _ * D),
                        (r[7] = g * w + y * E + x * C + _ * I),
                        (r[11] = g * M + y * A + x * R + _ * N),
                        (r[15] = g * S + y * P + x * O + _ * k),
                        this
                    );
                },
                multiplyScalar: function (t) {
                    var e = this.elements;
                    return (
                        (e[0] *= t),
                        (e[4] *= t),
                        (e[8] *= t),
                        (e[12] *= t),
                        (e[1] *= t),
                        (e[5] *= t),
                        (e[9] *= t),
                        (e[13] *= t),
                        (e[2] *= t),
                        (e[6] *= t),
                        (e[10] *= t),
                        (e[14] *= t),
                        (e[3] *= t),
                        (e[7] *= t),
                        (e[11] *= t),
                        (e[15] *= t),
                        this
                    );
                },
                determinant: function () {
                    var t = this.elements,
                        e = t[0],
                        n = t[4],
                        i = t[8],
                        r = t[12],
                        o = t[1],
                        a = t[5],
                        s = t[9],
                        c = t[13],
                        l = t[2],
                        u = t[6],
                        h = t[10],
                        p = t[14];
                    return (
                        t[3] * (+r * s * u - i * c * u - r * a * h + n * c * h + i * a * p - n * s * p) +
                        t[7] * (+e * s * p - e * c * h + r * o * h - i * o * p + i * c * l - r * s * l) +
                        t[11] * (+e * c * u - e * a * p - r * o * u + n * o * p + r * a * l - n * c * l) +
                        t[15] * (-i * a * l - e * s * u + e * a * h + i * o * u - n * o * h + n * s * l)
                    );
                },
                transpose: function () {
                    var t,
                        e = this.elements;
                    return (
                        (t = e[1]),
                        (e[1] = e[4]),
                        (e[4] = t),
                        (t = e[2]),
                        (e[2] = e[8]),
                        (e[8] = t),
                        (t = e[6]),
                        (e[6] = e[9]),
                        (e[9] = t),
                        (t = e[3]),
                        (e[3] = e[12]),
                        (e[12] = t),
                        (t = e[7]),
                        (e[7] = e[13]),
                        (e[13] = t),
                        (t = e[11]),
                        (e[11] = e[14]),
                        (e[14] = t),
                        this
                    );
                },
                setPosition: function (t, e, n) {
                    var i = this.elements;
                    return t.isVector3 ? ((i[12] = t.x), (i[13] = t.y), (i[14] = t.z)) : ((i[12] = t), (i[13] = e), (i[14] = n)), this;
                },
                getInverse: function (t, e) {
                    void 0 !== e && console.warn("THREE.Matrix4: .getInverse() can no longer be configured to throw on degenerate.");
                    var n = this.elements,
                        i = t.elements,
                        r = i[0],
                        o = i[1],
                        a = i[2],
                        s = i[3],
                        c = i[4],
                        l = i[5],
                        u = i[6],
                        h = i[7],
                        p = i[8],
                        d = i[9],
                        f = i[10],
                        m = i[11],
                        v = i[12],
                        g = i[13],
                        y = i[14],
                        x = i[15],
                        _ = d * y * h - g * f * h + g * u * m - l * y * m - d * u * x + l * f * x,
                        b = v * f * h - p * y * h - v * u * m + c * y * m + p * u * x - c * f * x,
                        w = p * g * h - v * d * h + v * l * m - c * g * m - p * l * x + c * d * x,
                        M = v * d * u - p * g * u - v * l * f + c * g * f + p * l * y - c * d * y,
                        S = r * _ + o * b + a * w + s * M;
                    if (0 === S) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                    var T = 1 / S;
                    return (
                        (n[0] = _ * T),
                        (n[1] = (g * f * s - d * y * s - g * a * m + o * y * m + d * a * x - o * f * x) * T),
                        (n[2] = (l * y * s - g * u * s + g * a * h - o * y * h - l * a * x + o * u * x) * T),
                        (n[3] = (d * u * s - l * f * s - d * a * h + o * f * h + l * a * m - o * u * m) * T),
                        (n[4] = b * T),
                        (n[5] = (p * y * s - v * f * s + v * a * m - r * y * m - p * a * x + r * f * x) * T),
                        (n[6] = (v * u * s - c * y * s - v * a * h + r * y * h + c * a * x - r * u * x) * T),
                        (n[7] = (c * f * s - p * u * s + p * a * h - r * f * h - c * a * m + r * u * m) * T),
                        (n[8] = w * T),
                        (n[9] = (v * d * s - p * g * s - v * o * m + r * g * m + p * o * x - r * d * x) * T),
                        (n[10] = (c * g * s - v * l * s + v * o * h - r * g * h - c * o * x + r * l * x) * T),
                        (n[11] = (p * l * s - c * d * s - p * o * h + r * d * h + c * o * m - r * l * m) * T),
                        (n[12] = M * T),
                        (n[13] = (p * g * a - v * d * a + v * o * f - r * g * f - p * o * y + r * d * y) * T),
                        (n[14] = (v * l * a - c * g * a - v * o * u + r * g * u + c * o * y - r * l * y) * T),
                        (n[15] = (c * d * a - p * l * a + p * o * u - r * d * u - c * o * f + r * l * f) * T),
                        this
                    );
                },
                scale: function (t) {
                    var e = this.elements,
                        n = t.x,
                        i = t.y,
                        r = t.z;
                    return (e[0] *= n), (e[4] *= i), (e[8] *= r), (e[1] *= n), (e[5] *= i), (e[9] *= r), (e[2] *= n), (e[6] *= i), (e[10] *= r), (e[3] *= n), (e[7] *= i), (e[11] *= r), this;
                },
                getMaxScaleOnAxis: function () {
                    var t = this.elements,
                        e = t[0] * t[0] + t[1] * t[1] + t[2] * t[2],
                        n = t[4] * t[4] + t[5] * t[5] + t[6] * t[6],
                        i = t[8] * t[8] + t[9] * t[9] + t[10] * t[10];
                    return Math.sqrt(Math.max(e, n, i));
                },
                makeTranslation: function (t, e, n) {
                    return this.set(1, 0, 0, t, 0, 1, 0, e, 0, 0, 1, n, 0, 0, 0, 1), this;
                },
                makeRotationX: function (t) {
                    var e = Math.cos(t),
                        n = Math.sin(t);
                    return this.set(1, 0, 0, 0, 0, e, -n, 0, 0, n, e, 0, 0, 0, 0, 1), this;
                },
                makeRotationY: function (t) {
                    var e = Math.cos(t),
                        n = Math.sin(t);
                    return this.set(e, 0, n, 0, 0, 1, 0, 0, -n, 0, e, 0, 0, 0, 0, 1), this;
                },
                makeRotationZ: function (t) {
                    var e = Math.cos(t),
                        n = Math.sin(t);
                    return this.set(e, -n, 0, 0, n, e, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
                },
                makeRotationAxis: function (t, e) {
                    var n = Math.cos(e),
                        i = Math.sin(e),
                        r = 1 - n,
                        o = t.x,
                        a = t.y,
                        s = t.z,
                        c = r * o,
                        l = r * a;
                    return this.set(c * o + n, c * a - i * s, c * s + i * a, 0, c * a + i * s, l * a + n, l * s - i * o, 0, c * s - i * a, l * s + i * o, r * s * s + n, 0, 0, 0, 0, 1), this;
                },
                makeScale: function (t, e, n) {
                    return this.set(t, 0, 0, 0, 0, e, 0, 0, 0, 0, n, 0, 0, 0, 0, 1), this;
                },
                makeShear: function (t, e, n) {
                    return this.set(1, e, n, 0, t, 1, n, 0, t, e, 1, 0, 0, 0, 0, 1), this;
                },
                compose: function (t, e, n) {
                    var i = this.elements,
                        r = e._x,
                        o = e._y,
                        a = e._z,
                        s = e._w,
                        c = r + r,
                        l = o + o,
                        u = a + a,
                        h = r * c,
                        p = r * l,
                        d = r * u,
                        f = o * l,
                        m = o * u,
                        v = a * u,
                        g = s * c,
                        y = s * l,
                        x = s * u,
                        _ = n.x,
                        b = n.y,
                        w = n.z;
                    return (
                        (i[0] = (1 - (f + v)) * _),
                        (i[1] = (p + x) * _),
                        (i[2] = (d - y) * _),
                        (i[3] = 0),
                        (i[4] = (p - x) * b),
                        (i[5] = (1 - (h + v)) * b),
                        (i[6] = (m + g) * b),
                        (i[7] = 0),
                        (i[8] = (d + y) * w),
                        (i[9] = (m - g) * w),
                        (i[10] = (1 - (h + f)) * w),
                        (i[11] = 0),
                        (i[12] = t.x),
                        (i[13] = t.y),
                        (i[14] = t.z),
                        (i[15] = 1),
                        this
                    );
                },
                decompose: function (t, e, n) {
                    var i = this.elements,
                        r = sn.set(i[0], i[1], i[2]).length(),
                        o = sn.set(i[4], i[5], i[6]).length(),
                        a = sn.set(i[8], i[9], i[10]).length();
                    this.determinant() < 0 && (r = -r), (t.x = i[12]), (t.y = i[13]), (t.z = i[14]), cn.copy(this);
                    var s = 1 / r,
                        c = 1 / o,
                        l = 1 / a;
                    return (
                        (cn.elements[0] *= s),
                        (cn.elements[1] *= s),
                        (cn.elements[2] *= s),
                        (cn.elements[4] *= c),
                        (cn.elements[5] *= c),
                        (cn.elements[6] *= c),
                        (cn.elements[8] *= l),
                        (cn.elements[9] *= l),
                        (cn.elements[10] *= l),
                        e.setFromRotationMatrix(cn),
                        (n.x = r),
                        (n.y = o),
                        (n.z = a),
                        this
                    );
                },
                makePerspective: function (t, e, n, i, r, o) {
                    void 0 === o && console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
                    var a = this.elements,
                        s = (2 * r) / (e - t),
                        c = (2 * r) / (n - i),
                        l = (e + t) / (e - t),
                        u = (n + i) / (n - i),
                        h = -(o + r) / (o - r),
                        p = (-2 * o * r) / (o - r);
                    return (a[0] = s), (a[4] = 0), (a[8] = l), (a[12] = 0), (a[1] = 0), (a[5] = c), (a[9] = u), (a[13] = 0), (a[2] = 0), (a[6] = 0), (a[10] = h), (a[14] = p), (a[3] = 0), (a[7] = 0), (a[11] = -1), (a[15] = 0), this;
                },
                makeOrthographic: function (t, e, n, i, r, o) {
                    var a = this.elements,
                        s = 1 / (e - t),
                        c = 1 / (n - i),
                        l = 1 / (o - r),
                        u = (e + t) * s,
                        h = (n + i) * c,
                        p = (o + r) * l;
                    return (
                        (a[0] = 2 * s),
                        (a[4] = 0),
                        (a[8] = 0),
                        (a[12] = -u),
                        (a[1] = 0),
                        (a[5] = 2 * c),
                        (a[9] = 0),
                        (a[13] = -h),
                        (a[2] = 0),
                        (a[6] = 0),
                        (a[10] = -2 * l),
                        (a[14] = -p),
                        (a[3] = 0),
                        (a[7] = 0),
                        (a[11] = 0),
                        (a[15] = 1),
                        this
                    );
                },
                equals: function (t) {
                    for (var e = this.elements, n = t.elements, i = 0; i < 16; i++) if (e[i] !== n[i]) return !1;
                    return !0;
                },
                fromArray: function (t, e) {
                    void 0 === e && (e = 0);
                    for (var n = 0; n < 16; n++) this.elements[n] = t[n + e];
                    return this;
                },
                toArray: function (t, e) {
                    void 0 === t && (t = []), void 0 === e && (e = 0);
                    var n = this.elements;
                    return (
                        (t[e] = n[0]),
                        (t[e + 1] = n[1]),
                        (t[e + 2] = n[2]),
                        (t[e + 3] = n[3]),
                        (t[e + 4] = n[4]),
                        (t[e + 5] = n[5]),
                        (t[e + 6] = n[6]),
                        (t[e + 7] = n[7]),
                        (t[e + 8] = n[8]),
                        (t[e + 9] = n[9]),
                        (t[e + 10] = n[10]),
                        (t[e + 11] = n[11]),
                        (t[e + 12] = n[12]),
                        (t[e + 13] = n[13]),
                        (t[e + 14] = n[14]),
                        (t[e + 15] = n[15]),
                        t
                    );
                },
            });
            var mn = new fn(),
                vn = new nn();
            function gn(t, e, n, i) {
                (this._x = t || 0), (this._y = e || 0), (this._z = n || 0), (this._order = i || gn.DefaultOrder);
            }
            function yn() {
                this.mask = 1;
            }
            (gn.RotationOrders = ["XYZ", "YZX", "ZXY", "XZY", "YXZ", "ZYX"]),
                (gn.DefaultOrder = "XYZ"),
                Object.defineProperties(gn.prototype, {
                    x: {
                        get: function () {
                            return this._x;
                        },
                        set: function (t) {
                            (this._x = t), this._onChangeCallback();
                        },
                    },
                    y: {
                        get: function () {
                            return this._y;
                        },
                        set: function (t) {
                            (this._y = t), this._onChangeCallback();
                        },
                    },
                    z: {
                        get: function () {
                            return this._z;
                        },
                        set: function (t) {
                            (this._z = t), this._onChangeCallback();
                        },
                    },
                    order: {
                        get: function () {
                            return this._order;
                        },
                        set: function (t) {
                            (this._order = t), this._onChangeCallback();
                        },
                    },
                }),
                Object.assign(gn.prototype, {
                    isEuler: !0,
                    set: function (t, e, n, i) {
                        return (this._x = t), (this._y = e), (this._z = n), (this._order = i || this._order), this._onChangeCallback(), this;
                    },
                    clone: function () {
                        return new this.constructor(this._x, this._y, this._z, this._order);
                    },
                    copy: function (t) {
                        return (this._x = t._x), (this._y = t._y), (this._z = t._z), (this._order = t._order), this._onChangeCallback(), this;
                    },
                    setFromRotationMatrix: function (t, e, n) {
                        var i = Xe.clamp,
                            r = t.elements,
                            o = r[0],
                            a = r[4],
                            s = r[8],
                            c = r[1],
                            l = r[5],
                            u = r[9],
                            h = r[2],
                            p = r[6],
                            d = r[10];
                        return (
                            "XYZ" === (e = e || this._order)
                                ? ((this._y = Math.asin(i(s, -1, 1))), Math.abs(s) < 0.9999999 ? ((this._x = Math.atan2(-u, d)), (this._z = Math.atan2(-a, o))) : ((this._x = Math.atan2(p, l)), (this._z = 0)))
                                : "YXZ" === e
                                ? ((this._x = Math.asin(-i(u, -1, 1))), Math.abs(u) < 0.9999999 ? ((this._y = Math.atan2(s, d)), (this._z = Math.atan2(c, l))) : ((this._y = Math.atan2(-h, o)), (this._z = 0)))
                                : "ZXY" === e
                                ? ((this._x = Math.asin(i(p, -1, 1))), Math.abs(p) < 0.9999999 ? ((this._y = Math.atan2(-h, d)), (this._z = Math.atan2(-a, l))) : ((this._y = 0), (this._z = Math.atan2(c, o))))
                                : "ZYX" === e
                                ? ((this._y = Math.asin(-i(h, -1, 1))), Math.abs(h) < 0.9999999 ? ((this._x = Math.atan2(p, d)), (this._z = Math.atan2(c, o))) : ((this._x = 0), (this._z = Math.atan2(-a, l))))
                                : "YZX" === e
                                ? ((this._z = Math.asin(i(c, -1, 1))), Math.abs(c) < 0.9999999 ? ((this._x = Math.atan2(-u, l)), (this._y = Math.atan2(-h, o))) : ((this._x = 0), (this._y = Math.atan2(s, d))))
                                : "XZY" === e
                                ? ((this._z = Math.asin(-i(a, -1, 1))), Math.abs(a) < 0.9999999 ? ((this._x = Math.atan2(p, l)), (this._y = Math.atan2(s, o))) : ((this._x = Math.atan2(-u, d)), (this._y = 0)))
                                : console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: " + e),
                            (this._order = e),
                            !1 !== n && this._onChangeCallback(),
                            this
                        );
                    },
                    setFromQuaternion: function (t, e, n) {
                        return mn.makeRotationFromQuaternion(t), this.setFromRotationMatrix(mn, e, n);
                    },
                    setFromVector3: function (t, e) {
                        return this.set(t.x, t.y, t.z, e || this._order);
                    },
                    reorder: function (t) {
                        return vn.setFromEuler(this), this.setFromQuaternion(vn, t);
                    },
                    equals: function (t) {
                        return t._x === this._x && t._y === this._y && t._z === this._z && t._order === this._order;
                    },
                    fromArray: function (t) {
                        return (this._x = t[0]), (this._y = t[1]), (this._z = t[2]), void 0 !== t[3] && (this._order = t[3]), this._onChangeCallback(), this;
                    },
                    toArray: function (t, e) {
                        return void 0 === t && (t = []), void 0 === e && (e = 0), (t[e] = this._x), (t[e + 1] = this._y), (t[e + 2] = this._z), (t[e + 3] = this._order), t;
                    },
                    toVector3: function (t) {
                        return t ? t.set(this._x, this._y, this._z) : new an(this._x, this._y, this._z);
                    },
                    _onChange: function (t) {
                        return (this._onChangeCallback = t), this;
                    },
                    _onChangeCallback: function () {},
                }),
                Object.assign(yn.prototype, {
                    set: function (t) {
                        this.mask = (1 << t) | 0;
                    },
                    enable: function (t) {
                        this.mask |= (1 << t) | 0;
                    },
                    enableAll: function () {
                        this.mask = -1;
                    },
                    toggle: function (t) {
                        this.mask ^= (1 << t) | 0;
                    },
                    disable: function (t) {
                        this.mask &= ~((1 << t) | 0);
                    },
                    disableAll: function () {
                        this.mask = 0;
                    },
                    test: function (t) {
                        return 0 != (this.mask & t.mask);
                    },
                });
            var xn = 0,
                _n = new an(),
                bn = new nn(),
                wn = new fn(),
                Mn = new an(),
                Sn = new an(),
                Tn = new an(),
                En = new nn(),
                An = new an(1, 0, 0),
                Pn = new an(0, 1, 0),
                Ln = new an(0, 0, 1),
                Cn = { type: "added" },
                Rn = { type: "removed" };
            function On() {
                Object.defineProperty(this, "id", { value: xn++ }), (this.uuid = Xe.generateUUID()), (this.name = ""), (this.type = "Object3D"), (this.parent = null), (this.children = []), (this.up = On.DefaultUp.clone());
                var t = new an(),
                    e = new gn(),
                    n = new nn(),
                    i = new an(1, 1, 1);
                e._onChange(function () {
                    n.setFromEuler(e, !1);
                }),
                    n._onChange(function () {
                        e.setFromQuaternion(n, void 0, !1);
                    }),
                    Object.defineProperties(this, {
                        position: { configurable: !0, enumerable: !0, value: t },
                        rotation: { configurable: !0, enumerable: !0, value: e },
                        quaternion: { configurable: !0, enumerable: !0, value: n },
                        scale: { configurable: !0, enumerable: !0, value: i },
                        modelViewMatrix: { value: new fn() },
                        normalMatrix: { value: new Ze() },
                    }),
                    (this.matrix = new fn()),
                    (this.matrixWorld = new fn()),
                    (this.matrixAutoUpdate = On.DefaultMatrixAutoUpdate),
                    (this.matrixWorldNeedsUpdate = !1),
                    (this.layers = new yn()),
                    (this.visible = !0),
                    (this.castShadow = !1),
                    (this.receiveShadow = !1),
                    (this.frustumCulled = !0),
                    (this.renderOrder = 0),
                    (this.userData = {});
            }
            function Dn() {
                On.call(this),
                    (this.type = "Scene"),
                    (this.background = null),
                    (this.environment = null),
                    (this.fog = null),
                    (this.overrideMaterial = null),
                    (this.autoUpdate = !0),
                    "undefined" != typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
            }
            (On.DefaultUp = new an(0, 1, 0)),
                (On.DefaultMatrixAutoUpdate = !0),
                (On.prototype = Object.assign(Object.create(He.prototype), {
                    constructor: On,
                    isObject3D: !0,
                    onBeforeRender: function () {},
                    onAfterRender: function () {},
                    applyMatrix4: function (t) {
                        this.matrixAutoUpdate && this.updateMatrix(), this.matrix.premultiply(t), this.matrix.decompose(this.position, this.quaternion, this.scale);
                    },
                    applyQuaternion: function (t) {
                        return this.quaternion.premultiply(t), this;
                    },
                    setRotationFromAxisAngle: function (t, e) {
                        this.quaternion.setFromAxisAngle(t, e);
                    },
                    setRotationFromEuler: function (t) {
                        this.quaternion.setFromEuler(t, !0);
                    },
                    setRotationFromMatrix: function (t) {
                        this.quaternion.setFromRotationMatrix(t);
                    },
                    setRotationFromQuaternion: function (t) {
                        this.quaternion.copy(t);
                    },
                    rotateOnAxis: function (t, e) {
                        return bn.setFromAxisAngle(t, e), this.quaternion.multiply(bn), this;
                    },
                    rotateOnWorldAxis: function (t, e) {
                        return bn.setFromAxisAngle(t, e), this.quaternion.premultiply(bn), this;
                    },
                    rotateX: function (t) {
                        return this.rotateOnAxis(An, t);
                    },
                    rotateY: function (t) {
                        return this.rotateOnAxis(Pn, t);
                    },
                    rotateZ: function (t) {
                        return this.rotateOnAxis(Ln, t);
                    },
                    translateOnAxis: function (t, e) {
                        return _n.copy(t).applyQuaternion(this.quaternion), this.position.add(_n.multiplyScalar(e)), this;
                    },
                    translateX: function (t) {
                        return this.translateOnAxis(An, t);
                    },
                    translateY: function (t) {
                        return this.translateOnAxis(Pn, t);
                    },
                    translateZ: function (t) {
                        return this.translateOnAxis(Ln, t);
                    },
                    localToWorld: function (t) {
                        return t.applyMatrix4(this.matrixWorld);
                    },
                    worldToLocal: function (t) {
                        return t.applyMatrix4(wn.getInverse(this.matrixWorld));
                    },
                    lookAt: function (t, e, n) {
                        t.isVector3 ? Mn.copy(t) : Mn.set(t, e, n);
                        var i = this.parent;
                        this.updateWorldMatrix(!0, !1),
                            Sn.setFromMatrixPosition(this.matrixWorld),
                            this.isCamera || this.isLight ? wn.lookAt(Sn, Mn, this.up) : wn.lookAt(Mn, Sn, this.up),
                            this.quaternion.setFromRotationMatrix(wn),
                            i && (wn.extractRotation(i.matrixWorld), bn.setFromRotationMatrix(wn), this.quaternion.premultiply(bn.inverse()));
                    },
                    add: function (t) {
                        if (arguments.length > 1) {
                            for (var e = 0; e < arguments.length; e++) this.add(arguments[e]);
                            return this;
                        }
                        return t === this
                            ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", t), this)
                            : (t && t.isObject3D ? (null !== t.parent && t.parent.remove(t), (t.parent = this), this.children.push(t), t.dispatchEvent(Cn)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", t),
                              this);
                    },
                    remove: function (t) {
                        if (arguments.length > 1) {
                            for (var e = 0; e < arguments.length; e++) this.remove(arguments[e]);
                            return this;
                        }
                        var n = this.children.indexOf(t);
                        return -1 !== n && ((t.parent = null), this.children.splice(n, 1), t.dispatchEvent(Rn)), this;
                    },
                    attach: function (t) {
                        return (
                            this.updateWorldMatrix(!0, !1),
                            wn.getInverse(this.matrixWorld),
                            null !== t.parent && (t.parent.updateWorldMatrix(!0, !1), wn.multiply(t.parent.matrixWorld)),
                            t.applyMatrix4(wn),
                            t.updateWorldMatrix(!1, !1),
                            this.add(t),
                            this
                        );
                    },
                    getObjectById: function (t) {
                        return this.getObjectByProperty("id", t);
                    },
                    getObjectByName: function (t) {
                        return this.getObjectByProperty("name", t);
                    },
                    getObjectByProperty: function (t, e) {
                        if (this[t] === e) return this;
                        for (var n = 0, i = this.children.length; n < i; n++) {
                            var r = this.children[n].getObjectByProperty(t, e);
                            if (void 0 !== r) return r;
                        }
                    },
                    getWorldPosition: function (t) {
                        return void 0 === t && (console.warn("THREE.Object3D: .getWorldPosition() target is now required"), (t = new an())), this.updateMatrixWorld(!0), t.setFromMatrixPosition(this.matrixWorld);
                    },
                    getWorldQuaternion: function (t) {
                        return void 0 === t && (console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"), (t = new nn())), this.updateMatrixWorld(!0), this.matrixWorld.decompose(Sn, t, Tn), t;
                    },
                    getWorldScale: function (t) {
                        return void 0 === t && (console.warn("THREE.Object3D: .getWorldScale() target is now required"), (t = new an())), this.updateMatrixWorld(!0), this.matrixWorld.decompose(Sn, En, t), t;
                    },
                    getWorldDirection: function (t) {
                        void 0 === t && (console.warn("THREE.Object3D: .getWorldDirection() target is now required"), (t = new an())), this.updateMatrixWorld(!0);
                        var e = this.matrixWorld.elements;
                        return t.set(e[8], e[9], e[10]).normalize();
                    },
                    raycast: function () {},
                    traverse: function (t) {
                        t(this);
                        for (var e = this.children, n = 0, i = e.length; n < i; n++) e[n].traverse(t);
                    },
                    traverseVisible: function (t) {
                        if (!1 !== this.visible) {
                            t(this);
                            for (var e = this.children, n = 0, i = e.length; n < i; n++) e[n].traverseVisible(t);
                        }
                    },
                    traverseAncestors: function (t) {
                        var e = this.parent;
                        null !== e && (t(e), e.traverseAncestors(t));
                    },
                    updateMatrix: function () {
                        this.matrix.compose(this.position, this.quaternion, this.scale), (this.matrixWorldNeedsUpdate = !0);
                    },
                    updateMatrixWorld: function (t) {
                        this.matrixAutoUpdate && this.updateMatrix(),
                            (this.matrixWorldNeedsUpdate || t) &&
                                (null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), (this.matrixWorldNeedsUpdate = !1), (t = !0));
                        for (var e = this.children, n = 0, i = e.length; n < i; n++) e[n].updateMatrixWorld(t);
                    },
                    updateWorldMatrix: function (t, e) {
                        var n = this.parent;
                        if (
                            (!0 === t && null !== n && n.updateWorldMatrix(!0, !1),
                            this.matrixAutoUpdate && this.updateMatrix(),
                            null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix),
                            !0 === e)
                        )
                            for (var i = this.children, r = 0, o = i.length; r < o; r++) i[r].updateWorldMatrix(!1, !0);
                    },
                    toJSON: function (t) {
                        var e = void 0 === t || "string" == typeof t,
                            n = {};
                        e && ((t = { geometries: {}, materials: {}, textures: {}, images: {}, shapes: {} }), (n.metadata = { version: 4.5, type: "Object", generator: "Object3D.toJSON" }));
                        var i = {};
                        function r(e, n) {
                            return void 0 === e[n.uuid] && (e[n.uuid] = n.toJSON(t)), n.uuid;
                        }
                        if (
                            ((i.uuid = this.uuid),
                            (i.type = this.type),
                            "" !== this.name && (i.name = this.name),
                            !0 === this.castShadow && (i.castShadow = !0),
                            !0 === this.receiveShadow && (i.receiveShadow = !0),
                            !1 === this.visible && (i.visible = !1),
                            !1 === this.frustumCulled && (i.frustumCulled = !1),
                            0 !== this.renderOrder && (i.renderOrder = this.renderOrder),
                            "{}" !== JSON.stringify(this.userData) && (i.userData = this.userData),
                            (i.layers = this.layers.mask),
                            (i.matrix = this.matrix.toArray()),
                            !1 === this.matrixAutoUpdate && (i.matrixAutoUpdate = !1),
                            this.isInstancedMesh && ((i.type = "InstancedMesh"), (i.count = this.count), (i.instanceMatrix = this.instanceMatrix.toJSON())),
                            this.isMesh || this.isLine || this.isPoints)
                        ) {
                            i.geometry = r(t.geometries, this.geometry);
                            var o = this.geometry.parameters;
                            if (void 0 !== o && void 0 !== o.shapes) {
                                var a = o.shapes;
                                if (Array.isArray(a))
                                    for (var s = 0, c = a.length; s < c; s++) {
                                        var l = a[s];
                                        r(t.shapes, l);
                                    }
                                else r(t.shapes, a);
                            }
                        }
                        if (void 0 !== this.material)
                            if (Array.isArray(this.material)) {
                                var u = [];
                                for (s = 0, c = this.material.length; s < c; s++) u.push(r(t.materials, this.material[s]));
                                i.material = u;
                            } else i.material = r(t.materials, this.material);
                        if (this.children.length > 0) {
                            i.children = [];
                            for (s = 0; s < this.children.length; s++) i.children.push(this.children[s].toJSON(t).object);
                        }
                        if (e) {
                            var h = m(t.geometries),
                                p = m(t.materials),
                                d = m(t.textures),
                                f = m(t.images);
                            a = m(t.shapes);
                            h.length > 0 && (n.geometries = h), p.length > 0 && (n.materials = p), d.length > 0 && (n.textures = d), f.length > 0 && (n.images = f), a.length > 0 && (n.shapes = a);
                        }
                        return (n.object = i), n;
                        function m(t) {
                            var e = [];
                            for (var n in t) {
                                var i = t[n];
                                delete i.metadata, e.push(i);
                            }
                            return e;
                        }
                    },
                    clone: function (t) {
                        return new this.constructor().copy(this, t);
                    },
                    copy: function (t, e) {
                        if (
                            (void 0 === e && (e = !0),
                            (this.name = t.name),
                            this.up.copy(t.up),
                            this.position.copy(t.position),
                            this.quaternion.copy(t.quaternion),
                            this.scale.copy(t.scale),
                            this.matrix.copy(t.matrix),
                            this.matrixWorld.copy(t.matrixWorld),
                            (this.matrixAutoUpdate = t.matrixAutoUpdate),
                            (this.matrixWorldNeedsUpdate = t.matrixWorldNeedsUpdate),
                            (this.layers.mask = t.layers.mask),
                            (this.visible = t.visible),
                            (this.castShadow = t.castShadow),
                            (this.receiveShadow = t.receiveShadow),
                            (this.frustumCulled = t.frustumCulled),
                            (this.renderOrder = t.renderOrder),
                            (this.userData = JSON.parse(JSON.stringify(t.userData))),
                            !0 === e)
                        )
                            for (var n = 0; n < t.children.length; n++) {
                                var i = t.children[n];
                                this.add(i.clone());
                            }
                        return this;
                    },
                })),
                (Dn.prototype = Object.assign(Object.create(On.prototype), {
                    constructor: Dn,
                    isScene: !0,
                    copy: function (t, e) {
                        return (
                            On.prototype.copy.call(this, t, e),
                            null !== t.background && (this.background = t.background.clone()),
                            null !== t.environment && (this.environment = t.environment.clone()),
                            null !== t.fog && (this.fog = t.fog.clone()),
                            null !== t.overrideMaterial && (this.overrideMaterial = t.overrideMaterial.clone()),
                            (this.autoUpdate = t.autoUpdate),
                            (this.matrixAutoUpdate = t.matrixAutoUpdate),
                            this
                        );
                    },
                    toJSON: function (t) {
                        var e = On.prototype.toJSON.call(this, t);
                        return (
                            null !== this.background && (e.object.background = this.background.toJSON(t)),
                            null !== this.environment && (e.object.environment = this.environment.toJSON(t)),
                            null !== this.fog && (e.object.fog = this.fog.toJSON()),
                            e
                        );
                    },
                    dispose: function () {
                        this.dispatchEvent({ type: "dispose" });
                    },
                }));
            var In = [new an(), new an(), new an(), new an(), new an(), new an(), new an(), new an()],
                Nn = new an(),
                kn = new Xn(),
                Bn = new an(),
                zn = new an(),
                Fn = new an(),
                Un = new an(),
                jn = new an(),
                Gn = new an(),
                Hn = new an(),
                Vn = new an(),
                Wn = new an(),
                qn = new an();
            function Xn(t, e) {
                (this.min = void 0 !== t ? t : new an(1 / 0, 1 / 0, 1 / 0)), (this.max = void 0 !== e ? e : new an(-1 / 0, -1 / 0, -1 / 0));
            }
            function Yn(t, e, n, i, r) {
                var o, a;
                for (o = 0, a = t.length - 3; o <= a; o += 3) {
                    qn.fromArray(t, o);
                    var s = r.x * Math.abs(qn.x) + r.y * Math.abs(qn.y) + r.z * Math.abs(qn.z),
                        c = e.dot(qn),
                        l = n.dot(qn),
                        u = i.dot(qn);
                    if (Math.max(-Math.max(c, l, u), Math.min(c, l, u)) > s) return !1;
                }
                return !0;
            }
            Object.assign(Xn.prototype, {
                isBox3: !0,
                set: function (t, e) {
                    return this.min.copy(t), this.max.copy(e), this;
                },
                setFromArray: function (t) {
                    for (var e = 1 / 0, n = 1 / 0, i = 1 / 0, r = -1 / 0, o = -1 / 0, a = -1 / 0, s = 0, c = t.length; s < c; s += 3) {
                        var l = t[s],
                            u = t[s + 1],
                            h = t[s + 2];
                        l < e && (e = l), u < n && (n = u), h < i && (i = h), l > r && (r = l), u > o && (o = u), h > a && (a = h);
                    }
                    return this.min.set(e, n, i), this.max.set(r, o, a), this;
                },
                setFromBufferAttribute: function (t) {
                    for (var e = 1 / 0, n = 1 / 0, i = 1 / 0, r = -1 / 0, o = -1 / 0, a = -1 / 0, s = 0, c = t.count; s < c; s++) {
                        var l = t.getX(s),
                            u = t.getY(s),
                            h = t.getZ(s);
                        l < e && (e = l), u < n && (n = u), h < i && (i = h), l > r && (r = l), u > o && (o = u), h > a && (a = h);
                    }
                    return this.min.set(e, n, i), this.max.set(r, o, a), this;
                },
                setFromPoints: function (t) {
                    this.makeEmpty();
                    for (var e = 0, n = t.length; e < n; e++) this.expandByPoint(t[e]);
                    return this;
                },
                setFromCenterAndSize: function (t, e) {
                    var n = Nn.copy(e).multiplyScalar(0.5);
                    return this.min.copy(t).sub(n), this.max.copy(t).add(n), this;
                },
                setFromObject: function (t) {
                    return this.makeEmpty(), this.expandByObject(t);
                },
                clone: function () {
                    return new this.constructor().copy(this);
                },
                copy: function (t) {
                    return this.min.copy(t.min), this.max.copy(t.max), this;
                },
                makeEmpty: function () {
                    return (this.min.x = this.min.y = this.min.z = 1 / 0), (this.max.x = this.max.y = this.max.z = -1 / 0), this;
                },
                isEmpty: function () {
                    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
                },
                getCenter: function (t) {
                    return void 0 === t && (console.warn("THREE.Box3: .getCenter() target is now required"), (t = new an())), this.isEmpty() ? t.set(0, 0, 0) : t.addVectors(this.min, this.max).multiplyScalar(0.5);
                },
                getSize: function (t) {
                    return void 0 === t && (console.warn("THREE.Box3: .getSize() target is now required"), (t = new an())), this.isEmpty() ? t.set(0, 0, 0) : t.subVectors(this.max, this.min);
                },
                expandByPoint: function (t) {
                    return this.min.min(t), this.max.max(t), this;
                },
                expandByVector: function (t) {
                    return this.min.sub(t), this.max.add(t), this;
                },
                expandByScalar: function (t) {
                    return this.min.addScalar(-t), this.max.addScalar(t), this;
                },
                expandByObject: function (t) {
                    t.updateWorldMatrix(!1, !1);
                    var e = t.geometry;
                    void 0 !== e && (null === e.boundingBox && e.computeBoundingBox(), kn.copy(e.boundingBox), kn.applyMatrix4(t.matrixWorld), this.union(kn));
                    for (var n = t.children, i = 0, r = n.length; i < r; i++) this.expandByObject(n[i]);
                    return this;
                },
                containsPoint: function (t) {
                    return !(t.x < this.min.x || t.x > this.max.x || t.y < this.min.y || t.y > this.max.y || t.z < this.min.z || t.z > this.max.z);
                },
                containsBox: function (t) {
                    return this.min.x <= t.min.x && t.max.x <= this.max.x && this.min.y <= t.min.y && t.max.y <= this.max.y && this.min.z <= t.min.z && t.max.z <= this.max.z;
                },
                getParameter: function (t, e) {
                    return (
                        void 0 === e && (console.warn("THREE.Box3: .getParameter() target is now required"), (e = new an())),
                        e.set((t.x - this.min.x) / (this.max.x - this.min.x), (t.y - this.min.y) / (this.max.y - this.min.y), (t.z - this.min.z) / (this.max.z - this.min.z))
                    );
                },
                intersectsBox: function (t) {
                    return !(t.max.x < this.min.x || t.min.x > this.max.x || t.max.y < this.min.y || t.min.y > this.max.y || t.max.z < this.min.z || t.min.z > this.max.z);
                },
                intersectsSphere: function (t) {
                    return this.clampPoint(t.center, Nn), Nn.distanceToSquared(t.center) <= t.radius * t.radius;
                },
                intersectsPlane: function (t) {
                    var e, n;
                    return (
                        t.normal.x > 0 ? ((e = t.normal.x * this.min.x), (n = t.normal.x * this.max.x)) : ((e = t.normal.x * this.max.x), (n = t.normal.x * this.min.x)),
                        t.normal.y > 0 ? ((e += t.normal.y * this.min.y), (n += t.normal.y * this.max.y)) : ((e += t.normal.y * this.max.y), (n += t.normal.y * this.min.y)),
                        t.normal.z > 0 ? ((e += t.normal.z * this.min.z), (n += t.normal.z * this.max.z)) : ((e += t.normal.z * this.max.z), (n += t.normal.z * this.min.z)),
                        e <= -t.constant && n >= -t.constant
                    );
                },
                intersectsTriangle: function (t) {
                    if (this.isEmpty()) return !1;
                    this.getCenter(Hn), Vn.subVectors(this.max, Hn), Bn.subVectors(t.a, Hn), zn.subVectors(t.b, Hn), Fn.subVectors(t.c, Hn), Un.subVectors(zn, Bn), jn.subVectors(Fn, zn), Gn.subVectors(Bn, Fn);
                    var e = [0, -Un.z, Un.y, 0, -jn.z, jn.y, 0, -Gn.z, Gn.y, Un.z, 0, -Un.x, jn.z, 0, -jn.x, Gn.z, 0, -Gn.x, -Un.y, Un.x, 0, -jn.y, jn.x, 0, -Gn.y, Gn.x, 0];
                    return !!Yn(e, Bn, zn, Fn, Vn) && !!Yn((e = [1, 0, 0, 0, 1, 0, 0, 0, 1]), Bn, zn, Fn, Vn) && (Wn.crossVectors(Un, jn), Yn((e = [Wn.x, Wn.y, Wn.z]), Bn, zn, Fn, Vn));
                },
                clampPoint: function (t, e) {
                    return void 0 === e && (console.warn("THREE.Box3: .clampPoint() target is now required"), (e = new an())), e.copy(t).clamp(this.min, this.max);
                },
                distanceToPoint: function (t) {
                    return Nn.copy(t).clamp(this.min, this.max).sub(t).length();
                },
                getBoundingSphere: function (t) {
                    return void 0 === t && console.error("THREE.Box3: .getBoundingSphere() target is now required"), this.getCenter(t.center), (t.radius = 0.5 * this.getSize(Nn).length()), t;
                },
                intersect: function (t) {
                    return this.min.max(t.min), this.max.min(t.max), this.isEmpty() && this.makeEmpty(), this;
                },
                union: function (t) {
                    return this.min.min(t.min), this.max.max(t.max), this;
                },
                applyMatrix4: function (t) {
                    return this.isEmpty()
                        ? this
                        : (In[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(t),
                          In[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(t),
                          In[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(t),
                          In[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(t),
                          In[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(t),
                          In[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(t),
                          In[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(t),
                          In[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(t),
                          this.setFromPoints(In),
                          this);
                },
                translate: function (t) {
                    return this.min.add(t), this.max.add(t), this;
                },
                equals: function (t) {
                    return t.min.equals(this.min) && t.max.equals(this.max);
                },
            });
            var Zn = new Xn();
            function Jn(t, e) {
                (this.center = void 0 !== t ? t : new an()), (this.radius = void 0 !== e ? e : 0);
            }
            Object.assign(Jn.prototype, {
                set: function (t, e) {
                    return this.center.copy(t), (this.radius = e), this;
                },
                setFromPoints: function (t, e) {
                    var n = this.center;
                    void 0 !== e ? n.copy(e) : Zn.setFromPoints(t).getCenter(n);
                    for (var i = 0, r = 0, o = t.length; r < o; r++) i = Math.max(i, n.distanceToSquared(t[r]));
                    return (this.radius = Math.sqrt(i)), this;
                },
                clone: function () {
                    return new this.constructor().copy(this);
                },
                copy: function (t) {
                    return this.center.copy(t.center), (this.radius = t.radius), this;
                },
                empty: function () {
                    return this.radius <= 0;
                },
                containsPoint: function (t) {
                    return t.distanceToSquared(this.center) <= this.radius * this.radius;
                },
                distanceToPoint: function (t) {
                    return t.distanceTo(this.center) - this.radius;
                },
                intersectsSphere: function (t) {
                    var e = this.radius + t.radius;
                    return t.center.distanceToSquared(this.center) <= e * e;
                },
                intersectsBox: function (t) {
                    return t.intersectsSphere(this);
                },
                intersectsPlane: function (t) {
                    return Math.abs(t.distanceToPoint(this.center)) <= this.radius;
                },
                clampPoint: function (t, e) {
                    var n = this.center.distanceToSquared(t);
                    return (
                        void 0 === e && (console.warn("THREE.Sphere: .clampPoint() target is now required"), (e = new an())),
                        e.copy(t),
                        n > this.radius * this.radius && (e.sub(this.center).normalize(), e.multiplyScalar(this.radius).add(this.center)),
                        e
                    );
                },
                getBoundingBox: function (t) {
                    return void 0 === t && (console.warn("THREE.Sphere: .getBoundingBox() target is now required"), (t = new Xn())), t.set(this.center, this.center), t.expandByScalar(this.radius), t;
                },
                applyMatrix4: function (t) {
                    return this.center.applyMatrix4(t), (this.radius = this.radius * t.getMaxScaleOnAxis()), this;
                },
                translate: function (t) {
                    return this.center.add(t), this;
                },
                equals: function (t) {
                    return t.center.equals(this.center) && t.radius === this.radius;
                },
            });
            var Qn = new an(),
                Kn = new an(),
                $n = new an(),
                ti = new an(),
                ei = new an(),
                ni = new an(),
                ii = new an();
            function ri(t, e) {
                (this.origin = void 0 !== t ? t : new an()), (this.direction = void 0 !== e ? e : new an(0, 0, -1));
            }
            Object.assign(ri.prototype, {
                set: function (t, e) {
                    return this.origin.copy(t), this.direction.copy(e), this;
                },
                clone: function () {
                    return new this.constructor().copy(this);
                },
                copy: function (t) {
                    return this.origin.copy(t.origin), this.direction.copy(t.direction), this;
                },
                at: function (t, e) {
                    return void 0 === e && (console.warn("THREE.Ray: .at() target is now required"), (e = new an())), e.copy(this.direction).multiplyScalar(t).add(this.origin);
                },
                lookAt: function (t) {
                    return this.direction.copy(t).sub(this.origin).normalize(), this;
                },
                recast: function (t) {
                    return this.origin.copy(this.at(t, Qn)), this;
                },
                closestPointToPoint: function (t, e) {
                    void 0 === e && (console.warn("THREE.Ray: .closestPointToPoint() target is now required"), (e = new an())), e.subVectors(t, this.origin);
                    var n = e.dot(this.direction);
                    return n < 0 ? e.copy(this.origin) : e.copy(this.direction).multiplyScalar(n).add(this.origin);
                },
                distanceToPoint: function (t) {
                    return Math.sqrt(this.distanceSqToPoint(t));
                },
                distanceSqToPoint: function (t) {
                    var e = Qn.subVectors(t, this.origin).dot(this.direction);
                    return e < 0 ? this.origin.distanceToSquared(t) : (Qn.copy(this.direction).multiplyScalar(e).add(this.origin), Qn.distanceToSquared(t));
                },
                distanceSqToSegment: function (t, e, n, i) {
                    Kn.copy(t).add(e).multiplyScalar(0.5), $n.copy(e).sub(t).normalize(), ti.copy(this.origin).sub(Kn);
                    var r,
                        o,
                        a,
                        s,
                        c = 0.5 * t.distanceTo(e),
                        l = -this.direction.dot($n),
                        u = ti.dot(this.direction),
                        h = -ti.dot($n),
                        p = ti.lengthSq(),
                        d = Math.abs(1 - l * l);
                    if (d > 0)
                        if (((o = l * u - h), (s = c * d), (r = l * h - u) >= 0))
                            if (o >= -s)
                                if (o <= s) {
                                    var f = 1 / d;
                                    a = (r *= f) * (r + l * (o *= f) + 2 * u) + o * (l * r + o + 2 * h) + p;
                                } else (o = c), (a = -(r = Math.max(0, -(l * o + u))) * r + o * (o + 2 * h) + p);
                            else (o = -c), (a = -(r = Math.max(0, -(l * o + u))) * r + o * (o + 2 * h) + p);
                        else
                            o <= -s
                                ? (a = -(r = Math.max(0, -(-l * c + u))) * r + (o = r > 0 ? -c : Math.min(Math.max(-c, -h), c)) * (o + 2 * h) + p)
                                : o <= s
                                ? ((r = 0), (a = (o = Math.min(Math.max(-c, -h), c)) * (o + 2 * h) + p))
                                : (a = -(r = Math.max(0, -(l * c + u))) * r + (o = r > 0 ? c : Math.min(Math.max(-c, -h), c)) * (o + 2 * h) + p);
                    else (o = l > 0 ? -c : c), (a = -(r = Math.max(0, -(l * o + u))) * r + o * (o + 2 * h) + p);
                    return n && n.copy(this.direction).multiplyScalar(r).add(this.origin), i && i.copy($n).multiplyScalar(o).add(Kn), a;
                },
                intersectSphere: function (t, e) {
                    Qn.subVectors(t.center, this.origin);
                    var n = Qn.dot(this.direction),
                        i = Qn.dot(Qn) - n * n,
                        r = t.radius * t.radius;
                    if (i > r) return null;
                    var o = Math.sqrt(r - i),
                        a = n - o,
                        s = n + o;
                    return a < 0 && s < 0 ? null : a < 0 ? this.at(s, e) : this.at(a, e);
                },
                intersectsSphere: function (t) {
                    return this.distanceSqToPoint(t.center) <= t.radius * t.radius;
                },
                distanceToPlane: function (t) {
                    var e = t.normal.dot(this.direction);
                    if (0 === e) return 0 === t.distanceToPoint(this.origin) ? 0 : null;
                    var n = -(this.origin.dot(t.normal) + t.constant) / e;
                    return n >= 0 ? n : null;
                },
                intersectPlane: function (t, e) {
                    var n = this.distanceToPlane(t);
                    return null === n ? null : this.at(n, e);
                },
                intersectsPlane: function (t) {
                    var e = t.distanceToPoint(this.origin);
                    return 0 === e || t.normal.dot(this.direction) * e < 0;
                },
                intersectBox: function (t, e) {
                    var n,
                        i,
                        r,
                        o,
                        a,
                        s,
                        c = 1 / this.direction.x,
                        l = 1 / this.direction.y,
                        u = 1 / this.direction.z,
                        h = this.origin;
                    return (
                        c >= 0 ? ((n = (t.min.x - h.x) * c), (i = (t.max.x - h.x) * c)) : ((n = (t.max.x - h.x) * c), (i = (t.min.x - h.x) * c)),
                        l >= 0 ? ((r = (t.min.y - h.y) * l), (o = (t.max.y - h.y) * l)) : ((r = (t.max.y - h.y) * l), (o = (t.min.y - h.y) * l)),
                        n > o || r > i
                            ? null
                            : ((r > n || n != n) && (n = r),
                              (o < i || i != i) && (i = o),
                              u >= 0 ? ((a = (t.min.z - h.z) * u), (s = (t.max.z - h.z) * u)) : ((a = (t.max.z - h.z) * u), (s = (t.min.z - h.z) * u)),
                              n > s || a > i ? null : ((a > n || n != n) && (n = a), (s < i || i != i) && (i = s), i < 0 ? null : this.at(n >= 0 ? n : i, e)))
                    );
                },
                intersectsBox: function (t) {
                    return null !== this.intersectBox(t, Qn);
                },
                intersectTriangle: function (t, e, n, i, r) {
                    ei.subVectors(e, t), ni.subVectors(n, t), ii.crossVectors(ei, ni);
                    var o,
                        a = this.direction.dot(ii);
                    if (a > 0) {
                        if (i) return null;
                        o = 1;
                    } else {
                        if (!(a < 0)) return null;
                        (o = -1), (a = -a);
                    }
                    ti.subVectors(this.origin, t);
                    var s = o * this.direction.dot(ni.crossVectors(ti, ni));
                    if (s < 0) return null;
                    var c = o * this.direction.dot(ei.cross(ti));
                    if (c < 0) return null;
                    if (s + c > a) return null;
                    var l = -o * ti.dot(ii);
                    return l < 0 ? null : this.at(l / a, r);
                },
                applyMatrix4: function (t) {
                    return this.origin.applyMatrix4(t), this.direction.transformDirection(t), this;
                },
                equals: function (t) {
                    return t.origin.equals(this.origin) && t.direction.equals(this.direction);
                },
            });
            var oi = new an(),
                ai = new an(),
                si = new Ze();
            function ci(t, e) {
                (this.normal = void 0 !== t ? t : new an(1, 0, 0)), (this.constant = void 0 !== e ? e : 0);
            }
            Object.assign(ci.prototype, {
                isPlane: !0,
                set: function (t, e) {
                    return this.normal.copy(t), (this.constant = e), this;
                },
                setComponents: function (t, e, n, i) {
                    return this.normal.set(t, e, n), (this.constant = i), this;
                },
                setFromNormalAndCoplanarPoint: function (t, e) {
                    return this.normal.copy(t), (this.constant = -e.dot(this.normal)), this;
                },
                setFromCoplanarPoints: function (t, e, n) {
                    var i = oi.subVectors(n, e).cross(ai.subVectors(t, e)).normalize();
                    return this.setFromNormalAndCoplanarPoint(i, t), this;
                },
                clone: function () {
                    return new this.constructor().copy(this);
                },
                copy: function (t) {
                    return this.normal.copy(t.normal), (this.constant = t.constant), this;
                },
                normalize: function () {
                    var t = 1 / this.normal.length();
                    return this.normal.multiplyScalar(t), (this.constant *= t), this;
                },
                negate: function () {
                    return (this.constant *= -1), this.normal.negate(), this;
                },
                distanceToPoint: function (t) {
                    return this.normal.dot(t) + this.constant;
                },
                distanceToSphere: function (t) {
                    return this.distanceToPoint(t.center) - t.radius;
                },
                projectPoint: function (t, e) {
                    return void 0 === e && (console.warn("THREE.Plane: .projectPoint() target is now required"), (e = new an())), e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t);
                },
                intersectLine: function (t, e) {
                    void 0 === e && (console.warn("THREE.Plane: .intersectLine() target is now required"), (e = new an()));
                    var n = t.delta(oi),
                        i = this.normal.dot(n);
                    if (0 === i) return 0 === this.distanceToPoint(t.start) ? e.copy(t.start) : void 0;
                    var r = -(t.start.dot(this.normal) + this.constant) / i;
                    return r < 0 || r > 1 ? void 0 : e.copy(n).multiplyScalar(r).add(t.start);
                },
                intersectsLine: function (t) {
                    var e = this.distanceToPoint(t.start),
                        n = this.distanceToPoint(t.end);
                    return (e < 0 && n > 0) || (n < 0 && e > 0);
                },
                intersectsBox: function (t) {
                    return t.intersectsPlane(this);
                },
                intersectsSphere: function (t) {
                    return t.intersectsPlane(this);
                },
                coplanarPoint: function (t) {
                    return void 0 === t && (console.warn("THREE.Plane: .coplanarPoint() target is now required"), (t = new an())), t.copy(this.normal).multiplyScalar(-this.constant);
                },
                applyMatrix4: function (t, e) {
                    var n = e || si.getNormalMatrix(t),
                        i = this.coplanarPoint(oi).applyMatrix4(t),
                        r = this.normal.applyMatrix3(n).normalize();
                    return (this.constant = -i.dot(r)), this;
                },
                translate: function (t) {
                    return (this.constant -= t.dot(this.normal)), this;
                },
                equals: function (t) {
                    return t.normal.equals(this.normal) && t.constant === this.constant;
                },
            });
            var li = new an(),
                ui = new an(),
                hi = new an(),
                pi = new an(),
                di = new an(),
                fi = new an(),
                mi = new an(),
                vi = new an(),
                gi = new an(),
                yi = new an();
            function xi(t, e, n) {
                (this.a = void 0 !== t ? t : new an()), (this.b = void 0 !== e ? e : new an()), (this.c = void 0 !== n ? n : new an());
            }
            Object.assign(xi, {
                getNormal: function (t, e, n, i) {
                    void 0 === i && (console.warn("THREE.Triangle: .getNormal() target is now required"), (i = new an())), i.subVectors(n, e), li.subVectors(t, e), i.cross(li);
                    var r = i.lengthSq();
                    return r > 0 ? i.multiplyScalar(1 / Math.sqrt(r)) : i.set(0, 0, 0);
                },
                getBarycoord: function (t, e, n, i, r) {
                    li.subVectors(i, e), ui.subVectors(n, e), hi.subVectors(t, e);
                    var o = li.dot(li),
                        a = li.dot(ui),
                        s = li.dot(hi),
                        c = ui.dot(ui),
                        l = ui.dot(hi),
                        u = o * c - a * a;
                    if ((void 0 === r && (console.warn("THREE.Triangle: .getBarycoord() target is now required"), (r = new an())), 0 === u)) return r.set(-2, -1, -1);
                    var h = 1 / u,
                        p = (c * s - a * l) * h,
                        d = (o * l - a * s) * h;
                    return r.set(1 - p - d, d, p);
                },
                containsPoint: function (t, e, n, i) {
                    return xi.getBarycoord(t, e, n, i, pi), pi.x >= 0 && pi.y >= 0 && pi.x + pi.y <= 1;
                },
                getUV: function (t, e, n, i, r, o, a, s) {
                    return this.getBarycoord(t, e, n, i, pi), s.set(0, 0), s.addScaledVector(r, pi.x), s.addScaledVector(o, pi.y), s.addScaledVector(a, pi.z), s;
                },
                isFrontFacing: function (t, e, n, i) {
                    return li.subVectors(n, e), ui.subVectors(t, e), li.cross(ui).dot(i) < 0;
                },
            }),
                Object.assign(xi.prototype, {
                    set: function (t, e, n) {
                        return this.a.copy(t), this.b.copy(e), this.c.copy(n), this;
                    },
                    setFromPointsAndIndices: function (t, e, n, i) {
                        return this.a.copy(t[e]), this.b.copy(t[n]), this.c.copy(t[i]), this;
                    },
                    clone: function () {
                        return new this.constructor().copy(this);
                    },
                    copy: function (t) {
                        return this.a.copy(t.a), this.b.copy(t.b), this.c.copy(t.c), this;
                    },
                    getArea: function () {
                        return li.subVectors(this.c, this.b), ui.subVectors(this.a, this.b), 0.5 * li.cross(ui).length();
                    },
                    getMidpoint: function (t) {
                        return (
                            void 0 === t && (console.warn("THREE.Triangle: .getMidpoint() target is now required"), (t = new an())),
                            t
                                .addVectors(this.a, this.b)
                                .add(this.c)
                                .multiplyScalar(1 / 3)
                        );
                    },
                    getNormal: function (t) {
                        return xi.getNormal(this.a, this.b, this.c, t);
                    },
                    getPlane: function (t) {
                        return void 0 === t && (console.warn("THREE.Triangle: .getPlane() target is now required"), (t = new ci())), t.setFromCoplanarPoints(this.a, this.b, this.c);
                    },
                    getBarycoord: function (t, e) {
                        return xi.getBarycoord(t, this.a, this.b, this.c, e);
                    },
                    getUV: function (t, e, n, i, r) {
                        return xi.getUV(t, this.a, this.b, this.c, e, n, i, r);
                    },
                    containsPoint: function (t) {
                        return xi.containsPoint(t, this.a, this.b, this.c);
                    },
                    isFrontFacing: function (t) {
                        return xi.isFrontFacing(this.a, this.b, this.c, t);
                    },
                    intersectsBox: function (t) {
                        return t.intersectsTriangle(this);
                    },
                    closestPointToPoint: function (t, e) {
                        void 0 === e && (console.warn("THREE.Triangle: .closestPointToPoint() target is now required"), (e = new an()));
                        var n,
                            i,
                            r = this.a,
                            o = this.b,
                            a = this.c;
                        di.subVectors(o, r), fi.subVectors(a, r), vi.subVectors(t, r);
                        var s = di.dot(vi),
                            c = fi.dot(vi);
                        if (s <= 0 && c <= 0) return e.copy(r);
                        gi.subVectors(t, o);
                        var l = di.dot(gi),
                            u = fi.dot(gi);
                        if (l >= 0 && u <= l) return e.copy(o);
                        var h = s * u - l * c;
                        if (h <= 0 && s >= 0 && l <= 0) return (n = s / (s - l)), e.copy(r).addScaledVector(di, n);
                        yi.subVectors(t, a);
                        var p = di.dot(yi),
                            d = fi.dot(yi);
                        if (d >= 0 && p <= d) return e.copy(a);
                        var f = p * c - s * d;
                        if (f <= 0 && c >= 0 && d <= 0) return (i = c / (c - d)), e.copy(r).addScaledVector(fi, i);
                        var m = l * d - p * u;
                        if (m <= 0 && u - l >= 0 && p - d >= 0) return mi.subVectors(a, o), (i = (u - l) / (u - l + (p - d))), e.copy(o).addScaledVector(mi, i);
                        var v = 1 / (m + f + h);
                        return (n = f * v), (i = h * v), e.copy(r).addScaledVector(di, n).addScaledVector(fi, i);
                    },
                    equals: function (t) {
                        return t.a.equals(this.a) && t.b.equals(this.b) && t.c.equals(this.c);
                    },
                });
            var _i = {
                    aliceblue: 15792383,
                    antiquewhite: 16444375,
                    aqua: 65535,
                    aquamarine: 8388564,
                    azure: 15794175,
                    beige: 16119260,
                    bisque: 16770244,
                    black: 0,
                    blanchedalmond: 16772045,
                    blue: 255,
                    blueviolet: 9055202,
                    brown: 10824234,
                    burlywood: 14596231,
                    cadetblue: 6266528,
                    chartreuse: 8388352,
                    chocolate: 13789470,
                    coral: 16744272,
                    cornflowerblue: 6591981,
                    cornsilk: 16775388,
                    crimson: 14423100,
                    cyan: 65535,
                    darkblue: 139,
                    darkcyan: 35723,
                    darkgoldenrod: 12092939,
                    darkgray: 11119017,
                    darkgreen: 25600,
                    darkgrey: 11119017,
                    darkkhaki: 12433259,
                    darkmagenta: 9109643,
                    darkolivegreen: 5597999,
                    darkorange: 16747520,
                    darkorchid: 10040012,
                    darkred: 9109504,
                    darksalmon: 15308410,
                    darkseagreen: 9419919,
                    darkslateblue: 4734347,
                    darkslategray: 3100495,
                    darkslategrey: 3100495,
                    darkturquoise: 52945,
                    darkviolet: 9699539,
                    deeppink: 16716947,
                    deepskyblue: 49151,
                    dimgray: 6908265,
                    dimgrey: 6908265,
                    dodgerblue: 2003199,
                    firebrick: 11674146,
                    floralwhite: 16775920,
                    forestgreen: 2263842,
                    fuchsia: 16711935,
                    gainsboro: 14474460,
                    ghostwhite: 16316671,
                    gold: 16766720,
                    goldenrod: 14329120,
                    gray: 8421504,
                    green: 32768,
                    greenyellow: 11403055,
                    grey: 8421504,
                    honeydew: 15794160,
                    hotpink: 16738740,
                    indianred: 13458524,
                    indigo: 4915330,
                    ivory: 16777200,
                    khaki: 15787660,
                    lavender: 15132410,
                    lavenderblush: 16773365,
                    lawngreen: 8190976,
                    lemonchiffon: 16775885,
                    lightblue: 11393254,
                    lightcoral: 15761536,
                    lightcyan: 14745599,
                    lightgoldenrodyellow: 16448210,
                    lightgray: 13882323,
                    lightgreen: 9498256,
                    lightgrey: 13882323,
                    lightpink: 16758465,
                    lightsalmon: 16752762,
                    lightseagreen: 2142890,
                    lightskyblue: 8900346,
                    lightslategray: 7833753,
                    lightslategrey: 7833753,
                    lightsteelblue: 11584734,
                    lightyellow: 16777184,
                    lime: 65280,
                    limegreen: 3329330,
                    linen: 16445670,
                    magenta: 16711935,
                    maroon: 8388608,
                    mediumaquamarine: 6737322,
                    mediumblue: 205,
                    mediumorchid: 12211667,
                    mediumpurple: 9662683,
                    mediumseagreen: 3978097,
                    mediumslateblue: 8087790,
                    mediumspringgreen: 64154,
                    mediumturquoise: 4772300,
                    mediumvioletred: 13047173,
                    midnightblue: 1644912,
                    mintcream: 16121850,
                    mistyrose: 16770273,
                    moccasin: 16770229,
                    navajowhite: 16768685,
                    navy: 128,
                    oldlace: 16643558,
                    olive: 8421376,
                    olivedrab: 7048739,
                    orange: 16753920,
                    orangered: 16729344,
                    orchid: 14315734,
                    palegoldenrod: 15657130,
                    palegreen: 10025880,
                    paleturquoise: 11529966,
                    palevioletred: 14381203,
                    papayawhip: 16773077,
                    peachpuff: 16767673,
                    peru: 13468991,
                    pink: 16761035,
                    plum: 14524637,
                    powderblue: 11591910,
                    purple: 8388736,
                    rebeccapurple: 6697881,
                    red: 16711680,
                    rosybrown: 12357519,
                    royalblue: 4286945,
                    saddlebrown: 9127187,
                    salmon: 16416882,
                    sandybrown: 16032864,
                    seagreen: 3050327,
                    seashell: 16774638,
                    sienna: 10506797,
                    silver: 12632256,
                    skyblue: 8900331,
                    slateblue: 6970061,
                    slategray: 7372944,
                    slategrey: 7372944,
                    snow: 16775930,
                    springgreen: 65407,
                    steelblue: 4620980,
                    tan: 13808780,
                    teal: 32896,
                    thistle: 14204888,
                    tomato: 16737095,
                    turquoise: 4251856,
                    violet: 15631086,
                    wheat: 16113331,
                    white: 16777215,
                    whitesmoke: 16119285,
                    yellow: 16776960,
                    yellowgreen: 10145074,
                },
                bi = { h: 0, s: 0, l: 0 },
                wi = { h: 0, s: 0, l: 0 };
            function Mi(t, e, n) {
                return void 0 === e && void 0 === n ? this.set(t) : this.setRGB(t, e, n);
            }
            function Si(t, e, n) {
                return n < 0 && (n += 1), n > 1 && (n -= 1), n < 1 / 6 ? t + 6 * (e - t) * n : n < 0.5 ? e : n < 2 / 3 ? t + 6 * (e - t) * (2 / 3 - n) : t;
            }
            function Ti(t) {
                return t < 0.04045 ? 0.0773993808 * t : Math.pow(0.9478672986 * t + 0.0521327014, 2.4);
            }
            function Ei(t) {
                return t < 0.0031308 ? 12.92 * t : 1.055 * Math.pow(t, 0.41666) - 0.055;
            }
            function Ai(t, e, n, i, r, o) {
                (this.a = t),
                    (this.b = e),
                    (this.c = n),
                    (this.normal = i && i.isVector3 ? i : new an()),
                    (this.vertexNormals = Array.isArray(i) ? i : []),
                    (this.color = r && r.isColor ? r : new Mi()),
                    (this.vertexColors = Array.isArray(r) ? r : []),
                    (this.materialIndex = void 0 !== o ? o : 0);
            }
            Object.assign(Mi.prototype, {
                isColor: !0,
                r: 1,
                g: 1,
                b: 1,
                set: function (t) {
                    return t && t.isColor ? this.copy(t) : "number" == typeof t ? this.setHex(t) : "string" == typeof t && this.setStyle(t), this;
                },
                setScalar: function (t) {
                    return (this.r = t), (this.g = t), (this.b = t), this;
                },
                setHex: function (t) {
                    return (t = Math.floor(t)), (this.r = ((t >> 16) & 255) / 255), (this.g = ((t >> 8) & 255) / 255), (this.b = (255 & t) / 255), this;
                },
                setRGB: function (t, e, n) {
                    return (this.r = t), (this.g = e), (this.b = n), this;
                },
                setHSL: function (t, e, n) {
                    if (((t = Xe.euclideanModulo(t, 1)), (e = Xe.clamp(e, 0, 1)), (n = Xe.clamp(n, 0, 1)), 0 === e)) this.r = this.g = this.b = n;
                    else {
                        var i = n <= 0.5 ? n * (1 + e) : n + e - n * e,
                            r = 2 * n - i;
                        (this.r = Si(r, i, t + 1 / 3)), (this.g = Si(r, i, t)), (this.b = Si(r, i, t - 1 / 3));
                    }
                    return this;
                },
                setStyle: function (t) {
                    function e(e) {
                        void 0 !== e && parseFloat(e) < 1 && console.warn("THREE.Color: Alpha component of " + t + " will be ignored.");
                    }
                    var n;
                    if ((n = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(t))) {
                        var i,
                            r = n[1],
                            o = n[2];
                        switch (r) {
                            case "rgb":
                            case "rgba":
                                if ((i = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(o)))
                                    return (this.r = Math.min(255, parseInt(i[1], 10)) / 255), (this.g = Math.min(255, parseInt(i[2], 10)) / 255), (this.b = Math.min(255, parseInt(i[3], 10)) / 255), e(i[5]), this;
                                if ((i = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(o)))
                                    return (this.r = Math.min(100, parseInt(i[1], 10)) / 100), (this.g = Math.min(100, parseInt(i[2], 10)) / 100), (this.b = Math.min(100, parseInt(i[3], 10)) / 100), e(i[5]), this;
                                break;
                            case "hsl":
                            case "hsla":
                                if ((i = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(o))) {
                                    var a = parseFloat(i[1]) / 360,
                                        s = parseInt(i[2], 10) / 100,
                                        c = parseInt(i[3], 10) / 100;
                                    return e(i[5]), this.setHSL(a, s, c);
                                }
                        }
                    } else if ((n = /^\#([A-Fa-f0-9]+)$/.exec(t))) {
                        var l = n[1],
                            u = l.length;
                        if (3 === u) return (this.r = parseInt(l.charAt(0) + l.charAt(0), 16) / 255), (this.g = parseInt(l.charAt(1) + l.charAt(1), 16) / 255), (this.b = parseInt(l.charAt(2) + l.charAt(2), 16) / 255), this;
                        if (6 === u) return (this.r = parseInt(l.charAt(0) + l.charAt(1), 16) / 255), (this.g = parseInt(l.charAt(2) + l.charAt(3), 16) / 255), (this.b = parseInt(l.charAt(4) + l.charAt(5), 16) / 255), this;
                    }
                    return t && t.length > 0 ? this.setColorName(t) : this;
                },
                setColorName: function (t) {
                    var e = _i[t];
                    return void 0 !== e ? this.setHex(e) : console.warn("THREE.Color: Unknown color " + t), this;
                },
                clone: function () {
                    return new this.constructor(this.r, this.g, this.b);
                },
                copy: function (t) {
                    return (this.r = t.r), (this.g = t.g), (this.b = t.b), this;
                },
                copyGammaToLinear: function (t, e) {
                    return void 0 === e && (e = 2), (this.r = Math.pow(t.r, e)), (this.g = Math.pow(t.g, e)), (this.b = Math.pow(t.b, e)), this;
                },
                copyLinearToGamma: function (t, e) {
                    void 0 === e && (e = 2);
                    var n = e > 0 ? 1 / e : 1;
                    return (this.r = Math.pow(t.r, n)), (this.g = Math.pow(t.g, n)), (this.b = Math.pow(t.b, n)), this;
                },
                convertGammaToLinear: function (t) {
                    return this.copyGammaToLinear(this, t), this;
                },
                convertLinearToGamma: function (t) {
                    return this.copyLinearToGamma(this, t), this;
                },
                copySRGBToLinear: function (t) {
                    return (this.r = Ti(t.r)), (this.g = Ti(t.g)), (this.b = Ti(t.b)), this;
                },
                copyLinearToSRGB: function (t) {
                    return (this.r = Ei(t.r)), (this.g = Ei(t.g)), (this.b = Ei(t.b)), this;
                },
                convertSRGBToLinear: function () {
                    return this.copySRGBToLinear(this), this;
                },
                convertLinearToSRGB: function () {
                    return this.copyLinearToSRGB(this), this;
                },
                getHex: function () {
                    return ((255 * this.r) << 16) ^ ((255 * this.g) << 8) ^ ((255 * this.b) << 0);
                },
                getHexString: function () {
                    return ("000000" + this.getHex().toString(16)).slice(-6);
                },
                getHSL: function (t) {
                    void 0 === t && (console.warn("THREE.Color: .getHSL() target is now required"), (t = { h: 0, s: 0, l: 0 }));
                    var e,
                        n,
                        i = this.r,
                        r = this.g,
                        o = this.b,
                        a = Math.max(i, r, o),
                        s = Math.min(i, r, o),
                        c = (s + a) / 2;
                    if (s === a) (e = 0), (n = 0);
                    else {
                        var l = a - s;
                        switch (((n = c <= 0.5 ? l / (a + s) : l / (2 - a - s)), a)) {
                            case i:
                                e = (r - o) / l + (r < o ? 6 : 0);
                                break;
                            case r:
                                e = (o - i) / l + 2;
                                break;
                            case o:
                                e = (i - r) / l + 4;
                        }
                        e /= 6;
                    }
                    return (t.h = e), (t.s = n), (t.l = c), t;
                },
                getStyle: function () {
                    return "rgb(" + ((255 * this.r) | 0) + "," + ((255 * this.g) | 0) + "," + ((255 * this.b) | 0) + ")";
                },
                offsetHSL: function (t, e, n) {
                    return this.getHSL(bi), (bi.h += t), (bi.s += e), (bi.l += n), this.setHSL(bi.h, bi.s, bi.l), this;
                },
                add: function (t) {
                    return (this.r += t.r), (this.g += t.g), (this.b += t.b), this;
                },
                addColors: function (t, e) {
                    return (this.r = t.r + e.r), (this.g = t.g + e.g), (this.b = t.b + e.b), this;
                },
                addScalar: function (t) {
                    return (this.r += t), (this.g += t), (this.b += t), this;
                },
                sub: function (t) {
                    return (this.r = Math.max(0, this.r - t.r)), (this.g = Math.max(0, this.g - t.g)), (this.b = Math.max(0, this.b - t.b)), this;
                },
                multiply: function (t) {
                    return (this.r *= t.r), (this.g *= t.g), (this.b *= t.b), this;
                },
                multiplyScalar: function (t) {
                    return (this.r *= t), (this.g *= t), (this.b *= t), this;
                },
                lerp: function (t, e) {
                    return (this.r += (t.r - this.r) * e), (this.g += (t.g - this.g) * e), (this.b += (t.b - this.b) * e), this;
                },
                lerpHSL: function (t, e) {
                    this.getHSL(bi), t.getHSL(wi);
                    var n = Xe.lerp(bi.h, wi.h, e),
                        i = Xe.lerp(bi.s, wi.s, e),
                        r = Xe.lerp(bi.l, wi.l, e);
                    return this.setHSL(n, i, r), this;
                },
                equals: function (t) {
                    return t.r === this.r && t.g === this.g && t.b === this.b;
                },
                fromArray: function (t, e) {
                    return void 0 === e && (e = 0), (this.r = t[e]), (this.g = t[e + 1]), (this.b = t[e + 2]), this;
                },
                toArray: function (t, e) {
                    return void 0 === t && (t = []), void 0 === e && (e = 0), (t[e] = this.r), (t[e + 1] = this.g), (t[e + 2] = this.b), t;
                },
                toJSON: function () {
                    return this.getHex();
                },
            }),
                (Mi.NAMES = _i),
                Object.assign(Ai.prototype, {
                    clone: function () {
                        return new this.constructor().copy(this);
                    },
                    copy: function (t) {
                        (this.a = t.a), (this.b = t.b), (this.c = t.c), this.normal.copy(t.normal), this.color.copy(t.color), (this.materialIndex = t.materialIndex);
                        for (var e = 0, n = t.vertexNormals.length; e < n; e++) this.vertexNormals[e] = t.vertexNormals[e].clone();
                        for (e = 0, n = t.vertexColors.length; e < n; e++) this.vertexColors[e] = t.vertexColors[e].clone();
                        return this;
                    },
                });
            var Pi = 0;
            function Li() {
                Object.defineProperty(this, "id", { value: Pi++ }),
                    (this.uuid = Xe.generateUUID()),
                    (this.name = ""),
                    (this.type = "Material"),
                    (this.fog = !0),
                    (this.blending = d),
                    (this.side = l),
                    (this.flatShading = !1),
                    (this.vertexColors = !1),
                    (this.opacity = 1),
                    (this.transparent = !1),
                    (this.blendSrc = A),
                    (this.blendDst = P),
                    (this.blendEquation = y),
                    (this.blendSrcAlpha = null),
                    (this.blendDstAlpha = null),
                    (this.blendEquationAlpha = null),
                    (this.depthFunc = B),
                    (this.depthTest = !0),
                    (this.depthWrite = !0),
                    (this.stencilWriteMask = 255),
                    (this.stencilFunc = Ue),
                    (this.stencilRef = 0),
                    (this.stencilFuncMask = 255),
                    (this.stencilFail = Fe),
                    (this.stencilZFail = Fe),
                    (this.stencilZPass = Fe),
                    (this.stencilWrite = !1),
                    (this.clippingPlanes = null),
                    (this.clipIntersection = !1),
                    (this.clipShadows = !1),
                    (this.shadowSide = null),
                    (this.colorWrite = !0),
                    (this.precision = null),
                    (this.polygonOffset = !1),
                    (this.polygonOffsetFactor = 0),
                    (this.polygonOffsetUnits = 0),
                    (this.dithering = !1),
                    (this.alphaTest = 0),
                    (this.premultipliedAlpha = !1),
                    (this.visible = !0),
                    (this.toneMapped = !0),
                    (this.userData = {}),
                    (this.version = 0);
            }
            function Ci(t) {
                Li.call(this),
                    (this.type = "MeshBasicMaterial"),
                    (this.color = new Mi(16777215)),
                    (this.map = null),
                    (this.lightMap = null),
                    (this.lightMapIntensity = 1),
                    (this.aoMap = null),
                    (this.aoMapIntensity = 1),
                    (this.specularMap = null),
                    (this.alphaMap = null),
                    (this.envMap = null),
                    (this.combine = G),
                    (this.reflectivity = 1),
                    (this.refractionRatio = 0.98),
                    (this.wireframe = !1),
                    (this.wireframeLinewidth = 1),
                    (this.wireframeLinecap = "round"),
                    (this.wireframeLinejoin = "round"),
                    (this.skinning = !1),
                    (this.morphTargets = !1),
                    this.setValues(t);
            }
            (Li.prototype = Object.assign(Object.create(He.prototype), {
                constructor: Li,
                isMaterial: !0,
                onBeforeCompile: function () {},
                setValues: function (t) {
                    if (void 0 !== t)
                        for (var e in t) {
                            var n = t[e];
                            if (void 0 !== n)
                                if ("shading" !== e) {
                                    var i = this[e];
                                    void 0 !== i ? (i && i.isColor ? i.set(n) : i && i.isVector3 && n && n.isVector3 ? i.copy(n) : (this[e] = n)) : console.warn("THREE." + this.type + ": '" + e + "' is not a property of this material.");
                                } else console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."), (this.flatShading = 1 === n);
                            else console.warn("THREE.Material: '" + e + "' parameter is undefined.");
                        }
                },
                toJSON: function (t) {
                    var e = void 0 === t || "string" == typeof t;
                    e && (t = { textures: {}, images: {} });
                    var n = { metadata: { version: 4.5, type: "Material", generator: "Material.toJSON" } };
                    function i(t) {
                        var e = [];
                        for (var n in t) {
                            var i = t[n];
                            delete i.metadata, e.push(i);
                        }
                        return e;
                    }
                    if (
                        ((n.uuid = this.uuid),
                        (n.type = this.type),
                        "" !== this.name && (n.name = this.name),
                        this.color && this.color.isColor && (n.color = this.color.getHex()),
                        void 0 !== this.roughness && (n.roughness = this.roughness),
                        void 0 !== this.metalness && (n.metalness = this.metalness),
                        this.sheen && this.sheen.isColor && (n.sheen = this.sheen.getHex()),
                        this.emissive && this.emissive.isColor && (n.emissive = this.emissive.getHex()),
                        this.emissiveIntensity && 1 !== this.emissiveIntensity && (n.emissiveIntensity = this.emissiveIntensity),
                        this.specular && this.specular.isColor && (n.specular = this.specular.getHex()),
                        void 0 !== this.shininess && (n.shininess = this.shininess),
                        void 0 !== this.clearcoat && (n.clearcoat = this.clearcoat),
                        void 0 !== this.clearcoatRoughness && (n.clearcoatRoughness = this.clearcoatRoughness),
                        this.clearcoatMap && this.clearcoatMap.isTexture && (n.clearcoatMap = this.clearcoatMap.toJSON(t).uuid),
                        this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture && (n.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(t).uuid),
                        this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && ((n.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(t).uuid), (n.clearcoatNormalScale = this.clearcoatNormalScale.toArray())),
                        this.map && this.map.isTexture && (n.map = this.map.toJSON(t).uuid),
                        this.matcap && this.matcap.isTexture && (n.matcap = this.matcap.toJSON(t).uuid),
                        this.alphaMap && this.alphaMap.isTexture && (n.alphaMap = this.alphaMap.toJSON(t).uuid),
                        this.lightMap && this.lightMap.isTexture && (n.lightMap = this.lightMap.toJSON(t).uuid),
                        this.aoMap && this.aoMap.isTexture && ((n.aoMap = this.aoMap.toJSON(t).uuid), (n.aoMapIntensity = this.aoMapIntensity)),
                        this.bumpMap && this.bumpMap.isTexture && ((n.bumpMap = this.bumpMap.toJSON(t).uuid), (n.bumpScale = this.bumpScale)),
                        this.normalMap && this.normalMap.isTexture && ((n.normalMap = this.normalMap.toJSON(t).uuid), (n.normalMapType = this.normalMapType), (n.normalScale = this.normalScale.toArray())),
                        this.displacementMap && this.displacementMap.isTexture && ((n.displacementMap = this.displacementMap.toJSON(t).uuid), (n.displacementScale = this.displacementScale), (n.displacementBias = this.displacementBias)),
                        this.roughnessMap && this.roughnessMap.isTexture && (n.roughnessMap = this.roughnessMap.toJSON(t).uuid),
                        this.metalnessMap && this.metalnessMap.isTexture && (n.metalnessMap = this.metalnessMap.toJSON(t).uuid),
                        this.emissiveMap && this.emissiveMap.isTexture && (n.emissiveMap = this.emissiveMap.toJSON(t).uuid),
                        this.specularMap && this.specularMap.isTexture && (n.specularMap = this.specularMap.toJSON(t).uuid),
                        this.envMap &&
                            this.envMap.isTexture &&
                            ((n.envMap = this.envMap.toJSON(t).uuid),
                            (n.reflectivity = this.reflectivity),
                            (n.refractionRatio = this.refractionRatio),
                            void 0 !== this.combine && (n.combine = this.combine),
                            void 0 !== this.envMapIntensity && (n.envMapIntensity = this.envMapIntensity)),
                        this.gradientMap && this.gradientMap.isTexture && (n.gradientMap = this.gradientMap.toJSON(t).uuid),
                        void 0 !== this.size && (n.size = this.size),
                        void 0 !== this.sizeAttenuation && (n.sizeAttenuation = this.sizeAttenuation),
                        this.blending !== d && (n.blending = this.blending),
                        !0 === this.flatShading && (n.flatShading = this.flatShading),
                        this.side !== l && (n.side = this.side),
                        this.vertexColors && (n.vertexColors = !0),
                        this.opacity < 1 && (n.opacity = this.opacity),
                        !0 === this.transparent && (n.transparent = this.transparent),
                        (n.depthFunc = this.depthFunc),
                        (n.depthTest = this.depthTest),
                        (n.depthWrite = this.depthWrite),
                        (n.stencilWrite = this.stencilWrite),
                        (n.stencilWriteMask = this.stencilWriteMask),
                        (n.stencilFunc = this.stencilFunc),
                        (n.stencilRef = this.stencilRef),
                        (n.stencilFuncMask = this.stencilFuncMask),
                        (n.stencilFail = this.stencilFail),
                        (n.stencilZFail = this.stencilZFail),
                        (n.stencilZPass = this.stencilZPass),
                        this.rotation && 0 !== this.rotation && (n.rotation = this.rotation),
                        !0 === this.polygonOffset && (n.polygonOffset = !0),
                        0 !== this.polygonOffsetFactor && (n.polygonOffsetFactor = this.polygonOffsetFactor),
                        0 !== this.polygonOffsetUnits && (n.polygonOffsetUnits = this.polygonOffsetUnits),
                        this.linewidth && 1 !== this.linewidth && (n.linewidth = this.linewidth),
                        void 0 !== this.dashSize && (n.dashSize = this.dashSize),
                        void 0 !== this.gapSize && (n.gapSize = this.gapSize),
                        void 0 !== this.scale && (n.scale = this.scale),
                        !0 === this.dithering && (n.dithering = !0),
                        this.alphaTest > 0 && (n.alphaTest = this.alphaTest),
                        !0 === this.premultipliedAlpha && (n.premultipliedAlpha = this.premultipliedAlpha),
                        !0 === this.wireframe && (n.wireframe = this.wireframe),
                        this.wireframeLinewidth > 1 && (n.wireframeLinewidth = this.wireframeLinewidth),
                        "round" !== this.wireframeLinecap && (n.wireframeLinecap = this.wireframeLinecap),
                        "round" !== this.wireframeLinejoin && (n.wireframeLinejoin = this.wireframeLinejoin),
                        !0 === this.morphTargets && (n.morphTargets = !0),
                        !0 === this.morphNormals && (n.morphNormals = !0),
                        !0 === this.skinning && (n.skinning = !0),
                        !1 === this.visible && (n.visible = !1),
                        !1 === this.toneMapped && (n.toneMapped = !1),
                        "{}" !== JSON.stringify(this.userData) && (n.userData = this.userData),
                        e)
                    ) {
                        var r = i(t.textures),
                            o = i(t.images);
                        r.length > 0 && (n.textures = r), o.length > 0 && (n.images = o);
                    }
                    return n;
                },
                clone: function () {
                    return new this.constructor().copy(this);
                },
                copy: function (t) {
                    (this.name = t.name),
                        (this.fog = t.fog),
                        (this.blending = t.blending),
                        (this.side = t.side),
                        (this.flatShading = t.flatShading),
                        (this.vertexColors = t.vertexColors),
                        (this.opacity = t.opacity),
                        (this.transparent = t.transparent),
                        (this.blendSrc = t.blendSrc),
                        (this.blendDst = t.blendDst),
                        (this.blendEquation = t.blendEquation),
                        (this.blendSrcAlpha = t.blendSrcAlpha),
                        (this.blendDstAlpha = t.blendDstAlpha),
                        (this.blendEquationAlpha = t.blendEquationAlpha),
                        (this.depthFunc = t.depthFunc),
                        (this.depthTest = t.depthTest),
                        (this.depthWrite = t.depthWrite),
                        (this.stencilWriteMask = t.stencilWriteMask),
                        (this.stencilFunc = t.stencilFunc),
                        (this.stencilRef = t.stencilRef),
                        (this.stencilFuncMask = t.stencilFuncMask),
                        (this.stencilFail = t.stencilFail),
                        (this.stencilZFail = t.stencilZFail),
                        (this.stencilZPass = t.stencilZPass),
                        (this.stencilWrite = t.stencilWrite);
                    var e = t.clippingPlanes,
                        n = null;
                    if (null !== e) {
                        var i = e.length;
                        n = new Array(i);
                        for (var r = 0; r !== i; ++r) n[r] = e[r].clone();
                    }
                    return (
                        (this.clippingPlanes = n),
                        (this.clipIntersection = t.clipIntersection),
                        (this.clipShadows = t.clipShadows),
                        (this.shadowSide = t.shadowSide),
                        (this.colorWrite = t.colorWrite),
                        (this.precision = t.precision),
                        (this.polygonOffset = t.polygonOffset),
                        (this.polygonOffsetFactor = t.polygonOffsetFactor),
                        (this.polygonOffsetUnits = t.polygonOffsetUnits),
                        (this.dithering = t.dithering),
                        (this.alphaTest = t.alphaTest),
                        (this.premultipliedAlpha = t.premultipliedAlpha),
                        (this.visible = t.visible),
                        (this.toneMapped = t.toneMapped),
                        (this.userData = JSON.parse(JSON.stringify(t.userData))),
                        this
                    );
                },
                dispose: function () {
                    this.dispatchEvent({ type: "dispose" });
                },
            })),
                Object.defineProperty(Li.prototype, "needsUpdate", {
                    set: function (t) {
                        !0 === t && this.version++;
                    },
                }),
                (Ci.prototype = Object.create(Li.prototype)),
                (Ci.prototype.constructor = Ci),
                (Ci.prototype.isMeshBasicMaterial = !0),
                (Ci.prototype.copy = function (t) {
                    return (
                        Li.prototype.copy.call(this, t),
                        this.color.copy(t.color),
                        (this.map = t.map),
                        (this.lightMap = t.lightMap),
                        (this.lightMapIntensity = t.lightMapIntensity),
                        (this.aoMap = t.aoMap),
                        (this.aoMapIntensity = t.aoMapIntensity),
                        (this.specularMap = t.specularMap),
                        (this.alphaMap = t.alphaMap),
                        (this.envMap = t.envMap),
                        (this.combine = t.combine),
                        (this.reflectivity = t.reflectivity),
                        (this.refractionRatio = t.refractionRatio),
                        (this.wireframe = t.wireframe),
                        (this.wireframeLinewidth = t.wireframeLinewidth),
                        (this.wireframeLinecap = t.wireframeLinecap),
                        (this.wireframeLinejoin = t.wireframeLinejoin),
                        (this.skinning = t.skinning),
                        (this.morphTargets = t.morphTargets),
                        this
                    );
                });
            var Ri = new an();
            function Oi(t, e, n) {
                if (Array.isArray(t)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
                (this.name = ""), (this.array = t), (this.itemSize = e), (this.count = void 0 !== t ? t.length / e : 0), (this.normalized = !0 === n), (this.usage = je), (this.updateRange = { offset: 0, count: -1 }), (this.version = 0);
            }
            function Di(t, e, n) {
                Oi.call(this, new Int8Array(t), e, n);
            }
            function Ii(t, e, n) {
                Oi.call(this, new Uint8Array(t), e, n);
            }
            function Ni(t, e, n) {
                Oi.call(this, new Uint8ClampedArray(t), e, n);
            }
            function ki(t, e, n) {
                Oi.call(this, new Int16Array(t), e, n);
            }
            function Bi(t, e, n) {
                Oi.call(this, new Uint16Array(t), e, n);
            }
            function zi(t, e, n) {
                Oi.call(this, new Int32Array(t), e, n);
            }
            function Fi(t, e, n) {
                Oi.call(this, new Uint32Array(t), e, n);
            }
            function Ui(t, e, n) {
                Oi.call(this, new Float32Array(t), e, n);
            }
            function ji(t, e, n) {
                Oi.call(this, new Float64Array(t), e, n);
            }
            function Gi() {
                (this.vertices = []),
                    (this.normals = []),
                    (this.colors = []),
                    (this.uvs = []),
                    (this.uvs2 = []),
                    (this.groups = []),
                    (this.morphTargets = {}),
                    (this.skinWeights = []),
                    (this.skinIndices = []),
                    (this.boundingBox = null),
                    (this.boundingSphere = null),
                    (this.verticesNeedUpdate = !1),
                    (this.normalsNeedUpdate = !1),
                    (this.colorsNeedUpdate = !1),
                    (this.uvsNeedUpdate = !1),
                    (this.groupsNeedUpdate = !1);
            }
            function Hi(t) {
                if (0 === t.length) return -1 / 0;
                for (var e = t[0], n = 1, i = t.length; n < i; ++n) t[n] > e && (e = t[n]);
                return e;
            }
            Object.defineProperty(Oi.prototype, "needsUpdate", {
                set: function (t) {
                    !0 === t && this.version++;
                },
            }),
                Object.assign(Oi.prototype, {
                    isBufferAttribute: !0,
                    onUploadCallback: function () {},
                    setUsage: function (t) {
                        return (this.usage = t), this;
                    },
                    copy: function (t) {
                        return (this.name = t.name), (this.array = new t.array.constructor(t.array)), (this.itemSize = t.itemSize), (this.count = t.count), (this.normalized = t.normalized), (this.usage = t.usage), this;
                    },
                    copyAt: function (t, e, n) {
                        (t *= this.itemSize), (n *= e.itemSize);
                        for (var i = 0, r = this.itemSize; i < r; i++) this.array[t + i] = e.array[n + i];
                        return this;
                    },
                    copyArray: function (t) {
                        return this.array.set(t), this;
                    },
                    copyColorsArray: function (t) {
                        for (var e = this.array, n = 0, i = 0, r = t.length; i < r; i++) {
                            var o = t[i];
                            void 0 === o && (console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", i), (o = new Mi())), (e[n++] = o.r), (e[n++] = o.g), (e[n++] = o.b);
                        }
                        return this;
                    },
                    copyVector2sArray: function (t) {
                        for (var e = this.array, n = 0, i = 0, r = t.length; i < r; i++) {
                            var o = t[i];
                            void 0 === o && (console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", i), (o = new Ye())), (e[n++] = o.x), (e[n++] = o.y);
                        }
                        return this;
                    },
                    copyVector3sArray: function (t) {
                        for (var e = this.array, n = 0, i = 0, r = t.length; i < r; i++) {
                            var o = t[i];
                            void 0 === o && (console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", i), (o = new an())), (e[n++] = o.x), (e[n++] = o.y), (e[n++] = o.z);
                        }
                        return this;
                    },
                    copyVector4sArray: function (t) {
                        for (var e = this.array, n = 0, i = 0, r = t.length; i < r; i++) {
                            var o = t[i];
                            void 0 === o && (console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", i), (o = new $e())), (e[n++] = o.x), (e[n++] = o.y), (e[n++] = o.z), (e[n++] = o.w);
                        }
                        return this;
                    },
                    applyMatrix3: function (t) {
                        for (var e = 0, n = this.count; e < n; e++) (Ri.x = this.getX(e)), (Ri.y = this.getY(e)), (Ri.z = this.getZ(e)), Ri.applyMatrix3(t), this.setXYZ(e, Ri.x, Ri.y, Ri.z);
                        return this;
                    },
                    applyMatrix4: function (t) {
                        for (var e = 0, n = this.count; e < n; e++) (Ri.x = this.getX(e)), (Ri.y = this.getY(e)), (Ri.z = this.getZ(e)), Ri.applyMatrix4(t), this.setXYZ(e, Ri.x, Ri.y, Ri.z);
                        return this;
                    },
                    applyNormalMatrix: function (t) {
                        for (var e = 0, n = this.count; e < n; e++) (Ri.x = this.getX(e)), (Ri.y = this.getY(e)), (Ri.z = this.getZ(e)), Ri.applyNormalMatrix(t), this.setXYZ(e, Ri.x, Ri.y, Ri.z);
                        return this;
                    },
                    transformDirection: function (t) {
                        for (var e = 0, n = this.count; e < n; e++) (Ri.x = this.getX(e)), (Ri.y = this.getY(e)), (Ri.z = this.getZ(e)), Ri.transformDirection(t), this.setXYZ(e, Ri.x, Ri.y, Ri.z);
                        return this;
                    },
                    set: function (t, e) {
                        return void 0 === e && (e = 0), this.array.set(t, e), this;
                    },
                    getX: function (t) {
                        return this.array[t * this.itemSize];
                    },
                    setX: function (t, e) {
                        return (this.array[t * this.itemSize] = e), this;
                    },
                    getY: function (t) {
                        return this.array[t * this.itemSize + 1];
                    },
                    setY: function (t, e) {
                        return (this.array[t * this.itemSize + 1] = e), this;
                    },
                    getZ: function (t) {
                        return this.array[t * this.itemSize + 2];
                    },
                    setZ: function (t, e) {
                        return (this.array[t * this.itemSize + 2] = e), this;
                    },
                    getW: function (t) {
                        return this.array[t * this.itemSize + 3];
                    },
                    setW: function (t, e) {
                        return (this.array[t * this.itemSize + 3] = e), this;
                    },
                    setXY: function (t, e, n) {
                        return (t *= this.itemSize), (this.array[t + 0] = e), (this.array[t + 1] = n), this;
                    },
                    setXYZ: function (t, e, n, i) {
                        return (t *= this.itemSize), (this.array[t + 0] = e), (this.array[t + 1] = n), (this.array[t + 2] = i), this;
                    },
                    setXYZW: function (t, e, n, i, r) {
                        return (t *= this.itemSize), (this.array[t + 0] = e), (this.array[t + 1] = n), (this.array[t + 2] = i), (this.array[t + 3] = r), this;
                    },
                    onUpload: function (t) {
                        return (this.onUploadCallback = t), this;
                    },
                    clone: function () {
                        return new this.constructor(this.array, this.itemSize).copy(this);
                    },
                    toJSON: function () {
                        return { itemSize: this.itemSize, type: this.array.constructor.name, array: Array.prototype.slice.call(this.array), normalized: this.normalized };
                    },
                }),
                (Di.prototype = Object.create(Oi.prototype)),
                (Di.prototype.constructor = Di),
                (Ii.prototype = Object.create(Oi.prototype)),
                (Ii.prototype.constructor = Ii),
                (Ni.prototype = Object.create(Oi.prototype)),
                (Ni.prototype.constructor = Ni),
                (ki.prototype = Object.create(Oi.prototype)),
                (ki.prototype.constructor = ki),
                (Bi.prototype = Object.create(Oi.prototype)),
                (Bi.prototype.constructor = Bi),
                (zi.prototype = Object.create(Oi.prototype)),
                (zi.prototype.constructor = zi),
                (Fi.prototype = Object.create(Oi.prototype)),
                (Fi.prototype.constructor = Fi),
                (Ui.prototype = Object.create(Oi.prototype)),
                (Ui.prototype.constructor = Ui),
                (ji.prototype = Object.create(Oi.prototype)),
                (ji.prototype.constructor = ji),
                Object.assign(Gi.prototype, {
                    computeGroups: function (t) {
                        for (var e, n = [], i = void 0, r = t.faces, o = 0; o < r.length; o++) {
                            var a = r[o];
                            a.materialIndex !== i && ((i = a.materialIndex), void 0 !== e && ((e.count = 3 * o - e.start), n.push(e)), (e = { start: 3 * o, materialIndex: i }));
                        }
                        void 0 !== e && ((e.count = 3 * o - e.start), n.push(e)), (this.groups = n);
                    },
                    fromGeometry: function (t) {
                        var e,
                            n = t.faces,
                            i = t.vertices,
                            r = t.faceVertexUvs,
                            o = r[0] && r[0].length > 0,
                            a = r[1] && r[1].length > 0,
                            s = t.morphTargets,
                            c = s.length;
                        if (c > 0) {
                            e = [];
                            for (var l = 0; l < c; l++) e[l] = { name: s[l].name, data: [] };
                            this.morphTargets.position = e;
                        }
                        var u,
                            h = t.morphNormals,
                            p = h.length;
                        if (p > 0) {
                            u = [];
                            for (l = 0; l < p; l++) u[l] = { name: h[l].name, data: [] };
                            this.morphTargets.normal = u;
                        }
                        var d = t.skinIndices,
                            f = t.skinWeights,
                            m = d.length === i.length,
                            v = f.length === i.length;
                        i.length > 0 && 0 === n.length && console.error("THREE.DirectGeometry: Faceless geometries are not supported.");
                        for (l = 0; l < n.length; l++) {
                            var g = n[l];
                            this.vertices.push(i[g.a], i[g.b], i[g.c]);
                            var y = g.vertexNormals;
                            if (3 === y.length) this.normals.push(y[0], y[1], y[2]);
                            else {
                                var x = g.normal;
                                this.normals.push(x, x, x);
                            }
                            var _,
                                b = g.vertexColors;
                            if (3 === b.length) this.colors.push(b[0], b[1], b[2]);
                            else {
                                var w = g.color;
                                this.colors.push(w, w, w);
                            }
                            if (!0 === o) void 0 !== (_ = r[0][l]) ? this.uvs.push(_[0], _[1], _[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ", l), this.uvs.push(new Ye(), new Ye(), new Ye()));
                            if (!0 === a) void 0 !== (_ = r[1][l]) ? this.uvs2.push(_[0], _[1], _[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ", l), this.uvs2.push(new Ye(), new Ye(), new Ye()));
                            for (var M = 0; M < c; M++) {
                                var S = s[M].vertices;
                                e[M].data.push(S[g.a], S[g.b], S[g.c]);
                            }
                            for (M = 0; M < p; M++) {
                                var T = h[M].vertexNormals[l];
                                u[M].data.push(T.a, T.b, T.c);
                            }
                            m && this.skinIndices.push(d[g.a], d[g.b], d[g.c]), v && this.skinWeights.push(f[g.a], f[g.b], f[g.c]);
                        }
                        return (
                            this.computeGroups(t),
                            (this.verticesNeedUpdate = t.verticesNeedUpdate),
                            (this.normalsNeedUpdate = t.normalsNeedUpdate),
                            (this.colorsNeedUpdate = t.colorsNeedUpdate),
                            (this.uvsNeedUpdate = t.uvsNeedUpdate),
                            (this.groupsNeedUpdate = t.groupsNeedUpdate),
                            null !== t.boundingSphere && (this.boundingSphere = t.boundingSphere.clone()),
                            null !== t.boundingBox && (this.boundingBox = t.boundingBox.clone()),
                            this
                        );
                    },
                });
            var Vi = 1,
                Wi = new fn(),
                qi = new On(),
                Xi = new an(),
                Yi = new Xn(),
                Zi = new Xn(),
                Ji = new an();
            function Qi() {
                Object.defineProperty(this, "id", { value: (Vi += 2) }),
                    (this.uuid = Xe.generateUUID()),
                    (this.name = ""),
                    (this.type = "BufferGeometry"),
                    (this.index = null),
                    (this.attributes = {}),
                    (this.morphAttributes = {}),
                    (this.morphTargetsRelative = !1),
                    (this.groups = []),
                    (this.boundingBox = null),
                    (this.boundingSphere = null),
                    (this.drawRange = { start: 0, count: 1 / 0 }),
                    (this.userData = {});
            }
            Qi.prototype = Object.assign(Object.create(He.prototype), {
                constructor: Qi,
                isBufferGeometry: !0,
                getIndex: function () {
                    return this.index;
                },
                setIndex: function (t) {
                    Array.isArray(t) ? (this.index = new (Hi(t) > 65535 ? Fi : Bi)(t, 1)) : (this.index = t);
                },
                getAttribute: function (t) {
                    return this.attributes[t];
                },
                setAttribute: function (t, e) {
                    return (this.attributes[t] = e), this;
                },
                deleteAttribute: function (t) {
                    return delete this.attributes[t], this;
                },
                addGroup: function (t, e, n) {
                    this.groups.push({ start: t, count: e, materialIndex: void 0 !== n ? n : 0 });
                },
                clearGroups: function () {
                    this.groups = [];
                },
                setDrawRange: function (t, e) {
                    (this.drawRange.start = t), (this.drawRange.count = e);
                },
                applyMatrix4: function (t) {
                    var e = this.attributes.position;
                    void 0 !== e && (e.applyMatrix4(t), (e.needsUpdate = !0));
                    var n = this.attributes.normal;
                    if (void 0 !== n) {
                        var i = new Ze().getNormalMatrix(t);
                        n.applyNormalMatrix(i), (n.needsUpdate = !0);
                    }
                    var r = this.attributes.tangent;
                    return void 0 !== r && (r.transformDirection(t), (r.needsUpdate = !0)), null !== this.boundingBox && this.computeBoundingBox(), null !== this.boundingSphere && this.computeBoundingSphere(), this;
                },
                rotateX: function (t) {
                    return Wi.makeRotationX(t), this.applyMatrix4(Wi), this;
                },
                rotateY: function (t) {
                    return Wi.makeRotationY(t), this.applyMatrix4(Wi), this;
                },
                rotateZ: function (t) {
                    return Wi.makeRotationZ(t), this.applyMatrix4(Wi), this;
                },
                translate: function (t, e, n) {
                    return Wi.makeTranslation(t, e, n), this.applyMatrix4(Wi), this;
                },
                scale: function (t, e, n) {
                    return Wi.makeScale(t, e, n), this.applyMatrix4(Wi), this;
                },
                lookAt: function (t) {
                    return qi.lookAt(t), qi.updateMatrix(), this.applyMatrix4(qi.matrix), this;
                },
                center: function () {
                    return this.computeBoundingBox(), this.boundingBox.getCenter(Xi).negate(), this.translate(Xi.x, Xi.y, Xi.z), this;
                },
                setFromObject: function (t) {
                    var e = t.geometry;
                    if (t.isPoints || t.isLine) {
                        var n = new Ui(3 * e.vertices.length, 3),
                            i = new Ui(3 * e.colors.length, 3);
                        if ((this.setAttribute("position", n.copyVector3sArray(e.vertices)), this.setAttribute("color", i.copyColorsArray(e.colors)), e.lineDistances && e.lineDistances.length === e.vertices.length)) {
                            var r = new Ui(e.lineDistances.length, 1);
                            this.setAttribute("lineDistance", r.copyArray(e.lineDistances));
                        }
                        null !== e.boundingSphere && (this.boundingSphere = e.boundingSphere.clone()), null !== e.boundingBox && (this.boundingBox = e.boundingBox.clone());
                    } else t.isMesh && e && e.isGeometry && this.fromGeometry(e);
                    return this;
                },
                setFromPoints: function (t) {
                    for (var e = [], n = 0, i = t.length; n < i; n++) {
                        var r = t[n];
                        e.push(r.x, r.y, r.z || 0);
                    }
                    return this.setAttribute("position", new Ui(e, 3)), this;
                },
                updateFromObject: function (t) {
                    var e,
                        n = t.geometry;
                    if (t.isMesh) {
                        var i = n.__directGeometry;
                        if ((!0 === n.elementsNeedUpdate && ((i = void 0), (n.elementsNeedUpdate = !1)), void 0 === i)) return this.fromGeometry(n);
                        (i.verticesNeedUpdate = n.verticesNeedUpdate),
                            (i.normalsNeedUpdate = n.normalsNeedUpdate),
                            (i.colorsNeedUpdate = n.colorsNeedUpdate),
                            (i.uvsNeedUpdate = n.uvsNeedUpdate),
                            (i.groupsNeedUpdate = n.groupsNeedUpdate),
                            (n.verticesNeedUpdate = !1),
                            (n.normalsNeedUpdate = !1),
                            (n.colorsNeedUpdate = !1),
                            (n.uvsNeedUpdate = !1),
                            (n.groupsNeedUpdate = !1),
                            (n = i);
                    }
                    return (
                        !0 === n.verticesNeedUpdate && (void 0 !== (e = this.attributes.position) && (e.copyVector3sArray(n.vertices), (e.needsUpdate = !0)), (n.verticesNeedUpdate = !1)),
                        !0 === n.normalsNeedUpdate && (void 0 !== (e = this.attributes.normal) && (e.copyVector3sArray(n.normals), (e.needsUpdate = !0)), (n.normalsNeedUpdate = !1)),
                        !0 === n.colorsNeedUpdate && (void 0 !== (e = this.attributes.color) && (e.copyColorsArray(n.colors), (e.needsUpdate = !0)), (n.colorsNeedUpdate = !1)),
                        n.uvsNeedUpdate && (void 0 !== (e = this.attributes.uv) && (e.copyVector2sArray(n.uvs), (e.needsUpdate = !0)), (n.uvsNeedUpdate = !1)),
                        n.lineDistancesNeedUpdate && (void 0 !== (e = this.attributes.lineDistance) && (e.copyArray(n.lineDistances), (e.needsUpdate = !0)), (n.lineDistancesNeedUpdate = !1)),
                        n.groupsNeedUpdate && (n.computeGroups(t.geometry), (this.groups = n.groups), (n.groupsNeedUpdate = !1)),
                        this
                    );
                },
                fromGeometry: function (t) {
                    return (t.__directGeometry = new Gi().fromGeometry(t)), this.fromDirectGeometry(t.__directGeometry);
                },
                fromDirectGeometry: function (t) {
                    var e = new Float32Array(3 * t.vertices.length);
                    if ((this.setAttribute("position", new Oi(e, 3).copyVector3sArray(t.vertices)), t.normals.length > 0)) {
                        var n = new Float32Array(3 * t.normals.length);
                        this.setAttribute("normal", new Oi(n, 3).copyVector3sArray(t.normals));
                    }
                    if (t.colors.length > 0) {
                        var i = new Float32Array(3 * t.colors.length);
                        this.setAttribute("color", new Oi(i, 3).copyColorsArray(t.colors));
                    }
                    if (t.uvs.length > 0) {
                        var r = new Float32Array(2 * t.uvs.length);
                        this.setAttribute("uv", new Oi(r, 2).copyVector2sArray(t.uvs));
                    }
                    if (t.uvs2.length > 0) {
                        var o = new Float32Array(2 * t.uvs2.length);
                        this.setAttribute("uv2", new Oi(o, 2).copyVector2sArray(t.uvs2));
                    }
                    for (var a in ((this.groups = t.groups), t.morphTargets)) {
                        for (var s = [], c = t.morphTargets[a], l = 0, u = c.length; l < u; l++) {
                            var h = c[l],
                                p = new Ui(3 * h.data.length, 3);
                            (p.name = h.name), s.push(p.copyVector3sArray(h.data));
                        }
                        this.morphAttributes[a] = s;
                    }
                    if (t.skinIndices.length > 0) {
                        var d = new Ui(4 * t.skinIndices.length, 4);
                        this.setAttribute("skinIndex", d.copyVector4sArray(t.skinIndices));
                    }
                    if (t.skinWeights.length > 0) {
                        var f = new Ui(4 * t.skinWeights.length, 4);
                        this.setAttribute("skinWeight", f.copyVector4sArray(t.skinWeights));
                    }
                    return null !== t.boundingSphere && (this.boundingSphere = t.boundingSphere.clone()), null !== t.boundingBox && (this.boundingBox = t.boundingBox.clone()), this;
                },
                computeBoundingBox: function () {
                    null === this.boundingBox && (this.boundingBox = new Xn());
                    var t = this.attributes.position,
                        e = this.morphAttributes.position;
                    if (void 0 !== t) {
                        if ((this.boundingBox.setFromBufferAttribute(t), e))
                            for (var n = 0, i = e.length; n < i; n++) {
                                var r = e[n];
                                Yi.setFromBufferAttribute(r),
                                    this.morphTargetsRelative
                                        ? (Ji.addVectors(this.boundingBox.min, Yi.min), this.boundingBox.expandByPoint(Ji), Ji.addVectors(this.boundingBox.max, Yi.max), this.boundingBox.expandByPoint(Ji))
                                        : (this.boundingBox.expandByPoint(Yi.min), this.boundingBox.expandByPoint(Yi.max));
                            }
                    } else this.boundingBox.makeEmpty();
                    (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) &&
                        console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
                },
                computeBoundingSphere: function () {
                    null === this.boundingSphere && (this.boundingSphere = new Jn());
                    var t = this.attributes.position,
                        e = this.morphAttributes.position;
                    if (t) {
                        var n = this.boundingSphere.center;
                        if ((Yi.setFromBufferAttribute(t), e))
                            for (var i = 0, r = e.length; i < r; i++) {
                                var o = e[i];
                                Zi.setFromBufferAttribute(o),
                                    this.morphTargetsRelative ? (Ji.addVectors(Yi.min, Zi.min), Yi.expandByPoint(Ji), Ji.addVectors(Yi.max, Zi.max), Yi.expandByPoint(Ji)) : (Yi.expandByPoint(Zi.min), Yi.expandByPoint(Zi.max));
                            }
                        Yi.getCenter(n);
                        var a = 0;
                        for (i = 0, r = t.count; i < r; i++) Ji.fromBufferAttribute(t, i), (a = Math.max(a, n.distanceToSquared(Ji)));
                        if (e)
                            for (i = 0, r = e.length; i < r; i++) {
                                o = e[i];
                                for (var s = this.morphTargetsRelative, c = 0, l = o.count; c < l; c++) Ji.fromBufferAttribute(o, c), s && (Xi.fromBufferAttribute(t, c), Ji.add(Xi)), (a = Math.max(a, n.distanceToSquared(Ji)));
                            }
                        (this.boundingSphere.radius = Math.sqrt(a)),
                            isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
                    }
                },
                computeFaceNormals: function () {},
                computeVertexNormals: function () {
                    var t = this.index,
                        e = this.attributes;
                    if (e.position) {
                        var n = e.position.array;
                        if (void 0 === e.normal) this.setAttribute("normal", new Oi(new Float32Array(n.length), 3));
                        else for (var i = e.normal.array, r = 0, o = i.length; r < o; r++) i[r] = 0;
                        var a,
                            s,
                            c,
                            l = e.normal.array,
                            u = new an(),
                            h = new an(),
                            p = new an(),
                            d = new an(),
                            f = new an();
                        if (t) {
                            var m = t.array;
                            for (r = 0, o = t.count; r < o; r += 3)
                                (a = 3 * m[r + 0]),
                                    (s = 3 * m[r + 1]),
                                    (c = 3 * m[r + 2]),
                                    u.fromArray(n, a),
                                    h.fromArray(n, s),
                                    p.fromArray(n, c),
                                    d.subVectors(p, h),
                                    f.subVectors(u, h),
                                    d.cross(f),
                                    (l[a] += d.x),
                                    (l[a + 1] += d.y),
                                    (l[a + 2] += d.z),
                                    (l[s] += d.x),
                                    (l[s + 1] += d.y),
                                    (l[s + 2] += d.z),
                                    (l[c] += d.x),
                                    (l[c + 1] += d.y),
                                    (l[c + 2] += d.z);
                        } else
                            for (r = 0, o = n.length; r < o; r += 9)
                                u.fromArray(n, r),
                                    h.fromArray(n, r + 3),
                                    p.fromArray(n, r + 6),
                                    d.subVectors(p, h),
                                    f.subVectors(u, h),
                                    d.cross(f),
                                    (l[r] = d.x),
                                    (l[r + 1] = d.y),
                                    (l[r + 2] = d.z),
                                    (l[r + 3] = d.x),
                                    (l[r + 4] = d.y),
                                    (l[r + 5] = d.z),
                                    (l[r + 6] = d.x),
                                    (l[r + 7] = d.y),
                                    (l[r + 8] = d.z);
                        this.normalizeNormals(), (e.normal.needsUpdate = !0);
                    }
                },
                merge: function (t, e) {
                    if (t && t.isBufferGeometry) {
                        void 0 === e && ((e = 0), console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));
                        var n = this.attributes;
                        for (var i in n) if (void 0 !== t.attributes[i]) for (var r = n[i].array, o = t.attributes[i], a = o.array, s = o.itemSize * e, c = Math.min(a.length, r.length - s), l = 0, u = s; l < c; l++, u++) r[u] = a[l];
                        return this;
                    }
                    console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", t);
                },
                normalizeNormals: function () {
                    for (var t = this.attributes.normal, e = 0, n = t.count; e < n; e++) (Ji.x = t.getX(e)), (Ji.y = t.getY(e)), (Ji.z = t.getZ(e)), Ji.normalize(), t.setXYZ(e, Ji.x, Ji.y, Ji.z);
                },
                toNonIndexed: function () {
                    function t(t, e) {
                        for (var n = t.array, i = t.itemSize, r = new n.constructor(e.length * i), o = 0, a = 0, s = 0, c = e.length; s < c; s++) {
                            o = e[s] * i;
                            for (var l = 0; l < i; l++) r[a++] = n[o++];
                        }
                        return new Oi(r, i);
                    }
                    if (null === this.index) return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."), this;
                    var e = new Qi(),
                        n = this.index.array,
                        i = this.attributes;
                    for (var r in i) {
                        var o = t(i[r], n);
                        e.setAttribute(r, o);
                    }
                    var a = this.morphAttributes;
                    for (r in a) {
                        for (var s = [], c = a[r], l = 0, u = c.length; l < u; l++) {
                            o = t(c[l], n);
                            s.push(o);
                        }
                        e.morphAttributes[r] = s;
                    }
                    e.morphTargetsRelative = this.morphTargetsRelative;
                    for (var h = this.groups, p = ((l = 0), h.length); l < p; l++) {
                        var d = h[l];
                        e.addGroup(d.start, d.count, d.materialIndex);
                    }
                    return e;
                },
                toJSON: function () {
                    var t = { metadata: { version: 4.5, type: "BufferGeometry", generator: "BufferGeometry.toJSON" } };
                    if (((t.uuid = this.uuid), (t.type = this.type), "" !== this.name && (t.name = this.name), Object.keys(this.userData).length > 0 && (t.userData = this.userData), void 0 !== this.parameters)) {
                        var e = this.parameters;
                        for (var n in e) void 0 !== e[n] && (t[n] = e[n]);
                        return t;
                    }
                    t.data = { attributes: {} };
                    var i = this.index;
                    null !== i && (t.data.index = { type: i.array.constructor.name, array: Array.prototype.slice.call(i.array) });
                    var r = this.attributes;
                    for (var n in r) {
                        var o = (p = r[n]).toJSON();
                        "" !== p.name && (o.name = p.name), (t.data.attributes[n] = o);
                    }
                    var a = {},
                        s = !1;
                    for (var n in this.morphAttributes) {
                        for (var c = this.morphAttributes[n], l = [], u = 0, h = c.length; u < h; u++) {
                            var p;
                            o = (p = c[u]).toJSON();
                            "" !== p.name && (o.name = p.name), l.push(o);
                        }
                        l.length > 0 && ((a[n] = l), (s = !0));
                    }
                    s && ((t.data.morphAttributes = a), (t.data.morphTargetsRelative = this.morphTargetsRelative));
                    var d = this.groups;
                    d.length > 0 && (t.data.groups = JSON.parse(JSON.stringify(d)));
                    var f = this.boundingSphere;
                    return null !== f && (t.data.boundingSphere = { center: f.center.toArray(), radius: f.radius }), t;
                },
                clone: function () {
                    return new Qi().copy(this);
                },
                copy: function (t) {
                    var e, n, i;
                    (this.index = null), (this.attributes = {}), (this.morphAttributes = {}), (this.groups = []), (this.boundingBox = null), (this.boundingSphere = null), (this.name = t.name);
                    var r = t.index;
                    null !== r && this.setIndex(r.clone());
                    var o = t.attributes;
                    for (e in o) {
                        var a = o[e];
                        this.setAttribute(e, a.clone());
                    }
                    var s = t.morphAttributes;
                    for (e in s) {
                        var c = [],
                            l = s[e];
                        for (n = 0, i = l.length; n < i; n++) c.push(l[n].clone());
                        this.morphAttributes[e] = c;
                    }
                    this.morphTargetsRelative = t.morphTargetsRelative;
                    var u = t.groups;
                    for (n = 0, i = u.length; n < i; n++) {
                        var h = u[n];
                        this.addGroup(h.start, h.count, h.materialIndex);
                    }
                    var p = t.boundingBox;
                    null !== p && (this.boundingBox = p.clone());
                    var d = t.boundingSphere;
                    return null !== d && (this.boundingSphere = d.clone()), (this.drawRange.start = t.drawRange.start), (this.drawRange.count = t.drawRange.count), (this.userData = t.userData), this;
                },
                dispose: function () {
                    this.dispatchEvent({ type: "dispose" });
                },
            });
            var Ki = new fn(),
                $i = new ri(),
                tr = new Jn(),
                er = new an(),
                nr = new an(),
                ir = new an(),
                rr = new an(),
                or = new an(),
                ar = new an(),
                sr = new an(),
                cr = new an(),
                lr = new an(),
                ur = new Ye(),
                hr = new Ye(),
                pr = new Ye(),
                dr = new an(),
                fr = new an();
            function mr(t, e) {
                On.call(this), (this.type = "Mesh"), (this.geometry = void 0 !== t ? t : new Qi()), (this.material = void 0 !== e ? e : new Ci()), this.updateMorphTargets();
            }
            function vr(t, e, n, i, r, o, a, s) {
                if (null === (e.side === u ? i.intersectTriangle(a, o, r, !0, s) : i.intersectTriangle(r, o, a, e.side !== h, s))) return null;
                fr.copy(s), fr.applyMatrix4(t.matrixWorld);
                var c = n.ray.origin.distanceTo(fr);
                return c < n.near || c > n.far ? null : { distance: c, point: fr.clone(), object: t };
            }
            function gr(t, e, n, i, r, o, a, s, c, l, u, h) {
                er.fromBufferAttribute(r, l), nr.fromBufferAttribute(r, u), ir.fromBufferAttribute(r, h);
                var p = t.morphTargetInfluences;
                if (e.morphTargets && o && p) {
                    sr.set(0, 0, 0), cr.set(0, 0, 0), lr.set(0, 0, 0);
                    for (var d = 0, f = o.length; d < f; d++) {
                        var m = p[d],
                            v = o[d];
                        0 !== m &&
                            (rr.fromBufferAttribute(v, l),
                            or.fromBufferAttribute(v, u),
                            ar.fromBufferAttribute(v, h),
                            a ? (sr.addScaledVector(rr, m), cr.addScaledVector(or, m), lr.addScaledVector(ar, m)) : (sr.addScaledVector(rr.sub(er), m), cr.addScaledVector(or.sub(nr), m), lr.addScaledVector(ar.sub(ir), m)));
                    }
                    er.add(sr), nr.add(cr), ir.add(lr);
                }
                var g = vr(t, e, n, i, er, nr, ir, dr);
                if (g) {
                    s && (ur.fromBufferAttribute(s, l), hr.fromBufferAttribute(s, u), pr.fromBufferAttribute(s, h), (g.uv = xi.getUV(dr, er, nr, ir, ur, hr, pr, new Ye()))),
                        c && (ur.fromBufferAttribute(c, l), hr.fromBufferAttribute(c, u), pr.fromBufferAttribute(c, h), (g.uv2 = xi.getUV(dr, er, nr, ir, ur, hr, pr, new Ye())));
                    var y = new Ai(l, u, h);
                    xi.getNormal(er, nr, ir, y.normal), (g.face = y);
                }
                return g;
            }
            mr.prototype = Object.assign(Object.create(On.prototype), {
                constructor: mr,
                isMesh: !0,
                copy: function (t) {
                    return (
                        On.prototype.copy.call(this, t),
                        void 0 !== t.morphTargetInfluences && (this.morphTargetInfluences = t.morphTargetInfluences.slice()),
                        void 0 !== t.morphTargetDictionary && (this.morphTargetDictionary = Object.assign({}, t.morphTargetDictionary)),
                        this
                    );
                },
                updateMorphTargets: function () {
                    var t,
                        e,
                        n,
                        i = this.geometry;
                    if (i.isBufferGeometry) {
                        var r = i.morphAttributes,
                            o = Object.keys(r);
                        if (o.length > 0) {
                            var a = r[o[0]];
                            if (void 0 !== a)
                                for (this.morphTargetInfluences = [], this.morphTargetDictionary = {}, t = 0, e = a.length; t < e; t++) (n = a[t].name || String(t)), this.morphTargetInfluences.push(0), (this.morphTargetDictionary[n] = t);
                        }
                    } else {
                        var s = i.morphTargets;
                        void 0 !== s && s.length > 0 && console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
                    }
                },
                raycast: function (t, e) {
                    var n,
                        i = this.geometry,
                        r = this.material,
                        o = this.matrixWorld;
                    if (
                        void 0 !== r &&
                        (null === i.boundingSphere && i.computeBoundingSphere(),
                        tr.copy(i.boundingSphere),
                        tr.applyMatrix4(o),
                        !1 !== t.ray.intersectsSphere(tr) && (Ki.getInverse(o), $i.copy(t.ray).applyMatrix4(Ki), null === i.boundingBox || !1 !== $i.intersectsBox(i.boundingBox)))
                    )
                        if (i.isBufferGeometry) {
                            var a,
                                s,
                                c,
                                l,
                                u,
                                h,
                                p,
                                d,
                                f,
                                m = i.index,
                                v = i.attributes.position,
                                g = i.morphAttributes.position,
                                y = i.morphTargetsRelative,
                                x = i.attributes.uv,
                                _ = i.attributes.uv2,
                                b = i.groups,
                                w = i.drawRange;
                            if (null !== m)
                                if (Array.isArray(r))
                                    for (l = 0, h = b.length; l < h; l++)
                                        for (f = r[(d = b[l]).materialIndex], u = Math.max(d.start, w.start), p = Math.min(d.start + d.count, w.start + w.count); u < p; u += 3)
                                            (a = m.getX(u)),
                                                (s = m.getX(u + 1)),
                                                (c = m.getX(u + 2)),
                                                (n = gr(this, f, t, $i, v, g, y, x, _, a, s, c)) && ((n.faceIndex = Math.floor(u / 3)), (n.face.materialIndex = d.materialIndex), e.push(n));
                                else
                                    for (l = Math.max(0, w.start), h = Math.min(m.count, w.start + w.count); l < h; l += 3)
                                        (a = m.getX(l)), (s = m.getX(l + 1)), (c = m.getX(l + 2)), (n = gr(this, r, t, $i, v, g, y, x, _, a, s, c)) && ((n.faceIndex = Math.floor(l / 3)), e.push(n));
                            else if (void 0 !== v)
                                if (Array.isArray(r))
                                    for (l = 0, h = b.length; l < h; l++)
                                        for (f = r[(d = b[l]).materialIndex], u = Math.max(d.start, w.start), p = Math.min(d.start + d.count, w.start + w.count); u < p; u += 3)
                                            (n = gr(this, f, t, $i, v, g, y, x, _, (a = u), (s = u + 1), (c = u + 2))) && ((n.faceIndex = Math.floor(u / 3)), (n.face.materialIndex = d.materialIndex), e.push(n));
                                else
                                    for (l = Math.max(0, w.start), h = Math.min(v.count, w.start + w.count); l < h; l += 3)
                                        (n = gr(this, r, t, $i, v, g, y, x, _, (a = l), (s = l + 1), (c = l + 2))) && ((n.faceIndex = Math.floor(l / 3)), e.push(n));
                        } else if (i.isGeometry) {
                            var M,
                                S,
                                T,
                                E,
                                A = Array.isArray(r),
                                P = i.vertices,
                                L = i.faces,
                                C = i.faceVertexUvs[0];
                            C.length > 0 && (E = C);
                            for (var R = 0, O = L.length; R < O; R++) {
                                var D = L[R],
                                    I = A ? r[D.materialIndex] : r;
                                if (void 0 !== I && ((M = P[D.a]), (S = P[D.b]), (T = P[D.c]), (n = vr(this, I, t, $i, M, S, T, dr)))) {
                                    if (E && E[R]) {
                                        var N = E[R];
                                        ur.copy(N[0]), hr.copy(N[1]), pr.copy(N[2]), (n.uv = xi.getUV(dr, M, S, T, ur, hr, pr, new Ye()));
                                    }
                                    (n.face = D), (n.faceIndex = R), e.push(n);
                                }
                            }
                        }
                },
                clone: function () {
                    return new this.constructor(this.geometry, this.material).copy(this);
                },
            });
            var yr = 0,
                xr = new fn(),
                _r = new On(),
                br = new an();
            function wr() {
                Object.defineProperty(this, "id", { value: (yr += 2) }),
                    (this.uuid = Xe.generateUUID()),
                    (this.name = ""),
                    (this.type = "Geometry"),
                    (this.vertices = []),
                    (this.colors = []),
                    (this.faces = []),
                    (this.faceVertexUvs = [[]]),
                    (this.morphTargets = []),
                    (this.morphNormals = []),
                    (this.skinWeights = []),
                    (this.skinIndices = []),
                    (this.lineDistances = []),
                    (this.boundingBox = null),
                    (this.boundingSphere = null),
                    (this.elementsNeedUpdate = !1),
                    (this.verticesNeedUpdate = !1),
                    (this.uvsNeedUpdate = !1),
                    (this.normalsNeedUpdate = !1),
                    (this.colorsNeedUpdate = !1),
                    (this.lineDistancesNeedUpdate = !1),
                    (this.groupsNeedUpdate = !1);
            }
            wr.prototype = Object.assign(Object.create(He.prototype), {
                constructor: wr,
                isGeometry: !0,
                applyMatrix4: function (t) {
                    for (var e = new Ze().getNormalMatrix(t), n = 0, i = this.vertices.length; n < i; n++) {
                        this.vertices[n].applyMatrix4(t);
                    }
                    for (n = 0, i = this.faces.length; n < i; n++) {
                        var r = this.faces[n];
                        r.normal.applyMatrix3(e).normalize();
                        for (var o = 0, a = r.vertexNormals.length; o < a; o++) r.vertexNormals[o].applyMatrix3(e).normalize();
                    }
                    return null !== this.boundingBox && this.computeBoundingBox(), null !== this.boundingSphere && this.computeBoundingSphere(), (this.verticesNeedUpdate = !0), (this.normalsNeedUpdate = !0), this;
                },
                rotateX: function (t) {
                    return xr.makeRotationX(t), this.applyMatrix4(xr), this;
                },
                rotateY: function (t) {
                    return xr.makeRotationY(t), this.applyMatrix4(xr), this;
                },
                rotateZ: function (t) {
                    return xr.makeRotationZ(t), this.applyMatrix4(xr), this;
                },
                translate: function (t, e, n) {
                    return xr.makeTranslation(t, e, n), this.applyMatrix4(xr), this;
                },
                scale: function (t, e, n) {
                    return xr.makeScale(t, e, n), this.applyMatrix4(xr), this;
                },
                lookAt: function (t) {
                    return _r.lookAt(t), _r.updateMatrix(), this.applyMatrix4(_r.matrix), this;
                },
                fromBufferGeometry: function (t) {
                    var e = this,
                        n = null !== t.index ? t.index.array : void 0,
                        i = t.attributes;
                    if (void 0 === i.position) return console.error("THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion."), this;
                    var r = i.position.array,
                        o = void 0 !== i.normal ? i.normal.array : void 0,
                        a = void 0 !== i.color ? i.color.array : void 0,
                        s = void 0 !== i.uv ? i.uv.array : void 0,
                        c = void 0 !== i.uv2 ? i.uv2.array : void 0;
                    void 0 !== c && (this.faceVertexUvs[1] = []);
                    for (var l = 0; l < r.length; l += 3) e.vertices.push(new an().fromArray(r, l)), void 0 !== a && e.colors.push(new Mi().fromArray(a, l));
                    function u(t, n, i, r) {
                        var l = void 0 === a ? [] : [e.colors[t].clone(), e.colors[n].clone(), e.colors[i].clone()],
                            u = new Ai(t, n, i, void 0 === o ? [] : [new an().fromArray(o, 3 * t), new an().fromArray(o, 3 * n), new an().fromArray(o, 3 * i)], l, r);
                        e.faces.push(u),
                            void 0 !== s && e.faceVertexUvs[0].push([new Ye().fromArray(s, 2 * t), new Ye().fromArray(s, 2 * n), new Ye().fromArray(s, 2 * i)]),
                            void 0 !== c && e.faceVertexUvs[1].push([new Ye().fromArray(c, 2 * t), new Ye().fromArray(c, 2 * n), new Ye().fromArray(c, 2 * i)]);
                    }
                    var h = t.groups;
                    if (h.length > 0) for (l = 0; l < h.length; l++) for (var p = h[l], d = p.start, f = d, m = d + p.count; f < m; f += 3) void 0 !== n ? u(n[f], n[f + 1], n[f + 2], p.materialIndex) : u(f, f + 1, f + 2, p.materialIndex);
                    else if (void 0 !== n) for (l = 0; l < n.length; l += 3) u(n[l], n[l + 1], n[l + 2]);
                    else for (l = 0; l < r.length / 3; l += 3) u(l, l + 1, l + 2);
                    return this.computeFaceNormals(), null !== t.boundingBox && (this.boundingBox = t.boundingBox.clone()), null !== t.boundingSphere && (this.boundingSphere = t.boundingSphere.clone()), this;
                },
                center: function () {
                    return this.computeBoundingBox(), this.boundingBox.getCenter(br).negate(), this.translate(br.x, br.y, br.z), this;
                },
                normalize: function () {
                    this.computeBoundingSphere();
                    var t = this.boundingSphere.center,
                        e = this.boundingSphere.radius,
                        n = 0 === e ? 1 : 1 / e,
                        i = new fn();
                    return i.set(n, 0, 0, -n * t.x, 0, n, 0, -n * t.y, 0, 0, n, -n * t.z, 0, 0, 0, 1), this.applyMatrix4(i), this;
                },
                computeFaceNormals: function () {
                    for (var t = new an(), e = new an(), n = 0, i = this.faces.length; n < i; n++) {
                        var r = this.faces[n],
                            o = this.vertices[r.a],
                            a = this.vertices[r.b],
                            s = this.vertices[r.c];
                        t.subVectors(s, a), e.subVectors(o, a), t.cross(e), t.normalize(), r.normal.copy(t);
                    }
                },
                computeVertexNormals: function (t) {
                    var e, n, i, r, o, a;
                    for (void 0 === t && (t = !0), a = new Array(this.vertices.length), e = 0, n = this.vertices.length; e < n; e++) a[e] = new an();
                    if (t) {
                        var s,
                            c,
                            l,
                            u = new an(),
                            h = new an();
                        for (i = 0, r = this.faces.length; i < r; i++)
                            (o = this.faces[i]), (s = this.vertices[o.a]), (c = this.vertices[o.b]), (l = this.vertices[o.c]), u.subVectors(l, c), h.subVectors(s, c), u.cross(h), a[o.a].add(u), a[o.b].add(u), a[o.c].add(u);
                    } else for (this.computeFaceNormals(), i = 0, r = this.faces.length; i < r; i++) a[(o = this.faces[i]).a].add(o.normal), a[o.b].add(o.normal), a[o.c].add(o.normal);
                    for (e = 0, n = this.vertices.length; e < n; e++) a[e].normalize();
                    for (i = 0, r = this.faces.length; i < r; i++) {
                        var p = (o = this.faces[i]).vertexNormals;
                        3 === p.length ? (p[0].copy(a[o.a]), p[1].copy(a[o.b]), p[2].copy(a[o.c])) : ((p[0] = a[o.a].clone()), (p[1] = a[o.b].clone()), (p[2] = a[o.c].clone()));
                    }
                    this.faces.length > 0 && (this.normalsNeedUpdate = !0);
                },
                computeFlatVertexNormals: function () {
                    var t, e, n;
                    for (this.computeFaceNormals(), t = 0, e = this.faces.length; t < e; t++) {
                        var i = (n = this.faces[t]).vertexNormals;
                        3 === i.length ? (i[0].copy(n.normal), i[1].copy(n.normal), i[2].copy(n.normal)) : ((i[0] = n.normal.clone()), (i[1] = n.normal.clone()), (i[2] = n.normal.clone()));
                    }
                    this.faces.length > 0 && (this.normalsNeedUpdate = !0);
                },
                computeMorphNormals: function () {
                    var t, e, n, i, r;
                    for (n = 0, i = this.faces.length; n < i; n++)
                        for (
                            (r = this.faces[n]).__originalFaceNormal ? r.__originalFaceNormal.copy(r.normal) : (r.__originalFaceNormal = r.normal.clone()),
                                r.__originalVertexNormals || (r.__originalVertexNormals = []),
                                t = 0,
                                e = r.vertexNormals.length;
                            t < e;
                            t++
                        )
                            r.__originalVertexNormals[t] ? r.__originalVertexNormals[t].copy(r.vertexNormals[t]) : (r.__originalVertexNormals[t] = r.vertexNormals[t].clone());
                    var o = new wr();
                    for (o.faces = this.faces, t = 0, e = this.morphTargets.length; t < e; t++) {
                        if (!this.morphNormals[t]) {
                            (this.morphNormals[t] = {}), (this.morphNormals[t].faceNormals = []), (this.morphNormals[t].vertexNormals = []);
                            var a = this.morphNormals[t].faceNormals,
                                s = this.morphNormals[t].vertexNormals;
                            for (n = 0, i = this.faces.length; n < i; n++) (c = new an()), (l = { a: new an(), b: new an(), c: new an() }), a.push(c), s.push(l);
                        }
                        var c,
                            l,
                            u = this.morphNormals[t];
                        for (o.vertices = this.morphTargets[t].vertices, o.computeFaceNormals(), o.computeVertexNormals(), n = 0, i = this.faces.length; n < i; n++)
                            (r = this.faces[n]), (c = u.faceNormals[n]), (l = u.vertexNormals[n]), c.copy(r.normal), l.a.copy(r.vertexNormals[0]), l.b.copy(r.vertexNormals[1]), l.c.copy(r.vertexNormals[2]);
                    }
                    for (n = 0, i = this.faces.length; n < i; n++) ((r = this.faces[n]).normal = r.__originalFaceNormal), (r.vertexNormals = r.__originalVertexNormals);
                },
                computeBoundingBox: function () {
                    null === this.boundingBox && (this.boundingBox = new Xn()), this.boundingBox.setFromPoints(this.vertices);
                },
                computeBoundingSphere: function () {
                    null === this.boundingSphere && (this.boundingSphere = new Jn()), this.boundingSphere.setFromPoints(this.vertices);
                },
                merge: function (t, e, n) {
                    if (t && t.isGeometry) {
                        var i,
                            r = this.vertices.length,
                            o = this.vertices,
                            a = t.vertices,
                            s = this.faces,
                            c = t.faces,
                            l = this.colors,
                            u = t.colors;
                        void 0 === n && (n = 0), void 0 !== e && (i = new Ze().getNormalMatrix(e));
                        for (var h = 0, p = a.length; h < p; h++) {
                            var d = a[h].clone();
                            void 0 !== e && d.applyMatrix4(e), o.push(d);
                        }
                        for (h = 0, p = u.length; h < p; h++) l.push(u[h].clone());
                        for (h = 0, p = c.length; h < p; h++) {
                            var f,
                                m,
                                v,
                                g = c[h],
                                y = g.vertexNormals,
                                x = g.vertexColors;
                            (f = new Ai(g.a + r, g.b + r, g.c + r)).normal.copy(g.normal), void 0 !== i && f.normal.applyMatrix3(i).normalize();
                            for (var _ = 0, b = y.length; _ < b; _++) (m = y[_].clone()), void 0 !== i && m.applyMatrix3(i).normalize(), f.vertexNormals.push(m);
                            f.color.copy(g.color);
                            for (_ = 0, b = x.length; _ < b; _++) (v = x[_]), f.vertexColors.push(v.clone());
                            (f.materialIndex = g.materialIndex + n), s.push(f);
                        }
                        for (h = 0, p = t.faceVertexUvs.length; h < p; h++) {
                            var w = t.faceVertexUvs[h];
                            void 0 === this.faceVertexUvs[h] && (this.faceVertexUvs[h] = []);
                            for (_ = 0, b = w.length; _ < b; _++) {
                                for (var M = w[_], S = [], T = 0, E = M.length; T < E; T++) S.push(M[T].clone());
                                this.faceVertexUvs[h].push(S);
                            }
                        }
                    } else console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.", t);
                },
                mergeMesh: function (t) {
                    t && t.isMesh ? (t.matrixAutoUpdate && t.updateMatrix(), this.merge(t.geometry, t.matrix)) : console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.", t);
                },
                mergeVertices: function () {
                    var t,
                        e,
                        n,
                        i,
                        r,
                        o,
                        a,
                        s,
                        c = {},
                        l = [],
                        u = [],
                        h = Math.pow(10, 4);
                    for (n = 0, i = this.vertices.length; n < i; n++)
                        (t = this.vertices[n]), void 0 === c[(e = Math.round(t.x * h) + "_" + Math.round(t.y * h) + "_" + Math.round(t.z * h))] ? ((c[e] = n), l.push(this.vertices[n]), (u[n] = l.length - 1)) : (u[n] = u[c[e]]);
                    var p = [];
                    for (n = 0, i = this.faces.length; n < i; n++) {
                        ((r = this.faces[n]).a = u[r.a]), (r.b = u[r.b]), (r.c = u[r.c]), (o = [r.a, r.b, r.c]);
                        for (var d = 0; d < 3; d++)
                            if (o[d] === o[(d + 1) % 3]) {
                                p.push(n);
                                break;
                            }
                    }
                    for (n = p.length - 1; n >= 0; n--) {
                        var f = p[n];
                        for (this.faces.splice(f, 1), a = 0, s = this.faceVertexUvs.length; a < s; a++) this.faceVertexUvs[a].splice(f, 1);
                    }
                    var m = this.vertices.length - l.length;
                    return (this.vertices = l), m;
                },
                setFromPoints: function (t) {
                    this.vertices = [];
                    for (var e = 0, n = t.length; e < n; e++) {
                        var i = t[e];
                        this.vertices.push(new an(i.x, i.y, i.z || 0));
                    }
                    return this;
                },
                sortFacesByMaterialIndex: function () {
                    for (var t = this.faces, e = t.length, n = 0; n < e; n++) t[n]._id = n;
                    t.sort(function (t, e) {
                        return t.materialIndex - e.materialIndex;
                    });
                    var i,
                        r,
                        o = this.faceVertexUvs[0],
                        a = this.faceVertexUvs[1];
                    o && o.length === e && (i = []), a && a.length === e && (r = []);
                    for (n = 0; n < e; n++) {
                        var s = t[n]._id;
                        i && i.push(o[s]), r && r.push(a[s]);
                    }
                    i && (this.faceVertexUvs[0] = i), r && (this.faceVertexUvs[1] = r);
                },
                toJSON: function () {
                    var t = { metadata: { version: 4.5, type: "Geometry", generator: "Geometry.toJSON" } };
                    if (((t.uuid = this.uuid), (t.type = this.type), "" !== this.name && (t.name = this.name), void 0 !== this.parameters)) {
                        var e = this.parameters;
                        for (var n in e) void 0 !== e[n] && (t[n] = e[n]);
                        return t;
                    }
                    for (var i = [], r = 0; r < this.vertices.length; r++) {
                        var o = this.vertices[r];
                        i.push(o.x, o.y, o.z);
                    }
                    var a = [],
                        s = [],
                        c = {},
                        l = [],
                        u = {},
                        h = [],
                        p = {};
                    for (r = 0; r < this.faces.length; r++) {
                        var d = this.faces[r],
                            f = void 0 !== this.faceVertexUvs[0][r],
                            m = d.normal.length() > 0,
                            v = d.vertexNormals.length > 0,
                            g = 1 !== d.color.r || 1 !== d.color.g || 1 !== d.color.b,
                            y = d.vertexColors.length > 0,
                            x = 0;
                        if (((x = M((x = M((x = M((x = M((x = M((x = M((x = M((x = M(x, 0, 0)), 1, !0)), 2, !1)), 3, f)), 4, m)), 5, v)), 6, g)), 7, y)), a.push(x), a.push(d.a, d.b, d.c), a.push(d.materialIndex), f)) {
                            var _ = this.faceVertexUvs[0][r];
                            a.push(E(_[0]), E(_[1]), E(_[2]));
                        }
                        if ((m && a.push(S(d.normal)), v)) {
                            var b = d.vertexNormals;
                            a.push(S(b[0]), S(b[1]), S(b[2]));
                        }
                        if ((g && a.push(T(d.color)), y)) {
                            var w = d.vertexColors;
                            a.push(T(w[0]), T(w[1]), T(w[2]));
                        }
                    }
                    function M(t, e, n) {
                        return n ? t | (1 << e) : t & ~(1 << e);
                    }
                    function S(t) {
                        var e = t.x.toString() + t.y.toString() + t.z.toString();
                        return void 0 !== c[e] ? c[e] : ((c[e] = s.length / 3), s.push(t.x, t.y, t.z), c[e]);
                    }
                    function T(t) {
                        var e = t.r.toString() + t.g.toString() + t.b.toString();
                        return void 0 !== u[e] ? u[e] : ((u[e] = l.length), l.push(t.getHex()), u[e]);
                    }
                    function E(t) {
                        var e = t.x.toString() + t.y.toString();
                        return void 0 !== p[e] ? p[e] : ((p[e] = h.length / 2), h.push(t.x, t.y), p[e]);
                    }
                    return (t.data = {}), (t.data.vertices = i), (t.data.normals = s), l.length > 0 && (t.data.colors = l), h.length > 0 && (t.data.uvs = [h]), (t.data.faces = a), t;
                },
                clone: function () {
                    return new wr().copy(this);
                },
                copy: function (t) {
                    var e, n, i, r, o, a;
                    (this.vertices = []),
                        (this.colors = []),
                        (this.faces = []),
                        (this.faceVertexUvs = [[]]),
                        (this.morphTargets = []),
                        (this.morphNormals = []),
                        (this.skinWeights = []),
                        (this.skinIndices = []),
                        (this.lineDistances = []),
                        (this.boundingBox = null),
                        (this.boundingSphere = null),
                        (this.name = t.name);
                    var s = t.vertices;
                    for (e = 0, n = s.length; e < n; e++) this.vertices.push(s[e].clone());
                    var c = t.colors;
                    for (e = 0, n = c.length; e < n; e++) this.colors.push(c[e].clone());
                    var l = t.faces;
                    for (e = 0, n = l.length; e < n; e++) this.faces.push(l[e].clone());
                    for (e = 0, n = t.faceVertexUvs.length; e < n; e++) {
                        var u = t.faceVertexUvs[e];
                        for (void 0 === this.faceVertexUvs[e] && (this.faceVertexUvs[e] = []), i = 0, r = u.length; i < r; i++) {
                            var h = u[i],
                                p = [];
                            for (o = 0, a = h.length; o < a; o++) {
                                var d = h[o];
                                p.push(d.clone());
                            }
                            this.faceVertexUvs[e].push(p);
                        }
                    }
                    var f = t.morphTargets;
                    for (e = 0, n = f.length; e < n; e++) {
                        var m = {};
                        if (((m.name = f[e].name), void 0 !== f[e].vertices)) for (m.vertices = [], i = 0, r = f[e].vertices.length; i < r; i++) m.vertices.push(f[e].vertices[i].clone());
                        if (void 0 !== f[e].normals) for (m.normals = [], i = 0, r = f[e].normals.length; i < r; i++) m.normals.push(f[e].normals[i].clone());
                        this.morphTargets.push(m);
                    }
                    var v = t.morphNormals;
                    for (e = 0, n = v.length; e < n; e++) {
                        var g = {};
                        if (void 0 !== v[e].vertexNormals)
                            for (g.vertexNormals = [], i = 0, r = v[e].vertexNormals.length; i < r; i++) {
                                var y = v[e].vertexNormals[i],
                                    x = {};
                                (x.a = y.a.clone()), (x.b = y.b.clone()), (x.c = y.c.clone()), g.vertexNormals.push(x);
                            }
                        if (void 0 !== v[e].faceNormals) for (g.faceNormals = [], i = 0, r = v[e].faceNormals.length; i < r; i++) g.faceNormals.push(v[e].faceNormals[i].clone());
                        this.morphNormals.push(g);
                    }
                    var _ = t.skinWeights;
                    for (e = 0, n = _.length; e < n; e++) this.skinWeights.push(_[e].clone());
                    var b = t.skinIndices;
                    for (e = 0, n = b.length; e < n; e++) this.skinIndices.push(b[e].clone());
                    var w = t.lineDistances;
                    for (e = 0, n = w.length; e < n; e++) this.lineDistances.push(w[e]);
                    var M = t.boundingBox;
                    null !== M && (this.boundingBox = M.clone());
                    var S = t.boundingSphere;
                    return (
                        null !== S && (this.boundingSphere = S.clone()),
                        (this.elementsNeedUpdate = t.elementsNeedUpdate),
                        (this.verticesNeedUpdate = t.verticesNeedUpdate),
                        (this.uvsNeedUpdate = t.uvsNeedUpdate),
                        (this.normalsNeedUpdate = t.normalsNeedUpdate),
                        (this.colorsNeedUpdate = t.colorsNeedUpdate),
                        (this.lineDistancesNeedUpdate = t.lineDistancesNeedUpdate),
                        (this.groupsNeedUpdate = t.groupsNeedUpdate),
                        this
                    );
                },
                dispose: function () {
                    this.dispatchEvent({ type: "dispose" });
                },
            });
            class Mr extends Qi {
                constructor(t, e, n, i, r, o) {
                    super(), (this.type = "BoxBufferGeometry"), (this.parameters = { width: t, height: e, depth: n, widthSegments: i, heightSegments: r, depthSegments: o });
                    var a = this;
                    (t = t || 1), (e = e || 1), (n = n || 1), (i = Math.floor(i) || 1), (r = Math.floor(r) || 1);
                    var s = [],
                        c = [],
                        l = [],
                        u = [],
                        h = 0,
                        p = 0;
                    function d(t, e, n, i, r, o, d, f, m, v, g) {
                        var y,
                            x,
                            _ = o / m,
                            b = d / v,
                            w = o / 2,
                            M = d / 2,
                            S = f / 2,
                            T = m + 1,
                            E = v + 1,
                            A = 0,
                            P = 0,
                            L = new an();
                        for (x = 0; x < E; x++) {
                            var C = x * b - M;
                            for (y = 0; y < T; y++) {
                                var R = y * _ - w;
                                (L[t] = R * i), (L[e] = C * r), (L[n] = S), c.push(L.x, L.y, L.z), (L[t] = 0), (L[e] = 0), (L[n] = f > 0 ? 1 : -1), l.push(L.x, L.y, L.z), u.push(y / m), u.push(1 - x / v), (A += 1);
                            }
                        }
                        for (x = 0; x < v; x++)
                            for (y = 0; y < m; y++) {
                                var O = h + y + T * x,
                                    D = h + y + T * (x + 1),
                                    I = h + (y + 1) + T * (x + 1),
                                    N = h + (y + 1) + T * x;
                                s.push(O, D, N), s.push(D, I, N), (P += 6);
                            }
                        a.addGroup(p, P, g), (p += P), (h += A);
                    }
                    d("z", "y", "x", -1, -1, n, e, t, (o = Math.floor(o) || 1), r, 0),
                        d("z", "y", "x", 1, -1, n, e, -t, o, r, 1),
                        d("x", "z", "y", 1, 1, t, n, e, i, o, 2),
                        d("x", "z", "y", 1, -1, t, n, -e, i, o, 3),
                        d("x", "y", "z", 1, -1, t, e, n, i, r, 4),
                        d("x", "y", "z", -1, -1, t, e, -n, i, r, 5),
                        this.setIndex(s),
                        this.setAttribute("position", new Ui(c, 3)),
                        this.setAttribute("normal", new Ui(l, 3)),
                        this.setAttribute("uv", new Ui(u, 2));
                }
            }
            function Sr(t) {
                var e = {};
                for (var n in t)
                    for (var i in ((e[n] = {}), t[n])) {
                        var r = t[n][i];
                        r && (r.isColor || r.isMatrix3 || r.isMatrix4 || r.isVector2 || r.isVector3 || r.isVector4 || r.isTexture) ? (e[n][i] = r.clone()) : Array.isArray(r) ? (e[n][i] = r.slice()) : (e[n][i] = r);
                    }
                return e;
            }
            function Tr(t) {
                for (var e = {}, n = 0; n < t.length; n++) {
                    var i = Sr(t[n]);
                    for (var r in i) e[r] = i[r];
                }
                return e;
            }
            var Er = { clone: Sr, merge: Tr },
                Ar = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",
                Pr = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
            function Lr(t) {
                Li.call(this),
                    (this.type = "ShaderMaterial"),
                    (this.defines = {}),
                    (this.uniforms = {}),
                    (this.vertexShader = Ar),
                    (this.fragmentShader = Pr),
                    (this.linewidth = 1),
                    (this.wireframe = !1),
                    (this.wireframeLinewidth = 1),
                    (this.fog = !1),
                    (this.lights = !1),
                    (this.clipping = !1),
                    (this.skinning = !1),
                    (this.morphTargets = !1),
                    (this.morphNormals = !1),
                    (this.extensions = { derivatives: !1, fragDepth: !1, drawBuffers: !1, shaderTextureLOD: !1 }),
                    (this.defaultAttributeValues = { color: [1, 1, 1], uv: [0, 0], uv2: [0, 0] }),
                    (this.index0AttributeName = void 0),
                    (this.uniformsNeedUpdate = !1),
                    void 0 !== t && (void 0 !== t.attributes && console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."), this.setValues(t));
            }
            function Cr() {
                On.call(this), (this.type = "Camera"), (this.matrixWorldInverse = new fn()), (this.projectionMatrix = new fn()), (this.projectionMatrixInverse = new fn());
            }
            function Rr(t, e, n, i) {
                Cr.call(this),
                    (this.type = "PerspectiveCamera"),
                    (this.fov = void 0 !== t ? t : 50),
                    (this.zoom = 1),
                    (this.near = void 0 !== n ? n : 0.1),
                    (this.far = void 0 !== i ? i : 2e3),
                    (this.focus = 10),
                    (this.aspect = void 0 !== e ? e : 1),
                    (this.view = null),
                    (this.filmGauge = 35),
                    (this.filmOffset = 0),
                    this.updateProjectionMatrix();
            }
            (Lr.prototype = Object.create(Li.prototype)),
                (Lr.prototype.constructor = Lr),
                (Lr.prototype.isShaderMaterial = !0),
                (Lr.prototype.copy = function (t) {
                    return (
                        Li.prototype.copy.call(this, t),
                        (this.fragmentShader = t.fragmentShader),
                        (this.vertexShader = t.vertexShader),
                        (this.uniforms = Sr(t.uniforms)),
                        (this.defines = Object.assign({}, t.defines)),
                        (this.wireframe = t.wireframe),
                        (this.wireframeLinewidth = t.wireframeLinewidth),
                        (this.lights = t.lights),
                        (this.clipping = t.clipping),
                        (this.skinning = t.skinning),
                        (this.morphTargets = t.morphTargets),
                        (this.morphNormals = t.morphNormals),
                        (this.extensions = t.extensions),
                        this
                    );
                }),
                (Lr.prototype.toJSON = function (t) {
                    var e = Li.prototype.toJSON.call(this, t);
                    for (var n in ((e.uniforms = {}), this.uniforms)) {
                        var i = this.uniforms[n].value;
                        i && i.isTexture
                            ? (e.uniforms[n] = { type: "t", value: i.toJSON(t).uuid })
                            : i && i.isColor
                            ? (e.uniforms[n] = { type: "c", value: i.getHex() })
                            : i && i.isVector2
                            ? (e.uniforms[n] = { type: "v2", value: i.toArray() })
                            : i && i.isVector3
                            ? (e.uniforms[n] = { type: "v3", value: i.toArray() })
                            : i && i.isVector4
                            ? (e.uniforms[n] = { type: "v4", value: i.toArray() })
                            : i && i.isMatrix3
                            ? (e.uniforms[n] = { type: "m3", value: i.toArray() })
                            : i && i.isMatrix4
                            ? (e.uniforms[n] = { type: "m4", value: i.toArray() })
                            : (e.uniforms[n] = { value: i });
                    }
                    Object.keys(this.defines).length > 0 && (e.defines = this.defines), (e.vertexShader = this.vertexShader), (e.fragmentShader = this.fragmentShader);
                    var r = {};
                    for (var o in this.extensions) !0 === this.extensions[o] && (r[o] = !0);
                    return Object.keys(r).length > 0 && (e.extensions = r), e;
                }),
                (Cr.prototype = Object.assign(Object.create(On.prototype), {
                    constructor: Cr,
                    isCamera: !0,
                    copy: function (t, e) {
                        return On.prototype.copy.call(this, t, e), this.matrixWorldInverse.copy(t.matrixWorldInverse), this.projectionMatrix.copy(t.projectionMatrix), this.projectionMatrixInverse.copy(t.projectionMatrixInverse), this;
                    },
                    getWorldDirection: function (t) {
                        void 0 === t && (console.warn("THREE.Camera: .getWorldDirection() target is now required"), (t = new an())), this.updateMatrixWorld(!0);
                        var e = this.matrixWorld.elements;
                        return t.set(-e[8], -e[9], -e[10]).normalize();
                    },
                    updateMatrixWorld: function (t) {
                        On.prototype.updateMatrixWorld.call(this, t), this.matrixWorldInverse.getInverse(this.matrixWorld);
                    },
                    updateWorldMatrix: function (t, e) {
                        On.prototype.updateWorldMatrix.call(this, t, e), this.matrixWorldInverse.getInverse(this.matrixWorld);
                    },
                    clone: function () {
                        return new this.constructor().copy(this);
                    },
                })),
                (Rr.prototype = Object.assign(Object.create(Cr.prototype), {
                    constructor: Rr,
                    isPerspectiveCamera: !0,
                    copy: function (t, e) {
                        return (
                            Cr.prototype.copy.call(this, t, e),
                            (this.fov = t.fov),
                            (this.zoom = t.zoom),
                            (this.near = t.near),
                            (this.far = t.far),
                            (this.focus = t.focus),
                            (this.aspect = t.aspect),
                            (this.view = null === t.view ? null : Object.assign({}, t.view)),
                            (this.filmGauge = t.filmGauge),
                            (this.filmOffset = t.filmOffset),
                            this
                        );
                    },
                    setFocalLength: function (t) {
                        var e = (0.5 * this.getFilmHeight()) / t;
                        (this.fov = 2 * Xe.RAD2DEG * Math.atan(e)), this.updateProjectionMatrix();
                    },
                    getFocalLength: function () {
                        var t = Math.tan(0.5 * Xe.DEG2RAD * this.fov);
                        return (0.5 * this.getFilmHeight()) / t;
                    },
                    getEffectiveFOV: function () {
                        return 2 * Xe.RAD2DEG * Math.atan(Math.tan(0.5 * Xe.DEG2RAD * this.fov) / this.zoom);
                    },
                    getFilmWidth: function () {
                        return this.filmGauge * Math.min(this.aspect, 1);
                    },
                    getFilmHeight: function () {
                        return this.filmGauge / Math.max(this.aspect, 1);
                    },
                    setViewOffset: function (t, e, n, i, r, o) {
                        (this.aspect = t / e),
                            null === this.view && (this.view = { enabled: !0, fullWidth: 1, fullHeight: 1, offsetX: 0, offsetY: 0, width: 1, height: 1 }),
                            (this.view.enabled = !0),
                            (this.view.fullWidth = t),
                            (this.view.fullHeight = e),
                            (this.view.offsetX = n),
                            (this.view.offsetY = i),
                            (this.view.width = r),
                            (this.view.height = o),
                            this.updateProjectionMatrix();
                    },
                    clearViewOffset: function () {
                        null !== this.view && (this.view.enabled = !1), this.updateProjectionMatrix();
                    },
                    updateProjectionMatrix: function () {
                        var t = this.near,
                            e = (t * Math.tan(0.5 * Xe.DEG2RAD * this.fov)) / this.zoom,
                            n = 2 * e,
                            i = this.aspect * n,
                            r = -0.5 * i,
                            o = this.view;
                        if (null !== this.view && this.view.enabled) {
                            var a = o.fullWidth,
                                s = o.fullHeight;
                            (r += (o.offsetX * i) / a), (e -= (o.offsetY * n) / s), (i *= o.width / a), (n *= o.height / s);
                        }
                        var c = this.filmOffset;
                        0 !== c && (r += (t * c) / this.getFilmWidth()), this.projectionMatrix.makePerspective(r, r + i, e, e - n, t, this.far), this.projectionMatrixInverse.getInverse(this.projectionMatrix);
                    },
                    toJSON: function (t) {
                        var e = On.prototype.toJSON.call(this, t);
                        return (
                            (e.object.fov = this.fov),
                            (e.object.zoom = this.zoom),
                            (e.object.near = this.near),
                            (e.object.far = this.far),
                            (e.object.focus = this.focus),
                            (e.object.aspect = this.aspect),
                            null !== this.view && (e.object.view = Object.assign({}, this.view)),
                            (e.object.filmGauge = this.filmGauge),
                            (e.object.filmOffset = this.filmOffset),
                            e
                        );
                    },
                }));
            var Or = 90,
                Dr = 1;
            function Ir(t, e, n, i) {
                On.call(this), (this.type = "CubeCamera");
                var r = new Rr(Or, Dr, t, e);
                r.up.set(0, -1, 0), r.lookAt(new an(1, 0, 0)), this.add(r);
                var o = new Rr(Or, Dr, t, e);
                o.up.set(0, -1, 0), o.lookAt(new an(-1, 0, 0)), this.add(o);
                var a = new Rr(Or, Dr, t, e);
                a.up.set(0, 0, 1), a.lookAt(new an(0, 1, 0)), this.add(a);
                var s = new Rr(Or, Dr, t, e);
                s.up.set(0, 0, -1), s.lookAt(new an(0, -1, 0)), this.add(s);
                var c = new Rr(Or, Dr, t, e);
                c.up.set(0, -1, 0), c.lookAt(new an(0, 0, 1)), this.add(c);
                var l = new Rr(Or, Dr, t, e);
                l.up.set(0, -1, 0),
                    l.lookAt(new an(0, 0, -1)),
                    this.add(l),
                    (i = i || { format: Et, magFilter: ut, minFilter: ut }),
                    (this.renderTarget = new Nr(n, i)),
                    (this.renderTarget.texture.name = "CubeCamera"),
                    (this.update = function (t, e) {
                        null === this.parent && this.updateMatrixWorld();
                        var n = t.getRenderTarget(),
                            i = this.renderTarget,
                            u = i.texture.generateMipmaps;
                        (i.texture.generateMipmaps = !1),
                            t.setRenderTarget(i, 0),
                            t.render(e, r),
                            t.setRenderTarget(i, 1),
                            t.render(e, o),
                            t.setRenderTarget(i, 2),
                            t.render(e, a),
                            t.setRenderTarget(i, 3),
                            t.render(e, s),
                            t.setRenderTarget(i, 4),
                            t.render(e, c),
                            (i.texture.generateMipmaps = u),
                            t.setRenderTarget(i, 5),
                            t.render(e, l),
                            t.setRenderTarget(n);
                    }),
                    (this.clear = function (t, e, n, i) {
                        for (var r = t.getRenderTarget(), o = this.renderTarget, a = 0; a < 6; a++) t.setRenderTarget(o, a), t.clear(e, n, i);
                        t.setRenderTarget(r);
                    });
            }
            function Nr(t, e, n) {
                Number.isInteger(e) && (console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )"), (e = n)), tn.call(this, t, t, e);
            }
            function kr(t, e, n, i, r, o, a, s, c, l, u, h) {
                Ke.call(this, null, o, a, s, c, l, i, r, u, h),
                    (this.image = { data: t || null, width: e || 1, height: n || 1 }),
                    (this.magFilter = void 0 !== c ? c : st),
                    (this.minFilter = void 0 !== l ? l : st),
                    (this.generateMipmaps = !1),
                    (this.flipY = !1),
                    (this.unpackAlignment = 1),
                    (this.needsUpdate = !0);
            }
            (Ir.prototype = Object.create(On.prototype)),
                (Ir.prototype.constructor = Ir),
                (Nr.prototype = Object.create(tn.prototype)),
                (Nr.prototype.constructor = Nr),
                (Nr.prototype.isWebGLCubeRenderTarget = !0),
                (Nr.prototype.fromEquirectangularTexture = function (t, e) {
                    (this.texture.type = e.type), (this.texture.format = e.format), (this.texture.encoding = e.encoding);
                    var n = new Dn(),
                        i = {
                            uniforms: { tEquirect: { value: null } },
                            vertexShader: [
                                "varying vec3 vWorldDirection;",
                                "vec3 transformDirection( in vec3 dir, in mat4 matrix ) {",
                                "\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );",
                                "}",
                                "void main() {",
                                "\tvWorldDirection = transformDirection( position, modelMatrix );",
                                "\t#include <begin_vertex>",
                                "\t#include <project_vertex>",
                                "}",
                            ].join("\n"),
                            fragmentShader: [
                                "uniform sampler2D tEquirect;",
                                "varying vec3 vWorldDirection;",
                                "#define RECIPROCAL_PI 0.31830988618",
                                "#define RECIPROCAL_PI2 0.15915494",
                                "void main() {",
                                "\tvec3 direction = normalize( vWorldDirection );",
                                "\tvec2 sampleUV;",
                                "\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;",
                                "\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;",
                                "\tgl_FragColor = texture2D( tEquirect, sampleUV );",
                                "}",
                            ].join("\n"),
                        },
                        r = new Lr({ type: "CubemapFromEquirect", uniforms: Sr(i.uniforms), vertexShader: i.vertexShader, fragmentShader: i.fragmentShader, side: u, blending: p });
                    r.uniforms.tEquirect.value = e;
                    var o = new mr(new Mr(5, 5, 5), r);
                    n.add(o);
                    var a = new Ir(1, 10, 1);
                    return (a.renderTarget = this), (a.renderTarget.texture.name = "CubeCameraTexture"), a.update(t, n), o.geometry.dispose(), o.material.dispose(), this;
                }),
                (kr.prototype = Object.create(Ke.prototype)),
                (kr.prototype.constructor = kr),
                (kr.prototype.isDataTexture = !0);
            var Br = new Jn(),
                zr = new an();
            function Fr(t, e, n, i, r, o) {
                this.planes = [void 0 !== t ? t : new ci(), void 0 !== e ? e : new ci(), void 0 !== n ? n : new ci(), void 0 !== i ? i : new ci(), void 0 !== r ? r : new ci(), void 0 !== o ? o : new ci()];
            }
            Object.assign(Fr.prototype, {
                set: function (t, e, n, i, r, o) {
                    var a = this.planes;
                    return a[0].copy(t), a[1].copy(e), a[2].copy(n), a[3].copy(i), a[4].copy(r), a[5].copy(o), this;
                },
                clone: function () {
                    return new this.constructor().copy(this);
                },
                copy: function (t) {
                    for (var e = this.planes, n = 0; n < 6; n++) e[n].copy(t.planes[n]);
                    return this;
                },
                setFromProjectionMatrix: function (t) {
                    var e = this.planes,
                        n = t.elements,
                        i = n[0],
                        r = n[1],
                        o = n[2],
                        a = n[3],
                        s = n[4],
                        c = n[5],
                        l = n[6],
                        u = n[7],
                        h = n[8],
                        p = n[9],
                        d = n[10],
                        f = n[11],
                        m = n[12],
                        v = n[13],
                        g = n[14],
                        y = n[15];
                    return (
                        e[0].setComponents(a - i, u - s, f - h, y - m).normalize(),
                        e[1].setComponents(a + i, u + s, f + h, y + m).normalize(),
                        e[2].setComponents(a + r, u + c, f + p, y + v).normalize(),
                        e[3].setComponents(a - r, u - c, f - p, y - v).normalize(),
                        e[4].setComponents(a - o, u - l, f - d, y - g).normalize(),
                        e[5].setComponents(a + o, u + l, f + d, y + g).normalize(),
                        this
                    );
                },
                intersectsObject: function (t) {
                    var e = t.geometry;
                    return null === e.boundingSphere && e.computeBoundingSphere(), Br.copy(e.boundingSphere).applyMatrix4(t.matrixWorld), this.intersectsSphere(Br);
                },
                intersectsSprite: function (t) {
                    return Br.center.set(0, 0, 0), (Br.radius = 0.7071067811865476), Br.applyMatrix4(t.matrixWorld), this.intersectsSphere(Br);
                },
                intersectsSphere: function (t) {
                    for (var e = this.planes, n = t.center, i = -t.radius, r = 0; r < 6; r++) {
                        if (e[r].distanceToPoint(n) < i) return !1;
                    }
                    return !0;
                },
                intersectsBox: function (t) {
                    for (var e = this.planes, n = 0; n < 6; n++) {
                        var i = e[n];
                        if (((zr.x = i.normal.x > 0 ? t.max.x : t.min.x), (zr.y = i.normal.y > 0 ? t.max.y : t.min.y), (zr.z = i.normal.z > 0 ? t.max.z : t.min.z), i.distanceToPoint(zr) < 0)) return !1;
                    }
                    return !0;
                },
                containsPoint: function (t) {
                    for (var e = this.planes, n = 0; n < 6; n++) if (e[n].distanceToPoint(t) < 0) return !1;
                    return !0;
                },
            });
            var Ur = {
                common: { diffuse: { value: new Mi(15658734) }, opacity: { value: 1 }, map: { value: null }, uvTransform: { value: new Ze() }, uv2Transform: { value: new Ze() }, alphaMap: { value: null } },
                specularmap: { specularMap: { value: null } },
                envmap: { envMap: { value: null }, flipEnvMap: { value: -1 }, reflectivity: { value: 1 }, refractionRatio: { value: 0.98 }, maxMipLevel: { value: 0 } },
                aomap: { aoMap: { value: null }, aoMapIntensity: { value: 1 } },
                lightmap: { lightMap: { value: null }, lightMapIntensity: { value: 1 } },
                emissivemap: { emissiveMap: { value: null } },
                bumpmap: { bumpMap: { value: null }, bumpScale: { value: 1 } },
                normalmap: { normalMap: { value: null }, normalScale: { value: new Ye(1, 1) } },
                displacementmap: { displacementMap: { value: null }, displacementScale: { value: 1 }, displacementBias: { value: 0 } },
                roughnessmap: { roughnessMap: { value: null } },
                metalnessmap: { metalnessMap: { value: null } },
                gradientmap: { gradientMap: { value: null } },
                fog: { fogDensity: { value: 25e-5 }, fogNear: { value: 1 }, fogFar: { value: 2e3 }, fogColor: { value: new Mi(16777215) } },
                lights: {
                    ambientLightColor: { value: [] },
                    lightProbe: { value: [] },
                    directionalLights: { value: [], properties: { direction: {}, color: {} } },
                    directionalLightShadows: { value: [], properties: { shadowBias: {}, shadowRadius: {}, shadowMapSize: {} } },
                    directionalShadowMap: { value: [] },
                    directionalShadowMatrix: { value: [] },
                    spotLights: { value: [], properties: { color: {}, position: {}, direction: {}, distance: {}, coneCos: {}, penumbraCos: {}, decay: {} } },
                    spotLightShadows: { value: [], properties: { shadowBias: {}, shadowRadius: {}, shadowMapSize: {} } },
                    spotShadowMap: { value: [] },
                    spotShadowMatrix: { value: [] },
                    pointLights: { value: [], properties: { color: {}, position: {}, decay: {}, distance: {} } },
                    pointLightShadows: { value: [], properties: { shadowBias: {}, shadowRadius: {}, shadowMapSize: {}, shadowCameraNear: {}, shadowCameraFar: {} } },
                    pointShadowMap: { value: [] },
                    pointShadowMatrix: { value: [] },
                    hemisphereLights: { value: [], properties: { direction: {}, skyColor: {}, groundColor: {} } },
                    rectAreaLights: { value: [], properties: { color: {}, position: {}, width: {}, height: {} } },
                },
                points: { diffuse: { value: new Mi(15658734) }, opacity: { value: 1 }, size: { value: 1 }, scale: { value: 1 }, map: { value: null }, alphaMap: { value: null }, uvTransform: { value: new Ze() } },
                sprite: { diffuse: { value: new Mi(15658734) }, opacity: { value: 1 }, center: { value: new Ye(0.5, 0.5) }, rotation: { value: 0 }, map: { value: null }, alphaMap: { value: null }, uvTransform: { value: new Ze() } },
            };
            function jr() {
                var t = null,
                    e = !1,
                    n = null;
                function i(r, o) {
                    !1 !== e && (n(r, o), t.requestAnimationFrame(i));
                }
                return {
                    start: function () {
                        !0 !== e && null !== n && (t.requestAnimationFrame(i), (e = !0));
                    },
                    stop: function () {
                        e = !1;
                    },
                    setAnimationLoop: function (t) {
                        n = t;
                    },
                    setContext: function (e) {
                        t = e;
                    },
                };
            }
            function Gr(t, e) {
                var n = e.isWebGL2,
                    i = new WeakMap();
                return {
                    get: function (t) {
                        return t.isInterleavedBufferAttribute && (t = t.data), i.get(t);
                    },
                    remove: function (e) {
                        e.isInterleavedBufferAttribute && (e = e.data);
                        var n = i.get(e);
                        n && (t.deleteBuffer(n.buffer), i.delete(e));
                    },
                    update: function (e, r) {
                        e.isInterleavedBufferAttribute && (e = e.data);
                        var o = i.get(e);
                        void 0 === o
                            ? i.set(
                                  e,
                                  (function (e, n) {
                                      var i = e.array,
                                          r = e.usage,
                                          o = t.createBuffer();
                                      t.bindBuffer(n, o), t.bufferData(n, i, r), e.onUploadCallback();
                                      var a = 5126;
                                      return (
                                          i instanceof Float32Array
                                              ? (a = 5126)
                                              : i instanceof Float64Array
                                              ? console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.")
                                              : i instanceof Uint16Array
                                              ? (a = 5123)
                                              : i instanceof Int16Array
                                              ? (a = 5122)
                                              : i instanceof Uint32Array
                                              ? (a = 5125)
                                              : i instanceof Int32Array
                                              ? (a = 5124)
                                              : i instanceof Int8Array
                                              ? (a = 5120)
                                              : i instanceof Uint8Array && (a = 5121),
                                          { buffer: o, type: a, bytesPerElement: i.BYTES_PER_ELEMENT, version: e.version }
                                      );
                                  })(e, r)
                              )
                            : o.version < e.version &&
                              ((function (e, i, r) {
                                  var o = i.array,
                                      a = i.updateRange;
                                  t.bindBuffer(r, e),
                                      -1 === a.count
                                          ? t.bufferSubData(r, 0, o)
                                          : (n ? t.bufferSubData(r, a.offset * o.BYTES_PER_ELEMENT, o, a.offset, a.count) : t.bufferSubData(r, a.offset * o.BYTES_PER_ELEMENT, o.subarray(a.offset, a.offset + a.count)), (a.count = -1));
                              })(o.buffer, e, r),
                              (o.version = e.version));
                    },
                };
            }
            function Hr(t, e, n, i) {
                wr.call(this), (this.type = "PlaneGeometry"), (this.parameters = { width: t, height: e, widthSegments: n, heightSegments: i }), this.fromBufferGeometry(new Vr(t, e, n, i)), this.mergeVertices();
            }
            function Vr(t, e, n, i) {
                Qi.call(this), (this.type = "PlaneBufferGeometry"), (this.parameters = { width: t, height: e, widthSegments: n, heightSegments: i });
                var r,
                    o,
                    a = (t = t || 1) / 2,
                    s = (e = e || 1) / 2,
                    c = Math.floor(n) || 1,
                    l = Math.floor(i) || 1,
                    u = c + 1,
                    h = l + 1,
                    p = t / c,
                    d = e / l,
                    f = [],
                    m = [],
                    v = [],
                    g = [];
                for (o = 0; o < h; o++) {
                    var y = o * d - s;
                    for (r = 0; r < u; r++) {
                        var x = r * p - a;
                        m.push(x, -y, 0), v.push(0, 0, 1), g.push(r / c), g.push(1 - o / l);
                    }
                }
                for (o = 0; o < l; o++)
                    for (r = 0; r < c; r++) {
                        var _ = r + u * o,
                            b = r + u * (o + 1),
                            w = r + 1 + u * (o + 1),
                            M = r + 1 + u * o;
                        f.push(_, b, M), f.push(b, w, M);
                    }
                this.setIndex(f), this.setAttribute("position", new Ui(m, 3)), this.setAttribute("normal", new Ui(v, 3)), this.setAttribute("uv", new Ui(g, 2));
            }
            (Hr.prototype = Object.create(wr.prototype)), (Hr.prototype.constructor = Hr), (Vr.prototype = Object.create(Qi.prototype)), (Vr.prototype.constructor = Vr);
            var Wr = {
                    alphamap_fragment: "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",
                    alphamap_pars_fragment: "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",
                    alphatest_fragment: "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif",
                    aomap_fragment:
                        "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif",
                    aomap_pars_fragment: "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",
                    begin_vertex: "vec3 transformed = vec3( position );",
                    beginnormal_vertex: "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",
                    bsdfs:
                        "vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha  = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif",
                    bumpmap_pars_fragment:
                        "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",
                    clipping_planes_fragment:
                        "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",
                    clipping_planes_pars_fragment: "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",
                    clipping_planes_pars_vertex: "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",
                    clipping_planes_vertex: "#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",
                    color_fragment: "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif",
                    color_pars_fragment: "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",
                    color_pars_vertex: "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",
                    color_vertex: "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif",
                    common:
                        "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n  return m[ 2 ][ 3 ] == - 1.0;\n}",
                    cube_uv_reflection_fragment:
                        "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_maxMipLevel 8.0\n#define cubeUV_minMipLevel 4.0\n#define cubeUV_maxTileSize 256.0\n#define cubeUV_minTileSize 16.0\nfloat getFace(vec3 direction) {\n    vec3 absDirection = abs(direction);\n    float face = -1.0;\n    if (absDirection.x > absDirection.z) {\n      if (absDirection.x > absDirection.y)\n        face = direction.x > 0.0 ? 0.0 : 3.0;\n      else\n        face = direction.y > 0.0 ? 1.0 : 4.0;\n    } else {\n      if (absDirection.z > absDirection.y)\n        face = direction.z > 0.0 ? 2.0 : 5.0;\n      else\n        face = direction.y > 0.0 ? 1.0 : 4.0;\n    }\n    return face;\n}\nvec2 getUV(vec3 direction, float face) {\n    vec2 uv;\n    if (face == 0.0) {\n      uv = vec2(-direction.z, direction.y) / abs(direction.x);\n    } else if (face == 1.0) {\n      uv = vec2(direction.x, -direction.z) / abs(direction.y);\n    } else if (face == 2.0) {\n      uv = direction.xy / abs(direction.z);\n    } else if (face == 3.0) {\n      uv = vec2(direction.z, direction.y) / abs(direction.x);\n    } else if (face == 4.0) {\n      uv = direction.xz / abs(direction.y);\n    } else {\n      uv = vec2(-direction.x, direction.y) / abs(direction.z);\n    }\n    return 0.5 * (uv + 1.0);\n}\nvec3 bilinearCubeUV(sampler2D envMap, vec3 direction, float mipInt) {\n  float face = getFace(direction);\n  float filterInt = max(cubeUV_minMipLevel - mipInt, 0.0);\n  mipInt = max(mipInt, cubeUV_minMipLevel);\n  float faceSize = exp2(mipInt);\n  float texelSize = 1.0 / (3.0 * cubeUV_maxTileSize);\n  vec2 uv = getUV(direction, face) * (faceSize - 1.0);\n  vec2 f = fract(uv);\n  uv += 0.5 - f;\n  if (face > 2.0) {\n    uv.y += faceSize;\n    face -= 3.0;\n  }\n  uv.x += face * faceSize;\n  if(mipInt < cubeUV_maxMipLevel){\n    uv.y += 2.0 * cubeUV_maxTileSize;\n  }\n  uv.y += filterInt * 2.0 * cubeUV_minTileSize;\n  uv.x += 3.0 * max(0.0, cubeUV_maxTileSize - 2.0 * faceSize);\n  uv *= texelSize;\n  vec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.x += texelSize;\n  vec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.y += texelSize;\n  vec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.x -= texelSize;\n  vec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  vec3 tm = mix(tl, tr, f.x);\n  vec3 bm = mix(bl, br, f.x);\n  return mix(tm, bm, f.y);\n}\n#define r0 1.0\n#define v0 0.339\n#define m0 -2.0\n#define r1 0.8\n#define v1 0.276\n#define m1 -1.0\n#define r4 0.4\n#define v4 0.046\n#define m4 2.0\n#define r5 0.305\n#define v5 0.016\n#define m5 3.0\n#define r6 0.21\n#define v6 0.0038\n#define m6 4.0\nfloat roughnessToMip(float roughness) {\n  float mip = 0.0;\n  if (roughness >= r1) {\n    mip = (r0 - roughness) * (m1 - m0) / (r0 - r1) + m0;\n  } else if (roughness >= r4) {\n    mip = (r1 - roughness) * (m4 - m1) / (r1 - r4) + m1;\n  } else if (roughness >= r5) {\n    mip = (r4 - roughness) * (m5 - m4) / (r4 - r5) + m4;\n  } else if (roughness >= r6) {\n    mip = (r5 - roughness) * (m6 - m5) / (r5 - r6) + m5;\n  } else {\n    mip = -2.0 * log2(1.16 * roughness);  }\n  return mip;\n}\nvec4 textureCubeUV(sampler2D envMap, vec3 sampleDir, float roughness) {\n  float mip = clamp(roughnessToMip(roughness), m0, cubeUV_maxMipLevel);\n  float mipF = fract(mip);\n  float mipInt = floor(mip);\n  vec3 color0 = bilinearCubeUV(envMap, sampleDir, mipInt);\n  if (mipF == 0.0) {\n    return vec4(color0, 1.0);\n  } else {\n    vec3 color1 = bilinearCubeUV(envMap, sampleDir, mipInt + 1.0);\n    return vec4(mix(color0, color1, mipF), 1.0);\n  }\n}\n#endif",
                    defaultnormal_vertex:
                        "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",
                    displacementmap_pars_vertex: "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",
                    displacementmap_vertex: "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",
                    emissivemap_fragment:
                        "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",
                    emissivemap_pars_fragment: "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",
                    encodings_fragment: "gl_FragColor = linearToOutputTexel( gl_FragColor );",
                    encodings_pars_fragment:
                        "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}",
                    envmap_fragment:
                        "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\t\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t}  else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\tenvColor = envMapTexelToLinear( envColor );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",
                    envmap_common_pars_fragment:
                        "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",
                    envmap_pars_fragment:
                        "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",
                    envmap_pars_vertex:
                        "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",
                    envmap_physical_pars_fragment:
                        "#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t  vec3 reflectVec = reflect( -viewDir, normal );\n\t\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif",
                    envmap_vertex:
                        "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) { \n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",
                    fog_vertex: "#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif",
                    fog_pars_vertex: "#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif",
                    fog_fragment:
                        "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",
                    fog_pars_fragment:
                        "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",
                    gradientmap_pars_fragment:
                        "#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn texture2D( gradientMap, coord ).rgb;\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}",
                    lightmap_fragment: "#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n#endif",
                    lightmap_pars_fragment: "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",
                    lights_lambert_vertex:
                        "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif",
                    lights_pars_begin:
                        "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif",
                    lights_toon_fragment: "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",
                    lights_toon_pars_fragment:
                        "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct ToonMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)",
                    lights_phong_fragment:
                        "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",
                    lights_phong_pars_fragment:
                        "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",
                    lights_physical_fragment:
                        "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\n#ifdef REFLECTIVITY\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheen;\n#endif",
                    lights_physical_pars_fragment:
                        "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *= PI;\n\t\t#endif\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",
                    lights_fragment_begin:
                        "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",
                    lights_fragment_maps:
                        "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif",
                    lights_fragment_end:
                        "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",
                    logdepthbuf_fragment: "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",
                    logdepthbuf_pars_fragment: "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",
                    logdepthbuf_pars_vertex: "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",
                    logdepthbuf_vertex:
                        "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",
                    map_fragment: "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif",
                    map_pars_fragment: "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",
                    map_particle_fragment:
                        "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",
                    map_particle_pars_fragment:
                        "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",
                    metalnessmap_fragment: "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",
                    metalnessmap_pars_fragment: "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",
                    morphnormal_vertex:
                        "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n#endif",
                    morphtarget_pars_vertex:
                        "#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",
                    morphtarget_vertex:
                        "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t#endif\n#endif",
                    normal_fragment_begin:
                        "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",
                    normal_fragment_maps:
                        "#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif",
                    normalmap_pars_fragment:
                        "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\tvec3 N = normalize( surf_norm );\n\t\tmat3 tsn = mat3( S, T, N );\n\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif",
                    clearcoat_normal_fragment_begin: "#ifdef CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",
                    clearcoat_normal_fragment_maps:
                        "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\n\t#endif\n#endif",
                    clearcoat_pars_fragment:
                        "#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",
                    packing:
                        "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",
                    premultiplied_alpha_fragment: "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",
                    project_vertex:
                        "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",
                    dithering_fragment: "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",
                    dithering_pars_fragment:
                        "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",
                    roughnessmap_fragment: "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",
                    roughnessmap_pars_fragment: "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",
                    shadowmap_pars_fragment:
                        "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",
                    shadowmap_pars_vertex:
                        "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",
                    shadowmap_vertex:
                        "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif",
                    shadowmask_pars_fragment:
                        "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",
                    skinbase_vertex:
                        "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",
                    skinning_pars_vertex:
                        "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",
                    skinning_vertex:
                        "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",
                    skinnormal_vertex:
                        "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",
                    specularmap_fragment: "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",
                    specularmap_pars_fragment: "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",
                    tonemapping_fragment: "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",
                    tonemapping_pars_fragment:
                        "#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\n}",
                    uv_pars_fragment: "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif",
                    uv_pars_vertex: "#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif",
                    uv_vertex: "#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",
                    uv2_pars_fragment: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",
                    uv2_pars_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif",
                    uv2_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif",
                    worldpos_vertex:
                        "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",
                    background_frag:
                        "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",
                    background_vert: "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",
                    cube_frag:
                        "#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",
                    cube_vert:
                        "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",
                    depth_frag:
                        "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",
                    depth_vert:
                        "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",
                    distanceRGBA_frag:
                        "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",
                    distanceRGBA_vert:
                        "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",
                    equirect_frag:
                        "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",
                    equirect_vert: "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",
                    linedashed_frag:
                        "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",
                    linedashed_vert:
                        "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",
                    meshbasic_frag:
                        "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",
                    meshbasic_vert:
                        "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",
                    meshlambert_frag:
                        "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
                    meshlambert_vert:
                        "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
                    meshmatcap_frag:
                        "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",
                    meshmatcap_vert:
                        "#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",
                    meshtoon_frag:
                        "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
                    meshtoon_vert:
                        "#define TOON\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
                    meshphong_frag:
                        "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
                    meshphong_vert:
                        "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
                    meshphysical_frag:
                        "#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSPARENCY\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSPARENCY\n\tuniform float transparency;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#ifdef TRANSPARENCY\n\t\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\n\t#endif\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
                    meshphysical_vert:
                        "#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
                    normal_frag:
                        "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}",
                    normal_vert:
                        "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",
                    points_frag:
                        "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",
                    points_vert:
                        "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",
                    shadow_frag:
                        "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",
                    shadow_vert:
                        "#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
                    sprite_frag:
                        "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",
                    sprite_vert:
                        "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",
                },
                qr = {
                    basic: { uniforms: Tr([Ur.common, Ur.specularmap, Ur.envmap, Ur.aomap, Ur.lightmap, Ur.fog]), vertexShader: Wr.meshbasic_vert, fragmentShader: Wr.meshbasic_frag },
                    lambert: {
                        uniforms: Tr([Ur.common, Ur.specularmap, Ur.envmap, Ur.aomap, Ur.lightmap, Ur.emissivemap, Ur.fog, Ur.lights, { emissive: { value: new Mi(0) } }]),
                        vertexShader: Wr.meshlambert_vert,
                        fragmentShader: Wr.meshlambert_frag,
                    },
                    phong: {
                        uniforms: Tr([
                            Ur.common,
                            Ur.specularmap,
                            Ur.envmap,
                            Ur.aomap,
                            Ur.lightmap,
                            Ur.emissivemap,
                            Ur.bumpmap,
                            Ur.normalmap,
                            Ur.displacementmap,
                            Ur.fog,
                            Ur.lights,
                            { emissive: { value: new Mi(0) }, specular: { value: new Mi(1118481) }, shininess: { value: 30 } },
                        ]),
                        vertexShader: Wr.meshphong_vert,
                        fragmentShader: Wr.meshphong_frag,
                    },
                    standard: {
                        uniforms: Tr([
                            Ur.common,
                            Ur.envmap,
                            Ur.aomap,
                            Ur.lightmap,
                            Ur.emissivemap,
                            Ur.bumpmap,
                            Ur.normalmap,
                            Ur.displacementmap,
                            Ur.roughnessmap,
                            Ur.metalnessmap,
                            Ur.fog,
                            Ur.lights,
                            { emissive: { value: new Mi(0) }, roughness: { value: 0.5 }, metalness: { value: 0.5 }, envMapIntensity: { value: 1 } },
                        ]),
                        vertexShader: Wr.meshphysical_vert,
                        fragmentShader: Wr.meshphysical_frag,
                    },
                    toon: {
                        uniforms: Tr([
                            Ur.common,
                            Ur.specularmap,
                            Ur.aomap,
                            Ur.lightmap,
                            Ur.emissivemap,
                            Ur.bumpmap,
                            Ur.normalmap,
                            Ur.displacementmap,
                            Ur.gradientmap,
                            Ur.fog,
                            Ur.lights,
                            { emissive: { value: new Mi(0) }, specular: { value: new Mi(1118481) }, shininess: { value: 30 } },
                        ]),
                        vertexShader: Wr.meshtoon_vert,
                        fragmentShader: Wr.meshtoon_frag,
                    },
                    matcap: { uniforms: Tr([Ur.common, Ur.bumpmap, Ur.normalmap, Ur.displacementmap, Ur.fog, { matcap: { value: null } }]), vertexShader: Wr.meshmatcap_vert, fragmentShader: Wr.meshmatcap_frag },
                    points: { uniforms: Tr([Ur.points, Ur.fog]), vertexShader: Wr.points_vert, fragmentShader: Wr.points_frag },
                    dashed: { uniforms: Tr([Ur.common, Ur.fog, { scale: { value: 1 }, dashSize: { value: 1 }, totalSize: { value: 2 } }]), vertexShader: Wr.linedashed_vert, fragmentShader: Wr.linedashed_frag },
                    depth: { uniforms: Tr([Ur.common, Ur.displacementmap]), vertexShader: Wr.depth_vert, fragmentShader: Wr.depth_frag },
                    normal: { uniforms: Tr([Ur.common, Ur.bumpmap, Ur.normalmap, Ur.displacementmap, { opacity: { value: 1 } }]), vertexShader: Wr.normal_vert, fragmentShader: Wr.normal_frag },
                    sprite: { uniforms: Tr([Ur.sprite, Ur.fog]), vertexShader: Wr.sprite_vert, fragmentShader: Wr.sprite_frag },
                    background: { uniforms: { uvTransform: { value: new Ze() }, t2D: { value: null } }, vertexShader: Wr.background_vert, fragmentShader: Wr.background_frag },
                    cube: { uniforms: Tr([Ur.envmap, { opacity: { value: 1 } }]), vertexShader: Wr.cube_vert, fragmentShader: Wr.cube_frag },
                    equirect: { uniforms: { tEquirect: { value: null } }, vertexShader: Wr.equirect_vert, fragmentShader: Wr.equirect_frag },
                    distanceRGBA: {
                        uniforms: Tr([Ur.common, Ur.displacementmap, { referencePosition: { value: new an() }, nearDistance: { value: 1 }, farDistance: { value: 1e3 } }]),
                        vertexShader: Wr.distanceRGBA_vert,
                        fragmentShader: Wr.distanceRGBA_frag,
                    },
                    shadow: { uniforms: Tr([Ur.lights, Ur.fog, { color: { value: new Mi(0) }, opacity: { value: 1 } }]), vertexShader: Wr.shadow_vert, fragmentShader: Wr.shadow_frag },
                };
            function Xr(t, e) {
                return Math.abs(e[1]) - Math.abs(t[1]);
            }
            function Yr(t, e, n, i, r, o, a, s, c, l) {
                (t = void 0 !== t ? t : []), (e = void 0 !== e ? e : Q), (a = void 0 !== a ? a : Et), Ke.call(this, t, e, n, i, r, o, a, s, c, l), (this.flipY = !1);
            }
            function Zr(t, e, n, i) {
                Ke.call(this, null),
                    (this.image = { data: t || null, width: e || 1, height: n || 1, depth: i || 1 }),
                    (this.magFilter = st),
                    (this.minFilter = st),
                    (this.wrapR = ot),
                    (this.generateMipmaps = !1),
                    (this.flipY = !1),
                    (this.needsUpdate = !0);
            }
            function Jr(t, e, n, i) {
                Ke.call(this, null),
                    (this.image = { data: t || null, width: e || 1, height: n || 1, depth: i || 1 }),
                    (this.magFilter = st),
                    (this.minFilter = st),
                    (this.wrapR = ot),
                    (this.generateMipmaps = !1),
                    (this.flipY = !1),
                    (this.needsUpdate = !0);
            }
            (qr.physical = {
                uniforms: Tr([
                    qr.standard.uniforms,
                    {
                        clearcoat: { value: 0 },
                        clearcoatMap: { value: null },
                        clearcoatRoughness: { value: 0 },
                        clearcoatRoughnessMap: { value: null },
                        clearcoatNormalScale: { value: new Ye(1, 1) },
                        clearcoatNormalMap: { value: null },
                        sheen: { value: new Mi(0) },
                        transparency: { value: 0 },
                    },
                ]),
                vertexShader: Wr.meshphysical_vert,
                fragmentShader: Wr.meshphysical_frag,
            }),
                (Yr.prototype = Object.create(Ke.prototype)),
                (Yr.prototype.constructor = Yr),
                (Yr.prototype.isCubeTexture = !0),
                Object.defineProperty(Yr.prototype, "images", {
                    get: function () {
                        return this.image;
                    },
                    set: function (t) {
                        this.image = t;
                    },
                }),
                (Zr.prototype = Object.create(Ke.prototype)),
                (Zr.prototype.constructor = Zr),
                (Zr.prototype.isDataTexture2DArray = !0),
                (Jr.prototype = Object.create(Ke.prototype)),
                (Jr.prototype.constructor = Jr),
                (Jr.prototype.isDataTexture3D = !0);
            var Qr = new Ke(),
                Kr = new Zr(),
                $r = new Jr(),
                to = new Yr(),
                eo = [],
                no = [],
                io = new Float32Array(16),
                ro = new Float32Array(9),
                oo = new Float32Array(4);
            function ao(t, e, n) {
                var i = t[0];
                if (i <= 0 || i > 0) return t;
                var r = e * n,
                    o = eo[r];
                if ((void 0 === o && ((o = new Float32Array(r)), (eo[r] = o)), 0 !== e)) {
                    i.toArray(o, 0);
                    for (var a = 1, s = 0; a !== e; ++a) (s += n), t[a].toArray(o, s);
                }
                return o;
            }
            function so(t, e) {
                if (t.length !== e.length) return !1;
                for (var n = 0, i = t.length; n < i; n++) if (t[n] !== e[n]) return !1;
                return !0;
            }
            function co(t, e) {
                for (var n = 0, i = e.length; n < i; n++) t[n] = e[n];
            }
            function lo(t, e) {
                var n = no[e];
                void 0 === n && ((n = new Int32Array(e)), (no[e] = n));
                for (var i = 0; i !== e; ++i) n[i] = t.allocateTextureUnit();
                return n;
            }
            function uo(t, e) {
                var n = this.cache;
                n[0] !== e && (t.uniform1f(this.addr, e), (n[0] = e));
            }
            function ho(t, e) {
                var n = this.cache;
                if (void 0 !== e.x) (n[0] === e.x && n[1] === e.y) || (t.uniform2f(this.addr, e.x, e.y), (n[0] = e.x), (n[1] = e.y));
                else {
                    if (so(n, e)) return;
                    t.uniform2fv(this.addr, e), co(n, e);
                }
            }
            function po(t, e) {
                var n = this.cache;
                if (void 0 !== e.x) (n[0] === e.x && n[1] === e.y && n[2] === e.z) || (t.uniform3f(this.addr, e.x, e.y, e.z), (n[0] = e.x), (n[1] = e.y), (n[2] = e.z));
                else if (void 0 !== e.r) (n[0] === e.r && n[1] === e.g && n[2] === e.b) || (t.uniform3f(this.addr, e.r, e.g, e.b), (n[0] = e.r), (n[1] = e.g), (n[2] = e.b));
                else {
                    if (so(n, e)) return;
                    t.uniform3fv(this.addr, e), co(n, e);
                }
            }
            function fo(t, e) {
                var n = this.cache;
                if (void 0 !== e.x) (n[0] === e.x && n[1] === e.y && n[2] === e.z && n[3] === e.w) || (t.uniform4f(this.addr, e.x, e.y, e.z, e.w), (n[0] = e.x), (n[1] = e.y), (n[2] = e.z), (n[3] = e.w));
                else {
                    if (so(n, e)) return;
                    t.uniform4fv(this.addr, e), co(n, e);
                }
            }
            function mo(t, e) {
                var n = this.cache,
                    i = e.elements;
                if (void 0 === i) {
                    if (so(n, e)) return;
                    t.uniformMatrix2fv(this.addr, !1, e), co(n, e);
                } else {
                    if (so(n, i)) return;
                    oo.set(i), t.uniformMatrix2fv(this.addr, !1, oo), co(n, i);
                }
            }
            function vo(t, e) {
                var n = this.cache,
                    i = e.elements;
                if (void 0 === i) {
                    if (so(n, e)) return;
                    t.uniformMatrix3fv(this.addr, !1, e), co(n, e);
                } else {
                    if (so(n, i)) return;
                    ro.set(i), t.uniformMatrix3fv(this.addr, !1, ro), co(n, i);
                }
            }
            function go(t, e) {
                var n = this.cache,
                    i = e.elements;
                if (void 0 === i) {
                    if (so(n, e)) return;
                    t.uniformMatrix4fv(this.addr, !1, e), co(n, e);
                } else {
                    if (so(n, i)) return;
                    io.set(i), t.uniformMatrix4fv(this.addr, !1, io), co(n, i);
                }
            }
            function yo(t, e, n) {
                var i = this.cache,
                    r = n.allocateTextureUnit();
                i[0] !== r && (t.uniform1i(this.addr, r), (i[0] = r)), n.safeSetTexture2D(e || Qr, r);
            }
            function xo(t, e, n) {
                var i = this.cache,
                    r = n.allocateTextureUnit();
                i[0] !== r && (t.uniform1i(this.addr, r), (i[0] = r)), n.setTexture2DArray(e || Kr, r);
            }
            function _o(t, e, n) {
                var i = this.cache,
                    r = n.allocateTextureUnit();
                i[0] !== r && (t.uniform1i(this.addr, r), (i[0] = r)), n.setTexture3D(e || $r, r);
            }
            function bo(t, e, n) {
                var i = this.cache,
                    r = n.allocateTextureUnit();
                i[0] !== r && (t.uniform1i(this.addr, r), (i[0] = r)), n.safeSetTextureCube(e || to, r);
            }
            function wo(t, e) {
                var n = this.cache;
                n[0] !== e && (t.uniform1i(this.addr, e), (n[0] = e));
            }
            function Mo(t, e) {
                var n = this.cache;
                so(n, e) || (t.uniform2iv(this.addr, e), co(n, e));
            }
            function So(t, e) {
                var n = this.cache;
                so(n, e) || (t.uniform3iv(this.addr, e), co(n, e));
            }
            function To(t, e) {
                var n = this.cache;
                so(n, e) || (t.uniform4iv(this.addr, e), co(n, e));
            }
            function Eo(t, e) {
                var n = this.cache;
                n[0] !== e && (t.uniform1ui(this.addr, e), (n[0] = e));
            }
            function Ao(t, e) {
                t.uniform1fv(this.addr, e);
            }
            function Po(t, e) {
                t.uniform1iv(this.addr, e);
            }
            function Lo(t, e) {
                t.uniform2iv(this.addr, e);
            }
            function Co(t, e) {
                t.uniform3iv(this.addr, e);
            }
            function Ro(t, e) {
                t.uniform4iv(this.addr, e);
            }
            function Oo(t, e) {
                var n = ao(e, this.size, 2);
                t.uniform2fv(this.addr, n);
            }
            function Do(t, e) {
                var n = ao(e, this.size, 3);
                t.uniform3fv(this.addr, n);
            }
            function Io(t, e) {
                var n = ao(e, this.size, 4);
                t.uniform4fv(this.addr, n);
            }
            function No(t, e) {
                var n = ao(e, this.size, 4);
                t.uniformMatrix2fv(this.addr, !1, n);
            }
            function ko(t, e) {
                var n = ao(e, this.size, 9);
                t.uniformMatrix3fv(this.addr, !1, n);
            }
            function Bo(t, e) {
                var n = ao(e, this.size, 16);
                t.uniformMatrix4fv(this.addr, !1, n);
            }
            function zo(t, e, n) {
                var i = e.length,
                    r = lo(n, i);
                t.uniform1iv(this.addr, r);
                for (var o = 0; o !== i; ++o) n.safeSetTexture2D(e[o] || Qr, r[o]);
            }
            function Fo(t, e, n) {
                var i = e.length,
                    r = lo(n, i);
                t.uniform1iv(this.addr, r);
                for (var o = 0; o !== i; ++o) n.safeSetTextureCube(e[o] || to, r[o]);
            }
            function Uo(t, e, n) {
                (this.id = t),
                    (this.addr = n),
                    (this.cache = []),
                    (this.setValue = (function (t) {
                        switch (t) {
                            case 5126:
                                return uo;
                            case 35664:
                                return ho;
                            case 35665:
                                return po;
                            case 35666:
                                return fo;
                            case 35674:
                                return mo;
                            case 35675:
                                return vo;
                            case 35676:
                                return go;
                            case 5124:
                            case 35670:
                                return wo;
                            case 35667:
                            case 35671:
                                return Mo;
                            case 35668:
                            case 35672:
                                return So;
                            case 35669:
                            case 35673:
                                return To;
                            case 5125:
                                return Eo;
                            case 35678:
                            case 36198:
                            case 36298:
                            case 36306:
                            case 35682:
                                return yo;
                            case 35679:
                            case 36299:
                            case 36307:
                                return _o;
                            case 35680:
                            case 36300:
                            case 36308:
                            case 36293:
                                return bo;
                            case 36289:
                            case 36303:
                            case 36311:
                            case 36292:
                                return xo;
                        }
                    })(e.type));
            }
            function jo(t, e, n) {
                (this.id = t),
                    (this.addr = n),
                    (this.cache = []),
                    (this.size = e.size),
                    (this.setValue = (function (t) {
                        switch (t) {
                            case 5126:
                                return Ao;
                            case 35664:
                                return Oo;
                            case 35665:
                                return Do;
                            case 35666:
                                return Io;
                            case 35674:
                                return No;
                            case 35675:
                                return ko;
                            case 35676:
                                return Bo;
                            case 5124:
                            case 35670:
                                return Po;
                            case 35667:
                            case 35671:
                                return Lo;
                            case 35668:
                            case 35672:
                                return Co;
                            case 35669:
                            case 35673:
                                return Ro;
                            case 35678:
                            case 36198:
                            case 36298:
                            case 36306:
                            case 35682:
                                return zo;
                            case 35680:
                            case 36300:
                            case 36308:
                            case 36293:
                                return Fo;
                        }
                    })(e.type));
            }
            function Go(t) {
                (this.id = t), (this.seq = []), (this.map = {});
            }
            (jo.prototype.updateCache = function (t) {
                var e = this.cache;
                t instanceof Float32Array && e.length !== t.length && (this.cache = new Float32Array(t.length)), co(e, t);
            }),
                (Go.prototype.setValue = function (t, e, n) {
                    for (var i = this.seq, r = 0, o = i.length; r !== o; ++r) {
                        var a = i[r];
                        a.setValue(t, e[a.id], n);
                    }
                });
            var Ho = /([\w\d_]+)(\])?(\[|\.)?/g;
            function Vo(t, e) {
                t.seq.push(e), (t.map[e.id] = e);
            }
            function Wo(t, e, n) {
                var i = t.name,
                    r = i.length;
                for (Ho.lastIndex = 0; ; ) {
                    var o = Ho.exec(i),
                        a = Ho.lastIndex,
                        s = o[1],
                        c = "]" === o[2],
                        l = o[3];
                    if ((c && (s |= 0), void 0 === l || ("[" === l && a + 2 === r))) {
                        Vo(n, void 0 === l ? new Uo(s, t, e) : new jo(s, t, e));
                        break;
                    }
                    var u = n.map[s];
                    void 0 === u && Vo(n, (u = new Go(s))), (n = u);
                }
            }
            function qo(t, e) {
                (this.seq = []), (this.map = {});
                for (var n = t.getProgramParameter(e, 35718), i = 0; i < n; ++i) {
                    var r = t.getActiveUniform(e, i);
                    Wo(r, t.getUniformLocation(e, r.name), this);
                }
            }
            function Xo(t, e, n) {
                var i = t.createShader(e);
                return t.shaderSource(i, n), t.compileShader(i), i;
            }
            (qo.prototype.setValue = function (t, e, n, i) {
                var r = this.map[e];
                void 0 !== r && r.setValue(t, n, i);
            }),
                (qo.prototype.setOptional = function (t, e, n) {
                    var i = e[n];
                    void 0 !== i && this.setValue(t, n, i);
                }),
                (qo.upload = function (t, e, n, i) {
                    for (var r = 0, o = e.length; r !== o; ++r) {
                        var a = e[r],
                            s = n[a.id];
                        !1 !== s.needsUpdate && a.setValue(t, s.value, i);
                    }
                }),
                (qo.seqWithValue = function (t, e) {
                    for (var n = [], i = 0, r = t.length; i !== r; ++i) {
                        var o = t[i];
                        o.id in e && n.push(o);
                    }
                    return n;
                });
            var Yo = 0;
            function Zo(t) {
                switch (t) {
                    case Ae:
                        return ["Linear", "( value )"];
                    case Pe:
                        return ["sRGB", "( value )"];
                    case Ce:
                        return ["RGBE", "( value )"];
                    case Oe:
                        return ["RGBM", "( value, 7.0 )"];
                    case De:
                        return ["RGBM", "( value, 16.0 )"];
                    case Ie:
                        return ["RGBD", "( value, 256.0 )"];
                    case Le:
                        return ["Gamma", "( value, float( GAMMA_FACTOR ) )"];
                    case Re:
                        return ["LogLuv", "( value )"];
                    default:
                        throw new Error("unsupported encoding: " + t);
                }
            }
            function Jo(t, e, n) {
                var i = t.getShaderParameter(e, 35713),
                    r = t.getShaderInfoLog(e).trim();
                return i && "" === r
                    ? ""
                    : "THREE.WebGLShader: gl.getShaderInfoLog() " +
                          n +
                          "\n" +
                          r +
                          (function (t) {
                              for (var e = t.split("\n"), n = 0; n < e.length; n++) e[n] = n + 1 + ": " + e[n];
                              return e.join("\n");
                          })(t.getShaderSource(e));
            }
            function Qo(t, e) {
                var n = Zo(e);
                return "vec4 " + t + "( vec4 value ) { return " + n[0] + "ToLinear" + n[1] + "; }";
            }
            function Ko(t) {
                return "" !== t;
            }
            function $o(t, e) {
                return t
                    .replace(/NUM_DIR_LIGHTS/g, e.numDirLights)
                    .replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights)
                    .replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights)
                    .replace(/NUM_POINT_LIGHTS/g, e.numPointLights)
                    .replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights)
                    .replace(/NUM_DIR_LIGHT_SHADOWS/g, e.numDirLightShadows)
                    .replace(/NUM_SPOT_LIGHT_SHADOWS/g, e.numSpotLightShadows)
                    .replace(/NUM_POINT_LIGHT_SHADOWS/g, e.numPointLightShadows);
            }
            function ta(t, e) {
                return t.replace(/NUM_CLIPPING_PLANES/g, e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, e.numClippingPlanes - e.numClipIntersection);
            }
            var ea = /^[ \t]*#include +<([\w\d./]+)>/gm;
            function na(t) {
                return t.replace(ea, ia);
            }
            function ia(t, e) {
                var n = Wr[e];
                if (void 0 === n) throw new Error("Can not resolve #include <" + e + ">");
                return na(n);
            }
            var ra = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,
                oa = /#pragma unroll_loop_start[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}[\s]+?#pragma unroll_loop_end/g;
            function aa(t) {
                return t.replace(oa, ca).replace(ra, sa);
            }
            function sa(t, e, n, i) {
                return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."), ca(t, e, n, i);
            }
            function ca(t, e, n, i) {
                for (var r = "", o = parseInt(e); o < parseInt(n); o++) r += i.replace(/\[ i \]/g, "[ " + o + " ]").replace(/UNROLLED_LOOP_INDEX/g, o);
                return r;
            }
            function la(t) {
                var e = "precision " + t.precision + " float;\nprecision " + t.precision + " int;";
                return "highp" === t.precision ? (e += "\n#define HIGH_PRECISION") : "mediump" === t.precision ? (e += "\n#define MEDIUM_PRECISION") : "lowp" === t.precision && (e += "\n#define LOW_PRECISION"), e;
            }
            function ua(t, e, n) {
                var i,
                    r,
                    o,
                    l,
                    u,
                    h = t.getContext(),
                    p = n.defines,
                    d = n.vertexShader,
                    f = n.fragmentShader,
                    m = (function (t) {
                        var e = "SHADOWMAP_TYPE_BASIC";
                        return t.shadowMapType === a ? (e = "SHADOWMAP_TYPE_PCF") : t.shadowMapType === s ? (e = "SHADOWMAP_TYPE_PCF_SOFT") : t.shadowMapType === c && (e = "SHADOWMAP_TYPE_VSM"), e;
                    })(n),
                    v = (function (t) {
                        var e = "ENVMAP_TYPE_CUBE";
                        if (t.envMap)
                            switch (t.envMapMode) {
                                case Q:
                                case K:
                                    e = "ENVMAP_TYPE_CUBE";
                                    break;
                                case nt:
                                case it:
                                    e = "ENVMAP_TYPE_CUBE_UV";
                                    break;
                                case $:
                                case tt:
                                    e = "ENVMAP_TYPE_EQUIREC";
                                    break;
                                case et:
                                    e = "ENVMAP_TYPE_SPHERE";
                            }
                        return e;
                    })(n),
                    g = (function (t) {
                        var e = "ENVMAP_MODE_REFLECTION";
                        if (t.envMap)
                            switch (t.envMapMode) {
                                case K:
                                case tt:
                                    e = "ENVMAP_MODE_REFRACTION";
                            }
                        return e;
                    })(n),
                    y = (function (t) {
                        var e = "ENVMAP_BLENDING_NONE";
                        if (t.envMap)
                            switch (t.combine) {
                                case G:
                                    e = "ENVMAP_BLENDING_MULTIPLY";
                                    break;
                                case H:
                                    e = "ENVMAP_BLENDING_MIX";
                                    break;
                                case V:
                                    e = "ENVMAP_BLENDING_ADD";
                            }
                        return e;
                    })(n),
                    x = t.gammaFactor > 0 ? t.gammaFactor : 1,
                    _ = n.isWebGL2
                        ? ""
                        : (function (t) {
                              return [
                                  t.extensionDerivatives || t.envMapCubeUV || t.bumpMap || t.tangentSpaceNormalMap || t.clearcoatNormalMap || t.flatShading || "physical" === t.shaderID
                                      ? "#extension GL_OES_standard_derivatives : enable"
                                      : "",
                                  (t.extensionFragDepth || t.logarithmicDepthBuffer) && t.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "",
                                  t.extensionDrawBuffers && t.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "",
                                  (t.extensionShaderTextureLOD || t.envMap) && t.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : "",
                              ]
                                  .filter(Ko)
                                  .join("\n");
                          })(n),
                    b = (function (t) {
                        var e = [];
                        for (var n in t) {
                            var i = t[n];
                            !1 !== i && e.push("#define " + n + " " + i);
                        }
                        return e.join("\n");
                    })(p),
                    w = h.createProgram();
                if (
                    (n.isRawShaderMaterial
                        ? ((i = [b].filter(Ko).join("\n")).length > 0 && (i += "\n"), (r = [_, b].filter(Ko).join("\n")).length > 0 && (r += "\n"))
                        : ((i = [
                              la(n),
                              "#define SHADER_NAME " + n.shaderName,
                              b,
                              n.instancing ? "#define USE_INSTANCING" : "",
                              n.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "",
                              "#define GAMMA_FACTOR " + x,
                              "#define MAX_BONES " + n.maxBones,
                              n.useFog && n.fog ? "#define USE_FOG" : "",
                              n.useFog && n.fogExp2 ? "#define FOG_EXP2" : "",
                              n.map ? "#define USE_MAP" : "",
                              n.envMap ? "#define USE_ENVMAP" : "",
                              n.envMap ? "#define " + g : "",
                              n.lightMap ? "#define USE_LIGHTMAP" : "",
                              n.aoMap ? "#define USE_AOMAP" : "",
                              n.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
                              n.bumpMap ? "#define USE_BUMPMAP" : "",
                              n.normalMap ? "#define USE_NORMALMAP" : "",
                              n.normalMap && n.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "",
                              n.normalMap && n.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "",
                              n.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
                              n.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
                              n.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
                              n.displacementMap && n.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "",
                              n.specularMap ? "#define USE_SPECULARMAP" : "",
                              n.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
                              n.metalnessMap ? "#define USE_METALNESSMAP" : "",
                              n.alphaMap ? "#define USE_ALPHAMAP" : "",
                              n.vertexTangents ? "#define USE_TANGENT" : "",
                              n.vertexColors ? "#define USE_COLOR" : "",
                              n.vertexUvs ? "#define USE_UV" : "",
                              n.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "",
                              n.flatShading ? "#define FLAT_SHADED" : "",
                              n.skinning ? "#define USE_SKINNING" : "",
                              n.useVertexTexture ? "#define BONE_TEXTURE" : "",
                              n.morphTargets ? "#define USE_MORPHTARGETS" : "",
                              n.morphNormals && !1 === n.flatShading ? "#define USE_MORPHNORMALS" : "",
                              n.doubleSided ? "#define DOUBLE_SIDED" : "",
                              n.flipSided ? "#define FLIP_SIDED" : "",
                              n.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
                              n.shadowMapEnabled ? "#define " + m : "",
                              n.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
                              n.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
                              n.logarithmicDepthBuffer && n.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
                              "uniform mat4 modelMatrix;",
                              "uniform mat4 modelViewMatrix;",
                              "uniform mat4 projectionMatrix;",
                              "uniform mat4 viewMatrix;",
                              "uniform mat3 normalMatrix;",
                              "uniform vec3 cameraPosition;",
                              "uniform bool isOrthographic;",
                              "#ifdef USE_INSTANCING",
                              " attribute mat4 instanceMatrix;",
                              "#endif",
                              "attribute vec3 position;",
                              "attribute vec3 normal;",
                              "attribute vec2 uv;",
                              "#ifdef USE_TANGENT",
                              "\tattribute vec4 tangent;",
                              "#endif",
                              "#ifdef USE_COLOR",
                              "\tattribute vec3 color;",
                              "#endif",
                              "#ifdef USE_MORPHTARGETS",
                              "\tattribute vec3 morphTarget0;",
                              "\tattribute vec3 morphTarget1;",
                              "\tattribute vec3 morphTarget2;",
                              "\tattribute vec3 morphTarget3;",
                              "\t#ifdef USE_MORPHNORMALS",
                              "\t\tattribute vec3 morphNormal0;",
                              "\t\tattribute vec3 morphNormal1;",
                              "\t\tattribute vec3 morphNormal2;",
                              "\t\tattribute vec3 morphNormal3;",
                              "\t#else",
                              "\t\tattribute vec3 morphTarget4;",
                              "\t\tattribute vec3 morphTarget5;",
                              "\t\tattribute vec3 morphTarget6;",
                              "\t\tattribute vec3 morphTarget7;",
                              "\t#endif",
                              "#endif",
                              "#ifdef USE_SKINNING",
                              "\tattribute vec4 skinIndex;",
                              "\tattribute vec4 skinWeight;",
                              "#endif",
                              "\n",
                          ]
                              .filter(Ko)
                              .join("\n")),
                          (r = [
                              _,
                              la(n),
                              "#define SHADER_NAME " + n.shaderName,
                              b,
                              n.alphaTest ? "#define ALPHATEST " + n.alphaTest + (n.alphaTest % 1 ? "" : ".0") : "",
                              "#define GAMMA_FACTOR " + x,
                              n.useFog && n.fog ? "#define USE_FOG" : "",
                              n.useFog && n.fogExp2 ? "#define FOG_EXP2" : "",
                              n.map ? "#define USE_MAP" : "",
                              n.matcap ? "#define USE_MATCAP" : "",
                              n.envMap ? "#define USE_ENVMAP" : "",
                              n.envMap ? "#define " + v : "",
                              n.envMap ? "#define " + g : "",
                              n.envMap ? "#define " + y : "",
                              n.lightMap ? "#define USE_LIGHTMAP" : "",
                              n.aoMap ? "#define USE_AOMAP" : "",
                              n.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
                              n.bumpMap ? "#define USE_BUMPMAP" : "",
                              n.normalMap ? "#define USE_NORMALMAP" : "",
                              n.normalMap && n.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "",
                              n.normalMap && n.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "",
                              n.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
                              n.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
                              n.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
                              n.specularMap ? "#define USE_SPECULARMAP" : "",
                              n.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
                              n.metalnessMap ? "#define USE_METALNESSMAP" : "",
                              n.alphaMap ? "#define USE_ALPHAMAP" : "",
                              n.sheen ? "#define USE_SHEEN" : "",
                              n.vertexTangents ? "#define USE_TANGENT" : "",
                              n.vertexColors ? "#define USE_COLOR" : "",
                              n.vertexUvs ? "#define USE_UV" : "",
                              n.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "",
                              n.gradientMap ? "#define USE_GRADIENTMAP" : "",
                              n.flatShading ? "#define FLAT_SHADED" : "",
                              n.doubleSided ? "#define DOUBLE_SIDED" : "",
                              n.flipSided ? "#define FLIP_SIDED" : "",
                              n.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
                              n.shadowMapEnabled ? "#define " + m : "",
                              n.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
                              n.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "",
                              n.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
                              n.logarithmicDepthBuffer && n.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
                              (n.extensionShaderTextureLOD || n.envMap) && n.rendererExtensionShaderTextureLod ? "#define TEXTURE_LOD_EXT" : "",
                              "uniform mat4 viewMatrix;",
                              "uniform vec3 cameraPosition;",
                              "uniform bool isOrthographic;",
                              n.toneMapping !== W ? "#define TONE_MAPPING" : "",
                              n.toneMapping !== W ? Wr.tonemapping_pars_fragment : "",
                              n.toneMapping !== W
                                  ? (function (t, e) {
                                        var n;
                                        switch (e) {
                                            case q:
                                                n = "Linear";
                                                break;
                                            case X:
                                                n = "Reinhard";
                                                break;
                                            case Y:
                                                n = "Uncharted2";
                                                break;
                                            case Z:
                                                n = "OptimizedCineon";
                                                break;
                                            case J:
                                                n = "ACESFilmic";
                                                break;
                                            default:
                                                throw new Error("unsupported toneMapping: " + e);
                                        }
                                        return "vec3 " + t + "( vec3 color ) { return " + n + "ToneMapping( color ); }";
                                    })("toneMapping", n.toneMapping)
                                  : "",
                              n.dithering ? "#define DITHERING" : "",
                              n.outputEncoding || n.mapEncoding || n.matcapEncoding || n.envMapEncoding || n.emissiveMapEncoding || n.lightMapEncoding ? Wr.encodings_pars_fragment : "",
                              n.mapEncoding ? Qo("mapTexelToLinear", n.mapEncoding) : "",
                              n.matcapEncoding ? Qo("matcapTexelToLinear", n.matcapEncoding) : "",
                              n.envMapEncoding ? Qo("envMapTexelToLinear", n.envMapEncoding) : "",
                              n.emissiveMapEncoding ? Qo("emissiveMapTexelToLinear", n.emissiveMapEncoding) : "",
                              n.lightMapEncoding ? Qo("lightMapTexelToLinear", n.lightMapEncoding) : "",
                              n.outputEncoding ? ((o = "linearToOutputTexel"), (l = n.outputEncoding), (u = Zo(l)), "vec4 " + o + "( vec4 value ) { return LinearTo" + u[0] + u[1] + "; }") : "",
                              n.depthPacking ? "#define DEPTH_PACKING " + n.depthPacking : "",
                              "\n",
                          ]
                              .filter(Ko)
                              .join("\n"))),
                    (d = ta((d = $o((d = na(d)), n)), n)),
                    (f = ta((f = $o((f = na(f)), n)), n)),
                    (d = aa(d)),
                    (f = aa(f)),
                    n.isWebGL2 && !n.isRawShaderMaterial)
                ) {
                    var M = !1,
                        S = /^\s*#version\s+300\s+es\s*\n/;
                    n.isShaderMaterial && null !== d.match(S) && null !== f.match(S) && ((M = !0), (d = d.replace(S, "")), (f = f.replace(S, ""))),
                        (i = ["#version 300 es\n", "#define attribute in", "#define varying out", "#define texture2D texture"].join("\n") + "\n" + i),
                        (r =
                            [
                                "#version 300 es\n",
                                "#define varying in",
                                M ? "" : "out highp vec4 pc_fragColor;",
                                M ? "" : "#define gl_FragColor pc_fragColor",
                                "#define gl_FragDepthEXT gl_FragDepth",
                                "#define texture2D texture",
                                "#define textureCube texture",
                                "#define texture2DProj textureProj",
                                "#define texture2DLodEXT textureLod",
                                "#define texture2DProjLodEXT textureProjLod",
                                "#define textureCubeLodEXT textureLod",
                                "#define texture2DGradEXT textureGrad",
                                "#define texture2DProjGradEXT textureProjGrad",
                                "#define textureCubeGradEXT textureGrad",
                            ].join("\n") +
                            "\n" +
                            r);
                }
                var T,
                    E,
                    A = r + f,
                    P = Xo(h, 35633, i + d),
                    L = Xo(h, 35632, A);
                if (
                    (h.attachShader(w, P),
                    h.attachShader(w, L),
                    void 0 !== n.index0AttributeName ? h.bindAttribLocation(w, 0, n.index0AttributeName) : !0 === n.morphTargets && h.bindAttribLocation(w, 0, "position"),
                    h.linkProgram(w),
                    t.debug.checkShaderErrors)
                ) {
                    var C = h.getProgramInfoLog(w).trim(),
                        R = h.getShaderInfoLog(P).trim(),
                        O = h.getShaderInfoLog(L).trim(),
                        D = !0,
                        I = !0;
                    if (!1 === h.getProgramParameter(w, 35714)) {
                        D = !1;
                        var N = Jo(h, P, "vertex"),
                            k = Jo(h, L, "fragment");
                        console.error("THREE.WebGLProgram: shader error: ", h.getError(), "35715", h.getProgramParameter(w, 35715), "gl.getProgramInfoLog", C, N, k);
                    } else "" !== C ? console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()", C) : ("" !== R && "" !== O) || (I = !1);
                    I && (this.diagnostics = { runnable: D, programLog: C, vertexShader: { log: R, prefix: i }, fragmentShader: { log: O, prefix: r } });
                }
                return (
                    h.detachShader(w, P),
                    h.detachShader(w, L),
                    h.deleteShader(P),
                    h.deleteShader(L),
                    (this.getUniforms = function () {
                        return void 0 === T && (T = new qo(h, w)), T;
                    }),
                    (this.getAttributes = function () {
                        return (
                            void 0 === E &&
                                (E = (function (t, e) {
                                    for (var n = {}, i = t.getProgramParameter(e, 35721), r = 0; r < i; r++) {
                                        var o = t.getActiveAttrib(e, r).name;
                                        n[o] = t.getAttribLocation(e, o);
                                    }
                                    return n;
                                })(h, w)),
                            E
                        );
                    }),
                    (this.destroy = function () {
                        h.deleteProgram(w), (this.program = void 0);
                    }),
                    (this.name = n.shaderName),
                    (this.id = Yo++),
                    (this.cacheKey = e),
                    (this.usedTimes = 1),
                    (this.program = w),
                    (this.vertexShader = P),
                    (this.fragmentShader = L),
                    this
                );
            }
            function ha(t, e, n) {
                var i = [],
                    r = n.isWebGL2,
                    o = n.logarithmicDepthBuffer,
                    a = n.floatVertexTextures,
                    s = n.precision,
                    c = n.maxVertexUniforms,
                    l = n.vertexTextures,
                    p = {
                        MeshDepthMaterial: "depth",
                        MeshDistanceMaterial: "distanceRGBA",
                        MeshNormalMaterial: "normal",
                        MeshBasicMaterial: "basic",
                        MeshLambertMaterial: "lambert",
                        MeshPhongMaterial: "phong",
                        MeshToonMaterial: "toon",
                        MeshStandardMaterial: "physical",
                        MeshPhysicalMaterial: "physical",
                        MeshMatcapMaterial: "matcap",
                        LineBasicMaterial: "basic",
                        LineDashedMaterial: "dashed",
                        PointsMaterial: "points",
                        ShadowMaterial: "shadow",
                        SpriteMaterial: "sprite",
                    },
                    d = [
                        "precision",
                        "isWebGL2",
                        "supportsVertexTextures",
                        "outputEncoding",
                        "instancing",
                        "map",
                        "mapEncoding",
                        "matcap",
                        "matcapEncoding",
                        "envMap",
                        "envMapMode",
                        "envMapEncoding",
                        "envMapCubeUV",
                        "lightMap",
                        "lightMapEncoding",
                        "aoMap",
                        "emissiveMap",
                        "emissiveMapEncoding",
                        "bumpMap",
                        "normalMap",
                        "objectSpaceNormalMap",
                        "tangentSpaceNormalMap",
                        "clearcoatMap",
                        "clearcoatRoughnessMap",
                        "clearcoatNormalMap",
                        "displacementMap",
                        "specularMap",
                        "roughnessMap",
                        "metalnessMap",
                        "gradientMap",
                        "alphaMap",
                        "combine",
                        "vertexColors",
                        "vertexTangents",
                        "vertexUvs",
                        "uvsVertexOnly",
                        "fog",
                        "useFog",
                        "fogExp2",
                        "flatShading",
                        "sizeAttenuation",
                        "logarithmicDepthBuffer",
                        "skinning",
                        "maxBones",
                        "useVertexTexture",
                        "morphTargets",
                        "morphNormals",
                        "maxMorphTargets",
                        "maxMorphNormals",
                        "premultipliedAlpha",
                        "numDirLights",
                        "numPointLights",
                        "numSpotLights",
                        "numHemiLights",
                        "numRectAreaLights",
                        "numDirLightShadows",
                        "numPointLightShadows",
                        "numSpotLightShadows",
                        "shadowMapEnabled",
                        "shadowMapType",
                        "toneMapping",
                        "physicallyCorrectLights",
                        "alphaTest",
                        "doubleSided",
                        "flipSided",
                        "numClippingPlanes",
                        "numClipIntersection",
                        "depthPacking",
                        "dithering",
                        "sheen",
                    ];
                function f(t) {
                    var e;
                    return (
                        t
                            ? t.isTexture
                                ? (e = t.encoding)
                                : t.isWebGLRenderTarget && (console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."), (e = t.texture.encoding))
                            : (e = Ae),
                        e
                    );
                }
                (this.getParameters = function (i, d, m, v, g, y, x) {
                    var _ = v.fog,
                        b = i.isMeshStandardMaterial ? v.environment : null,
                        w = i.envMap || b,
                        M = p[i.type],
                        S = x.isSkinnedMesh
                            ? (function (t) {
                                  var e = t.skeleton.bones;
                                  if (a) return 1024;
                                  var n = c,
                                      i = Math.floor((n - 20) / 4),
                                      r = Math.min(i, e.length);
                                  return r < e.length ? (console.warn("THREE.WebGLRenderer: Skeleton has " + e.length + " bones. This GPU supports " + r + "."), 0) : r;
                              })(x)
                            : 0;
                    null !== i.precision && (s = n.getMaxPrecision(i.precision)) !== i.precision && console.warn("THREE.WebGLProgram.getParameters:", i.precision, "not supported, using", s, "instead.");
                    var T = (function (t, e) {
                        var n;
                        if (e) {
                            var i = qr[e];
                            n = { name: t.type, uniforms: Er.clone(i.uniforms), vertexShader: i.vertexShader, fragmentShader: i.fragmentShader };
                        } else n = { name: t.type, uniforms: t.uniforms, vertexShader: t.vertexShader, fragmentShader: t.fragmentShader };
                        return n;
                    })(i, M);
                    i.onBeforeCompile(T, t);
                    var E = t.getRenderTarget();
                    return {
                        isWebGL2: r,
                        shaderID: M,
                        shaderName: T.name,
                        uniforms: T.uniforms,
                        vertexShader: T.vertexShader,
                        fragmentShader: T.fragmentShader,
                        defines: i.defines,
                        isRawShaderMaterial: i.isRawShaderMaterial,
                        isShaderMaterial: i.isShaderMaterial,
                        precision: s,
                        instancing: !0 === x.isInstancedMesh,
                        supportsVertexTextures: l,
                        outputEncoding: null !== E ? f(E.texture) : t.outputEncoding,
                        map: !!i.map,
                        mapEncoding: f(i.map),
                        matcap: !!i.matcap,
                        matcapEncoding: f(i.matcap),
                        envMap: !!w,
                        envMapMode: w && w.mapping,
                        envMapEncoding: f(w),
                        envMapCubeUV: !!w && (w.mapping === nt || w.mapping === it),
                        lightMap: !!i.lightMap,
                        lightMapEncoding: f(i.lightMap),
                        aoMap: !!i.aoMap,
                        emissiveMap: !!i.emissiveMap,
                        emissiveMapEncoding: f(i.emissiveMap),
                        bumpMap: !!i.bumpMap,
                        normalMap: !!i.normalMap,
                        objectSpaceNormalMap: i.normalMapType === ze,
                        tangentSpaceNormalMap: i.normalMapType === Be,
                        clearcoatMap: !!i.clearcoatMap,
                        clearcoatRoughnessMap: !!i.clearcoatRoughnessMap,
                        clearcoatNormalMap: !!i.clearcoatNormalMap,
                        displacementMap: !!i.displacementMap,
                        roughnessMap: !!i.roughnessMap,
                        metalnessMap: !!i.metalnessMap,
                        specularMap: !!i.specularMap,
                        alphaMap: !!i.alphaMap,
                        gradientMap: !!i.gradientMap,
                        sheen: !!i.sheen,
                        combine: i.combine,
                        vertexTangents: i.normalMap && i.vertexTangents,
                        vertexColors: i.vertexColors,
                        vertexUvs: !!(
                            i.map ||
                            i.bumpMap ||
                            i.normalMap ||
                            i.specularMap ||
                            i.alphaMap ||
                            i.emissiveMap ||
                            i.roughnessMap ||
                            i.metalnessMap ||
                            i.clearcoatMap ||
                            i.clearcoatRoughnessMap ||
                            i.clearcoatNormalMap ||
                            i.displacementMap
                        ),
                        uvsVertexOnly: !(i.map || i.bumpMap || i.normalMap || i.specularMap || i.alphaMap || i.emissiveMap || i.roughnessMap || i.metalnessMap || i.clearcoatNormalMap || !i.displacementMap),
                        fog: !!_,
                        useFog: i.fog,
                        fogExp2: _ && _.isFogExp2,
                        flatShading: i.flatShading,
                        sizeAttenuation: i.sizeAttenuation,
                        logarithmicDepthBuffer: o,
                        skinning: i.skinning && S > 0,
                        maxBones: S,
                        useVertexTexture: a,
                        morphTargets: i.morphTargets,
                        morphNormals: i.morphNormals,
                        maxMorphTargets: t.maxMorphTargets,
                        maxMorphNormals: t.maxMorphNormals,
                        numDirLights: d.directional.length,
                        numPointLights: d.point.length,
                        numSpotLights: d.spot.length,
                        numRectAreaLights: d.rectArea.length,
                        numHemiLights: d.hemi.length,
                        numDirLightShadows: d.directionalShadowMap.length,
                        numPointLightShadows: d.pointShadowMap.length,
                        numSpotLightShadows: d.spotShadowMap.length,
                        numClippingPlanes: g,
                        numClipIntersection: y,
                        dithering: i.dithering,
                        shadowMapEnabled: t.shadowMap.enabled && m.length > 0,
                        shadowMapType: t.shadowMap.type,
                        toneMapping: i.toneMapped ? t.toneMapping : W,
                        physicallyCorrectLights: t.physicallyCorrectLights,
                        premultipliedAlpha: i.premultipliedAlpha,
                        alphaTest: i.alphaTest,
                        doubleSided: i.side === h,
                        flipSided: i.side === u,
                        depthPacking: void 0 !== i.depthPacking && i.depthPacking,
                        index0AttributeName: i.index0AttributeName,
                        extensionDerivatives: i.extensions && i.extensions.derivatives,
                        extensionFragDepth: i.extensions && i.extensions.fragDepth,
                        extensionDrawBuffers: i.extensions && i.extensions.drawBuffers,
                        extensionShaderTextureLOD: i.extensions && i.extensions.shaderTextureLOD,
                        rendererExtensionFragDepth: r || null !== e.get("EXT_frag_depth"),
                        rendererExtensionDrawBuffers: r || null !== e.get("WEBGL_draw_buffers"),
                        rendererExtensionShaderTextureLod: r || null !== e.get("EXT_shader_texture_lod"),
                        onBeforeCompile: i.onBeforeCompile,
                    };
                }),
                    (this.getProgramCacheKey = function (e) {
                        var n = [];
                        if ((e.shaderID ? n.push(e.shaderID) : (n.push(e.fragmentShader), n.push(e.vertexShader)), void 0 !== e.defines)) for (var i in e.defines) n.push(i), n.push(e.defines[i]);
                        if (void 0 === e.isRawShaderMaterial) {
                            for (var r = 0; r < d.length; r++) n.push(e[d[r]]);
                            n.push(t.outputEncoding), n.push(t.gammaFactor);
                        }
                        return n.push(e.onBeforeCompile.toString()), n.join();
                    }),
                    (this.acquireProgram = function (e, n) {
                        for (var r, o = 0, a = i.length; o < a; o++) {
                            var s = i[o];
                            if (s.cacheKey === n) {
                                ++(r = s).usedTimes;
                                break;
                            }
                        }
                        return void 0 === r && ((r = new ua(t, n, e)), i.push(r)), r;
                    }),
                    (this.releaseProgram = function (t) {
                        if (0 == --t.usedTimes) {
                            var e = i.indexOf(t);
                            (i[e] = i[i.length - 1]), i.pop(), t.destroy();
                        }
                    }),
                    (this.programs = i);
            }
            function pa(t, e) {
                return t.groupOrder !== e.groupOrder
                    ? t.groupOrder - e.groupOrder
                    : t.renderOrder !== e.renderOrder
                    ? t.renderOrder - e.renderOrder
                    : t.program !== e.program
                    ? t.program.id - e.program.id
                    : t.material.id !== e.material.id
                    ? t.material.id - e.material.id
                    : t.z !== e.z
                    ? t.z - e.z
                    : t.id - e.id;
            }
            function da(t, e) {
                return t.groupOrder !== e.groupOrder ? t.groupOrder - e.groupOrder : t.renderOrder !== e.renderOrder ? t.renderOrder - e.renderOrder : t.z !== e.z ? e.z - t.z : t.id - e.id;
            }
            function fa() {
                var t = [],
                    e = 0,
                    n = [],
                    i = [],
                    r = { id: -1 };
                function o(n, i, o, a, s, c) {
                    var l = t[e];
                    return (
                        void 0 === l
                            ? ((l = { id: n.id, object: n, geometry: i, material: o, program: o.program || r, groupOrder: a, renderOrder: n.renderOrder, z: s, group: c }), (t[e] = l))
                            : ((l.id = n.id), (l.object = n), (l.geometry = i), (l.material = o), (l.program = o.program || r), (l.groupOrder = a), (l.renderOrder = n.renderOrder), (l.z = s), (l.group = c)),
                        e++,
                        l
                    );
                }
                return {
                    opaque: n,
                    transparent: i,
                    init: function () {
                        (e = 0), (n.length = 0), (i.length = 0);
                    },
                    push: function (t, e, r, a, s, c) {
                        var l = o(t, e, r, a, s, c);
                        (!0 === r.transparent ? i : n).push(l);
                    },
                    unshift: function (t, e, r, a, s, c) {
                        var l = o(t, e, r, a, s, c);
                        (!0 === r.transparent ? i : n).unshift(l);
                    },
                    finish: function () {
                        for (var n = e, i = t.length; n < i; n++) {
                            var r = t[n];
                            if (null === r.id) break;
                            (r.id = null), (r.object = null), (r.geometry = null), (r.material = null), (r.program = null), (r.group = null);
                        }
                    },
                    sort: function (t, e) {
                        n.length > 1 && n.sort(t || pa), i.length > 1 && i.sort(e || da);
                    },
                };
            }
            var ma = 0;
            function va(t, e) {
                return (e.castShadow ? 1 : 0) - (t.castShadow ? 1 : 0);
            }
            function ga() {
                for (
                    var t,
                        e = new (function () {
                            var t = {};
                            return {
                                get: function (e) {
                                    if (void 0 !== t[e.id]) return t[e.id];
                                    var n;
                                    switch (e.type) {
                                        case "DirectionalLight":
                                            n = { direction: new an(), color: new Mi() };
                                            break;
                                        case "SpotLight":
                                            n = { position: new an(), direction: new an(), color: new Mi(), distance: 0, coneCos: 0, penumbraCos: 0, decay: 0 };
                                            break;
                                        case "PointLight":
                                            n = { position: new an(), color: new Mi(), distance: 0, decay: 0 };
                                            break;
                                        case "HemisphereLight":
                                            n = { direction: new an(), skyColor: new Mi(), groundColor: new Mi() };
                                            break;
                                        case "RectAreaLight":
                                            n = { color: new Mi(), position: new an(), halfWidth: new an(), halfHeight: new an() };
                                    }
                                    return (t[e.id] = n), n;
                                },
                            };
                        })(),
                        n =
                            ((t = {}),
                            {
                                get: function (e) {
                                    if (void 0 !== t[e.id]) return t[e.id];
                                    var n;
                                    switch (e.type) {
                                        case "DirectionalLight":
                                        case "SpotLight":
                                            n = { shadowBias: 0, shadowRadius: 1, shadowMapSize: new Ye() };
                                            break;
                                        case "PointLight":
                                            n = { shadowBias: 0, shadowRadius: 1, shadowMapSize: new Ye(), shadowCameraNear: 1, shadowCameraFar: 1e3 };
                                    }
                                    return (t[e.id] = n), n;
                                },
                            }),
                        i = {
                            version: 0,
                            hash: { directionalLength: -1, pointLength: -1, spotLength: -1, rectAreaLength: -1, hemiLength: -1, numDirectionalShadows: -1, numPointShadows: -1, numSpotShadows: -1 },
                            ambient: [0, 0, 0],
                            probe: [],
                            directional: [],
                            directionalShadow: [],
                            directionalShadowMap: [],
                            directionalShadowMatrix: [],
                            spot: [],
                            spotShadow: [],
                            spotShadowMap: [],
                            spotShadowMatrix: [],
                            rectArea: [],
                            point: [],
                            pointShadow: [],
                            pointShadowMap: [],
                            pointShadowMatrix: [],
                            hemi: [],
                        },
                        r = 0;
                    r < 9;
                    r++
                )
                    i.probe.push(new an());
                var o = new an(),
                    a = new fn(),
                    s = new fn();
                return {
                    setup: function (t, r, c) {
                        for (var l = 0, u = 0, h = 0, p = 0; p < 9; p++) i.probe[p].set(0, 0, 0);
                        var d = 0,
                            f = 0,
                            m = 0,
                            v = 0,
                            g = 0,
                            y = 0,
                            x = 0,
                            _ = 0,
                            b = c.matrixWorldInverse;
                        t.sort(va), (p = 0);
                        for (var w = t.length; p < w; p++) {
                            var M = t[p],
                                S = M.color,
                                T = M.intensity,
                                E = M.distance,
                                A = M.shadow && M.shadow.map ? M.shadow.map.texture : null;
                            if (M.isAmbientLight) (l += S.r * T), (u += S.g * T), (h += S.b * T);
                            else if (M.isLightProbe) for (var P = 0; P < 9; P++) i.probe[P].addScaledVector(M.sh.coefficients[P], T);
                            else if (M.isDirectionalLight) {
                                if (
                                    ((R = e.get(M)).color.copy(M.color).multiplyScalar(M.intensity),
                                    R.direction.setFromMatrixPosition(M.matrixWorld),
                                    o.setFromMatrixPosition(M.target.matrixWorld),
                                    R.direction.sub(o),
                                    R.direction.transformDirection(b),
                                    M.castShadow)
                                ) {
                                    var L = M.shadow;
                                    ((C = n.get(M)).shadowBias = L.bias),
                                        (C.shadowRadius = L.radius),
                                        (C.shadowMapSize = L.mapSize),
                                        (i.directionalShadow[d] = C),
                                        (i.directionalShadowMap[d] = A),
                                        (i.directionalShadowMatrix[d] = M.shadow.matrix),
                                        y++;
                                }
                                (i.directional[d] = R), d++;
                            } else if (M.isSpotLight)
                                (R = e.get(M)).position.setFromMatrixPosition(M.matrixWorld),
                                    R.position.applyMatrix4(b),
                                    R.color.copy(S).multiplyScalar(T),
                                    (R.distance = E),
                                    R.direction.setFromMatrixPosition(M.matrixWorld),
                                    o.setFromMatrixPosition(M.target.matrixWorld),
                                    R.direction.sub(o),
                                    R.direction.transformDirection(b),
                                    (R.coneCos = Math.cos(M.angle)),
                                    (R.penumbraCos = Math.cos(M.angle * (1 - M.penumbra))),
                                    (R.decay = M.decay),
                                    M.castShadow &&
                                        ((L = M.shadow),
                                        ((C = n.get(M)).shadowBias = L.bias),
                                        (C.shadowRadius = L.radius),
                                        (C.shadowMapSize = L.mapSize),
                                        (i.spotShadow[m] = C),
                                        (i.spotShadowMap[m] = A),
                                        (i.spotShadowMatrix[m] = M.shadow.matrix),
                                        _++),
                                    (i.spot[m] = R),
                                    m++;
                            else if (M.isRectAreaLight)
                                (R = e.get(M)).color.copy(S).multiplyScalar(T),
                                    R.position.setFromMatrixPosition(M.matrixWorld),
                                    R.position.applyMatrix4(b),
                                    s.identity(),
                                    a.copy(M.matrixWorld),
                                    a.premultiply(b),
                                    s.extractRotation(a),
                                    R.halfWidth.set(0.5 * M.width, 0, 0),
                                    R.halfHeight.set(0, 0.5 * M.height, 0),
                                    R.halfWidth.applyMatrix4(s),
                                    R.halfHeight.applyMatrix4(s),
                                    (i.rectArea[v] = R),
                                    v++;
                            else if (M.isPointLight) {
                                var C;
                                if (((R = e.get(M)).position.setFromMatrixPosition(M.matrixWorld), R.position.applyMatrix4(b), R.color.copy(M.color).multiplyScalar(M.intensity), (R.distance = M.distance), (R.decay = M.decay), M.castShadow))
                                    (L = M.shadow),
                                        ((C = n.get(M)).shadowBias = L.bias),
                                        (C.shadowRadius = L.radius),
                                        (C.shadowMapSize = L.mapSize),
                                        (C.shadowCameraNear = L.camera.near),
                                        (C.shadowCameraFar = L.camera.far),
                                        (i.pointShadow[f] = C),
                                        (i.pointShadowMap[f] = A),
                                        (i.pointShadowMatrix[f] = M.shadow.matrix),
                                        x++;
                                (i.point[f] = R), f++;
                            } else if (M.isHemisphereLight) {
                                var R;
                                (R = e.get(M)).direction.setFromMatrixPosition(M.matrixWorld),
                                    R.direction.transformDirection(b),
                                    R.direction.normalize(),
                                    R.skyColor.copy(M.color).multiplyScalar(T),
                                    R.groundColor.copy(M.groundColor).multiplyScalar(T),
                                    (i.hemi[g] = R),
                                    g++;
                            }
                        }
                        (i.ambient[0] = l), (i.ambient[1] = u), (i.ambient[2] = h);
                        var O = i.hash;
                        (O.directionalLength === d && O.pointLength === f && O.spotLength === m && O.rectAreaLength === v && O.hemiLength === g && O.numDirectionalShadows === y && O.numPointShadows === x && O.numSpotShadows === _) ||
                            ((i.directional.length = d),
                            (i.spot.length = m),
                            (i.rectArea.length = v),
                            (i.point.length = f),
                            (i.hemi.length = g),
                            (i.directionalShadow.length = y),
                            (i.directionalShadowMap.length = y),
                            (i.pointShadow.length = x),
                            (i.pointShadowMap.length = x),
                            (i.spotShadow.length = _),
                            (i.spotShadowMap.length = _),
                            (i.directionalShadowMatrix.length = y),
                            (i.pointShadowMatrix.length = x),
                            (i.spotShadowMatrix.length = _),
                            (O.directionalLength = d),
                            (O.pointLength = f),
                            (O.spotLength = m),
                            (O.rectAreaLength = v),
                            (O.hemiLength = g),
                            (O.numDirectionalShadows = y),
                            (O.numPointShadows = x),
                            (O.numSpotShadows = _),
                            (i.version = ma++));
                    },
                    state: i,
                };
            }
            function ya() {
                var t = new ga(),
                    e = [],
                    n = [];
                return {
                    init: function () {
                        (e.length = 0), (n.length = 0);
                    },
                    state: { lightsArray: e, shadowsArray: n, lights: t },
                    setupLights: function (i) {
                        t.setup(e, n, i);
                    },
                    pushLight: function (t) {
                        e.push(t);
                    },
                    pushShadow: function (t) {
                        n.push(t);
                    },
                };
            }
            function xa(t) {
                Li.call(this),
                    (this.type = "MeshDepthMaterial"),
                    (this.depthPacking = Ne),
                    (this.skinning = !1),
                    (this.morphTargets = !1),
                    (this.map = null),
                    (this.alphaMap = null),
                    (this.displacementMap = null),
                    (this.displacementScale = 1),
                    (this.displacementBias = 0),
                    (this.wireframe = !1),
                    (this.wireframeLinewidth = 1),
                    (this.fog = !1),
                    this.setValues(t);
            }
            function _a(t) {
                Li.call(this),
                    (this.type = "MeshDistanceMaterial"),
                    (this.referencePosition = new an()),
                    (this.nearDistance = 1),
                    (this.farDistance = 1e3),
                    (this.skinning = !1),
                    (this.morphTargets = !1),
                    (this.map = null),
                    (this.alphaMap = null),
                    (this.displacementMap = null),
                    (this.displacementScale = 1),
                    (this.displacementBias = 0),
                    (this.fog = !1),
                    this.setValues(t);
            }
            (xa.prototype = Object.create(Li.prototype)),
                (xa.prototype.constructor = xa),
                (xa.prototype.isMeshDepthMaterial = !0),
                (xa.prototype.copy = function (t) {
                    return (
                        Li.prototype.copy.call(this, t),
                        (this.depthPacking = t.depthPacking),
                        (this.skinning = t.skinning),
                        (this.morphTargets = t.morphTargets),
                        (this.map = t.map),
                        (this.alphaMap = t.alphaMap),
                        (this.displacementMap = t.displacementMap),
                        (this.displacementScale = t.displacementScale),
                        (this.displacementBias = t.displacementBias),
                        (this.wireframe = t.wireframe),
                        (this.wireframeLinewidth = t.wireframeLinewidth),
                        this
                    );
                }),
                (_a.prototype = Object.create(Li.prototype)),
                (_a.prototype.constructor = _a),
                (_a.prototype.isMeshDistanceMaterial = !0),
                (_a.prototype.copy = function (t) {
                    return (
                        Li.prototype.copy.call(this, t),
                        this.referencePosition.copy(t.referencePosition),
                        (this.nearDistance = t.nearDistance),
                        (this.farDistance = t.farDistance),
                        (this.skinning = t.skinning),
                        (this.morphTargets = t.morphTargets),
                        (this.map = t.map),
                        (this.alphaMap = t.alphaMap),
                        (this.displacementMap = t.displacementMap),
                        (this.displacementScale = t.displacementScale),
                        (this.displacementBias = t.displacementBias),
                        this
                    );
                });
            var ba =
                    "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n  float mean = 0.0;\n  float squared_mean = 0.0;\n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n    #ifdef HORIZONAL_PASS\n      vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n      mean += distribution.x;\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n    #else\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\n      mean += depth;\n      squared_mean += depth * depth;\n    #endif\n  }\n  mean = mean * HALF_SAMPLE_RATE;\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\n  float std_dev = sqrt( squared_mean - mean * mean );\n  gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}",
                wa = "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";
            function Ma(t, e, n) {
                var i = new Fr(),
                    r = new Ye(),
                    o = new Ye(),
                    s = new $e(),
                    d = [],
                    f = [],
                    m = {},
                    v = { 0: u, 1: l, 2: h },
                    g = new Lr({ defines: { SAMPLE_RATE: 0.25, HALF_SAMPLE_RATE: 1 / 8 }, uniforms: { shadow_pass: { value: null }, resolution: { value: new Ye() }, radius: { value: 4 } }, vertexShader: wa, fragmentShader: ba }),
                    y = g.clone();
                y.defines.HORIZONAL_PASS = 1;
                var x = new Qi();
                x.setAttribute("position", new Oi(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3));
                var _ = new mr(x, g),
                    b = this;
                function w(n, i) {
                    var r = e.update(_);
                    (g.uniforms.shadow_pass.value = n.map.texture),
                        (g.uniforms.resolution.value = n.mapSize),
                        (g.uniforms.radius.value = n.radius),
                        t.setRenderTarget(n.mapPass),
                        t.clear(),
                        t.renderBufferDirect(i, null, r, g, _, null),
                        (y.uniforms.shadow_pass.value = n.mapPass.texture),
                        (y.uniforms.resolution.value = n.mapSize),
                        (y.uniforms.radius.value = n.radius),
                        t.setRenderTarget(n.map),
                        t.clear(),
                        t.renderBufferDirect(i, null, r, y, _, null);
                }
                function M(t, e, n) {
                    var i = (t << 0) | (e << 1) | (n << 2),
                        r = d[i];
                    return void 0 === r && ((r = new xa({ depthPacking: ke, morphTargets: t, skinning: e })), (d[i] = r)), r;
                }
                function S(t, e, n) {
                    var i = (t << 0) | (e << 1) | (n << 2),
                        r = f[i];
                    return void 0 === r && ((r = new _a({ morphTargets: t, skinning: e })), (f[i] = r)), r;
                }
                function T(e, n, i, r, o, a) {
                    var s = e.geometry,
                        l = null,
                        u = M,
                        h = e.customDepthMaterial;
                    if ((!0 === i.isPointLight && ((u = S), (h = e.customDistanceMaterial)), void 0 === h)) {
                        var p = !1;
                        !0 === n.morphTargets &&
                            (!0 === s.isBufferGeometry ? (p = s.morphAttributes && s.morphAttributes.position && s.morphAttributes.position.length > 0) : !0 === s.isGeometry && (p = s.morphTargets && s.morphTargets.length > 0));
                        var d = !1;
                        !0 === e.isSkinnedMesh && (!0 === n.skinning ? (d = !0) : console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:", e)), (l = u(p, d, !0 === e.isInstancedMesh));
                    } else l = h;
                    if (t.localClippingEnabled && !0 === n.clipShadows && 0 !== n.clippingPlanes.length) {
                        var f = l.uuid,
                            g = n.uuid,
                            y = m[f];
                        void 0 === y && ((y = {}), (m[f] = y));
                        var x = y[g];
                        void 0 === x && ((x = l.clone()), (y[g] = x)), (l = x);
                    }
                    return (
                        (l.visible = n.visible),
                        (l.wireframe = n.wireframe),
                        (l.side = a === c ? (null !== n.shadowSide ? n.shadowSide : n.side) : null !== n.shadowSide ? n.shadowSide : v[n.side]),
                        (l.clipShadows = n.clipShadows),
                        (l.clippingPlanes = n.clippingPlanes),
                        (l.clipIntersection = n.clipIntersection),
                        (l.wireframeLinewidth = n.wireframeLinewidth),
                        (l.linewidth = n.linewidth),
                        !0 === i.isPointLight && !0 === l.isMeshDistanceMaterial && (l.referencePosition.setFromMatrixPosition(i.matrixWorld), (l.nearDistance = r), (l.farDistance = o)),
                        l
                    );
                }
                function E(n, r, o, a, s) {
                    if (!1 !== n.visible) {
                        if (n.layers.test(r.layers) && (n.isMesh || n.isLine || n.isPoints) && (n.castShadow || (n.receiveShadow && s === c)) && (!n.frustumCulled || i.intersectsObject(n))) {
                            n.modelViewMatrix.multiplyMatrices(o.matrixWorldInverse, n.matrixWorld);
                            var l = e.update(n),
                                u = n.material;
                            if (Array.isArray(u))
                                for (var h = l.groups, p = 0, d = h.length; p < d; p++) {
                                    var f = h[p],
                                        m = u[f.materialIndex];
                                    if (m && m.visible) {
                                        var v = T(n, m, a, o.near, o.far, s);
                                        t.renderBufferDirect(o, null, l, v, n, f);
                                    }
                                }
                            else if (u.visible) {
                                v = T(n, u, a, o.near, o.far, s);
                                t.renderBufferDirect(o, null, l, v, n, null);
                            }
                        }
                        for (var g = n.children, y = 0, x = g.length; y < x; y++) E(g[y], r, o, a, s);
                    }
                }
                (this.enabled = !1),
                    (this.autoUpdate = !0),
                    (this.needsUpdate = !1),
                    (this.type = a),
                    (this.render = function (e, a, l) {
                        if (!1 !== b.enabled && (!1 !== b.autoUpdate || !1 !== b.needsUpdate) && 0 !== e.length) {
                            var u = t.getRenderTarget(),
                                h = t.getActiveCubeFace(),
                                d = t.getActiveMipmapLevel(),
                                f = t.state;
                            f.setBlending(p), f.buffers.color.setClear(1, 1, 1, 1), f.buffers.depth.setTest(!0), f.setScissorTest(!1);
                            for (var m = 0, v = e.length; m < v; m++) {
                                var g = e[m],
                                    y = g.shadow;
                                if (void 0 !== y) {
                                    r.copy(y.mapSize);
                                    var x = y.getFrameExtents();
                                    if (
                                        (r.multiply(x),
                                        o.copy(y.mapSize),
                                        (r.x > n || r.y > n) &&
                                            (console.warn("THREE.WebGLShadowMap:", g, "has shadow exceeding max texture size, reducing"),
                                            r.x > n && ((o.x = Math.floor(n / x.x)), (r.x = o.x * x.x), (y.mapSize.x = o.x)),
                                            r.y > n && ((o.y = Math.floor(n / x.y)), (r.y = o.y * x.y), (y.mapSize.y = o.y))),
                                        null === y.map && !y.isPointLightShadow && this.type === c)
                                    ) {
                                        var _ = { minFilter: ut, magFilter: ut, format: At };
                                        (y.map = new tn(r.x, r.y, _)), (y.map.texture.name = g.name + ".shadowMap"), (y.mapPass = new tn(r.x, r.y, _)), y.camera.updateProjectionMatrix();
                                    }
                                    if (null === y.map) {
                                        _ = { minFilter: st, magFilter: st, format: At };
                                        (y.map = new tn(r.x, r.y, _)), (y.map.texture.name = g.name + ".shadowMap"), y.camera.updateProjectionMatrix();
                                    }
                                    t.setRenderTarget(y.map), t.clear();
                                    for (var M = y.getViewportCount(), S = 0; S < M; S++) {
                                        var T = y.getViewport(S);
                                        s.set(o.x * T.x, o.y * T.y, o.x * T.z, o.y * T.w), f.viewport(s), y.updateMatrices(g, S), (i = y.getFrustum()), E(a, l, y.camera, g, this.type);
                                    }
                                    y.isPointLightShadow || this.type !== c || w(y, l);
                                } else console.warn("THREE.WebGLShadowMap:", g, "has no shadow.");
                            }
                            (b.needsUpdate = !1), t.setRenderTarget(u, h, d);
                        }
                    });
            }
            function Sa(t, e, n, i, r, o, a) {
                var s,
                    c = r.isWebGL2,
                    l = r.maxTextures,
                    u = r.maxCubemapSize,
                    h = r.maxTextureSize,
                    p = r.maxSamples,
                    d = new WeakMap(),
                    f = !1;
                try {
                    f = "undefined" != typeof OffscreenCanvas && null !== new OffscreenCanvas(1, 1).getContext("2d");
                } catch (t) {}
                function m(t, e) {
                    return f ? new OffscreenCanvas(t, e) : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
                }
                function v(t, e, n, i) {
                    var r = 1;
                    if (((t.width > i || t.height > i) && (r = i / Math.max(t.width, t.height)), r < 1 || !0 === e)) {
                        if (
                            ("undefined" != typeof HTMLImageElement && t instanceof HTMLImageElement) ||
                            ("undefined" != typeof HTMLCanvasElement && t instanceof HTMLCanvasElement) ||
                            ("undefined" != typeof ImageBitmap && t instanceof ImageBitmap)
                        ) {
                            var o = e ? Xe.floorPowerOfTwo : Math.floor,
                                a = o(r * t.width),
                                c = o(r * t.height);
                            void 0 === s && (s = m(a, c));
                            var l = n ? m(a, c) : s;
                            return (
                                (l.width = a), (l.height = c), l.getContext("2d").drawImage(t, 0, 0, a, c), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + t.width + "x" + t.height + ") to (" + a + "x" + c + ")."), l
                            );
                        }
                        return "data" in t && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + t.width + "x" + t.height + ")."), t;
                    }
                    return t;
                }
                function g(t) {
                    return Xe.isPowerOfTwo(t.width) && Xe.isPowerOfTwo(t.height);
                }
                function y(t, e) {
                    return t.generateMipmaps && e && t.minFilter !== st && t.minFilter !== ut;
                }
                function x(e, n, r, o) {
                    t.generateMipmap(e), (i.get(n).__maxMipLevel = Math.log(Math.max(r, o)) * Math.LOG2E);
                }
                function _(n, i, r) {
                    if (!1 === c) return i;
                    if (null !== n) {
                        if (void 0 !== t[n]) return t[n];
                        console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + n + "'");
                    }
                    var o = i;
                    return (
                        6403 === i && (5126 === r && (o = 33326), 5131 === r && (o = 33325), 5121 === r && (o = 33321)),
                        6407 === i && (5126 === r && (o = 34837), 5131 === r && (o = 34843), 5121 === r && (o = 32849)),
                        6408 === i && (5126 === r && (o = 34836), 5131 === r && (o = 34842), 5121 === r && (o = 32856)),
                        (33325 !== o && 33326 !== o && 34842 !== o && 34836 !== o) || e.get("EXT_color_buffer_float"),
                        o
                    );
                }
                function b(t) {
                    return t === st || t === ct || t === lt ? 9728 : 9729;
                }
                function w(e) {
                    var n = e.target;
                    n.removeEventListener("dispose", w),
                        (function (e) {
                            var n = i.get(e);
                            if (void 0 === n.__webglInit) return;
                            t.deleteTexture(n.__webglTexture), i.remove(e);
                        })(n),
                        n.isVideoTexture && d.delete(n),
                        a.memory.textures--;
                }
                function M(e) {
                    var n = e.target;
                    n.removeEventListener("dispose", M),
                        (function (e) {
                            var n = i.get(e),
                                r = i.get(e.texture);
                            if (!e) return;
                            void 0 !== r.__webglTexture && t.deleteTexture(r.__webglTexture);
                            e.depthTexture && e.depthTexture.dispose();
                            if (e.isWebGLCubeRenderTarget) for (var o = 0; o < 6; o++) t.deleteFramebuffer(n.__webglFramebuffer[o]), n.__webglDepthbuffer && t.deleteRenderbuffer(n.__webglDepthbuffer[o]);
                            else
                                t.deleteFramebuffer(n.__webglFramebuffer),
                                    n.__webglDepthbuffer && t.deleteRenderbuffer(n.__webglDepthbuffer),
                                    n.__webglMultisampledFramebuffer && t.deleteFramebuffer(n.__webglMultisampledFramebuffer),
                                    n.__webglColorRenderbuffer && t.deleteRenderbuffer(n.__webglColorRenderbuffer),
                                    n.__webglDepthRenderbuffer && t.deleteRenderbuffer(n.__webglDepthRenderbuffer);
                            i.remove(e.texture), i.remove(e);
                        })(n),
                        a.memory.textures--;
                }
                var S = 0;
                function T(t, e) {
                    var r = i.get(t);
                    if (
                        (t.isVideoTexture &&
                            (function (t) {
                                var e = a.render.frame;
                                d.get(t) !== e && (d.set(t, e), t.update());
                            })(t),
                        t.version > 0 && r.__version !== t.version)
                    ) {
                        var o = t.image;
                        if (void 0 === o) console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");
                        else {
                            if (!1 !== o.complete) return void O(r, t, e);
                            console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
                        }
                    }
                    n.activeTexture(33984 + e), n.bindTexture(3553, r.__webglTexture);
                }
                function E(e, r) {
                    if (6 === e.image.length) {
                        var a = i.get(e);
                        if (e.version > 0 && a.__version !== e.version) {
                            R(a, e), n.activeTexture(33984 + r), n.bindTexture(34067, a.__webglTexture), t.pixelStorei(37440, e.flipY);
                            for (var s = e && (e.isCompressedTexture || e.image[0].isCompressedTexture), l = e.image[0] && e.image[0].isDataTexture, h = [], p = 0; p < 6; p++)
                                h[p] = s || l ? (l ? e.image[p].image : e.image[p]) : v(e.image[p], !1, !0, u);
                            var d,
                                f = h[0],
                                m = g(f) || c,
                                b = o.convert(e.format),
                                w = o.convert(e.type),
                                M = _(e.internalFormat, b, w);
                            if ((C(34067, e, m), s)) {
                                for (p = 0; p < 6; p++) {
                                    d = h[p].mipmaps;
                                    for (var S = 0; S < d.length; S++) {
                                        var T = d[S];
                                        e.format !== At && e.format !== Et
                                            ? null !== b
                                                ? n.compressedTexImage2D(34069 + p, S, M, T.width, T.height, 0, T.data)
                                                : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()")
                                            : n.texImage2D(34069 + p, S, M, T.width, T.height, 0, b, w, T.data);
                                    }
                                }
                                a.__maxMipLevel = d.length - 1;
                            } else {
                                d = e.mipmaps;
                                for (p = 0; p < 6; p++)
                                    if (l) {
                                        n.texImage2D(34069 + p, 0, M, h[p].width, h[p].height, 0, b, w, h[p].data);
                                        for (S = 0; S < d.length; S++) {
                                            var E = (T = d[S]).image[p].image;
                                            n.texImage2D(34069 + p, S + 1, M, E.width, E.height, 0, b, w, E.data);
                                        }
                                    } else {
                                        n.texImage2D(34069 + p, 0, M, b, w, h[p]);
                                        for (S = 0; S < d.length; S++) {
                                            T = d[S];
                                            n.texImage2D(34069 + p, S + 1, M, b, w, T.image[p]);
                                        }
                                    }
                                a.__maxMipLevel = d.length;
                            }
                            y(e, m) && x(34067, e, f.width, f.height), (a.__version = e.version), e.onUpdate && e.onUpdate(e);
                        } else n.activeTexture(33984 + r), n.bindTexture(34067, a.__webglTexture);
                    }
                }
                function A(t, e) {
                    n.activeTexture(33984 + e), n.bindTexture(34067, i.get(t).__webglTexture);
                }
                var P = { [rt]: 10497, [ot]: 33071, [at]: 33648 },
                    L = { [st]: 9728, [ct]: 9984, [lt]: 9986, [ut]: 9729, [ht]: 9985, [pt]: 9987 };
                function C(n, o, a) {
                    a
                        ? (t.texParameteri(n, 10242, P[o.wrapS]),
                          t.texParameteri(n, 10243, P[o.wrapT]),
                          (32879 !== n && 35866 !== n) || t.texParameteri(n, 32882, P[o.wrapR]),
                          t.texParameteri(n, 10240, L[o.magFilter]),
                          t.texParameteri(n, 10241, L[o.minFilter]))
                        : (t.texParameteri(n, 10242, 33071),
                          t.texParameteri(n, 10243, 33071),
                          (32879 !== n && 35866 !== n) || t.texParameteri(n, 32882, 33071),
                          (o.wrapS === ot && o.wrapT === ot) || console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),
                          t.texParameteri(n, 10240, b(o.magFilter)),
                          t.texParameteri(n, 10241, b(o.minFilter)),
                          o.minFilter !== st && o.minFilter !== ut && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter."));
                    var s = e.get("EXT_texture_filter_anisotropic");
                    if (s) {
                        if (o.type === xt && null === e.get("OES_texture_float_linear")) return;
                        if (o.type === _t && null === (c || e.get("OES_texture_half_float_linear"))) return;
                        (o.anisotropy > 1 || i.get(o).__currentAnisotropy) && (t.texParameterf(n, s.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(o.anisotropy, r.getMaxAnisotropy())), (i.get(o).__currentAnisotropy = o.anisotropy));
                    }
                }
                function R(e, n) {
                    void 0 === e.__webglInit && ((e.__webglInit = !0), n.addEventListener("dispose", w), (e.__webglTexture = t.createTexture()), a.memory.textures++);
                }
                function O(e, i, r) {
                    var a = 3553;
                    i.isDataTexture2DArray && (a = 35866),
                        i.isDataTexture3D && (a = 32879),
                        R(e, i),
                        n.activeTexture(33984 + r),
                        n.bindTexture(a, e.__webglTexture),
                        t.pixelStorei(37440, i.flipY),
                        t.pixelStorei(37441, i.premultiplyAlpha),
                        t.pixelStorei(3317, i.unpackAlignment);
                    var s =
                            (function (t) {
                                return !c && (t.wrapS !== ot || t.wrapT !== ot || (t.minFilter !== st && t.minFilter !== ut));
                            })(i) && !1 === g(i.image),
                        l = v(i.image, s, !1, h),
                        u = g(l) || c,
                        p = o.convert(i.format),
                        d = o.convert(i.type),
                        f = _(i.internalFormat, p, d);
                    C(a, i, u);
                    var m,
                        b = i.mipmaps;
                    if (i.isDepthTexture)
                        (f = 6402),
                            c ? (f = i.type === xt ? 36012 : i.type === yt ? 33190 : i.type === St ? 35056 : 33189) : i.type === xt && console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),
                            i.format === Rt &&
                                6402 === f &&
                                i.type !== vt &&
                                i.type !== yt &&
                                (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."), (i.type = vt), (d = o.convert(i.type))),
                            i.format === Ot && 6402 === f && ((f = 34041), i.type !== St && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."), (i.type = St), (d = o.convert(i.type)))),
                            n.texImage2D(3553, 0, f, l.width, l.height, 0, p, d, null);
                    else if (i.isDataTexture)
                        if (b.length > 0 && u) {
                            for (var w = 0, M = b.length; w < M; w++) (m = b[w]), n.texImage2D(3553, w, f, m.width, m.height, 0, p, d, m.data);
                            (i.generateMipmaps = !1), (e.__maxMipLevel = b.length - 1);
                        } else n.texImage2D(3553, 0, f, l.width, l.height, 0, p, d, l.data), (e.__maxMipLevel = 0);
                    else if (i.isCompressedTexture) {
                        for (w = 0, M = b.length; w < M; w++)
                            (m = b[w]),
                                i.format !== At && i.format !== Et
                                    ? null !== p
                                        ? n.compressedTexImage2D(3553, w, f, m.width, m.height, 0, m.data)
                                        : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()")
                                    : n.texImage2D(3553, w, f, m.width, m.height, 0, p, d, m.data);
                        e.__maxMipLevel = b.length - 1;
                    } else if (i.isDataTexture2DArray) n.texImage3D(35866, 0, f, l.width, l.height, l.depth, 0, p, d, l.data), (e.__maxMipLevel = 0);
                    else if (i.isDataTexture3D) n.texImage3D(32879, 0, f, l.width, l.height, l.depth, 0, p, d, l.data), (e.__maxMipLevel = 0);
                    else if (b.length > 0 && u) {
                        for (w = 0, M = b.length; w < M; w++) (m = b[w]), n.texImage2D(3553, w, f, p, d, m);
                        (i.generateMipmaps = !1), (e.__maxMipLevel = b.length - 1);
                    } else n.texImage2D(3553, 0, f, p, d, l), (e.__maxMipLevel = 0);
                    y(i, u) && x(a, i, l.width, l.height), (e.__version = i.version), i.onUpdate && i.onUpdate(i);
                }
                function D(e, r, a, s) {
                    var c = o.convert(r.texture.format),
                        l = o.convert(r.texture.type),
                        u = _(r.texture.internalFormat, c, l);
                    n.texImage2D(s, 0, u, r.width, r.height, 0, c, l, null), t.bindFramebuffer(36160, e), t.framebufferTexture2D(36160, a, s, i.get(r.texture).__webglTexture, 0), t.bindFramebuffer(36160, null);
                }
                function I(e, n, i) {
                    if ((t.bindRenderbuffer(36161, e), n.depthBuffer && !n.stencilBuffer)) {
                        var r = 33189;
                        if (i) {
                            var a = n.depthTexture;
                            a && a.isDepthTexture && (a.type === xt ? (r = 36012) : a.type === yt && (r = 33190));
                            var s = k(n);
                            t.renderbufferStorageMultisample(36161, s, r, n.width, n.height);
                        } else t.renderbufferStorage(36161, r, n.width, n.height);
                        t.framebufferRenderbuffer(36160, 36096, 36161, e);
                    } else if (n.depthBuffer && n.stencilBuffer) {
                        if (i) {
                            s = k(n);
                            t.renderbufferStorageMultisample(36161, s, 35056, n.width, n.height);
                        } else t.renderbufferStorage(36161, 34041, n.width, n.height);
                        t.framebufferRenderbuffer(36160, 33306, 36161, e);
                    } else {
                        var c = o.convert(n.texture.format),
                            l = o.convert(n.texture.type);
                        r = _(n.texture.internalFormat, c, l);
                        if (i) {
                            s = k(n);
                            t.renderbufferStorageMultisample(36161, s, r, n.width, n.height);
                        } else t.renderbufferStorage(36161, r, n.width, n.height);
                    }
                    t.bindRenderbuffer(36161, null);
                }
                function N(e) {
                    var n = i.get(e),
                        r = !0 === e.isWebGLCubeRenderTarget;
                    if (e.depthTexture) {
                        if (r) throw new Error("target.depthTexture not supported in Cube render targets");
                        !(function (e, n) {
                            if (n && n.isWebGLCubeRenderTarget) throw new Error("Depth Texture with cube render targets is not supported");
                            if ((t.bindFramebuffer(36160, e), !n.depthTexture || !n.depthTexture.isDepthTexture)) throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
                            (i.get(n.depthTexture).__webglTexture && n.depthTexture.image.width === n.width && n.depthTexture.image.height === n.height) ||
                                ((n.depthTexture.image.width = n.width), (n.depthTexture.image.height = n.height), (n.depthTexture.needsUpdate = !0)),
                                T(n.depthTexture, 0);
                            var r = i.get(n.depthTexture).__webglTexture;
                            if (n.depthTexture.format === Rt) t.framebufferTexture2D(36160, 36096, 3553, r, 0);
                            else {
                                if (n.depthTexture.format !== Ot) throw new Error("Unknown depthTexture format");
                                t.framebufferTexture2D(36160, 33306, 3553, r, 0);
                            }
                        })(n.__webglFramebuffer, e);
                    } else if (r) {
                        n.__webglDepthbuffer = [];
                        for (var o = 0; o < 6; o++) t.bindFramebuffer(36160, n.__webglFramebuffer[o]), (n.__webglDepthbuffer[o] = t.createRenderbuffer()), I(n.__webglDepthbuffer[o], e, !1);
                    } else t.bindFramebuffer(36160, n.__webglFramebuffer), (n.__webglDepthbuffer = t.createRenderbuffer()), I(n.__webglDepthbuffer, e, !1);
                    t.bindFramebuffer(36160, null);
                }
                function k(t) {
                    return c && t.isWebGLMultisampleRenderTarget ? Math.min(p, t.samples) : 0;
                }
                var B = !1,
                    z = !1;
                (this.allocateTextureUnit = function () {
                    var t = S;
                    return t >= l && console.warn("THREE.WebGLTextures: Trying to use " + t + " texture units while this GPU supports only " + l), (S += 1), t;
                }),
                    (this.resetTextureUnits = function () {
                        S = 0;
                    }),
                    (this.setTexture2D = T),
                    (this.setTexture2DArray = function (t, e) {
                        var r = i.get(t);
                        t.version > 0 && r.__version !== t.version ? O(r, t, e) : (n.activeTexture(33984 + e), n.bindTexture(35866, r.__webglTexture));
                    }),
                    (this.setTexture3D = function (t, e) {
                        var r = i.get(t);
                        t.version > 0 && r.__version !== t.version ? O(r, t, e) : (n.activeTexture(33984 + e), n.bindTexture(32879, r.__webglTexture));
                    }),
                    (this.setTextureCube = E),
                    (this.setTextureCubeDynamic = A),
                    (this.setupRenderTarget = function (e) {
                        var r = i.get(e),
                            s = i.get(e.texture);
                        e.addEventListener("dispose", M), (s.__webglTexture = t.createTexture()), a.memory.textures++;
                        var l = !0 === e.isWebGLCubeRenderTarget,
                            u = !0 === e.isWebGLMultisampleRenderTarget,
                            h = g(e) || c;
                        if (
                            (!c ||
                                e.texture.format !== Et ||
                                (e.texture.type !== xt && e.texture.type !== _t) ||
                                ((e.texture.format = At), console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.")),
                            l)
                        ) {
                            r.__webglFramebuffer = [];
                            for (var p = 0; p < 6; p++) r.__webglFramebuffer[p] = t.createFramebuffer();
                        } else if (((r.__webglFramebuffer = t.createFramebuffer()), u))
                            if (c) {
                                (r.__webglMultisampledFramebuffer = t.createFramebuffer()), (r.__webglColorRenderbuffer = t.createRenderbuffer()), t.bindRenderbuffer(36161, r.__webglColorRenderbuffer);
                                var d = o.convert(e.texture.format),
                                    f = o.convert(e.texture.type),
                                    m = _(e.texture.internalFormat, d, f),
                                    v = k(e);
                                t.renderbufferStorageMultisample(36161, v, m, e.width, e.height),
                                    t.bindFramebuffer(36160, r.__webglMultisampledFramebuffer),
                                    t.framebufferRenderbuffer(36160, 36064, 36161, r.__webglColorRenderbuffer),
                                    t.bindRenderbuffer(36161, null),
                                    e.depthBuffer && ((r.__webglDepthRenderbuffer = t.createRenderbuffer()), I(r.__webglDepthRenderbuffer, e, !0)),
                                    t.bindFramebuffer(36160, null);
                            } else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
                        if (l) {
                            for (n.bindTexture(34067, s.__webglTexture), C(34067, e.texture, h), p = 0; p < 6; p++) D(r.__webglFramebuffer[p], e, 36064, 34069 + p);
                            y(e.texture, h) && x(34067, e.texture, e.width, e.height), n.bindTexture(34067, null);
                        } else n.bindTexture(3553, s.__webglTexture), C(3553, e.texture, h), D(r.__webglFramebuffer, e, 36064, 3553), y(e.texture, h) && x(3553, e.texture, e.width, e.height), n.bindTexture(3553, null);
                        e.depthBuffer && N(e);
                    }),
                    (this.updateRenderTargetMipmap = function (t) {
                        var e = t.texture;
                        if (y(e, g(t) || c)) {
                            var r = t.isWebGLCubeRenderTarget ? 34067 : 3553,
                                o = i.get(e).__webglTexture;
                            n.bindTexture(r, o), x(r, e, t.width, t.height), n.bindTexture(r, null);
                        }
                    }),
                    (this.updateMultisampleRenderTarget = function (e) {
                        if (e.isWebGLMultisampleRenderTarget)
                            if (c) {
                                var n = i.get(e);
                                t.bindFramebuffer(36008, n.__webglMultisampledFramebuffer), t.bindFramebuffer(36009, n.__webglFramebuffer);
                                var r = e.width,
                                    o = e.height,
                                    a = 16384;
                                e.depthBuffer && (a |= 256), e.stencilBuffer && (a |= 1024), t.blitFramebuffer(0, 0, r, o, 0, 0, r, o, a, 9728), t.bindFramebuffer(36160, n.__webglMultisampledFramebuffer);
                            } else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
                    }),
                    (this.safeSetTexture2D = function (t, e) {
                        t && t.isWebGLRenderTarget && (!1 === B && (console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."), (B = !0)), (t = t.texture)), T(t, e);
                    }),
                    (this.safeSetTextureCube = function (t, e) {
                        t && t.isWebGLCubeRenderTarget && (!1 === z && (console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."), (z = !0)), (t = t.texture)),
                            (t && t.isCubeTexture) || (Array.isArray(t.image) && 6 === t.image.length) ? E(t, e) : A(t, e);
                    });
            }
            function Ta(t) {
                Rr.call(this), (this.cameras = t || []);
            }
            function Ea() {
                On.call(this), (this.type = "Group");
            }
            function Aa(t, e) {
                var n = this,
                    i = null,
                    r = 1,
                    o = null,
                    a = "local-floor",
                    s = null,
                    c = [],
                    l = new Map(),
                    u = new Rr();
                u.layers.enable(1), (u.viewport = new $e());
                var h = new Rr();
                h.layers.enable(2), (h.viewport = new $e());
                var p = new Ta([u, h]);
                p.layers.enable(1), p.layers.enable(2);
                var d = null,
                    f = null;
                function m(t) {
                    var e = l.get(t.inputSource);
                    e && (e.targetRay && e.targetRay.dispatchEvent({ type: t.type }), e.grip && e.grip.dispatchEvent({ type: t.type }));
                }
                function v() {
                    l.forEach(function (t, e) {
                        t.targetRay && (t.targetRay.dispatchEvent({ type: "disconnected", data: e }), (t.targetRay.visible = !1)), t.grip && (t.grip.dispatchEvent({ type: "disconnected", data: e }), (t.grip.visible = !1));
                    }),
                        l.clear(),
                        t.setFramebuffer(null),
                        t.setRenderTarget(t.getRenderTarget()),
                        M.stop(),
                        (n.isPresenting = !1),
                        n.dispatchEvent({ type: "sessionend" });
                }
                function g(t) {
                    (o = t), M.setContext(i), M.start(), (n.isPresenting = !0), n.dispatchEvent({ type: "sessionstart" });
                }
                function y(t) {
                    for (var e = i.inputSources, n = 0; n < c.length; n++) l.set(e[n], c[n]);
                    for (n = 0; n < t.removed.length; n++) {
                        var r = t.removed[n];
                        (o = l.get(r)) && (o.targetRay && o.targetRay.dispatchEvent({ type: "disconnected", data: r }), o.grip && o.grip.dispatchEvent({ type: "disconnected", data: r }), l.delete(r));
                    }
                    for (n = 0; n < t.added.length; n++) {
                        var o;
                        r = t.added[n];
                        (o = l.get(r)) && (o.targetRay && o.targetRay.dispatchEvent({ type: "connected", data: r }), o.grip && o.grip.dispatchEvent({ type: "connected", data: r }));
                    }
                }
                (this.enabled = !1),
                    (this.isPresenting = !1),
                    (this.getController = function (t) {
                        var e = c[t];
                        return void 0 === e && ((e = {}), (c[t] = e)), void 0 === e.targetRay && ((e.targetRay = new Ea()), (e.targetRay.matrixAutoUpdate = !1), (e.targetRay.visible = !1)), e.targetRay;
                    }),
                    (this.getControllerGrip = function (t) {
                        var e = c[t];
                        return void 0 === e && ((e = {}), (c[t] = e)), void 0 === e.grip && ((e.grip = new Ea()), (e.grip.matrixAutoUpdate = !1), (e.grip.visible = !1)), e.grip;
                    }),
                    (this.setFramebufferScaleFactor = function (t) {
                        (r = t), 1 == n.isPresenting && console.warn("WebXRManager: Cannot change framebuffer scale while presenting VR content");
                    }),
                    (this.setReferenceSpaceType = function (t) {
                        a = t;
                    }),
                    (this.getReferenceSpace = function () {
                        return o;
                    }),
                    (this.getSession = function () {
                        return i;
                    }),
                    (this.setSession = function (t) {
                        if (null !== (i = t)) {
                            i.addEventListener("select", m),
                                i.addEventListener("selectstart", m),
                                i.addEventListener("selectend", m),
                                i.addEventListener("squeeze", m),
                                i.addEventListener("squeezestart", m),
                                i.addEventListener("squeezeend", m),
                                i.addEventListener("end", v);
                            var n = e.getContextAttributes(),
                                o = { antialias: n.antialias, alpha: n.alpha, depth: n.depth, stencil: n.stencil, framebufferScaleFactor: r },
                                s = new XRWebGLLayer(i, e, o);
                            i.updateRenderState({ baseLayer: s }), i.requestReferenceSpace(a).then(g), i.addEventListener("inputsourceschange", y);
                        }
                    });
                var x = new an(),
                    _ = new an();
                function b(t, e) {
                    null === e ? t.matrixWorld.copy(t.matrix) : t.matrixWorld.multiplyMatrices(e.matrixWorld, t.matrix), t.matrixWorldInverse.getInverse(t.matrixWorld);
                }
                this.getCamera = function (t) {
                    (p.near = h.near = u.near = t.near), (p.far = h.far = u.far = t.far), (d === p.near && f === p.far) || (i.updateRenderState({ depthNear: p.near, depthFar: p.far }), (d = p.near), (f = p.far));
                    var e = t.parent,
                        n = p.cameras;
                    b(p, e);
                    for (var r = 0; r < n.length; r++) b(n[r], e);
                    t.matrixWorld.copy(p.matrixWorld);
                    for (var o = t.children, a = ((r = 0), o.length); r < a; r++) o[r].updateMatrixWorld(!0);
                    return (
                        (function (t, e, n) {
                            x.setFromMatrixPosition(e.matrixWorld), _.setFromMatrixPosition(n.matrixWorld);
                            var i = x.distanceTo(_),
                                r = e.projectionMatrix.elements,
                                o = n.projectionMatrix.elements,
                                a = r[14] / (r[10] - 1),
                                s = r[14] / (r[10] + 1),
                                c = (r[9] + 1) / r[5],
                                l = (r[9] - 1) / r[5],
                                u = (r[8] - 1) / r[0],
                                h = (o[8] + 1) / o[0],
                                p = a * u,
                                d = a * h,
                                f = i / (-u + h),
                                m = f * -u;
                            e.matrixWorld.decompose(t.position, t.quaternion, t.scale), t.translateX(m), t.translateZ(f), t.matrixWorld.compose(t.position, t.quaternion, t.scale), t.matrixWorldInverse.getInverse(t.matrixWorld);
                            var v = a + f,
                                g = s + f,
                                y = p - m,
                                b = d + (i - m),
                                w = ((c * s) / g) * v,
                                M = ((l * s) / g) * v;
                            t.projectionMatrix.makePerspective(y, b, w, M, v, g);
                        })(p, u, h),
                        p
                    );
                };
                var w = null;
                var M = new jr();
                M.setAnimationLoop(function (e, n) {
                    if (null !== (s = n.getViewerPose(o))) {
                        var r = s.views,
                            a = i.renderState.baseLayer;
                        t.setFramebuffer(a.framebuffer);
                        for (var l = 0; l < r.length; l++) {
                            var u = r[l],
                                h = a.getViewport(u),
                                d = p.cameras[l];
                            d.matrix.fromArray(u.transform.matrix), d.projectionMatrix.fromArray(u.projectionMatrix), d.viewport.set(h.x, h.y, h.width, h.height), 0 === l && p.matrix.copy(d.matrix);
                        }
                    }
                    var f = i.inputSources;
                    for (l = 0; l < c.length; l++) {
                        var m = c[l],
                            v = f[l],
                            g = null,
                            y = null;
                        v &&
                            (m.targetRay && null !== (g = n.getPose(v.targetRaySpace, o)) && (m.targetRay.matrix.fromArray(g.transform.matrix), m.targetRay.matrix.decompose(m.targetRay.position, m.targetRay.rotation, m.targetRay.scale)),
                            m.grip && v.gripSpace && null !== (y = n.getPose(v.gripSpace, o)) && (m.grip.matrix.fromArray(y.transform.matrix), m.grip.matrix.decompose(m.grip.position, m.grip.rotation, m.grip.scale))),
                            m.targetRay && (m.targetRay.visible = null !== g),
                            m.grip && (m.grip.visible = null !== y);
                    }
                    w && w(e, n);
                }),
                    (this.setAnimationLoop = function (t) {
                        w = t;
                    }),
                    (this.dispose = function () {});
            }
            function Pa(t) {
                var e = void 0 !== (t = t || {}).canvas ? t.canvas : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"),
                    n = void 0 !== t.context ? t.context : null,
                    a = void 0 !== t.alpha && t.alpha,
                    s = void 0 === t.depth || t.depth,
                    c = void 0 === t.stencil || t.stencil,
                    G = void 0 !== t.antialias && t.antialias,
                    H = void 0 === t.premultipliedAlpha || t.premultipliedAlpha,
                    V = void 0 !== t.preserveDrawingBuffer && t.preserveDrawingBuffer,
                    W = void 0 !== t.powerPreference ? t.powerPreference : "default",
                    X = void 0 !== t.failIfMajorPerformanceCaveat && t.failIfMajorPerformanceCaveat,
                    Y = null,
                    Z = null;
                (this.domElement = e),
                    (this.debug = { checkShaderErrors: !0 }),
                    (this.autoClear = !0),
                    (this.autoClearColor = !0),
                    (this.autoClearDepth = !0),
                    (this.autoClearStencil = !0),
                    (this.sortObjects = !0),
                    (this.clippingPlanes = []),
                    (this.localClippingEnabled = !1),
                    (this.gammaFactor = 2),
                    (this.outputEncoding = Ae),
                    (this.physicallyCorrectLights = !1),
                    (this.toneMapping = q),
                    (this.toneMappingExposure = 1),
                    (this.toneMappingWhitePoint = 1),
                    (this.maxMorphTargets = 8),
                    (this.maxMorphNormals = 4);
                var J,
                    Q,
                    K,
                    $,
                    tt,
                    et,
                    it,
                    rt,
                    ot,
                    at,
                    st,
                    ct,
                    lt,
                    ut,
                    ht,
                    pt,
                    Ct,
                    Te,
                    Ee = this,
                    Pe = !1,
                    Le = null,
                    Ce = 0,
                    Re = 0,
                    Oe = null,
                    De = null,
                    Ie = -1,
                    Ne = { geometry: null, program: null, wireframe: !1 },
                    ke = null,
                    Be = null,
                    ze = new $e(),
                    Fe = new $e(),
                    Ue = null,
                    je = e.width,
                    Ge = e.height,
                    He = 1,
                    Ve = null,
                    We = null,
                    qe = new $e(0, 0, je, Ge),
                    Je = new $e(0, 0, je, Ge),
                    Qe = !1,
                    Ke = new Fr(),
                    tn = new (function () {
                        var t = this,
                            e = null,
                            n = 0,
                            i = !1,
                            r = !1,
                            o = new ci(),
                            a = new Ze(),
                            s = { value: null, needsUpdate: !1 };
                        function c() {
                            s.value !== e && ((s.value = e), (s.needsUpdate = n > 0)), (t.numPlanes = n), (t.numIntersection = 0);
                        }
                        function l(e, n, i, r) {
                            var c = null !== e ? e.length : 0,
                                l = null;
                            if (0 !== c) {
                                if (((l = s.value), !0 !== r || null === l)) {
                                    var u = i + 4 * c,
                                        h = n.matrixWorldInverse;
                                    a.getNormalMatrix(h), (null === l || l.length < u) && (l = new Float32Array(u));
                                    for (var p = 0, d = i; p !== c; ++p, d += 4) o.copy(e[p]).applyMatrix4(h, a), o.normal.toArray(l, d), (l[d + 3] = o.constant);
                                }
                                (s.value = l), (s.needsUpdate = !0);
                            }
                            return (t.numPlanes = c), (t.numIntersection = 0), l;
                        }
                        (this.uniform = s),
                            (this.numPlanes = 0),
                            (this.numIntersection = 0),
                            (this.init = function (t, r, o) {
                                var a = 0 !== t.length || r || 0 !== n || i;
                                return (i = r), (e = l(t, o, 0)), (n = t.length), a;
                            }),
                            (this.beginShadows = function () {
                                (r = !0), l(null);
                            }),
                            (this.endShadows = function () {
                                (r = !1), c();
                            }),
                            (this.setState = function (t, o, a, u, h, p) {
                                if (!i || null === t || 0 === t.length || (r && !a)) r ? l(null) : c();
                                else {
                                    var d = r ? 0 : n,
                                        f = 4 * d,
                                        m = h.clippingState || null;
                                    (s.value = m), (m = l(t, u, f, p));
                                    for (var v = 0; v !== f; ++v) m[v] = e[v];
                                    (h.clippingState = m), (this.numIntersection = o ? this.numPlanes : 0), (this.numPlanes += d);
                                }
                            });
                    })(),
                    en = !1,
                    nn = !1,
                    rn = new fn(),
                    on = new an();
                function sn() {
                    return null === Oe ? He : 1;
                }
                try {
                    var cn = { alpha: a, depth: s, stencil: c, antialias: G, premultipliedAlpha: H, preserveDrawingBuffer: V, powerPreference: W, failIfMajorPerformanceCaveat: X, xrCompatible: !0 };
                    if ((e.addEventListener("webglcontextlost", pn, !1), e.addEventListener("webglcontextrestored", dn, !1), null === (J = n || e.getContext("webgl", cn) || e.getContext("experimental-webgl", cn))))
                        throw null !== e.getContext("webgl") ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.");
                    void 0 === J.getShaderPrecisionFormat &&
                        (J.getShaderPrecisionFormat = function () {
                            return { rangeMin: 1, rangeMax: 1, precision: 1 };
                        });
                } catch (t) {
                    throw (console.error("THREE.WebGLRenderer: " + t.message), t);
                }
                function ln() {
                    (Q = new (function (t) {
                        var e = {};
                        return {
                            get: function (n) {
                                if (void 0 !== e[n]) return e[n];
                                var i;
                                switch (n) {
                                    case "WEBGL_depth_texture":
                                        i = t.getExtension("WEBGL_depth_texture") || t.getExtension("MOZ_WEBGL_depth_texture") || t.getExtension("WEBKIT_WEBGL_depth_texture");
                                        break;
                                    case "EXT_texture_filter_anisotropic":
                                        i = t.getExtension("EXT_texture_filter_anisotropic") || t.getExtension("MOZ_EXT_texture_filter_anisotropic") || t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
                                        break;
                                    case "WEBGL_compressed_texture_s3tc":
                                        i = t.getExtension("WEBGL_compressed_texture_s3tc") || t.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
                                        break;
                                    case "WEBGL_compressed_texture_pvrtc":
                                        i = t.getExtension("WEBGL_compressed_texture_pvrtc") || t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
                                        break;
                                    default:
                                        i = t.getExtension(n);
                                }
                                return null === i && console.warn("THREE.WebGLRenderer: " + n + " extension not supported."), (e[n] = i), i;
                            },
                        };
                    })(J)),
                        !1 ===
                            (K = new (function (t, e, n) {
                                var i;
                                function r(e) {
                                    if ("highp" === e) {
                                        if (t.getShaderPrecisionFormat(35633, 36338).precision > 0 && t.getShaderPrecisionFormat(35632, 36338).precision > 0) return "highp";
                                        e = "mediump";
                                    }
                                    return "mediump" === e && t.getShaderPrecisionFormat(35633, 36337).precision > 0 && t.getShaderPrecisionFormat(35632, 36337).precision > 0 ? "mediump" : "lowp";
                                }
                                var o = ("undefined" != typeof WebGL2RenderingContext && t instanceof WebGL2RenderingContext) || ("undefined" != typeof WebGL2ComputeRenderingContext && t instanceof WebGL2ComputeRenderingContext),
                                    a = void 0 !== n.precision ? n.precision : "highp",
                                    s = r(a);
                                s !== a && (console.warn("THREE.WebGLRenderer:", a, "not supported, using", s, "instead."), (a = s));
                                var c = !0 === n.logarithmicDepthBuffer,
                                    l = t.getParameter(34930),
                                    u = t.getParameter(35660),
                                    h = t.getParameter(3379),
                                    p = t.getParameter(34076),
                                    d = t.getParameter(34921),
                                    f = t.getParameter(36347),
                                    m = t.getParameter(36348),
                                    v = t.getParameter(36349),
                                    g = u > 0,
                                    y = o || !!e.get("OES_texture_float");
                                return {
                                    isWebGL2: o,
                                    getMaxAnisotropy: function () {
                                        if (void 0 !== i) return i;
                                        var n = e.get("EXT_texture_filter_anisotropic");
                                        return (i = null !== n ? t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0);
                                    },
                                    getMaxPrecision: r,
                                    precision: a,
                                    logarithmicDepthBuffer: c,
                                    maxTextures: l,
                                    maxVertexTextures: u,
                                    maxTextureSize: h,
                                    maxCubemapSize: p,
                                    maxAttributes: d,
                                    maxVertexUniforms: f,
                                    maxVaryings: m,
                                    maxFragmentUniforms: v,
                                    vertexTextures: g,
                                    floatFragmentTextures: y,
                                    floatVertexTextures: g && y,
                                    maxSamples: o ? t.getParameter(36183) : 0,
                                };
                            })(J, Q, t)).isWebGL2 &&
                            (Q.get("WEBGL_depth_texture"),
                            Q.get("OES_texture_float"),
                            Q.get("OES_texture_half_float"),
                            Q.get("OES_texture_half_float_linear"),
                            Q.get("OES_standard_derivatives"),
                            Q.get("OES_element_index_uint"),
                            Q.get("ANGLE_instanced_arrays")),
                        Q.get("OES_texture_float_linear"),
                        (Te = new (function (t, e, n) {
                            var i = n.isWebGL2;
                            return {
                                convert: function (t) {
                                    var n;
                                    if (t === dt) return 5121;
                                    if (t === bt) return 32819;
                                    if (t === wt) return 32820;
                                    if (t === Mt) return 33635;
                                    if (t === ft) return 5120;
                                    if (t === mt) return 5122;
                                    if (t === vt) return 5123;
                                    if (t === gt) return 5124;
                                    if (t === yt) return 5125;
                                    if (t === xt) return 5126;
                                    if (t === _t) return i ? 5131 : null !== (n = e.get("OES_texture_half_float")) ? n.HALF_FLOAT_OES : null;
                                    if (t === Tt) return 6406;
                                    if (t === Et) return 6407;
                                    if (t === At) return 6408;
                                    if (t === Pt) return 6409;
                                    if (t === Lt) return 6410;
                                    if (t === Rt) return 6402;
                                    if (t === Ot) return 34041;
                                    if (t === Dt) return 6403;
                                    if (t === It) return 36244;
                                    if (t === Nt) return 33319;
                                    if (t === kt) return 33320;
                                    if (t === Bt) return 36248;
                                    if (t === zt) return 36249;
                                    if (t === Ft || t === Ut || t === jt || t === Gt) {
                                        if (null === (n = e.get("WEBGL_compressed_texture_s3tc"))) return null;
                                        if (t === Ft) return n.COMPRESSED_RGB_S3TC_DXT1_EXT;
                                        if (t === Ut) return n.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                                        if (t === jt) return n.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                                        if (t === Gt) return n.COMPRESSED_RGBA_S3TC_DXT5_EXT;
                                    }
                                    if (t === Ht || t === Vt || t === Wt || t === qt) {
                                        if (null === (n = e.get("WEBGL_compressed_texture_pvrtc"))) return null;
                                        if (t === Ht) return n.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                                        if (t === Vt) return n.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                                        if (t === Wt) return n.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                                        if (t === qt) return n.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
                                    }
                                    if (t === Xt) return null !== (n = e.get("WEBGL_compressed_texture_etc1")) ? n.COMPRESSED_RGB_ETC1_WEBGL : null;
                                    if ((t === Yt || t === Zt) && null !== (n = e.get("WEBGL_compressed_texture_etc"))) {
                                        if (t === Yt) return n.COMPRESSED_RGB8_ETC2;
                                        if (t === Zt) return n.COMPRESSED_RGBA8_ETC2_EAC;
                                    }
                                    return t === Jt ||
                                        t === Qt ||
                                        t === Kt ||
                                        t === $t ||
                                        t === te ||
                                        t === ee ||
                                        t === ne ||
                                        t === ie ||
                                        t === re ||
                                        t === oe ||
                                        t === ae ||
                                        t === se ||
                                        t === ce ||
                                        t === le ||
                                        t === he ||
                                        t === pe ||
                                        t === de ||
                                        t === fe ||
                                        t === me ||
                                        t === ve ||
                                        t === ge ||
                                        t === ye ||
                                        t === xe ||
                                        t === _e ||
                                        t === be ||
                                        t === we ||
                                        t === Me ||
                                        t === Se
                                        ? null !== (n = e.get("WEBGL_compressed_texture_astc"))
                                            ? t
                                            : null
                                        : t === ue
                                        ? null !== (n = e.get("EXT_texture_compression_bptc"))
                                            ? t
                                            : null
                                        : t === St
                                        ? i
                                            ? 34042
                                            : null !== (n = e.get("WEBGL_depth_texture"))
                                            ? n.UNSIGNED_INT_24_8_WEBGL
                                            : null
                                        : void 0;
                                },
                            };
                        })(J, Q, K)),
                        ($ = new (function (t, e, n) {
                            var a = n.isWebGL2,
                                s = new (function () {
                                    var e = !1,
                                        n = new $e(),
                                        i = null,
                                        r = new $e(0, 0, 0, 0);
                                    return {
                                        setMask: function (n) {
                                            i === n || e || (t.colorMask(n, n, n, n), (i = n));
                                        },
                                        setLocked: function (t) {
                                            e = t;
                                        },
                                        setClear: function (e, i, o, a, s) {
                                            !0 === s && ((e *= a), (i *= a), (o *= a)), n.set(e, i, o, a), !1 === r.equals(n) && (t.clearColor(e, i, o, a), r.copy(n));
                                        },
                                        reset: function () {
                                            (e = !1), (i = null), r.set(-1, 0, 0, 0);
                                        },
                                    };
                                })(),
                                c = new (function () {
                                    var e = !1,
                                        n = null,
                                        i = null,
                                        r = null;
                                    return {
                                        setTest: function (t) {
                                            t ? xt(2929) : _t(2929);
                                        },
                                        setMask: function (i) {
                                            n === i || e || (t.depthMask(i), (n = i));
                                        },
                                        setFunc: function (e) {
                                            if (i !== e) {
                                                if (e)
                                                    switch (e) {
                                                        case I:
                                                            t.depthFunc(512);
                                                            break;
                                                        case N:
                                                            t.depthFunc(519);
                                                            break;
                                                        case k:
                                                            t.depthFunc(513);
                                                            break;
                                                        case B:
                                                            t.depthFunc(515);
                                                            break;
                                                        case z:
                                                            t.depthFunc(514);
                                                            break;
                                                        case F:
                                                            t.depthFunc(518);
                                                            break;
                                                        case U:
                                                            t.depthFunc(516);
                                                            break;
                                                        case j:
                                                            t.depthFunc(517);
                                                            break;
                                                        default:
                                                            t.depthFunc(515);
                                                    }
                                                else t.depthFunc(515);
                                                i = e;
                                            }
                                        },
                                        setLocked: function (t) {
                                            e = t;
                                        },
                                        setClear: function (e) {
                                            r !== e && (t.clearDepth(e), (r = e));
                                        },
                                        reset: function () {
                                            (e = !1), (n = null), (i = null), (r = null);
                                        },
                                    };
                                })(),
                                l = new (function () {
                                    var e = !1,
                                        n = null,
                                        i = null,
                                        r = null,
                                        o = null,
                                        a = null,
                                        s = null,
                                        c = null,
                                        l = null;
                                    return {
                                        setTest: function (t) {
                                            e || (t ? xt(2960) : _t(2960));
                                        },
                                        setMask: function (i) {
                                            n === i || e || (t.stencilMask(i), (n = i));
                                        },
                                        setFunc: function (e, n, a) {
                                            (i === e && r === n && o === a) || (t.stencilFunc(e, n, a), (i = e), (r = n), (o = a));
                                        },
                                        setOp: function (e, n, i) {
                                            (a === e && s === n && c === i) || (t.stencilOp(e, n, i), (a = e), (s = n), (c = i));
                                        },
                                        setLocked: function (t) {
                                            e = t;
                                        },
                                        setClear: function (e) {
                                            l !== e && (t.clearStencil(e), (l = e));
                                        },
                                        reset: function () {
                                            (e = !1), (n = null), (i = null), (r = null), (o = null), (a = null), (s = null), (c = null), (l = null);
                                        },
                                    };
                                })(),
                                G = t.getParameter(34921),
                                H = new Uint8Array(G),
                                V = new Uint8Array(G),
                                W = new Uint8Array(G),
                                q = {},
                                X = null,
                                Y = null,
                                Z = null,
                                J = null,
                                Q = null,
                                K = null,
                                $ = null,
                                tt = null,
                                et = null,
                                nt = !1,
                                it = null,
                                rt = null,
                                ot = null,
                                at = null,
                                st = null,
                                ct = t.getParameter(35661),
                                lt = !1,
                                ut = 0,
                                ht = t.getParameter(7938);
                            -1 !== ht.indexOf("WebGL") ? ((ut = parseFloat(/^WebGL\ ([0-9])/.exec(ht)[1])), (lt = ut >= 1)) : -1 !== ht.indexOf("OpenGL ES") && ((ut = parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(ht)[1])), (lt = ut >= 2));
                            var pt = null,
                                dt = {},
                                ft = new $e(),
                                mt = new $e();
                            function vt(e, n, i) {
                                var r = new Uint8Array(4),
                                    o = t.createTexture();
                                t.bindTexture(e, o), t.texParameteri(e, 10241, 9728), t.texParameteri(e, 10240, 9728);
                                for (var a = 0; a < i; a++) t.texImage2D(n + a, 0, 6408, 1, 1, 0, 6408, 5121, r);
                                return o;
                            }
                            var gt = {};
                            function yt(n, i) {
                                (H[n] = 1), 0 === V[n] && (t.enableVertexAttribArray(n), (V[n] = 1)), W[n] !== i && ((a ? t : e.get("ANGLE_instanced_arrays"))[a ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](n, i), (W[n] = i));
                            }
                            function xt(e) {
                                !0 !== q[e] && (t.enable(e), (q[e] = !0));
                            }
                            function _t(e) {
                                !1 !== q[e] && (t.disable(e), (q[e] = !1));
                            }
                            (gt[3553] = vt(3553, 3553, 1)), (gt[34067] = vt(34067, 34069, 6)), s.setClear(0, 0, 0, 1), c.setClear(1), l.setClear(0), xt(2929), c.setFunc(B), Tt(!1), Et(r), xt(2884), St(p);
                            var bt = { [y]: 32774, [x]: 32778, [_]: 32779 };
                            if (a) (bt[b] = 32775), (bt[w] = 32776);
                            else {
                                var wt = e.get("EXT_blend_minmax");
                                null !== wt && ((bt[b] = wt.MIN_EXT), (bt[w] = wt.MAX_EXT));
                            }
                            var Mt = { [M]: 0, [S]: 1, [T]: 768, [A]: 770, [D]: 776, [R]: 774, [L]: 772, [E]: 769, [P]: 771, [O]: 775, [C]: 773 };
                            function St(e, n, i, r, o, a, s, c) {
                                if (e !== p) {
                                    if ((Y || (xt(3042), (Y = !0)), e === g))
                                        (o = o || n),
                                            (a = a || i),
                                            (s = s || r),
                                            (n === J && o === $) || (t.blendEquationSeparate(bt[n], bt[o]), (J = n), ($ = o)),
                                            (i === Q && r === K && a === tt && s === et) || (t.blendFuncSeparate(Mt[i], Mt[r], Mt[a], Mt[s]), (Q = i), (K = r), (tt = a), (et = s)),
                                            (Z = e),
                                            (nt = null);
                                    else if (e !== Z || c !== nt) {
                                        if (((J === y && $ === y) || (t.blendEquation(32774), (J = y), ($ = y)), c))
                                            switch (e) {
                                                case d:
                                                    t.blendFuncSeparate(1, 771, 1, 771);
                                                    break;
                                                case f:
                                                    t.blendFunc(1, 1);
                                                    break;
                                                case m:
                                                    t.blendFuncSeparate(0, 0, 769, 771);
                                                    break;
                                                case v:
                                                    t.blendFuncSeparate(0, 768, 0, 770);
                                                    break;
                                                default:
                                                    console.error("THREE.WebGLState: Invalid blending: ", e);
                                            }
                                        else
                                            switch (e) {
                                                case d:
                                                    t.blendFuncSeparate(770, 771, 1, 771);
                                                    break;
                                                case f:
                                                    t.blendFunc(770, 1);
                                                    break;
                                                case m:
                                                    t.blendFunc(0, 769);
                                                    break;
                                                case v:
                                                    t.blendFunc(0, 768);
                                                    break;
                                                default:
                                                    console.error("THREE.WebGLState: Invalid blending: ", e);
                                            }
                                        (Q = null), (K = null), (tt = null), (et = null), (Z = e), (nt = c);
                                    }
                                } else Y && (_t(3042), (Y = !1));
                            }
                            function Tt(e) {
                                it !== e && (e ? t.frontFace(2304) : t.frontFace(2305), (it = e));
                            }
                            function Et(e) {
                                e !== i ? (xt(2884), e !== rt && (e === r ? t.cullFace(1029) : e === o ? t.cullFace(1028) : t.cullFace(1032))) : _t(2884), (rt = e);
                            }
                            function At(e, n, i) {
                                e ? (xt(32823), (at === n && st === i) || (t.polygonOffset(n, i), (at = n), (st = i))) : _t(32823);
                            }
                            function Pt(e) {
                                void 0 === e && (e = 33984 + ct - 1), pt !== e && (t.activeTexture(e), (pt = e));
                            }
                            return {
                                buffers: { color: s, depth: c, stencil: l },
                                initAttributes: function () {
                                    for (var t = 0, e = H.length; t < e; t++) H[t] = 0;
                                },
                                enableAttribute: function (t) {
                                    yt(t, 0);
                                },
                                enableAttributeAndDivisor: yt,
                                disableUnusedAttributes: function () {
                                    for (var e = 0, n = V.length; e !== n; ++e) V[e] !== H[e] && (t.disableVertexAttribArray(e), (V[e] = 0));
                                },
                                enable: xt,
                                disable: _t,
                                useProgram: function (e) {
                                    return X !== e && (t.useProgram(e), (X = e), !0);
                                },
                                setBlending: St,
                                setMaterial: function (t, e) {
                                    t.side === h ? _t(2884) : xt(2884);
                                    var n = t.side === u;
                                    e && (n = !n),
                                        Tt(n),
                                        t.blending === d && !1 === t.transparent ? St(p) : St(t.blending, t.blendEquation, t.blendSrc, t.blendDst, t.blendEquationAlpha, t.blendSrcAlpha, t.blendDstAlpha, t.premultipliedAlpha),
                                        c.setFunc(t.depthFunc),
                                        c.setTest(t.depthTest),
                                        c.setMask(t.depthWrite),
                                        s.setMask(t.colorWrite);
                                    var i = t.stencilWrite;
                                    l.setTest(i),
                                        i && (l.setMask(t.stencilWriteMask), l.setFunc(t.stencilFunc, t.stencilRef, t.stencilFuncMask), l.setOp(t.stencilFail, t.stencilZFail, t.stencilZPass)),
                                        At(t.polygonOffset, t.polygonOffsetFactor, t.polygonOffsetUnits);
                                },
                                setFlipSided: Tt,
                                setCullFace: Et,
                                setLineWidth: function (e) {
                                    e !== ot && (lt && t.lineWidth(e), (ot = e));
                                },
                                setPolygonOffset: At,
                                setScissorTest: function (t) {
                                    t ? xt(3089) : _t(3089);
                                },
                                activeTexture: Pt,
                                bindTexture: function (e, n) {
                                    null === pt && Pt();
                                    var i = dt[pt];
                                    void 0 === i && ((i = { type: void 0, texture: void 0 }), (dt[pt] = i)), (i.type === e && i.texture === n) || (t.bindTexture(e, n || gt[e]), (i.type = e), (i.texture = n));
                                },
                                unbindTexture: function () {
                                    var e = dt[pt];
                                    void 0 !== e && void 0 !== e.type && (t.bindTexture(e.type, null), (e.type = void 0), (e.texture = void 0));
                                },
                                compressedTexImage2D: function () {
                                    try {
                                        t.compressedTexImage2D.apply(t, arguments);
                                    } catch (t) {
                                        console.error("THREE.WebGLState:", t);
                                    }
                                },
                                texImage2D: function () {
                                    try {
                                        t.texImage2D.apply(t, arguments);
                                    } catch (t) {
                                        console.error("THREE.WebGLState:", t);
                                    }
                                },
                                texImage3D: function () {
                                    try {
                                        t.texImage3D.apply(t, arguments);
                                    } catch (t) {
                                        console.error("THREE.WebGLState:", t);
                                    }
                                },
                                scissor: function (e) {
                                    !1 === ft.equals(e) && (t.scissor(e.x, e.y, e.z, e.w), ft.copy(e));
                                },
                                viewport: function (e) {
                                    !1 === mt.equals(e) && (t.viewport(e.x, e.y, e.z, e.w), mt.copy(e));
                                },
                                reset: function () {
                                    for (var e = 0; e < V.length; e++) 1 === V[e] && (t.disableVertexAttribArray(e), (V[e] = 0));
                                    (q = {}), (pt = null), (dt = {}), (X = null), (Z = null), (it = null), (rt = null), s.reset(), c.reset(), l.reset();
                                },
                            };
                        })(J, Q, K)).scissor(Fe.copy(Je).multiplyScalar(He).floor()),
                        $.viewport(ze.copy(qe).multiplyScalar(He).floor()),
                        (tt = new (function () {
                            var t = { frame: 0, calls: 0, triangles: 0, points: 0, lines: 0 };
                            return {
                                memory: { geometries: 0, textures: 0 },
                                render: t,
                                programs: null,
                                autoReset: !0,
                                reset: function () {
                                    t.frame++, (t.calls = 0), (t.triangles = 0), (t.points = 0), (t.lines = 0);
                                },
                                update: function (e, n, i) {
                                    switch (((i = i || 1), t.calls++, n)) {
                                        case 4:
                                            t.triangles += i * (e / 3);
                                            break;
                                        case 1:
                                            t.lines += i * (e / 2);
                                            break;
                                        case 3:
                                            t.lines += i * (e - 1);
                                            break;
                                        case 2:
                                            t.lines += i * e;
                                            break;
                                        case 0:
                                            t.points += i * e;
                                            break;
                                        default:
                                            console.error("THREE.WebGLInfo: Unknown draw mode:", n);
                                    }
                                },
                            };
                        })(J)),
                        (et = new (function () {
                            var t = new WeakMap();
                            return {
                                get: function (e) {
                                    var n = t.get(e);
                                    return void 0 === n && ((n = {}), t.set(e, n)), n;
                                },
                                remove: function (e) {
                                    t.delete(e);
                                },
                                update: function (e, n, i) {
                                    t.get(e)[n] = i;
                                },
                                dispose: function () {
                                    t = new WeakMap();
                                },
                            };
                        })()),
                        (it = new Sa(J, Q, $, et, K, Te, tt)),
                        (rt = new Gr(J, K)),
                        (ot = new (function (t, e, n) {
                            var i = new WeakMap(),
                                r = new WeakMap();
                            function o(t) {
                                var a = t.target,
                                    s = i.get(a);
                                for (var c in (null !== s.index && e.remove(s.index), s.attributes)) e.remove(s.attributes[c]);
                                a.removeEventListener("dispose", o), i.delete(a);
                                var l = r.get(s);
                                l && (e.remove(l), r.delete(s)), n.memory.geometries--;
                            }
                            function a(t) {
                                var n = [],
                                    i = t.index,
                                    o = t.attributes.position,
                                    a = 0;
                                if (null !== i) {
                                    var s = i.array;
                                    a = i.version;
                                    for (var c = 0, l = s.length; c < l; c += 3) {
                                        var u = s[c + 0],
                                            h = s[c + 1],
                                            p = s[c + 2];
                                        n.push(u, h, h, p, p, u);
                                    }
                                } else for (s = o.array, a = o.version, c = 0, l = s.length / 3 - 1; c < l; c += 3) (u = c + 0), (h = c + 1), (p = c + 2), n.push(u, h, h, p, p, u);
                                var d = new (Hi(n) > 65535 ? Fi : Bi)(n, 1);
                                (d.version = a), e.update(d, 34963);
                                var f = r.get(t);
                                f && e.remove(f), r.set(t, d);
                            }
                            return {
                                get: function (t, e) {
                                    var r = i.get(e);
                                    return (
                                        r ||
                                        (e.addEventListener("dispose", o),
                                        e.isBufferGeometry ? (r = e) : e.isGeometry && (void 0 === e._bufferGeometry && (e._bufferGeometry = new Qi().setFromObject(t)), (r = e._bufferGeometry)),
                                        i.set(e, r),
                                        n.memory.geometries++,
                                        r)
                                    );
                                },
                                update: function (t) {
                                    var n = t.index,
                                        i = t.attributes;
                                    for (var r in (null !== n && e.update(n, 34963), i)) e.update(i[r], 34962);
                                    var o = t.morphAttributes;
                                    for (var r in o) for (var a = o[r], s = 0, c = a.length; s < c; s++) e.update(a[s], 34962);
                                },
                                getWireframeAttribute: function (t) {
                                    var e = r.get(t);
                                    if (e) {
                                        var n = t.index;
                                        null !== n && e.version < n.version && a(t);
                                    } else a(t);
                                    return r.get(t);
                                },
                            };
                        })(J, rt, tt)),
                        (at = new (function (t, e, n, i) {
                            var r = new WeakMap();
                            return {
                                update: function (t) {
                                    var o = i.render.frame,
                                        a = t.geometry,
                                        s = e.get(t, a);
                                    return r.get(s) !== o && (a.isGeometry && s.updateFromObject(t), e.update(s), r.set(s, o)), t.isInstancedMesh && n.update(t.instanceMatrix, 34962), s;
                                },
                                dispose: function () {
                                    r = new WeakMap();
                                },
                            };
                        })(J, ot, rt, tt)),
                        (ht = new (function (t) {
                            var e = {},
                                n = new Float32Array(8);
                            return {
                                update: function (i, r, o, a) {
                                    var s = i.morphTargetInfluences,
                                        c = void 0 === s ? 0 : s.length,
                                        l = e[r.id];
                                    if (void 0 === l) {
                                        l = [];
                                        for (var u = 0; u < c; u++) l[u] = [u, 0];
                                        e[r.id] = l;
                                    }
                                    var h = o.morphTargets && r.morphAttributes.position,
                                        p = o.morphNormals && r.morphAttributes.normal;
                                    for (u = 0; u < c; u++) 0 !== (f = l[u])[1] && (h && r.deleteAttribute("morphTarget" + u), p && r.deleteAttribute("morphNormal" + u));
                                    for (u = 0; u < c; u++) ((f = l[u])[0] = u), (f[1] = s[u]);
                                    l.sort(Xr);
                                    var d = 0;
                                    for (u = 0; u < 8; u++) {
                                        var f;
                                        if ((f = l[u])) {
                                            var m = f[0],
                                                v = f[1];
                                            if (v) {
                                                h && r.setAttribute("morphTarget" + u, h[m]), p && r.setAttribute("morphNormal" + u, p[m]), (n[u] = v), (d += v);
                                                continue;
                                            }
                                        }
                                        n[u] = 0;
                                    }
                                    var g = r.morphTargetsRelative ? 1 : 1 - d;
                                    a.getUniforms().setValue(t, "morphTargetBaseInfluence", g), a.getUniforms().setValue(t, "morphTargetInfluences", n);
                                },
                            };
                        })(J)),
                        (st = new ha(Ee, Q, K)),
                        (ct = new (function () {
                            var t = new WeakMap();
                            function e(n) {
                                var i = n.target;
                                i.removeEventListener("dispose", e), t.delete(i);
                            }
                            return {
                                get: function (n, i) {
                                    var r,
                                        o = t.get(n);
                                    return void 0 === o ? ((r = new fa()), t.set(n, new WeakMap()), t.get(n).set(i, r), n.addEventListener("dispose", e)) : void 0 === (r = o.get(i)) && ((r = new fa()), o.set(i, r)), r;
                                },
                                dispose: function () {
                                    t = new WeakMap();
                                },
                            };
                        })()),
                        (lt = new (function () {
                            var t = new WeakMap();
                            function e(n) {
                                var i = n.target;
                                i.removeEventListener("dispose", e), t.delete(i);
                            }
                            return {
                                get: function (n, i) {
                                    var r;
                                    return (
                                        !1 === t.has(n)
                                            ? ((r = new ya()), t.set(n, new WeakMap()), t.get(n).set(i, r), n.addEventListener("dispose", e))
                                            : !1 === t.get(n).has(i)
                                            ? ((r = new ya()), t.get(n).set(i, r))
                                            : (r = t.get(n).get(i)),
                                        r
                                    );
                                },
                                dispose: function () {
                                    t = new WeakMap();
                                },
                            };
                        })()),
                        (ut = new (function (t, e, n, i) {
                            var r,
                                o,
                                a = new Mi(0),
                                s = 0,
                                c = null,
                                h = 0,
                                p = null;
                            function d(t, n) {
                                e.buffers.color.setClear(t.r, t.g, t.b, n, i);
                            }
                            return {
                                getClearColor: function () {
                                    return a;
                                },
                                setClearColor: function (t, e) {
                                    a.set(t), d(a, (s = void 0 !== e ? e : 1));
                                },
                                getClearAlpha: function () {
                                    return s;
                                },
                                setClearAlpha: function (t) {
                                    d(a, (s = t));
                                },
                                render: function (e, i, f, m) {
                                    var v = i.background,
                                        g = t.xr,
                                        y = g.getSession && g.getSession();
                                    if (
                                        (y && "additive" === y.environmentBlendMode && (v = null),
                                        null === v ? d(a, s) : v && v.isColor && (d(v, 1), (m = !0)),
                                        (t.autoClear || m) && t.clear(t.autoClearColor, t.autoClearDepth, t.autoClearStencil),
                                        v && (v.isCubeTexture || v.isWebGLCubeRenderTarget || v.mapping === nt))
                                    ) {
                                        void 0 === o &&
                                            ((o = new mr(
                                                new Mr(1, 1, 1),
                                                new Lr({
                                                    type: "BackgroundCubeMaterial",
                                                    uniforms: Sr(qr.cube.uniforms),
                                                    vertexShader: qr.cube.vertexShader,
                                                    fragmentShader: qr.cube.fragmentShader,
                                                    side: u,
                                                    depthTest: !1,
                                                    depthWrite: !1,
                                                    fog: !1,
                                                })
                                            )).geometry.deleteAttribute("normal"),
                                            o.geometry.deleteAttribute("uv"),
                                            (o.onBeforeRender = function (t, e, n) {
                                                this.matrixWorld.copyPosition(n.matrixWorld);
                                            }),
                                            Object.defineProperty(o.material, "envMap", {
                                                get: function () {
                                                    return this.uniforms.envMap.value;
                                                },
                                            }),
                                            n.update(o));
                                        var x = v.isWebGLCubeRenderTarget ? v.texture : v;
                                        (o.material.uniforms.envMap.value = x),
                                            (o.material.uniforms.flipEnvMap.value = x.isCubeTexture ? -1 : 1),
                                            (c === v && h === x.version && p === t.toneMapping) || ((o.material.needsUpdate = !0), (c = v), (h = x.version), (p = t.toneMapping)),
                                            e.unshift(o, o.geometry, o.material, 0, 0, null);
                                    } else
                                        v &&
                                            v.isTexture &&
                                            (void 0 === r &&
                                                ((r = new mr(
                                                    new Vr(2, 2),
                                                    new Lr({
                                                        type: "BackgroundMaterial",
                                                        uniforms: Sr(qr.background.uniforms),
                                                        vertexShader: qr.background.vertexShader,
                                                        fragmentShader: qr.background.fragmentShader,
                                                        side: l,
                                                        depthTest: !1,
                                                        depthWrite: !1,
                                                        fog: !1,
                                                    })
                                                )).geometry.deleteAttribute("normal"),
                                                Object.defineProperty(r.material, "map", {
                                                    get: function () {
                                                        return this.uniforms.t2D.value;
                                                    },
                                                }),
                                                n.update(r)),
                                            (r.material.uniforms.t2D.value = v),
                                            !0 === v.matrixAutoUpdate && v.updateMatrix(),
                                            r.material.uniforms.uvTransform.value.copy(v.matrix),
                                            (c === v && h === v.version && p === t.toneMapping) || ((r.material.needsUpdate = !0), (c = v), (h = v.version), (p = t.toneMapping)),
                                            e.unshift(r, r.geometry, r.material, 0, 0, null));
                                },
                            };
                        })(Ee, $, at, H)),
                        (pt = new (function (t, e, n, i) {
                            var r,
                                o = i.isWebGL2;
                            (this.setMode = function (t) {
                                r = t;
                            }),
                                (this.render = function (e, i) {
                                    t.drawArrays(r, e, i), n.update(i, r);
                                }),
                                (this.renderInstances = function (i, a, s, c) {
                                    if (0 !== c) {
                                        var l, u;
                                        if (o) (l = t), (u = "drawArraysInstanced");
                                        else if (((u = "drawArraysInstancedANGLE"), null === (l = e.get("ANGLE_instanced_arrays"))))
                                            return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                                        l[u](r, a, s, c), n.update(s, r, c);
                                    }
                                });
                        })(J, Q, tt, K)),
                        (Ct = new (function (t, e, n, i) {
                            var r,
                                o,
                                a,
                                s = i.isWebGL2;
                            (this.setMode = function (t) {
                                r = t;
                            }),
                                (this.setIndex = function (t) {
                                    (o = t.type), (a = t.bytesPerElement);
                                }),
                                (this.render = function (e, i) {
                                    t.drawElements(r, i, o, e * a), n.update(i, r);
                                }),
                                (this.renderInstances = function (i, c, l, u) {
                                    if (0 !== u) {
                                        var h, p;
                                        if (s) (h = t), (p = "drawElementsInstanced");
                                        else if (((p = "drawElementsInstancedANGLE"), null === (h = e.get("ANGLE_instanced_arrays"))))
                                            return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                                        h[p](r, l, o, c * a, u), n.update(l, r, u);
                                    }
                                });
                        })(J, Q, tt, K)),
                        (tt.programs = st.programs),
                        (Ee.capabilities = K),
                        (Ee.extensions = Q),
                        (Ee.properties = et),
                        (Ee.renderLists = ct),
                        (Ee.state = $),
                        (Ee.info = tt);
                }
                ln();
                var un = new Aa(Ee, J);
                this.xr = un;
                var hn = new Ma(Ee, at, K.maxTextureSize);
                function pn(t) {
                    t.preventDefault(), console.log("THREE.WebGLRenderer: Context Lost."), (Pe = !0);
                }
                function dn() {
                    console.log("THREE.WebGLRenderer: Context Restored."), (Pe = !1), ln();
                }
                function mn(t) {
                    var e = t.target;
                    e.removeEventListener("dispose", mn),
                        (function (t) {
                            vn(t), et.remove(t);
                        })(e);
                }
                function vn(t) {
                    var e = et.get(t).program;
                    (t.program = void 0), void 0 !== e && st.releaseProgram(e);
                }
                (this.shadowMap = hn),
                    (this.getContext = function () {
                        return J;
                    }),
                    (this.getContextAttributes = function () {
                        return J.getContextAttributes();
                    }),
                    (this.forceContextLoss = function () {
                        var t = Q.get("WEBGL_lose_context");
                        t && t.loseContext();
                    }),
                    (this.forceContextRestore = function () {
                        var t = Q.get("WEBGL_lose_context");
                        t && t.restoreContext();
                    }),
                    (this.getPixelRatio = function () {
                        return He;
                    }),
                    (this.setPixelRatio = function (t) {
                        void 0 !== t && ((He = t), this.setSize(je, Ge, !1));
                    }),
                    (this.getSize = function (t) {
                        return void 0 === t && (console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument"), (t = new Ye())), t.set(je, Ge);
                    }),
                    (this.setSize = function (t, n, i) {
                        un.isPresenting
                            ? console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.")
                            : ((je = t), (Ge = n), (e.width = Math.floor(t * He)), (e.height = Math.floor(n * He)), !1 !== i && ((e.style.width = t + "px"), (e.style.height = n + "px")), this.setViewport(0, 0, t, n));
                    }),
                    (this.getDrawingBufferSize = function (t) {
                        return void 0 === t && (console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument"), (t = new Ye())), t.set(je * He, Ge * He).floor();
                    }),
                    (this.setDrawingBufferSize = function (t, n, i) {
                        (je = t), (Ge = n), (He = i), (e.width = Math.floor(t * i)), (e.height = Math.floor(n * i)), this.setViewport(0, 0, t, n);
                    }),
                    (this.getCurrentViewport = function (t) {
                        return void 0 === t && (console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument"), (t = new $e())), t.copy(ze);
                    }),
                    (this.getViewport = function (t) {
                        return t.copy(qe);
                    }),
                    (this.setViewport = function (t, e, n, i) {
                        t.isVector4 ? qe.set(t.x, t.y, t.z, t.w) : qe.set(t, e, n, i), $.viewport(ze.copy(qe).multiplyScalar(He).floor());
                    }),
                    (this.getScissor = function (t) {
                        return t.copy(Je);
                    }),
                    (this.setScissor = function (t, e, n, i) {
                        t.isVector4 ? Je.set(t.x, t.y, t.z, t.w) : Je.set(t, e, n, i), $.scissor(Fe.copy(Je).multiplyScalar(He).floor());
                    }),
                    (this.getScissorTest = function () {
                        return Qe;
                    }),
                    (this.setScissorTest = function (t) {
                        $.setScissorTest((Qe = t));
                    }),
                    (this.setOpaqueSort = function (t) {
                        Ve = t;
                    }),
                    (this.setTransparentSort = function (t) {
                        We = t;
                    }),
                    (this.getClearColor = function () {
                        return ut.getClearColor();
                    }),
                    (this.setClearColor = function () {
                        ut.setClearColor.apply(ut, arguments);
                    }),
                    (this.getClearAlpha = function () {
                        return ut.getClearAlpha();
                    }),
                    (this.setClearAlpha = function () {
                        ut.setClearAlpha.apply(ut, arguments);
                    }),
                    (this.clear = function (t, e, n) {
                        var i = 0;
                        (void 0 === t || t) && (i |= 16384), (void 0 === e || e) && (i |= 256), (void 0 === n || n) && (i |= 1024), J.clear(i);
                    }),
                    (this.clearColor = function () {
                        this.clear(!0, !1, !1);
                    }),
                    (this.clearDepth = function () {
                        this.clear(!1, !0, !1);
                    }),
                    (this.clearStencil = function () {
                        this.clear(!1, !1, !0);
                    }),
                    (this.dispose = function () {
                        e.removeEventListener("webglcontextlost", pn, !1), e.removeEventListener("webglcontextrestored", dn, !1), ct.dispose(), lt.dispose(), et.dispose(), at.dispose(), un.dispose(), xn.stop(), this.forceContextLoss();
                    }),
                    (this.renderBufferImmediate = function (t, e) {
                        $.initAttributes();
                        var n = et.get(t);
                        t.hasPositions && !n.position && (n.position = J.createBuffer()),
                            t.hasNormals && !n.normal && (n.normal = J.createBuffer()),
                            t.hasUvs && !n.uv && (n.uv = J.createBuffer()),
                            t.hasColors && !n.color && (n.color = J.createBuffer());
                        var i = e.getAttributes();
                        t.hasPositions && (J.bindBuffer(34962, n.position), J.bufferData(34962, t.positionArray, 35048), $.enableAttribute(i.position), J.vertexAttribPointer(i.position, 3, 5126, !1, 0, 0)),
                            t.hasNormals && (J.bindBuffer(34962, n.normal), J.bufferData(34962, t.normalArray, 35048), $.enableAttribute(i.normal), J.vertexAttribPointer(i.normal, 3, 5126, !1, 0, 0)),
                            t.hasUvs && (J.bindBuffer(34962, n.uv), J.bufferData(34962, t.uvArray, 35048), $.enableAttribute(i.uv), J.vertexAttribPointer(i.uv, 2, 5126, !1, 0, 0)),
                            t.hasColors && (J.bindBuffer(34962, n.color), J.bufferData(34962, t.colorArray, 35048), $.enableAttribute(i.color), J.vertexAttribPointer(i.color, 3, 5126, !1, 0, 0)),
                            $.disableUnusedAttributes(),
                            J.drawArrays(4, 0, t.count),
                            (t.count = 0);
                    });
                var gn = new Dn();
                (this.renderBufferDirect = function (t, e, n, i, r, o) {
                    null === e && (e = gn);
                    var a = r.isMesh && r.matrixWorld.determinant() < 0,
                        s = Mn(t, e, i, r);
                    $.setMaterial(i, a);
                    var c = !1;
                    (Ne.geometry === n.id && Ne.program === s.id && Ne.wireframe === (!0 === i.wireframe)) || ((Ne.geometry = n.id), (Ne.program = s.id), (Ne.wireframe = !0 === i.wireframe), (c = !0)),
                        (i.morphTargets || i.morphNormals) && (ht.update(r, n, i, s), (c = !0));
                    var l = n.index,
                        u = n.attributes.position;
                    if (null === l) {
                        if (void 0 === u || 0 === u.count) return;
                    } else if (0 === l.count) return;
                    var h,
                        p = 1;
                    !0 === i.wireframe && ((l = ot.getWireframeAttribute(n)), (p = 2));
                    var d = pt;
                    null !== l && ((h = rt.get(l)), (d = Ct).setIndex(h)),
                        c &&
                            (!(function (t, e, n, i) {
                                if (!1 === K.isWebGL2 && (t.isInstancedMesh || e.isInstancedBufferGeometry) && null === Q.get("ANGLE_instanced_arrays")) return;
                                $.initAttributes();
                                var r = e.attributes,
                                    o = i.getAttributes(),
                                    a = n.defaultAttributeValues;
                                for (var s in o) {
                                    var c = o[s];
                                    if (c >= 0) {
                                        var l = r[s];
                                        if (void 0 !== l) {
                                            var u = l.normalized,
                                                h = l.itemSize,
                                                p = rt.get(l);
                                            if (void 0 === p) continue;
                                            var d = p.buffer,
                                                f = p.type,
                                                m = p.bytesPerElement;
                                            if (l.isInterleavedBufferAttribute) {
                                                var v = l.data,
                                                    g = v.stride,
                                                    y = l.offset;
                                                v && v.isInstancedInterleavedBuffer
                                                    ? ($.enableAttributeAndDivisor(c, v.meshPerAttribute), void 0 === e.maxInstancedCount && (e.maxInstancedCount = v.meshPerAttribute * v.count))
                                                    : $.enableAttribute(c),
                                                    J.bindBuffer(34962, d),
                                                    J.vertexAttribPointer(c, h, f, u, g * m, y * m);
                                            } else
                                                l.isInstancedBufferAttribute
                                                    ? ($.enableAttributeAndDivisor(c, l.meshPerAttribute), void 0 === e.maxInstancedCount && (e.maxInstancedCount = l.meshPerAttribute * l.count))
                                                    : $.enableAttribute(c),
                                                    J.bindBuffer(34962, d),
                                                    J.vertexAttribPointer(c, h, f, u, 0, 0);
                                        } else if ("instanceMatrix" === s) {
                                            var p = rt.get(t.instanceMatrix);
                                            if (void 0 === p) continue;
                                            var d = p.buffer,
                                                f = p.type;
                                            $.enableAttributeAndDivisor(c + 0, 1),
                                                $.enableAttributeAndDivisor(c + 1, 1),
                                                $.enableAttributeAndDivisor(c + 2, 1),
                                                $.enableAttributeAndDivisor(c + 3, 1),
                                                J.bindBuffer(34962, d),
                                                J.vertexAttribPointer(c + 0, 4, f, !1, 64, 0),
                                                J.vertexAttribPointer(c + 1, 4, f, !1, 64, 16),
                                                J.vertexAttribPointer(c + 2, 4, f, !1, 64, 32),
                                                J.vertexAttribPointer(c + 3, 4, f, !1, 64, 48);
                                        } else if (void 0 !== a) {
                                            var x = a[s];
                                            if (void 0 !== x)
                                                switch (x.length) {
                                                    case 2:
                                                        J.vertexAttrib2fv(c, x);
                                                        break;
                                                    case 3:
                                                        J.vertexAttrib3fv(c, x);
                                                        break;
                                                    case 4:
                                                        J.vertexAttrib4fv(c, x);
                                                        break;
                                                    default:
                                                        J.vertexAttrib1fv(c, x);
                                                }
                                        }
                                    }
                                }
                                $.disableUnusedAttributes();
                            })(r, n, i, s),
                            null !== l && J.bindBuffer(34963, h.buffer));
                    var f = null !== l ? l.count : u.count,
                        m = n.drawRange.start * p,
                        v = n.drawRange.count * p,
                        g = null !== o ? o.start * p : 0,
                        y = null !== o ? o.count * p : 1 / 0,
                        x = Math.max(m, g),
                        _ = Math.min(f, m + v, g + y) - 1,
                        b = Math.max(0, _ - x + 1);
                    if (0 !== b) {
                        if (r.isMesh) !0 === i.wireframe ? ($.setLineWidth(i.wireframeLinewidth * sn()), d.setMode(1)) : d.setMode(4);
                        else if (r.isLine) {
                            var w = i.linewidth;
                            void 0 === w && (w = 1), $.setLineWidth(w * sn()), r.isLineSegments ? d.setMode(1) : r.isLineLoop ? d.setMode(2) : d.setMode(3);
                        } else r.isPoints ? d.setMode(0) : r.isSprite && d.setMode(4);
                        r.isInstancedMesh ? d.renderInstances(n, x, b, r.count) : n.isInstancedBufferGeometry ? d.renderInstances(n, x, b, n.maxInstancedCount) : d.render(x, b);
                    }
                }),
                    (this.compile = function (t, e) {
                        (Z = lt.get(t, e)).init(),
                            t.traverse(function (t) {
                                t.isLight && (Z.pushLight(t), t.castShadow && Z.pushShadow(t));
                            }),
                            Z.setupLights(e);
                        var n = {};
                        t.traverse(function (e) {
                            if (e.material)
                                if (Array.isArray(e.material)) for (var i = 0; i < e.material.length; i++) e.material[i].uuid in n == !1 && (wn(e.material[i], t, e), (n[e.material[i].uuid] = !0));
                                else e.material.uuid in n == !1 && (wn(e.material, t, e), (n[e.material.uuid] = !0));
                        });
                    });
                var yn = null;
                var xn = new jr();
                function _n(t, e, n, i) {
                    for (var r = 0, o = t.length; r < o; r++) {
                        var a = t[r],
                            s = a.object,
                            c = a.geometry,
                            l = void 0 === i ? a.material : i,
                            u = a.group;
                        if (n.isArrayCamera) {
                            Be = n;
                            for (var h = n.cameras, p = 0, d = h.length; p < d; p++) {
                                var f = h[p];
                                s.layers.test(f.layers) && ($.viewport(ze.copy(f.viewport)), Z.setupLights(f), bn(s, e, f, c, l, u));
                            }
                        } else (Be = null), bn(s, e, n, c, l, u);
                    }
                }
                function bn(t, e, n, i, r, o) {
                    if (
                        (t.onBeforeRender(Ee, e, n, i, r, o), (Z = lt.get(e, Be || n)), t.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse, t.matrixWorld), t.normalMatrix.getNormalMatrix(t.modelViewMatrix), t.isImmediateRenderObject)
                    ) {
                        var a = Mn(n, e, r, t);
                        $.setMaterial(r),
                            (Ne.geometry = null),
                            (Ne.program = null),
                            (Ne.wireframe = !1),
                            (function (t, e) {
                                t.render(function (t) {
                                    Ee.renderBufferImmediate(t, e);
                                });
                            })(t, a);
                    } else Ee.renderBufferDirect(n, e, i, r, t, o);
                    t.onAfterRender(Ee, e, n, i, r, o), (Z = lt.get(e, Be || n));
                }
                function wn(t, e, n) {
                    var i = et.get(t),
                        r = Z.state.lights,
                        o = Z.state.shadowsArray,
                        a = r.state.version,
                        s = st.getParameters(t, r.state, o, e, tn.numPlanes, tn.numIntersection, n),
                        c = st.getProgramCacheKey(s),
                        l = i.program,
                        u = !0;
                    if (void 0 === l) t.addEventListener("dispose", mn);
                    else if (l.cacheKey !== c) vn(t);
                    else if (i.lightsStateVersion !== a) (i.lightsStateVersion = a), (u = !1);
                    else {
                        if (void 0 !== s.shaderID) return;
                        u = !1;
                    }
                    u && ((l = st.acquireProgram(s, c)), (i.program = l), (i.uniforms = s.uniforms), (i.environment = t.isMeshStandardMaterial ? e.environment : null), (i.outputEncoding = Ee.outputEncoding), (t.program = l));
                    var h = l.getAttributes();
                    if (t.morphTargets) {
                        t.numSupportedMorphTargets = 0;
                        for (var p = 0; p < Ee.maxMorphTargets; p++) h["morphTarget" + p] >= 0 && t.numSupportedMorphTargets++;
                    }
                    if (t.morphNormals) {
                        t.numSupportedMorphNormals = 0;
                        for (p = 0; p < Ee.maxMorphNormals; p++) h["morphNormal" + p] >= 0 && t.numSupportedMorphNormals++;
                    }
                    var d = i.uniforms;
                    ((t.isShaderMaterial || t.isRawShaderMaterial) && !0 !== t.clipping) || ((i.numClippingPlanes = tn.numPlanes), (i.numIntersection = tn.numIntersection), (d.clippingPlanes = tn.uniform)),
                        (i.fog = e.fog),
                        (i.needsLights = (function (t) {
                            return t.isMeshLambertMaterial || t.isMeshToonMaterial || t.isMeshPhongMaterial || t.isMeshStandardMaterial || t.isShadowMaterial || (t.isShaderMaterial && !0 === t.lights);
                        })(t)),
                        (i.lightsStateVersion = a),
                        i.needsLights &&
                            ((d.ambientLightColor.value = r.state.ambient),
                            (d.lightProbe.value = r.state.probe),
                            (d.directionalLights.value = r.state.directional),
                            (d.directionalLightShadows.value = r.state.directionalShadow),
                            (d.spotLights.value = r.state.spot),
                            (d.spotLightShadows.value = r.state.spotShadow),
                            (d.rectAreaLights.value = r.state.rectArea),
                            (d.pointLights.value = r.state.point),
                            (d.pointLightShadows.value = r.state.pointShadow),
                            (d.hemisphereLights.value = r.state.hemi),
                            (d.directionalShadowMap.value = r.state.directionalShadowMap),
                            (d.directionalShadowMatrix.value = r.state.directionalShadowMatrix),
                            (d.spotShadowMap.value = r.state.spotShadowMap),
                            (d.spotShadowMatrix.value = r.state.spotShadowMatrix),
                            (d.pointShadowMap.value = r.state.pointShadowMap),
                            (d.pointShadowMatrix.value = r.state.pointShadowMatrix));
                    var f = i.program.getUniforms(),
                        m = qo.seqWithValue(f.seq, d);
                    i.uniformsList = m;
                }
                function Mn(t, e, n, i) {
                    it.resetTextureUnits();
                    var r = e.fog,
                        o = n.isMeshStandardMaterial ? e.environment : null,
                        a = et.get(n),
                        s = Z.state.lights;
                    if (en && (nn || t !== ke)) {
                        var c = t === ke && n.id === Ie;
                        tn.setState(n.clippingPlanes, n.clipIntersection, n.clipShadows, t, a, c);
                    }
                    n.version === a.__version
                        ? void 0 === a.program
                            ? wn(n, e, i)
                            : n.fog && a.fog !== r
                            ? wn(n, e, i)
                            : a.environment !== o
                            ? wn(n, e, i)
                            : a.needsLights && a.lightsStateVersion !== s.state.version
                            ? wn(n, e, i)
                            : void 0 === a.numClippingPlanes || (a.numClippingPlanes === tn.numPlanes && a.numIntersection === tn.numIntersection)
                            ? a.outputEncoding !== Ee.outputEncoding && wn(n, e, i)
                            : wn(n, e, i)
                        : (wn(n, e, i), (a.__version = n.version));
                    var l,
                        h,
                        p = !1,
                        d = !1,
                        f = !1,
                        m = a.program,
                        v = m.getUniforms(),
                        g = a.uniforms;
                    if (($.useProgram(m.program) && ((p = !0), (d = !0), (f = !0)), n.id !== Ie && ((Ie = n.id), (d = !0)), p || ke !== t)) {
                        if (
                            (v.setValue(J, "projectionMatrix", t.projectionMatrix),
                            K.logarithmicDepthBuffer && v.setValue(J, "logDepthBufFC", 2 / (Math.log(t.far + 1) / Math.LN2)),
                            ke !== t && ((ke = t), (d = !0), (f = !0)),
                            n.isShaderMaterial || n.isMeshPhongMaterial || n.isMeshToonMaterial || n.isMeshStandardMaterial || n.envMap)
                        ) {
                            var y = v.map.cameraPosition;
                            void 0 !== y && y.setValue(J, on.setFromMatrixPosition(t.matrixWorld));
                        }
                        (n.isMeshPhongMaterial || n.isMeshToonMaterial || n.isMeshLambertMaterial || n.isMeshBasicMaterial || n.isMeshStandardMaterial || n.isShaderMaterial) && v.setValue(J, "isOrthographic", !0 === t.isOrthographicCamera),
                            (n.isMeshPhongMaterial || n.isMeshToonMaterial || n.isMeshLambertMaterial || n.isMeshBasicMaterial || n.isMeshStandardMaterial || n.isShaderMaterial || n.skinning) &&
                                v.setValue(J, "viewMatrix", t.matrixWorldInverse);
                    }
                    if (n.skinning) {
                        v.setOptional(J, i, "bindMatrix"), v.setOptional(J, i, "bindMatrixInverse");
                        var x = i.skeleton;
                        if (x) {
                            var _ = x.bones;
                            if (K.floatVertexTextures) {
                                if (void 0 === x.boneTexture) {
                                    var b = Math.sqrt(4 * _.length);
                                    (b = Xe.ceilPowerOfTwo(b)), (b = Math.max(b, 4));
                                    var w = new Float32Array(b * b * 4);
                                    w.set(x.boneMatrices);
                                    var M = new kr(w, b, b, At, xt);
                                    (x.boneMatrices = w), (x.boneTexture = M), (x.boneTextureSize = b);
                                }
                                v.setValue(J, "boneTexture", x.boneTexture, it), v.setValue(J, "boneTextureSize", x.boneTextureSize);
                            } else v.setOptional(J, x, "boneMatrices");
                        }
                    }
                    return (
                        (d || a.receiveShadow !== i.receiveShadow) && ((a.receiveShadow = i.receiveShadow), v.setValue(J, "receiveShadow", i.receiveShadow)),
                        d &&
                            (v.setValue(J, "toneMappingExposure", Ee.toneMappingExposure),
                            v.setValue(J, "toneMappingWhitePoint", Ee.toneMappingWhitePoint),
                            a.needsLights &&
                                ((h = f),
                                ((l = g).ambientLightColor.needsUpdate = h),
                                (l.lightProbe.needsUpdate = h),
                                (l.directionalLights.needsUpdate = h),
                                (l.directionalLightShadows.needsUpdate = h),
                                (l.pointLights.needsUpdate = h),
                                (l.pointLightShadows.needsUpdate = h),
                                (l.spotLights.needsUpdate = h),
                                (l.spotLightShadows.needsUpdate = h),
                                (l.rectAreaLights.needsUpdate = h),
                                (l.hemisphereLights.needsUpdate = h)),
                            r &&
                                n.fog &&
                                (function (t, e) {
                                    t.fogColor.value.copy(e.color), e.isFog ? ((t.fogNear.value = e.near), (t.fogFar.value = e.far)) : e.isFogExp2 && (t.fogDensity.value = e.density);
                                })(g, r),
                            n.isMeshBasicMaterial
                                ? Sn(g, n)
                                : n.isMeshLambertMaterial
                                ? (Sn(g, n),
                                  (function (t, e) {
                                      e.emissiveMap && (t.emissiveMap.value = e.emissiveMap);
                                  })(g, n))
                                : n.isMeshToonMaterial
                                ? (Sn(g, n),
                                  (function (t, e) {
                                      t.specular.value.copy(e.specular), (t.shininess.value = Math.max(e.shininess, 1e-4)), e.gradientMap && (t.gradientMap.value = e.gradientMap);
                                      e.emissiveMap && (t.emissiveMap.value = e.emissiveMap);
                                      e.bumpMap && ((t.bumpMap.value = e.bumpMap), (t.bumpScale.value = e.bumpScale), e.side === u && (t.bumpScale.value *= -1));
                                      e.normalMap && ((t.normalMap.value = e.normalMap), t.normalScale.value.copy(e.normalScale), e.side === u && t.normalScale.value.negate());
                                      e.displacementMap && ((t.displacementMap.value = e.displacementMap), (t.displacementScale.value = e.displacementScale), (t.displacementBias.value = e.displacementBias));
                                  })(g, n))
                                : n.isMeshPhongMaterial
                                ? (Sn(g, n),
                                  (function (t, e) {
                                      t.specular.value.copy(e.specular), (t.shininess.value = Math.max(e.shininess, 1e-4)), e.emissiveMap && (t.emissiveMap.value = e.emissiveMap);
                                      e.bumpMap && ((t.bumpMap.value = e.bumpMap), (t.bumpScale.value = e.bumpScale), e.side === u && (t.bumpScale.value *= -1));
                                      e.normalMap && ((t.normalMap.value = e.normalMap), t.normalScale.value.copy(e.normalScale), e.side === u && t.normalScale.value.negate());
                                      e.displacementMap && ((t.displacementMap.value = e.displacementMap), (t.displacementScale.value = e.displacementScale), (t.displacementBias.value = e.displacementBias));
                                  })(g, n))
                                : n.isMeshStandardMaterial
                                ? (Sn(g, n, o),
                                  n.isMeshPhysicalMaterial
                                      ? (function (t, e, n) {
                                            Tn(t, e, n), (t.reflectivity.value = e.reflectivity), (t.clearcoat.value = e.clearcoat), (t.clearcoatRoughness.value = e.clearcoatRoughness), e.sheen && t.sheen.value.copy(e.sheen);
                                            e.clearcoatMap && (t.clearcoatMap.value = e.clearcoatMap);
                                            e.clearcoatRoughnessMap && (t.clearcoatRoughnessMap.value = e.clearcoatRoughnessMap);
                                            e.clearcoatNormalMap && (t.clearcoatNormalScale.value.copy(e.clearcoatNormalScale), (t.clearcoatNormalMap.value = e.clearcoatNormalMap), e.side === u && t.clearcoatNormalScale.value.negate());
                                            t.transparency.value = e.transparency;
                                        })(g, n, o)
                                      : Tn(g, n, o))
                                : n.isMeshMatcapMaterial
                                ? (Sn(g, n),
                                  (function (t, e) {
                                      e.matcap && (t.matcap.value = e.matcap);
                                      e.bumpMap && ((t.bumpMap.value = e.bumpMap), (t.bumpScale.value = e.bumpScale), e.side === u && (t.bumpScale.value *= -1));
                                      e.normalMap && ((t.normalMap.value = e.normalMap), t.normalScale.value.copy(e.normalScale), e.side === u && t.normalScale.value.negate());
                                      e.displacementMap && ((t.displacementMap.value = e.displacementMap), (t.displacementScale.value = e.displacementScale), (t.displacementBias.value = e.displacementBias));
                                  })(g, n))
                                : n.isMeshDepthMaterial
                                ? (Sn(g, n),
                                  (function (t, e) {
                                      e.displacementMap && ((t.displacementMap.value = e.displacementMap), (t.displacementScale.value = e.displacementScale), (t.displacementBias.value = e.displacementBias));
                                  })(g, n))
                                : n.isMeshDistanceMaterial
                                ? (Sn(g, n),
                                  (function (t, e) {
                                      e.displacementMap && ((t.displacementMap.value = e.displacementMap), (t.displacementScale.value = e.displacementScale), (t.displacementBias.value = e.displacementBias));
                                      t.referencePosition.value.copy(e.referencePosition), (t.nearDistance.value = e.nearDistance), (t.farDistance.value = e.farDistance);
                                  })(g, n))
                                : n.isMeshNormalMaterial
                                ? (Sn(g, n),
                                  (function (t, e) {
                                      e.bumpMap && ((t.bumpMap.value = e.bumpMap), (t.bumpScale.value = e.bumpScale), e.side === u && (t.bumpScale.value *= -1));
                                      e.normalMap && ((t.normalMap.value = e.normalMap), t.normalScale.value.copy(e.normalScale), e.side === u && t.normalScale.value.negate());
                                      e.displacementMap && ((t.displacementMap.value = e.displacementMap), (t.displacementScale.value = e.displacementScale), (t.displacementBias.value = e.displacementBias));
                                  })(g, n))
                                : n.isLineBasicMaterial
                                ? ((function (t, e) {
                                      t.diffuse.value.copy(e.color), (t.opacity.value = e.opacity);
                                  })(g, n),
                                  n.isLineDashedMaterial &&
                                      (function (t, e) {
                                          (t.dashSize.value = e.dashSize), (t.totalSize.value = e.dashSize + e.gapSize), (t.scale.value = e.scale);
                                      })(g, n))
                                : n.isPointsMaterial
                                ? (function (t, e) {
                                      t.diffuse.value.copy(e.color), (t.opacity.value = e.opacity), (t.size.value = e.size * He), (t.scale.value = 0.5 * Ge), e.map && (t.map.value = e.map);
                                      e.alphaMap && (t.alphaMap.value = e.alphaMap);
                                      var n;
                                      e.map ? (n = e.map) : e.alphaMap && (n = e.alphaMap);
                                      void 0 !== n && (!0 === n.matrixAutoUpdate && n.updateMatrix(), t.uvTransform.value.copy(n.matrix));
                                  })(g, n)
                                : n.isSpriteMaterial
                                ? (function (t, e) {
                                      t.diffuse.value.copy(e.color), (t.opacity.value = e.opacity), (t.rotation.value = e.rotation), e.map && (t.map.value = e.map);
                                      e.alphaMap && (t.alphaMap.value = e.alphaMap);
                                      var n;
                                      e.map ? (n = e.map) : e.alphaMap && (n = e.alphaMap);
                                      void 0 !== n && (!0 === n.matrixAutoUpdate && n.updateMatrix(), t.uvTransform.value.copy(n.matrix));
                                  })(g, n)
                                : n.isShadowMaterial && (g.color.value.copy(n.color), (g.opacity.value = n.opacity)),
                            void 0 !== g.ltc_1 && (g.ltc_1.value = Ur.LTC_1),
                            void 0 !== g.ltc_2 && (g.ltc_2.value = Ur.LTC_2),
                            qo.upload(J, a.uniformsList, g, it),
                            n.isShaderMaterial && (n.uniformsNeedUpdate = !1)),
                        n.isShaderMaterial && !0 === n.uniformsNeedUpdate && (qo.upload(J, a.uniformsList, g, it), (n.uniformsNeedUpdate = !1)),
                        n.isSpriteMaterial && v.setValue(J, "center", i.center),
                        v.setValue(J, "modelViewMatrix", i.modelViewMatrix),
                        v.setValue(J, "normalMatrix", i.normalMatrix),
                        v.setValue(J, "modelMatrix", i.matrixWorld),
                        m
                    );
                }
                function Sn(t, e, n) {
                    (t.opacity.value = e.opacity),
                        e.color && t.diffuse.value.copy(e.color),
                        e.emissive && t.emissive.value.copy(e.emissive).multiplyScalar(e.emissiveIntensity),
                        e.map && (t.map.value = e.map),
                        e.alphaMap && (t.alphaMap.value = e.alphaMap),
                        e.specularMap && (t.specularMap.value = e.specularMap);
                    var i,
                        r,
                        o = e.envMap || n;
                    o && ((t.envMap.value = o), (t.flipEnvMap.value = o.isCubeTexture ? -1 : 1), (t.reflectivity.value = e.reflectivity), (t.refractionRatio.value = e.refractionRatio), (t.maxMipLevel.value = et.get(o).__maxMipLevel)),
                        e.lightMap && ((t.lightMap.value = e.lightMap), (t.lightMapIntensity.value = e.lightMapIntensity)),
                        e.aoMap && ((t.aoMap.value = e.aoMap), (t.aoMapIntensity.value = e.aoMapIntensity)),
                        e.map
                            ? (i = e.map)
                            : e.specularMap
                            ? (i = e.specularMap)
                            : e.displacementMap
                            ? (i = e.displacementMap)
                            : e.normalMap
                            ? (i = e.normalMap)
                            : e.bumpMap
                            ? (i = e.bumpMap)
                            : e.roughnessMap
                            ? (i = e.roughnessMap)
                            : e.metalnessMap
                            ? (i = e.metalnessMap)
                            : e.alphaMap
                            ? (i = e.alphaMap)
                            : e.emissiveMap && (i = e.emissiveMap),
                        void 0 !== i && (i.isWebGLRenderTarget && (i = i.texture), !0 === i.matrixAutoUpdate && i.updateMatrix(), t.uvTransform.value.copy(i.matrix)),
                        e.aoMap ? (r = e.aoMap) : e.lightMap && (r = e.lightMap),
                        void 0 !== r && (r.isWebGLRenderTarget && (r = r.texture), !0 === r.matrixAutoUpdate && r.updateMatrix(), t.uv2Transform.value.copy(r.matrix));
                }
                function Tn(t, e, n) {
                    (t.roughness.value = e.roughness),
                        (t.metalness.value = e.metalness),
                        e.roughnessMap && (t.roughnessMap.value = e.roughnessMap),
                        e.metalnessMap && (t.metalnessMap.value = e.metalnessMap),
                        e.emissiveMap && (t.emissiveMap.value = e.emissiveMap),
                        e.bumpMap && ((t.bumpMap.value = e.bumpMap), (t.bumpScale.value = e.bumpScale), e.side === u && (t.bumpScale.value *= -1)),
                        e.normalMap && ((t.normalMap.value = e.normalMap), t.normalScale.value.copy(e.normalScale), e.side === u && t.normalScale.value.negate()),
                        e.displacementMap && ((t.displacementMap.value = e.displacementMap), (t.displacementScale.value = e.displacementScale), (t.displacementBias.value = e.displacementBias)),
                        (e.envMap || n) && (t.envMapIntensity.value = e.envMapIntensity);
                }
                xn.setAnimationLoop(function (t) {
                    un.isPresenting || (yn && yn(t));
                }),
                    "undefined" != typeof window && xn.setContext(window),
                    (this.setAnimationLoop = function (t) {
                        (yn = t), un.setAnimationLoop(t), xn.start();
                    }),
                    (this.render = function (t, e) {
                        var n, i;
                        if (
                            (void 0 !== arguments[2] && (console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead."), (n = arguments[2])),
                            void 0 !== arguments[3] && (console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead."), (i = arguments[3])),
                            e && e.isCamera)
                        ) {
                            if (!Pe) {
                                (Ne.geometry = null),
                                    (Ne.program = null),
                                    (Ne.wireframe = !1),
                                    (Ie = -1),
                                    (ke = null),
                                    !0 === t.autoUpdate && t.updateMatrixWorld(),
                                    null === e.parent && e.updateMatrixWorld(),
                                    un.enabled && un.isPresenting && (e = un.getCamera(e)),
                                    (Z = lt.get(t, e)).init(),
                                    t.onBeforeRender(Ee, t, e, n || Oe),
                                    rn.multiplyMatrices(e.projectionMatrix, e.matrixWorldInverse),
                                    Ke.setFromProjectionMatrix(rn),
                                    (nn = this.localClippingEnabled),
                                    (en = tn.init(this.clippingPlanes, nn, e)),
                                    (Y = ct.get(t, e)).init(),
                                    (function t(e, n, i, r) {
                                        if (!1 === e.visible) return;
                                        var o = e.layers.test(n.layers);
                                        if (o)
                                            if (e.isGroup) i = e.renderOrder;
                                            else if (e.isLOD) !0 === e.autoUpdate && e.update(n);
                                            else if (e.isLight) Z.pushLight(e), e.castShadow && Z.pushShadow(e);
                                            else if (e.isSprite) {
                                                if (!e.frustumCulled || Ke.intersectsSprite(e)) {
                                                    r && on.setFromMatrixPosition(e.matrixWorld).applyMatrix4(rn);
                                                    var a = at.update(e),
                                                        s = e.material;
                                                    s.visible && Y.push(e, a, s, i, on.z, null);
                                                }
                                            } else if (e.isImmediateRenderObject) r && on.setFromMatrixPosition(e.matrixWorld).applyMatrix4(rn), Y.push(e, null, e.material, i, on.z, null);
                                            else if (
                                                (e.isMesh || e.isLine || e.isPoints) &&
                                                (e.isSkinnedMesh && e.skeleton.frame !== tt.render.frame && (e.skeleton.update(), (e.skeleton.frame = tt.render.frame)), !e.frustumCulled || Ke.intersectsObject(e))
                                            ) {
                                                r && on.setFromMatrixPosition(e.matrixWorld).applyMatrix4(rn);
                                                var a = at.update(e),
                                                    s = e.material;
                                                if (Array.isArray(s))
                                                    for (var c = a.groups, l = 0, u = c.length; l < u; l++) {
                                                        var h = c[l],
                                                            p = s[h.materialIndex];
                                                        p && p.visible && Y.push(e, a, p, i, on.z, h);
                                                    }
                                                else s.visible && Y.push(e, a, s, i, on.z, null);
                                            }
                                        var d = e.children;
                                        for (var l = 0, u = d.length; l < u; l++) t(d[l], n, i, r);
                                    })(t, e, 0, Ee.sortObjects),
                                    Y.finish(),
                                    !0 === Ee.sortObjects && Y.sort(Ve, We),
                                    en && tn.beginShadows();
                                var r = Z.state.shadowsArray;
                                hn.render(r, t, e), Z.setupLights(e), en && tn.endShadows(), this.info.autoReset && this.info.reset(), void 0 !== n && this.setRenderTarget(n), ut.render(Y, t, e, i);
                                var o = Y.opaque,
                                    a = Y.transparent;
                                if (t.overrideMaterial) {
                                    var s = t.overrideMaterial;
                                    o.length && _n(o, t, e, s), a.length && _n(a, t, e, s);
                                } else o.length && _n(o, t, e), a.length && _n(a, t, e);
                                t.onAfterRender(Ee, t, e),
                                    null !== Oe && (it.updateRenderTargetMipmap(Oe), it.updateMultisampleRenderTarget(Oe)),
                                    $.buffers.depth.setTest(!0),
                                    $.buffers.depth.setMask(!0),
                                    $.buffers.color.setMask(!0),
                                    $.setPolygonOffset(!1),
                                    (Y = null),
                                    (Z = null);
                            }
                        } else console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
                    }),
                    (this.setFramebuffer = function (t) {
                        Le !== t && null === Oe && J.bindFramebuffer(36160, t), (Le = t);
                    }),
                    (this.getActiveCubeFace = function () {
                        return Ce;
                    }),
                    (this.getActiveMipmapLevel = function () {
                        return Re;
                    }),
                    (this.getRenderTarget = function () {
                        return Oe;
                    }),
                    (this.setRenderTarget = function (t, e, n) {
                        (Oe = t), (Ce = e), (Re = n), t && void 0 === et.get(t).__webglFramebuffer && it.setupRenderTarget(t);
                        var i = Le,
                            r = !1;
                        if (t) {
                            var o = et.get(t).__webglFramebuffer;
                            t.isWebGLCubeRenderTarget ? ((i = o[e || 0]), (r = !0)) : (i = t.isWebGLMultisampleRenderTarget ? et.get(t).__webglMultisampledFramebuffer : o), ze.copy(t.viewport), Fe.copy(t.scissor), (Ue = t.scissorTest);
                        } else ze.copy(qe).multiplyScalar(He).floor(), Fe.copy(Je).multiplyScalar(He).floor(), (Ue = Qe);
                        if ((De !== i && (J.bindFramebuffer(36160, i), (De = i)), $.viewport(ze), $.scissor(Fe), $.setScissorTest(Ue), r)) {
                            var a = et.get(t.texture);
                            J.framebufferTexture2D(36160, 36064, 34069 + (e || 0), a.__webglTexture, n || 0);
                        }
                    }),
                    (this.readRenderTargetPixels = function (t, e, n, i, r, o, a) {
                        if (t && t.isWebGLRenderTarget) {
                            var s = et.get(t).__webglFramebuffer;
                            if ((t.isWebGLCubeRenderTarget && void 0 !== a && (s = s[a]), s)) {
                                var c = !1;
                                s !== De && (J.bindFramebuffer(36160, s), (c = !0));
                                try {
                                    var l = t.texture,
                                        u = l.format,
                                        h = l.type;
                                    if (u !== At && Te.convert(u) !== J.getParameter(35739)) return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
                                    if (
                                        !(
                                            h === dt ||
                                            Te.convert(h) === J.getParameter(35738) ||
                                            (h === xt && (K.isWebGL2 || Q.get("OES_texture_float") || Q.get("WEBGL_color_buffer_float"))) ||
                                            (h === _t && (K.isWebGL2 ? Q.get("EXT_color_buffer_float") : Q.get("EXT_color_buffer_half_float")))
                                        )
                                    )
                                        return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
                                    36053 === J.checkFramebufferStatus(36160)
                                        ? e >= 0 && e <= t.width - i && n >= 0 && n <= t.height - r && J.readPixels(e, n, i, r, Te.convert(u), Te.convert(h), o)
                                        : console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.");
                                } finally {
                                    c && J.bindFramebuffer(36160, De);
                                }
                            }
                        } else console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
                    }),
                    (this.copyFramebufferToTexture = function (t, e, n) {
                        void 0 === n && (n = 0);
                        var i = Math.pow(2, -n),
                            r = Math.floor(e.image.width * i),
                            o = Math.floor(e.image.height * i),
                            a = Te.convert(e.format);
                        it.setTexture2D(e, 0), J.copyTexImage2D(3553, n, a, t.x, t.y, r, o, 0), $.unbindTexture();
                    }),
                    (this.copyTextureToTexture = function (t, e, n, i) {
                        var r = e.image.width,
                            o = e.image.height,
                            a = Te.convert(n.format),
                            s = Te.convert(n.type);
                        it.setTexture2D(n, 0), e.isDataTexture ? J.texSubImage2D(3553, i || 0, t.x, t.y, r, o, a, s, e.image.data) : J.texSubImage2D(3553, i || 0, t.x, t.y, a, s, e.image), $.unbindTexture();
                    }),
                    (this.initTexture = function (t) {
                        it.setTexture2D(t, 0), $.unbindTexture();
                    }),
                    "undefined" != typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
            }
            function La(t, e) {
                (this.name = ""), (this.color = new Mi(t)), (this.density = void 0 !== e ? e : 25e-5);
            }
            function Ca(t, e, n) {
                (this.name = ""), (this.color = new Mi(t)), (this.near = void 0 !== e ? e : 1), (this.far = void 0 !== n ? n : 1e3);
            }
            function Ra(t, e) {
                (this.array = t), (this.stride = e), (this.count = void 0 !== t ? t.length / e : 0), (this.usage = je), (this.updateRange = { offset: 0, count: -1 }), (this.version = 0);
            }
            (Ta.prototype = Object.assign(Object.create(Rr.prototype), { constructor: Ta, isArrayCamera: !0 })),
                (Ea.prototype = Object.assign(Object.create(On.prototype), { constructor: Ea, isGroup: !0 })),
                Object.assign(Aa.prototype, He.prototype),
                Object.assign(La.prototype, {
                    isFogExp2: !0,
                    clone: function () {
                        return new La(this.color, this.density);
                    },
                    toJSON: function () {
                        return { type: "FogExp2", color: this.color.getHex(), density: this.density };
                    },
                }),
                Object.assign(Ca.prototype, {
                    isFog: !0,
                    clone: function () {
                        return new Ca(this.color, this.near, this.far);
                    },
                    toJSON: function () {
                        return { type: "Fog", color: this.color.getHex(), near: this.near, far: this.far };
                    },
                }),
                Object.defineProperty(Ra.prototype, "needsUpdate", {
                    set: function (t) {
                        !0 === t && this.version++;
                    },
                }),
                Object.assign(Ra.prototype, {
                    isInterleavedBuffer: !0,
                    onUploadCallback: function () {},
                    setUsage: function (t) {
                        return (this.usage = t), this;
                    },
                    copy: function (t) {
                        return (this.array = new t.array.constructor(t.array)), (this.count = t.count), (this.stride = t.stride), (this.usage = t.usage), this;
                    },
                    copyAt: function (t, e, n) {
                        (t *= this.stride), (n *= e.stride);
                        for (var i = 0, r = this.stride; i < r; i++) this.array[t + i] = e.array[n + i];
                        return this;
                    },
                    set: function (t, e) {
                        return void 0 === e && (e = 0), this.array.set(t, e), this;
                    },
                    clone: function () {
                        return new this.constructor().copy(this);
                    },
                    onUpload: function (t) {
                        return (this.onUploadCallback = t), this;
                    },
                });
            var Oa,
                Da = new an();
            function Ia(t, e, n, i) {
                (this.data = t), (this.itemSize = e), (this.offset = n), (this.normalized = !0 === i);
            }
            function Na(t) {
                Li.call(this), (this.type = "SpriteMaterial"), (this.color = new Mi(16777215)), (this.map = null), (this.alphaMap = null), (this.rotation = 0), (this.sizeAttenuation = !0), (this.transparent = !0), this.setValues(t);
            }
            Object.defineProperties(Ia.prototype, {
                count: {
                    get: function () {
                        return this.data.count;
                    },
                },
                array: {
                    get: function () {
                        return this.data.array;
                    },
                },
            }),
                Object.assign(Ia.prototype, {
                    isInterleavedBufferAttribute: !0,
                    applyMatrix4: function (t) {
                        for (var e = 0, n = this.data.count; e < n; e++) (Da.x = this.getX(e)), (Da.y = this.getY(e)), (Da.z = this.getZ(e)), Da.applyMatrix4(t), this.setXYZ(e, Da.x, Da.y, Da.z);
                        return this;
                    },
                    setX: function (t, e) {
                        return (this.data.array[t * this.data.stride + this.offset] = e), this;
                    },
                    setY: function (t, e) {
                        return (this.data.array[t * this.data.stride + this.offset + 1] = e), this;
                    },
                    setZ: function (t, e) {
                        return (this.data.array[t * this.data.stride + this.offset + 2] = e), this;
                    },
                    setW: function (t, e) {
                        return (this.data.array[t * this.data.stride + this.offset + 3] = e), this;
                    },
                    getX: function (t) {
                        return this.data.array[t * this.data.stride + this.offset];
                    },
                    getY: function (t) {
                        return this.data.array[t * this.data.stride + this.offset + 1];
                    },
                    getZ: function (t) {
                        return this.data.array[t * this.data.stride + this.offset + 2];
                    },
                    getW: function (t) {
                        return this.data.array[t * this.data.stride + this.offset + 3];
                    },
                    setXY: function (t, e, n) {
                        return (t = t * this.data.stride + this.offset), (this.data.array[t + 0] = e), (this.data.array[t + 1] = n), this;
                    },
                    setXYZ: function (t, e, n, i) {
                        return (t = t * this.data.stride + this.offset), (this.data.array[t + 0] = e), (this.data.array[t + 1] = n), (this.data.array[t + 2] = i), this;
                    },
                    setXYZW: function (t, e, n, i, r) {
                        return (t = t * this.data.stride + this.offset), (this.data.array[t + 0] = e), (this.data.array[t + 1] = n), (this.data.array[t + 2] = i), (this.data.array[t + 3] = r), this;
                    },
                }),
                (Na.prototype = Object.create(Li.prototype)),
                (Na.prototype.constructor = Na),
                (Na.prototype.isSpriteMaterial = !0),
                (Na.prototype.copy = function (t) {
                    return Li.prototype.copy.call(this, t), this.color.copy(t.color), (this.map = t.map), (this.alphaMap = t.alphaMap), (this.rotation = t.rotation), (this.sizeAttenuation = t.sizeAttenuation), this;
                });
            var ka = new an(),
                Ba = new an(),
                za = new an(),
                Fa = new Ye(),
                Ua = new Ye(),
                ja = new fn(),
                Ga = new an(),
                Ha = new an(),
                Va = new an(),
                Wa = new Ye(),
                qa = new Ye(),
                Xa = new Ye();
            function Ya(t) {
                if ((On.call(this), (this.type = "Sprite"), void 0 === Oa)) {
                    Oa = new Qi();
                    var e = new Ra(new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]), 5);
                    Oa.setIndex([0, 1, 2, 0, 2, 3]), Oa.setAttribute("position", new Ia(e, 3, 0, !1)), Oa.setAttribute("uv", new Ia(e, 2, 3, !1));
                }
                (this.geometry = Oa), (this.material = void 0 !== t ? t : new Na()), (this.center = new Ye(0.5, 0.5));
            }
            function Za(t, e, n, i, r, o) {
                Fa.subVectors(t, n).addScalar(0.5).multiply(i), void 0 !== r ? ((Ua.x = o * Fa.x - r * Fa.y), (Ua.y = r * Fa.x + o * Fa.y)) : Ua.copy(Fa), t.copy(e), (t.x += Ua.x), (t.y += Ua.y), t.applyMatrix4(ja);
            }
            Ya.prototype = Object.assign(Object.create(On.prototype), {
                constructor: Ya,
                isSprite: !0,
                raycast: function (t, e) {
                    null === t.camera && console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),
                        Ba.setFromMatrixScale(this.matrixWorld),
                        ja.copy(t.camera.matrixWorld),
                        this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse, this.matrixWorld),
                        za.setFromMatrixPosition(this.modelViewMatrix),
                        t.camera.isPerspectiveCamera && !1 === this.material.sizeAttenuation && Ba.multiplyScalar(-za.z);
                    var n,
                        i,
                        r = this.material.rotation;
                    0 !== r && ((i = Math.cos(r)), (n = Math.sin(r)));
                    var o = this.center;
                    Za(Ga.set(-0.5, -0.5, 0), za, o, Ba, n, i), Za(Ha.set(0.5, -0.5, 0), za, o, Ba, n, i), Za(Va.set(0.5, 0.5, 0), za, o, Ba, n, i), Wa.set(0, 0), qa.set(1, 0), Xa.set(1, 1);
                    var a = t.ray.intersectTriangle(Ga, Ha, Va, !1, ka);
                    if (null !== a || (Za(Ha.set(-0.5, 0.5, 0), za, o, Ba, n, i), qa.set(0, 1), null !== (a = t.ray.intersectTriangle(Ga, Va, Ha, !1, ka)))) {
                        var s = t.ray.origin.distanceTo(ka);
                        s < t.near || s > t.far || e.push({ distance: s, point: ka.clone(), uv: xi.getUV(ka, Ga, Ha, Va, Wa, qa, Xa, new Ye()), face: null, object: this });
                    }
                },
                clone: function () {
                    return new this.constructor(this.material).copy(this);
                },
                copy: function (t) {
                    return On.prototype.copy.call(this, t), void 0 !== t.center && this.center.copy(t.center), this;
                },
            });
            var Ja = new an(),
                Qa = new an();
            function Ka() {
                On.call(this), (this._currentLevel = 0), (this.type = "LOD"), Object.defineProperties(this, { levels: { enumerable: !0, value: [] } }), (this.autoUpdate = !0);
            }
            function $a(t, e) {
                t && t.isGeometry && console.error("THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead."),
                    mr.call(this, t, e),
                    (this.type = "SkinnedMesh"),
                    (this.bindMode = "attached"),
                    (this.bindMatrix = new fn()),
                    (this.bindMatrixInverse = new fn());
            }
            (Ka.prototype = Object.assign(Object.create(On.prototype), {
                constructor: Ka,
                isLOD: !0,
                copy: function (t) {
                    On.prototype.copy.call(this, t, !1);
                    for (var e = t.levels, n = 0, i = e.length; n < i; n++) {
                        var r = e[n];
                        this.addLevel(r.object.clone(), r.distance);
                    }
                    return (this.autoUpdate = t.autoUpdate), this;
                },
                addLevel: function (t, e) {
                    void 0 === e && (e = 0), (e = Math.abs(e));
                    for (var n = this.levels, i = 0; i < n.length && !(e < n[i].distance); i++);
                    return n.splice(i, 0, { distance: e, object: t }), this.add(t), this;
                },
                getCurrentLevel: function () {
                    return this._currentLevel;
                },
                getObjectForDistance: function (t) {
                    var e = this.levels;
                    if (e.length > 0) {
                        for (var n = 1, i = e.length; n < i && !(t < e[n].distance); n++);
                        return e[n - 1].object;
                    }
                    return null;
                },
                raycast: function (t, e) {
                    if (this.levels.length > 0) {
                        Ja.setFromMatrixPosition(this.matrixWorld);
                        var n = t.ray.origin.distanceTo(Ja);
                        this.getObjectForDistance(n).raycast(t, e);
                    }
                },
                update: function (t) {
                    var e = this.levels;
                    if (e.length > 1) {
                        Ja.setFromMatrixPosition(t.matrixWorld), Qa.setFromMatrixPosition(this.matrixWorld);
                        var n = Ja.distanceTo(Qa) / t.zoom;
                        e[0].object.visible = !0;
                        for (var i = 1, r = e.length; i < r && n >= e[i].distance; i++) (e[i - 1].object.visible = !1), (e[i].object.visible = !0);
                        for (this._currentLevel = i - 1; i < r; i++) e[i].object.visible = !1;
                    }
                },
                toJSON: function (t) {
                    var e = On.prototype.toJSON.call(this, t);
                    !1 === this.autoUpdate && (e.object.autoUpdate = !1), (e.object.levels = []);
                    for (var n = this.levels, i = 0, r = n.length; i < r; i++) {
                        var o = n[i];
                        e.object.levels.push({ object: o.object.uuid, distance: o.distance });
                    }
                    return e;
                },
            })),
                ($a.prototype = Object.assign(Object.create(mr.prototype), {
                    constructor: $a,
                    isSkinnedMesh: !0,
                    bind: function (t, e) {
                        (this.skeleton = t), void 0 === e && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), (e = this.matrixWorld)), this.bindMatrix.copy(e), this.bindMatrixInverse.getInverse(e);
                    },
                    pose: function () {
                        this.skeleton.pose();
                    },
                    normalizeSkinWeights: function () {
                        for (var t = new $e(), e = this.geometry.attributes.skinWeight, n = 0, i = e.count; n < i; n++) {
                            (t.x = e.getX(n)), (t.y = e.getY(n)), (t.z = e.getZ(n)), (t.w = e.getW(n));
                            var r = 1 / t.manhattanLength();
                            r !== 1 / 0 ? t.multiplyScalar(r) : t.set(1, 0, 0, 0), e.setXYZW(n, t.x, t.y, t.z, t.w);
                        }
                    },
                    updateMatrixWorld: function (t) {
                        mr.prototype.updateMatrixWorld.call(this, t),
                            "attached" === this.bindMode
                                ? this.bindMatrixInverse.getInverse(this.matrixWorld)
                                : "detached" === this.bindMode
                                ? this.bindMatrixInverse.getInverse(this.bindMatrix)
                                : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
                    },
                    clone: function () {
                        return new this.constructor(this.geometry, this.material).copy(this);
                    },
                }));
            var ts = new fn(),
                es = new fn();
            function ns(t, e) {
                if (((t = t || []), (this.bones = t.slice(0)), (this.boneMatrices = new Float32Array(16 * this.bones.length)), (this.frame = -1), void 0 === e)) this.calculateInverses();
                else if (this.bones.length === e.length) this.boneInverses = e.slice(0);
                else {
                    console.warn("THREE.Skeleton boneInverses is the wrong length."), (this.boneInverses = []);
                    for (var n = 0, i = this.bones.length; n < i; n++) this.boneInverses.push(new fn());
                }
            }
            function is() {
                On.call(this), (this.type = "Bone");
            }
            Object.assign(ns.prototype, {
                calculateInverses: function () {
                    this.boneInverses = [];
                    for (var t = 0, e = this.bones.length; t < e; t++) {
                        var n = new fn();
                        this.bones[t] && n.getInverse(this.bones[t].matrixWorld), this.boneInverses.push(n);
                    }
                },
                pose: function () {
                    var t, e, n;
                    for (e = 0, n = this.bones.length; e < n; e++) (t = this.bones[e]) && t.matrixWorld.getInverse(this.boneInverses[e]);
                    for (e = 0, n = this.bones.length; e < n; e++)
                        (t = this.bones[e]) &&
                            (t.parent && t.parent.isBone ? (t.matrix.getInverse(t.parent.matrixWorld), t.matrix.multiply(t.matrixWorld)) : t.matrix.copy(t.matrixWorld), t.matrix.decompose(t.position, t.quaternion, t.scale));
                },
                update: function () {
                    for (var t = this.bones, e = this.boneInverses, n = this.boneMatrices, i = this.boneTexture, r = 0, o = t.length; r < o; r++) {
                        var a = t[r] ? t[r].matrixWorld : es;
                        ts.multiplyMatrices(a, e[r]), ts.toArray(n, 16 * r);
                    }
                    void 0 !== i && (i.needsUpdate = !0);
                },
                clone: function () {
                    return new ns(this.bones, this.boneInverses);
                },
                getBoneByName: function (t) {
                    for (var e = 0, n = this.bones.length; e < n; e++) {
                        var i = this.bones[e];
                        if (i.name === t) return i;
                    }
                },
                dispose: function () {
                    this.boneTexture && (this.boneTexture.dispose(), (this.boneTexture = void 0));
                },
            }),
                (is.prototype = Object.assign(Object.create(On.prototype), { constructor: is, isBone: !0 }));
            var rs = new fn(),
                os = new fn(),
                as = [],
                ss = new mr();
            function cs(t, e, n) {
                mr.call(this, t, e), (this.instanceMatrix = new Oi(new Float32Array(16 * n), 16)), (this.count = n), (this.frustumCulled = !1);
            }
            function ls(t) {
                Li.call(this), (this.type = "LineBasicMaterial"), (this.color = new Mi(16777215)), (this.linewidth = 1), (this.linecap = "round"), (this.linejoin = "round"), this.setValues(t);
            }
            (cs.prototype = Object.assign(Object.create(mr.prototype), {
                constructor: cs,
                isInstancedMesh: !0,
                getMatrixAt: function (t, e) {
                    e.fromArray(this.instanceMatrix.array, 16 * t);
                },
                raycast: function (t, e) {
                    var n = this.matrixWorld,
                        i = this.count;
                    if (((ss.geometry = this.geometry), (ss.material = this.material), void 0 !== ss.material))
                        for (var r = 0; r < i; r++)
                            this.getMatrixAt(r, rs), os.multiplyMatrices(n, rs), (ss.matrixWorld = os), ss.raycast(t, as), as.length > 0 && ((as[0].instanceId = r), (as[0].object = this), e.push(as[0]), (as.length = 0));
                },
                setMatrixAt: function (t, e) {
                    e.toArray(this.instanceMatrix.array, 16 * t);
                },
                updateMorphTargets: function () {},
            })),
                (ls.prototype = Object.create(Li.prototype)),
                (ls.prototype.constructor = ls),
                (ls.prototype.isLineBasicMaterial = !0),
                (ls.prototype.copy = function (t) {
                    return Li.prototype.copy.call(this, t), this.color.copy(t.color), (this.linewidth = t.linewidth), (this.linecap = t.linecap), (this.linejoin = t.linejoin), this;
                });
            var us = new an(),
                hs = new an(),
                ps = new fn(),
                ds = new ri(),
                fs = new Jn();
            function ms(t, e, n) {
                1 === n && console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead."),
                    On.call(this),
                    (this.type = "Line"),
                    (this.geometry = void 0 !== t ? t : new Qi()),
                    (this.material = void 0 !== e ? e : new ls());
            }
            ms.prototype = Object.assign(Object.create(On.prototype), {
                constructor: ms,
                isLine: !0,
                computeLineDistances: function () {
                    var t = this.geometry;
                    if (t.isBufferGeometry)
                        if (null === t.index) {
                            for (var e = t.attributes.position, n = [0], i = 1, r = e.count; i < r; i++) us.fromBufferAttribute(e, i - 1), hs.fromBufferAttribute(e, i), (n[i] = n[i - 1]), (n[i] += us.distanceTo(hs));
                            t.setAttribute("lineDistance", new Ui(n, 1));
                        } else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
                    else if (t.isGeometry) {
                        var o = t.vertices;
                        (n = t.lineDistances)[0] = 0;
                        for (i = 1, r = o.length; i < r; i++) (n[i] = n[i - 1]), (n[i] += o[i - 1].distanceTo(o[i]));
                    }
                    return this;
                },
                raycast: function (t, e) {
                    var n = this.geometry,
                        i = this.matrixWorld,
                        r = t.params.Line.threshold;
                    if ((null === n.boundingSphere && n.computeBoundingSphere(), fs.copy(n.boundingSphere), fs.applyMatrix4(i), (fs.radius += r), !1 !== t.ray.intersectsSphere(fs))) {
                        ps.getInverse(i), ds.copy(t.ray).applyMatrix4(ps);
                        var o = r / ((this.scale.x + this.scale.y + this.scale.z) / 3),
                            a = o * o,
                            s = new an(),
                            c = new an(),
                            l = new an(),
                            u = new an(),
                            h = this && this.isLineSegments ? 2 : 1;
                        if (n.isBufferGeometry) {
                            var p = n.index,
                                d = n.attributes.position.array;
                            if (null !== p)
                                for (var f = p.array, m = 0, v = f.length - 1; m < v; m += h) {
                                    var g = f[m],
                                        y = f[m + 1];
                                    if ((s.fromArray(d, 3 * g), c.fromArray(d, 3 * y), !(ds.distanceSqToSegment(s, c, u, l) > a)))
                                        u.applyMatrix4(this.matrixWorld),
                                            (b = t.ray.origin.distanceTo(u)) < t.near || b > t.far || e.push({ distance: b, point: l.clone().applyMatrix4(this.matrixWorld), index: m, face: null, faceIndex: null, object: this });
                                }
                            else
                                for (m = 0, v = d.length / 3 - 1; m < v; m += h) {
                                    if ((s.fromArray(d, 3 * m), c.fromArray(d, 3 * m + 3), !(ds.distanceSqToSegment(s, c, u, l) > a)))
                                        u.applyMatrix4(this.matrixWorld),
                                            (b = t.ray.origin.distanceTo(u)) < t.near || b > t.far || e.push({ distance: b, point: l.clone().applyMatrix4(this.matrixWorld), index: m, face: null, faceIndex: null, object: this });
                                }
                        } else if (n.isGeometry) {
                            var x = n.vertices,
                                _ = x.length;
                            for (m = 0; m < _ - 1; m += h) {
                                var b;
                                if (!(ds.distanceSqToSegment(x[m], x[m + 1], u, l) > a))
                                    u.applyMatrix4(this.matrixWorld),
                                        (b = t.ray.origin.distanceTo(u)) < t.near || b > t.far || e.push({ distance: b, point: l.clone().applyMatrix4(this.matrixWorld), index: m, face: null, faceIndex: null, object: this });
                            }
                        }
                    }
                },
                clone: function () {
                    return new this.constructor(this.geometry, this.material).copy(this);
                },
            });
            var vs = new an(),
                gs = new an();
            function ys(t, e) {
                ms.call(this, t, e), (this.type = "LineSegments");
            }
            function xs(t, e) {
                ms.call(this, t, e), (this.type = "LineLoop");
            }
            function _s(t) {
                Li.call(this), (this.type = "PointsMaterial"), (this.color = new Mi(16777215)), (this.map = null), (this.alphaMap = null), (this.size = 1), (this.sizeAttenuation = !0), (this.morphTargets = !1), this.setValues(t);
            }
            (ys.prototype = Object.assign(Object.create(ms.prototype), {
                constructor: ys,
                isLineSegments: !0,
                computeLineDistances: function () {
                    var t = this.geometry;
                    if (t.isBufferGeometry)
                        if (null === t.index) {
                            for (var e = t.attributes.position, n = [], i = 0, r = e.count; i < r; i += 2)
                                vs.fromBufferAttribute(e, i), gs.fromBufferAttribute(e, i + 1), (n[i] = 0 === i ? 0 : n[i - 1]), (n[i + 1] = n[i] + vs.distanceTo(gs));
                            t.setAttribute("lineDistance", new Ui(n, 1));
                        } else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
                    else if (t.isGeometry) {
                        var o = t.vertices;
                        for (n = t.lineDistances, i = 0, r = o.length; i < r; i += 2) vs.copy(o[i]), gs.copy(o[i + 1]), (n[i] = 0 === i ? 0 : n[i - 1]), (n[i + 1] = n[i] + vs.distanceTo(gs));
                    }
                    return this;
                },
            })),
                (xs.prototype = Object.assign(Object.create(ms.prototype), { constructor: xs, isLineLoop: !0 })),
                (_s.prototype = Object.create(Li.prototype)),
                (_s.prototype.constructor = _s),
                (_s.prototype.isPointsMaterial = !0),
                (_s.prototype.copy = function (t) {
                    return (
                        Li.prototype.copy.call(this, t),
                        this.color.copy(t.color),
                        (this.map = t.map),
                        (this.alphaMap = t.alphaMap),
                        (this.size = t.size),
                        (this.sizeAttenuation = t.sizeAttenuation),
                        (this.morphTargets = t.morphTargets),
                        this
                    );
                });
            var bs = new fn(),
                ws = new ri(),
                Ms = new Jn(),
                Ss = new an();
            function Ts(t, e) {
                On.call(this), (this.type = "Points"), (this.geometry = void 0 !== t ? t : new Qi()), (this.material = void 0 !== e ? e : new _s()), this.updateMorphTargets();
            }
            function Es(t, e, n, i, r, o, a) {
                var s = ws.distanceSqToPoint(t);
                if (s < n) {
                    var c = new an();
                    ws.closestPointToPoint(t, c), c.applyMatrix4(i);
                    var l = r.ray.origin.distanceTo(c);
                    if (l < r.near || l > r.far) return;
                    o.push({ distance: l, distanceToRay: Math.sqrt(s), point: c, index: e, face: null, object: a });
                }
            }
            function As(t, e, n, i, r, o, a, s, c) {
                Ke.call(this, t, e, n, i, r, o, a, s, c), (this.format = void 0 !== a ? a : Et), (this.minFilter = void 0 !== o ? o : ut), (this.magFilter = void 0 !== r ? r : ut), (this.generateMipmaps = !1);
            }
            function Ps(t, e, n, i, r, o, a, s, c, l, u, h) {
                Ke.call(this, null, o, a, s, c, l, i, r, u, h), (this.image = { width: e, height: n }), (this.mipmaps = t), (this.flipY = !1), (this.generateMipmaps = !1);
            }
            function Ls(t, e, n, i, r, o, a, s, c) {
                Ke.call(this, t, e, n, i, r, o, a, s, c), (this.needsUpdate = !0);
            }
            function Cs(t, e, n, i, r, o, a, s, c, l) {
                if ((l = void 0 !== l ? l : Rt) !== Rt && l !== Ot) throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
                void 0 === n && l === Rt && (n = vt),
                    void 0 === n && l === Ot && (n = St),
                    Ke.call(this, null, i, r, o, a, s, l, n, c),
                    (this.image = { width: t, height: e }),
                    (this.magFilter = void 0 !== a ? a : st),
                    (this.minFilter = void 0 !== s ? s : st),
                    (this.flipY = !1),
                    (this.generateMipmaps = !1);
            }
            function Rs(t) {
                Qi.call(this), (this.type = "WireframeGeometry");
                var e,
                    n,
                    i,
                    r,
                    o,
                    a,
                    s,
                    c,
                    l,
                    u,
                    h = [],
                    p = [0, 0],
                    d = {},
                    f = ["a", "b", "c"];
                if (t && t.isGeometry) {
                    var m = t.faces;
                    for (e = 0, i = m.length; e < i; e++) {
                        var v = m[e];
                        for (n = 0; n < 3; n++) (s = v[f[n]]), (c = v[f[(n + 1) % 3]]), (p[0] = Math.min(s, c)), (p[1] = Math.max(s, c)), void 0 === d[(l = p[0] + "," + p[1])] && (d[l] = { index1: p[0], index2: p[1] });
                    }
                    for (l in d) (a = d[l]), (u = t.vertices[a.index1]), h.push(u.x, u.y, u.z), (u = t.vertices[a.index2]), h.push(u.x, u.y, u.z);
                } else if (t && t.isBufferGeometry) {
                    var g, y, x, _, b, w, M;
                    if (((u = new an()), null !== t.index)) {
                        for (g = t.attributes.position, y = t.index, 0 === (x = t.groups).length && (x = [{ start: 0, count: y.count, materialIndex: 0 }]), r = 0, o = x.length; r < o; ++r)
                            for (e = b = (_ = x[r]).start, i = b + _.count; e < i; e += 3)
                                for (n = 0; n < 3; n++)
                                    (s = y.getX(e + n)), (c = y.getX(e + ((n + 1) % 3))), (p[0] = Math.min(s, c)), (p[1] = Math.max(s, c)), void 0 === d[(l = p[0] + "," + p[1])] && (d[l] = { index1: p[0], index2: p[1] });
                        for (l in d) (a = d[l]), u.fromBufferAttribute(g, a.index1), h.push(u.x, u.y, u.z), u.fromBufferAttribute(g, a.index2), h.push(u.x, u.y, u.z);
                    } else
                        for (e = 0, i = (g = t.attributes.position).count / 3; e < i; e++)
                            for (n = 0; n < 3; n++) (w = 3 * e + n), u.fromBufferAttribute(g, w), h.push(u.x, u.y, u.z), (M = 3 * e + ((n + 1) % 3)), u.fromBufferAttribute(g, M), h.push(u.x, u.y, u.z);
                }
                this.setAttribute("position", new Ui(h, 3));
            }
            function Os(t, e, n) {
                wr.call(this), (this.type = "ParametricGeometry"), (this.parameters = { func: t, slices: e, stacks: n }), this.fromBufferGeometry(new Ds(t, e, n)), this.mergeVertices();
            }
            function Ds(t, e, n) {
                Qi.call(this), (this.type = "ParametricBufferGeometry"), (this.parameters = { func: t, slices: e, stacks: n });
                var i,
                    r,
                    o = [],
                    a = [],
                    s = [],
                    c = [],
                    l = new an(),
                    u = new an(),
                    h = new an(),
                    p = new an(),
                    d = new an();
                t.length < 3 && console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");
                var f = e + 1;
                for (i = 0; i <= n; i++) {
                    var m = i / n;
                    for (r = 0; r <= e; r++) {
                        var v = r / e;
                        t(v, m, u),
                            a.push(u.x, u.y, u.z),
                            v - 1e-5 >= 0 ? (t(v - 1e-5, m, h), p.subVectors(u, h)) : (t(v + 1e-5, m, h), p.subVectors(h, u)),
                            m - 1e-5 >= 0 ? (t(v, m - 1e-5, h), d.subVectors(u, h)) : (t(v, m + 1e-5, h), d.subVectors(h, u)),
                            l.crossVectors(p, d).normalize(),
                            s.push(l.x, l.y, l.z),
                            c.push(v, m);
                    }
                }
                for (i = 0; i < n; i++)
                    for (r = 0; r < e; r++) {
                        var g = i * f + r,
                            y = i * f + r + 1,
                            x = (i + 1) * f + r + 1,
                            _ = (i + 1) * f + r;
                        o.push(g, y, _), o.push(y, x, _);
                    }
                this.setIndex(o), this.setAttribute("position", new Ui(a, 3)), this.setAttribute("normal", new Ui(s, 3)), this.setAttribute("uv", new Ui(c, 2));
            }
            function Is(t, e, n, i) {
                wr.call(this), (this.type = "PolyhedronGeometry"), (this.parameters = { vertices: t, indices: e, radius: n, detail: i }), this.fromBufferGeometry(new Ns(t, e, n, i)), this.mergeVertices();
            }
            function Ns(t, e, n, i) {
                Qi.call(this), (this.type = "PolyhedronBufferGeometry"), (this.parameters = { vertices: t, indices: e, radius: n, detail: i }), (n = n || 1);
                var r = [],
                    o = [];
                function a(t, e, n, i) {
                    var r,
                        o,
                        a = Math.pow(2, i),
                        c = [];
                    for (r = 0; r <= a; r++) {
                        c[r] = [];
                        var l = t.clone().lerp(n, r / a),
                            u = e.clone().lerp(n, r / a),
                            h = a - r;
                        for (o = 0; o <= h; o++) c[r][o] = 0 === o && r === a ? l : l.clone().lerp(u, o / h);
                    }
                    for (r = 0; r < a; r++)
                        for (o = 0; o < 2 * (a - r) - 1; o++) {
                            var p = Math.floor(o / 2);
                            o % 2 == 0 ? (s(c[r][p + 1]), s(c[r + 1][p]), s(c[r][p])) : (s(c[r][p + 1]), s(c[r + 1][p + 1]), s(c[r + 1][p]));
                        }
                }
                function s(t) {
                    r.push(t.x, t.y, t.z);
                }
                function c(e, n) {
                    var i = 3 * e;
                    (n.x = t[i + 0]), (n.y = t[i + 1]), (n.z = t[i + 2]);
                }
                function l(t, e, n, i) {
                    i < 0 && 1 === t.x && (o[e] = t.x - 1), 0 === n.x && 0 === n.z && (o[e] = i / 2 / Math.PI + 0.5);
                }
                function u(t) {
                    return Math.atan2(t.z, -t.x);
                }
                !(function (t) {
                    for (var n = new an(), i = new an(), r = new an(), o = 0; o < e.length; o += 3) c(e[o + 0], n), c(e[o + 1], i), c(e[o + 2], r), a(n, i, r, t);
                })((i = i || 0)),
                    (function (t) {
                        for (var e = new an(), n = 0; n < r.length; n += 3) (e.x = r[n + 0]), (e.y = r[n + 1]), (e.z = r[n + 2]), e.normalize().multiplyScalar(t), (r[n + 0] = e.x), (r[n + 1] = e.y), (r[n + 2] = e.z);
                    })(n),
                    (function () {
                        for (var t = new an(), e = 0; e < r.length; e += 3) {
                            (t.x = r[e + 0]), (t.y = r[e + 1]), (t.z = r[e + 2]);
                            var n = u(t) / 2 / Math.PI + 0.5,
                                i = ((a = t), Math.atan2(-a.y, Math.sqrt(a.x * a.x + a.z * a.z)) / Math.PI + 0.5);
                            o.push(n, 1 - i);
                        }
                        var a;
                        (function () {
                            for (var t = new an(), e = new an(), n = new an(), i = new an(), a = new Ye(), s = new Ye(), c = new Ye(), h = 0, p = 0; h < r.length; h += 9, p += 6) {
                                t.set(r[h + 0], r[h + 1], r[h + 2]),
                                    e.set(r[h + 3], r[h + 4], r[h + 5]),
                                    n.set(r[h + 6], r[h + 7], r[h + 8]),
                                    a.set(o[p + 0], o[p + 1]),
                                    s.set(o[p + 2], o[p + 3]),
                                    c.set(o[p + 4], o[p + 5]),
                                    i.copy(t).add(e).add(n).divideScalar(3);
                                var d = u(i);
                                l(a, p + 0, t, d), l(s, p + 2, e, d), l(c, p + 4, n, d);
                            }
                        })(),
                            (function () {
                                for (var t = 0; t < o.length; t += 6) {
                                    var e = o[t + 0],
                                        n = o[t + 2],
                                        i = o[t + 4],
                                        r = Math.max(e, n, i),
                                        a = Math.min(e, n, i);
                                    r > 0.9 && a < 0.1 && (e < 0.2 && (o[t + 0] += 1), n < 0.2 && (o[t + 2] += 1), i < 0.2 && (o[t + 4] += 1));
                                }
                            })();
                    })(),
                    this.setAttribute("position", new Ui(r, 3)),
                    this.setAttribute("normal", new Ui(r.slice(), 3)),
                    this.setAttribute("uv", new Ui(o, 2)),
                    0 === i ? this.computeVertexNormals() : this.normalizeNormals();
            }
            function ks(t, e) {
                wr.call(this), (this.type = "TetrahedronGeometry"), (this.parameters = { radius: t, detail: e }), this.fromBufferGeometry(new Bs(t, e)), this.mergeVertices();
            }
            function Bs(t, e) {
                Ns.call(this, [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1], [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1], t, e), (this.type = "TetrahedronBufferGeometry"), (this.parameters = { radius: t, detail: e });
            }
            function zs(t, e) {
                wr.call(this), (this.type = "OctahedronGeometry"), (this.parameters = { radius: t, detail: e }), this.fromBufferGeometry(new Fs(t, e)), this.mergeVertices();
            }
            function Fs(t, e) {
                Ns.call(this, [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1], [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2], t, e),
                    (this.type = "OctahedronBufferGeometry"),
                    (this.parameters = { radius: t, detail: e });
            }
            function Us(t, e) {
                wr.call(this), (this.type = "IcosahedronGeometry"), (this.parameters = { radius: t, detail: e }), this.fromBufferGeometry(new js(t, e)), this.mergeVertices();
            }
            function js(t, e) {
                var n = (1 + Math.sqrt(5)) / 2,
                    i = [-1, n, 0, 1, n, 0, -1, -n, 0, 1, -n, 0, 0, -1, n, 0, 1, n, 0, -1, -n, 0, 1, -n, n, 0, -1, n, 0, 1, -n, 0, -1, -n, 0, 1];
                Ns.call(this, i, [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1], t, e),
                    (this.type = "IcosahedronBufferGeometry"),
                    (this.parameters = { radius: t, detail: e });
            }
            function Gs(t, e) {
                wr.call(this), (this.type = "DodecahedronGeometry"), (this.parameters = { radius: t, detail: e }), this.fromBufferGeometry(new Hs(t, e)), this.mergeVertices();
            }
            function Hs(t, e) {
                var n = (1 + Math.sqrt(5)) / 2,
                    i = 1 / n,
                    r = [-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 0, -i, -n, 0, -i, n, 0, i, -n, 0, i, n, -i, -n, 0, -i, n, 0, i, -n, 0, i, n, 0, -n, 0, -i, n, 0, -i, -n, 0, i, n, 0, i];
                Ns.call(
                    this,
                    r,
                    [
                        3,
                        11,
                        7,
                        3,
                        7,
                        15,
                        3,
                        15,
                        13,
                        7,
                        19,
                        17,
                        7,
                        17,
                        6,
                        7,
                        6,
                        15,
                        17,
                        4,
                        8,
                        17,
                        8,
                        10,
                        17,
                        10,
                        6,
                        8,
                        0,
                        16,
                        8,
                        16,
                        2,
                        8,
                        2,
                        10,
                        0,
                        12,
                        1,
                        0,
                        1,
                        18,
                        0,
                        18,
                        16,
                        6,
                        10,
                        2,
                        6,
                        2,
                        13,
                        6,
                        13,
                        15,
                        2,
                        16,
                        18,
                        2,
                        18,
                        3,
                        2,
                        3,
                        13,
                        18,
                        1,
                        9,
                        18,
                        9,
                        11,
                        18,
                        11,
                        3,
                        4,
                        14,
                        12,
                        4,
                        12,
                        0,
                        4,
                        0,
                        8,
                        11,
                        9,
                        5,
                        11,
                        5,
                        19,
                        11,
                        19,
                        7,
                        19,
                        5,
                        14,
                        19,
                        14,
                        4,
                        19,
                        4,
                        17,
                        1,
                        12,
                        14,
                        1,
                        14,
                        5,
                        1,
                        5,
                        9,
                    ],
                    t,
                    e
                ),
                    (this.type = "DodecahedronBufferGeometry"),
                    (this.parameters = { radius: t, detail: e });
            }
            function Vs(t, e, n, i, r, o) {
                wr.call(this), (this.type = "TubeGeometry"), (this.parameters = { path: t, tubularSegments: e, radius: n, radialSegments: i, closed: r }), void 0 !== o && console.warn("THREE.TubeGeometry: taper has been removed.");
                var a = new Ws(t, e, n, i, r);
                (this.tangents = a.tangents), (this.normals = a.normals), (this.binormals = a.binormals), this.fromBufferGeometry(a), this.mergeVertices();
            }
            function Ws(t, e, n, i, r) {
                Qi.call(this), (this.type = "TubeBufferGeometry"), (this.parameters = { path: t, tubularSegments: e, radius: n, radialSegments: i, closed: r }), (e = e || 64), (n = n || 1), (i = i || 8), (r = r || !1);
                var o = t.computeFrenetFrames(e, r);
                (this.tangents = o.tangents), (this.normals = o.normals), (this.binormals = o.binormals);
                var a,
                    s,
                    c = new an(),
                    l = new an(),
                    u = new Ye(),
                    h = new an(),
                    p = [],
                    d = [],
                    f = [],
                    m = [];
                function v(r) {
                    h = t.getPointAt(r / e, h);
                    var a = o.normals[r],
                        u = o.binormals[r];
                    for (s = 0; s <= i; s++) {
                        var f = (s / i) * Math.PI * 2,
                            m = Math.sin(f),
                            v = -Math.cos(f);
                        (l.x = v * a.x + m * u.x), (l.y = v * a.y + m * u.y), (l.z = v * a.z + m * u.z), l.normalize(), d.push(l.x, l.y, l.z), (c.x = h.x + n * l.x), (c.y = h.y + n * l.y), (c.z = h.z + n * l.z), p.push(c.x, c.y, c.z);
                    }
                }
                !(function () {
                    for (a = 0; a < e; a++) v(a);
                    v(!1 === r ? e : 0),
                        (function () {
                            for (a = 0; a <= e; a++) for (s = 0; s <= i; s++) (u.x = a / e), (u.y = s / i), f.push(u.x, u.y);
                        })(),
                        (function () {
                            for (s = 1; s <= e; s++)
                                for (a = 1; a <= i; a++) {
                                    var t = (i + 1) * (s - 1) + (a - 1),
                                        n = (i + 1) * s + (a - 1),
                                        r = (i + 1) * s + a,
                                        o = (i + 1) * (s - 1) + a;
                                    m.push(t, n, o), m.push(n, r, o);
                                }
                        })();
                })(),
                    this.setIndex(m),
                    this.setAttribute("position", new Ui(p, 3)),
                    this.setAttribute("normal", new Ui(d, 3)),
                    this.setAttribute("uv", new Ui(f, 2));
            }
            function qs(t, e, n, i, r, o, a) {
                wr.call(this),
                    (this.type = "TorusKnotGeometry"),
                    (this.parameters = { radius: t, tube: e, tubularSegments: n, radialSegments: i, p: r, q: o }),
                    void 0 !== a && console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead."),
                    this.fromBufferGeometry(new Xs(t, e, n, i, r, o)),
                    this.mergeVertices();
            }
            function Xs(t, e, n, i, r, o) {
                Qi.call(this),
                    (this.type = "TorusKnotBufferGeometry"),
                    (this.parameters = { radius: t, tube: e, tubularSegments: n, radialSegments: i, p: r, q: o }),
                    (t = t || 1),
                    (e = e || 0.4),
                    (n = Math.floor(n) || 64),
                    (i = Math.floor(i) || 8),
                    (r = r || 2),
                    (o = o || 3);
                var a,
                    s,
                    c = [],
                    l = [],
                    u = [],
                    h = [],
                    p = new an(),
                    d = new an(),
                    f = new an(),
                    m = new an(),
                    v = new an(),
                    g = new an(),
                    y = new an();
                for (a = 0; a <= n; ++a) {
                    var x = (a / n) * r * Math.PI * 2;
                    for (A(x, r, o, t, f), A(x + 0.01, r, o, t, m), g.subVectors(m, f), y.addVectors(m, f), v.crossVectors(g, y), y.crossVectors(v, g), v.normalize(), y.normalize(), s = 0; s <= i; ++s) {
                        var _ = (s / i) * Math.PI * 2,
                            b = -e * Math.cos(_),
                            w = e * Math.sin(_);
                        (p.x = f.x + (b * y.x + w * v.x)), (p.y = f.y + (b * y.y + w * v.y)), (p.z = f.z + (b * y.z + w * v.z)), l.push(p.x, p.y, p.z), d.subVectors(p, f).normalize(), u.push(d.x, d.y, d.z), h.push(a / n), h.push(s / i);
                    }
                }
                for (s = 1; s <= n; s++)
                    for (a = 1; a <= i; a++) {
                        var M = (i + 1) * (s - 1) + (a - 1),
                            S = (i + 1) * s + (a - 1),
                            T = (i + 1) * s + a,
                            E = (i + 1) * (s - 1) + a;
                        c.push(M, S, E), c.push(S, T, E);
                    }
                function A(t, e, n, i, r) {
                    var o = Math.cos(t),
                        a = Math.sin(t),
                        s = (n / e) * t,
                        c = Math.cos(s);
                    (r.x = i * (2 + c) * 0.5 * o), (r.y = i * (2 + c) * a * 0.5), (r.z = i * Math.sin(s) * 0.5);
                }
                this.setIndex(c), this.setAttribute("position", new Ui(l, 3)), this.setAttribute("normal", new Ui(u, 3)), this.setAttribute("uv", new Ui(h, 2));
            }
            function Ys(t, e, n, i, r) {
                wr.call(this), (this.type = "TorusGeometry"), (this.parameters = { radius: t, tube: e, radialSegments: n, tubularSegments: i, arc: r }), this.fromBufferGeometry(new Zs(t, e, n, i, r)), this.mergeVertices();
            }
            function Zs(t, e, n, i, r) {
                Qi.call(this),
                    (this.type = "TorusBufferGeometry"),
                    (this.parameters = { radius: t, tube: e, radialSegments: n, tubularSegments: i, arc: r }),
                    (t = t || 1),
                    (e = e || 0.4),
                    (n = Math.floor(n) || 8),
                    (i = Math.floor(i) || 6),
                    (r = r || 2 * Math.PI);
                var o,
                    a,
                    s = [],
                    c = [],
                    l = [],
                    u = [],
                    h = new an(),
                    p = new an(),
                    d = new an();
                for (o = 0; o <= n; o++)
                    for (a = 0; a <= i; a++) {
                        var f = (a / i) * r,
                            m = (o / n) * Math.PI * 2;
                        (p.x = (t + e * Math.cos(m)) * Math.cos(f)),
                            (p.y = (t + e * Math.cos(m)) * Math.sin(f)),
                            (p.z = e * Math.sin(m)),
                            c.push(p.x, p.y, p.z),
                            (h.x = t * Math.cos(f)),
                            (h.y = t * Math.sin(f)),
                            d.subVectors(p, h).normalize(),
                            l.push(d.x, d.y, d.z),
                            u.push(a / i),
                            u.push(o / n);
                    }
                for (o = 1; o <= n; o++)
                    for (a = 1; a <= i; a++) {
                        var v = (i + 1) * o + a - 1,
                            g = (i + 1) * (o - 1) + a - 1,
                            y = (i + 1) * (o - 1) + a,
                            x = (i + 1) * o + a;
                        s.push(v, g, x), s.push(g, y, x);
                    }
                this.setIndex(s), this.setAttribute("position", new Ui(c, 3)), this.setAttribute("normal", new Ui(l, 3)), this.setAttribute("uv", new Ui(u, 2));
            }
            (Ts.prototype = Object.assign(Object.create(On.prototype), {
                constructor: Ts,
                isPoints: !0,
                raycast: function (t, e) {
                    var n = this.geometry,
                        i = this.matrixWorld,
                        r = t.params.Points.threshold;
                    if ((null === n.boundingSphere && n.computeBoundingSphere(), Ms.copy(n.boundingSphere), Ms.applyMatrix4(i), (Ms.radius += r), !1 !== t.ray.intersectsSphere(Ms))) {
                        bs.getInverse(i), ws.copy(t.ray).applyMatrix4(bs);
                        var o = r / ((this.scale.x + this.scale.y + this.scale.z) / 3),
                            a = o * o;
                        if (n.isBufferGeometry) {
                            var s = n.index,
                                c = n.attributes.position.array;
                            if (null !== s)
                                for (var l = s.array, u = 0, h = l.length; u < h; u++) {
                                    var p = l[u];
                                    Ss.fromArray(c, 3 * p), Es(Ss, p, a, i, t, e, this);
                                }
                            else {
                                u = 0;
                                for (var d = c.length / 3; u < d; u++) Ss.fromArray(c, 3 * u), Es(Ss, u, a, i, t, e, this);
                            }
                        } else {
                            var f = n.vertices;
                            for (u = 0, d = f.length; u < d; u++) Es(f[u], u, a, i, t, e, this);
                        }
                    }
                },
                updateMorphTargets: function () {
                    var t,
                        e,
                        n,
                        i = this.geometry;
                    if (i.isBufferGeometry) {
                        var r = i.morphAttributes,
                            o = Object.keys(r);
                        if (o.length > 0) {
                            var a = r[o[0]];
                            if (void 0 !== a)
                                for (this.morphTargetInfluences = [], this.morphTargetDictionary = {}, t = 0, e = a.length; t < e; t++) (n = a[t].name || String(t)), this.morphTargetInfluences.push(0), (this.morphTargetDictionary[n] = t);
                        }
                    } else {
                        var s = i.morphTargets;
                        void 0 !== s && s.length > 0 && console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.");
                    }
                },
                clone: function () {
                    return new this.constructor(this.geometry, this.material).copy(this);
                },
            })),
                (As.prototype = Object.assign(Object.create(Ke.prototype), {
                    constructor: As,
                    isVideoTexture: !0,
                    update: function () {
                        var t = this.image;
                        t.readyState >= t.HAVE_CURRENT_DATA && (this.needsUpdate = !0);
                    },
                })),
                (Ps.prototype = Object.create(Ke.prototype)),
                (Ps.prototype.constructor = Ps),
                (Ps.prototype.isCompressedTexture = !0),
                (Ls.prototype = Object.create(Ke.prototype)),
                (Ls.prototype.constructor = Ls),
                (Ls.prototype.isCanvasTexture = !0),
                (Cs.prototype = Object.create(Ke.prototype)),
                (Cs.prototype.constructor = Cs),
                (Cs.prototype.isDepthTexture = !0),
                (Rs.prototype = Object.create(Qi.prototype)),
                (Rs.prototype.constructor = Rs),
                (Os.prototype = Object.create(wr.prototype)),
                (Os.prototype.constructor = Os),
                (Ds.prototype = Object.create(Qi.prototype)),
                (Ds.prototype.constructor = Ds),
                (Is.prototype = Object.create(wr.prototype)),
                (Is.prototype.constructor = Is),
                (Ns.prototype = Object.create(Qi.prototype)),
                (Ns.prototype.constructor = Ns),
                (ks.prototype = Object.create(wr.prototype)),
                (ks.prototype.constructor = ks),
                (Bs.prototype = Object.create(Ns.prototype)),
                (Bs.prototype.constructor = Bs),
                (zs.prototype = Object.create(wr.prototype)),
                (zs.prototype.constructor = zs),
                (Fs.prototype = Object.create(Ns.prototype)),
                (Fs.prototype.constructor = Fs),
                (Us.prototype = Object.create(wr.prototype)),
                (Us.prototype.constructor = Us),
                (js.prototype = Object.create(Ns.prototype)),
                (js.prototype.constructor = js),
                (Gs.prototype = Object.create(wr.prototype)),
                (Gs.prototype.constructor = Gs),
                (Hs.prototype = Object.create(Ns.prototype)),
                (Hs.prototype.constructor = Hs),
                (Vs.prototype = Object.create(wr.prototype)),
                (Vs.prototype.constructor = Vs),
                (Ws.prototype = Object.create(Qi.prototype)),
                (Ws.prototype.constructor = Ws),
                (Ws.prototype.toJSON = function () {
                    var t = Qi.prototype.toJSON.call(this);
                    return (t.path = this.parameters.path.toJSON()), t;
                }),
                (qs.prototype = Object.create(wr.prototype)),
                (qs.prototype.constructor = qs),
                (Xs.prototype = Object.create(Qi.prototype)),
                (Xs.prototype.constructor = Xs),
                (Ys.prototype = Object.create(wr.prototype)),
                (Ys.prototype.constructor = Ys),
                (Zs.prototype = Object.create(Qi.prototype)),
                (Zs.prototype.constructor = Zs);
            var Js = function (t, e, n) {
                n = n || 2;
                var i,
                    r,
                    o,
                    a,
                    s,
                    c,
                    l,
                    u = e && e.length,
                    h = u ? e[0] * n : t.length,
                    p = Qs(t, 0, h, n, !0),
                    d = [];
                if (!p || p.next === p.prev) return d;
                if (
                    (u &&
                        (p = (function (t, e, n, i) {
                            var r,
                                o,
                                a,
                                s,
                                c,
                                l = [];
                            for (r = 0, o = e.length; r < o; r++) (a = e[r] * i), (s = r < o - 1 ? e[r + 1] * i : t.length), (c = Qs(t, a, s, i, !1)) === c.next && (c.steiner = !0), l.push(sc(c));
                            for (l.sort(rc), r = 0; r < l.length; r++) oc(l[r], n), (n = Ks(n, n.next));
                            return n;
                        })(t, e, p, n)),
                    t.length > 80 * n)
                ) {
                    (i = o = t[0]), (r = a = t[1]);
                    for (var f = n; f < h; f += n) (s = t[f]), (c = t[f + 1]), s < i && (i = s), c < r && (r = c), s > o && (o = s), c > a && (a = c);
                    l = 0 !== (l = Math.max(o - i, a - r)) ? 1 / l : 0;
                }
                return $s(p, d, n, i, r, l), d;
            };
            function Qs(t, e, n, i, r) {
                var o, a;
                if (
                    r ===
                    (function (t, e, n, i) {
                        for (var r = 0, o = e, a = n - i; o < n; o += i) (r += (t[a] - t[o]) * (t[o + 1] + t[a + 1])), (a = o);
                        return r;
                    })(t, e, n, i) >
                        0
                )
                    for (o = e; o < n; o += i) a = mc(o, t[o], t[o + 1], a);
                else for (o = n - i; o >= e; o -= i) a = mc(o, t[o], t[o + 1], a);
                return a && hc(a, a.next) && (vc(a), (a = a.next)), a;
            }
            function Ks(t, e) {
                if (!t) return t;
                e || (e = t);
                var n,
                    i = t;
                do {
                    if (((n = !1), i.steiner || (!hc(i, i.next) && 0 !== uc(i.prev, i, i.next)))) i = i.next;
                    else {
                        if ((vc(i), (i = e = i.prev) === i.next)) break;
                        n = !0;
                    }
                } while (n || i !== e);
                return e;
            }
            function $s(t, e, n, i, r, o, a) {
                if (t) {
                    !a &&
                        o &&
                        (function (t, e, n, i) {
                            var r = t;
                            do {
                                null === r.z && (r.z = ac(r.x, r.y, e, n, i)), (r.prevZ = r.prev), (r.nextZ = r.next), (r = r.next);
                            } while (r !== t);
                            (r.prevZ.nextZ = null),
                                (r.prevZ = null),
                                (function (t) {
                                    var e,
                                        n,
                                        i,
                                        r,
                                        o,
                                        a,
                                        s,
                                        c,
                                        l = 1;
                                    do {
                                        for (n = t, t = null, o = null, a = 0; n; ) {
                                            for (a++, i = n, s = 0, e = 0; e < l && (s++, (i = i.nextZ)); e++);
                                            for (c = l; s > 0 || (c > 0 && i); ) 0 !== s && (0 === c || !i || n.z <= i.z) ? ((r = n), (n = n.nextZ), s--) : ((r = i), (i = i.nextZ), c--), o ? (o.nextZ = r) : (t = r), (r.prevZ = o), (o = r);
                                            n = i;
                                        }
                                        (o.nextZ = null), (l *= 2);
                                    } while (a > 1);
                                })(r);
                        })(t, i, r, o);
                    for (var s, c, l = t; t.prev !== t.next; )
                        if (((s = t.prev), (c = t.next), o ? ec(t, i, r, o) : tc(t))) e.push(s.i / n), e.push(t.i / n), e.push(c.i / n), vc(t), (t = c.next), (l = c.next);
                        else if ((t = c) === l) {
                            a ? (1 === a ? $s((t = nc(t, e, n)), e, n, i, r, o, 2) : 2 === a && ic(t, e, n, i, r, o)) : $s(Ks(t), e, n, i, r, o, 1);
                            break;
                        }
                }
            }
            function tc(t) {
                var e = t.prev,
                    n = t,
                    i = t.next;
                if (uc(e, n, i) >= 0) return !1;
                for (var r = t.next.next; r !== t.prev; ) {
                    if (cc(e.x, e.y, n.x, n.y, i.x, i.y, r.x, r.y) && uc(r.prev, r, r.next) >= 0) return !1;
                    r = r.next;
                }
                return !0;
            }
            function ec(t, e, n, i) {
                var r = t.prev,
                    o = t,
                    a = t.next;
                if (uc(r, o, a) >= 0) return !1;
                for (
                    var s = r.x < o.x ? (r.x < a.x ? r.x : a.x) : o.x < a.x ? o.x : a.x,
                        c = r.y < o.y ? (r.y < a.y ? r.y : a.y) : o.y < a.y ? o.y : a.y,
                        l = r.x > o.x ? (r.x > a.x ? r.x : a.x) : o.x > a.x ? o.x : a.x,
                        u = r.y > o.y ? (r.y > a.y ? r.y : a.y) : o.y > a.y ? o.y : a.y,
                        h = ac(s, c, e, n, i),
                        p = ac(l, u, e, n, i),
                        d = t.prevZ,
                        f = t.nextZ;
                    d && d.z >= h && f && f.z <= p;

                ) {
                    if (d !== t.prev && d !== t.next && cc(r.x, r.y, o.x, o.y, a.x, a.y, d.x, d.y) && uc(d.prev, d, d.next) >= 0) return !1;
                    if (((d = d.prevZ), f !== t.prev && f !== t.next && cc(r.x, r.y, o.x, o.y, a.x, a.y, f.x, f.y) && uc(f.prev, f, f.next) >= 0)) return !1;
                    f = f.nextZ;
                }
                for (; d && d.z >= h; ) {
                    if (d !== t.prev && d !== t.next && cc(r.x, r.y, o.x, o.y, a.x, a.y, d.x, d.y) && uc(d.prev, d, d.next) >= 0) return !1;
                    d = d.prevZ;
                }
                for (; f && f.z <= p; ) {
                    if (f !== t.prev && f !== t.next && cc(r.x, r.y, o.x, o.y, a.x, a.y, f.x, f.y) && uc(f.prev, f, f.next) >= 0) return !1;
                    f = f.nextZ;
                }
                return !0;
            }
            function nc(t, e, n) {
                var i = t;
                do {
                    var r = i.prev,
                        o = i.next.next;
                    !hc(r, o) && pc(r, i, i.next, o) && dc(r, o) && dc(o, r) && (e.push(r.i / n), e.push(i.i / n), e.push(o.i / n), vc(i), vc(i.next), (i = t = o)), (i = i.next);
                } while (i !== t);
                return i;
            }
            function ic(t, e, n, i, r, o) {
                var a = t;
                do {
                    for (var s = a.next.next; s !== a.prev; ) {
                        if (a.i !== s.i && lc(a, s)) {
                            var c = fc(a, s);
                            return (a = Ks(a, a.next)), (c = Ks(c, c.next)), $s(a, e, n, i, r, o), void $s(c, e, n, i, r, o);
                        }
                        s = s.next;
                    }
                    a = a.next;
                } while (a !== t);
            }
            function rc(t, e) {
                return t.x - e.x;
            }
            function oc(t, e) {
                if (
                    (e = (function (t, e) {
                        var n,
                            i = e,
                            r = t.x,
                            o = t.y,
                            a = -1 / 0;
                        do {
                            if (o <= i.y && o >= i.next.y && i.next.y !== i.y) {
                                var s = i.x + ((o - i.y) * (i.next.x - i.x)) / (i.next.y - i.y);
                                if (s <= r && s > a) {
                                    if (((a = s), s === r)) {
                                        if (o === i.y) return i;
                                        if (o === i.next.y) return i.next;
                                    }
                                    n = i.x < i.next.x ? i : i.next;
                                }
                            }
                            i = i.next;
                        } while (i !== e);
                        if (!n) return null;
                        if (r === a) return n.prev;
                        var c,
                            l = n,
                            u = n.x,
                            h = n.y,
                            p = 1 / 0;
                        i = n.next;
                        for (; i !== l; )
                            r >= i.x && i.x >= u && r !== i.x && cc(o < h ? r : a, o, u, h, o < h ? a : r, o, i.x, i.y) && ((c = Math.abs(o - i.y) / (r - i.x)) < p || (c === p && i.x > n.x)) && dc(i, t) && ((n = i), (p = c)), (i = i.next);
                        return n;
                    })(t, e))
                ) {
                    var n = fc(e, t);
                    Ks(n, n.next);
                }
            }
            function ac(t, e, n, i, r) {
                return (
                    (t = 1431655765 & ((t = 858993459 & ((t = 252645135 & ((t = 16711935 & ((t = 32767 * (t - n) * r) | (t << 8))) | (t << 4))) | (t << 2))) | (t << 1))) |
                    ((e = 1431655765 & ((e = 858993459 & ((e = 252645135 & ((e = 16711935 & ((e = 32767 * (e - i) * r) | (e << 8))) | (e << 4))) | (e << 2))) | (e << 1))) << 1)
                );
            }
            function sc(t) {
                var e = t,
                    n = t;
                do {
                    (e.x < n.x || (e.x === n.x && e.y < n.y)) && (n = e), (e = e.next);
                } while (e !== t);
                return n;
            }
            function cc(t, e, n, i, r, o, a, s) {
                return (r - a) * (e - s) - (t - a) * (o - s) >= 0 && (t - a) * (i - s) - (n - a) * (e - s) >= 0 && (n - a) * (o - s) - (r - a) * (i - s) >= 0;
            }
            function lc(t, e) {
                return (
                    t.next.i !== e.i &&
                    t.prev.i !== e.i &&
                    !(function (t, e) {
                        var n = t;
                        do {
                            if (n.i !== t.i && n.next.i !== t.i && n.i !== e.i && n.next.i !== e.i && pc(n, n.next, t, e)) return !0;
                            n = n.next;
                        } while (n !== t);
                        return !1;
                    })(t, e) &&
                    dc(t, e) &&
                    dc(e, t) &&
                    (function (t, e) {
                        var n = t,
                            i = !1,
                            r = (t.x + e.x) / 2,
                            o = (t.y + e.y) / 2;
                        do {
                            n.y > o != n.next.y > o && n.next.y !== n.y && r < ((n.next.x - n.x) * (o - n.y)) / (n.next.y - n.y) + n.x && (i = !i), (n = n.next);
                        } while (n !== t);
                        return i;
                    })(t, e)
                );
            }
            function uc(t, e, n) {
                return (e.y - t.y) * (n.x - e.x) - (e.x - t.x) * (n.y - e.y);
            }
            function hc(t, e) {
                return t.x === e.x && t.y === e.y;
            }
            function pc(t, e, n, i) {
                return !!((hc(t, n) && hc(e, i)) || (hc(t, i) && hc(n, e))) || (uc(t, e, n) > 0 != uc(t, e, i) > 0 && uc(n, i, t) > 0 != uc(n, i, e) > 0);
            }
            function dc(t, e) {
                return uc(t.prev, t, t.next) < 0 ? uc(t, e, t.next) >= 0 && uc(t, t.prev, e) >= 0 : uc(t, e, t.prev) < 0 || uc(t, t.next, e) < 0;
            }
            function fc(t, e) {
                var n = new gc(t.i, t.x, t.y),
                    i = new gc(e.i, e.x, e.y),
                    r = t.next,
                    o = e.prev;
                return (t.next = e), (e.prev = t), (n.next = r), (r.prev = n), (i.next = n), (n.prev = i), (o.next = i), (i.prev = o), i;
            }
            function mc(t, e, n, i) {
                var r = new gc(t, e, n);
                return i ? ((r.next = i.next), (r.prev = i), (i.next.prev = r), (i.next = r)) : ((r.prev = r), (r.next = r)), r;
            }
            function vc(t) {
                (t.next.prev = t.prev), (t.prev.next = t.next), t.prevZ && (t.prevZ.nextZ = t.nextZ), t.nextZ && (t.nextZ.prevZ = t.prevZ);
            }
            function gc(t, e, n) {
                (this.i = t), (this.x = e), (this.y = n), (this.prev = null), (this.next = null), (this.z = null), (this.prevZ = null), (this.nextZ = null), (this.steiner = !1);
            }
            var yc = {
                area: function (t) {
                    for (var e = t.length, n = 0, i = e - 1, r = 0; r < e; i = r++) n += t[i].x * t[r].y - t[r].x * t[i].y;
                    return 0.5 * n;
                },
                isClockWise: function (t) {
                    return yc.area(t) < 0;
                },
                triangulateShape: function (t, e) {
                    var n = [],
                        i = [],
                        r = [];
                    xc(t), _c(n, t);
                    var o = t.length;
                    e.forEach(xc);
                    for (var a = 0; a < e.length; a++) i.push(o), (o += e[a].length), _c(n, e[a]);
                    var s = Js(n, i);
                    for (a = 0; a < s.length; a += 3) r.push(s.slice(a, a + 3));
                    return r;
                },
            };
            function xc(t) {
                var e = t.length;
                e > 2 && t[e - 1].equals(t[0]) && t.pop();
            }
            function _c(t, e) {
                for (var n = 0; n < e.length; n++) t.push(e[n].x), t.push(e[n].y);
            }
            function bc(t, e) {
                wr.call(this), (this.type = "ExtrudeGeometry"), (this.parameters = { shapes: t, options: e }), this.fromBufferGeometry(new wc(t, e)), this.mergeVertices();
            }
            function wc(t, e) {
                Qi.call(this), (this.type = "ExtrudeBufferGeometry"), (this.parameters = { shapes: t, options: e });
                for (var n = this, i = [], r = [], o = 0, a = (t = Array.isArray(t) ? t : [t]).length; o < a; o++) {
                    s(t[o]);
                }
                function s(t) {
                    var o = [],
                        a = void 0 !== e.curveSegments ? e.curveSegments : 12,
                        s = void 0 !== e.steps ? e.steps : 1,
                        c = void 0 !== e.depth ? e.depth : 100,
                        l = void 0 === e.bevelEnabled || e.bevelEnabled,
                        u = void 0 !== e.bevelThickness ? e.bevelThickness : 6,
                        h = void 0 !== e.bevelSize ? e.bevelSize : u - 2,
                        p = void 0 !== e.bevelOffset ? e.bevelOffset : 0,
                        d = void 0 !== e.bevelSegments ? e.bevelSegments : 3,
                        f = e.extrudePath,
                        m = void 0 !== e.UVGenerator ? e.UVGenerator : Mc;
                    void 0 !== e.amount && (console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."), (c = e.amount));
                    var v,
                        g,
                        y,
                        x,
                        _,
                        b,
                        w,
                        M,
                        S = !1;
                    f && ((v = f.getSpacedPoints(s)), (S = !0), (l = !1), (g = f.computeFrenetFrames(s, !1)), (y = new an()), (x = new an()), (_ = new an())), l || ((d = 0), (u = 0), (h = 0), (p = 0));
                    var T = t.extractPoints(a),
                        E = T.shape,
                        A = T.holes;
                    if (!yc.isClockWise(E)) for (E = E.reverse(), w = 0, M = A.length; w < M; w++) (b = A[w]), yc.isClockWise(b) && (A[w] = b.reverse());
                    var P = yc.triangulateShape(E, A),
                        L = E;
                    for (w = 0, M = A.length; w < M; w++) (b = A[w]), (E = E.concat(b));
                    function C(t, e, n) {
                        return e || console.error("THREE.ExtrudeGeometry: vec does not exist"), e.clone().multiplyScalar(n).add(t);
                    }
                    var R,
                        O,
                        D,
                        I,
                        N,
                        k,
                        B = E.length,
                        z = P.length;
                    function F(t, e, n) {
                        var i,
                            r,
                            o,
                            a = t.x - e.x,
                            s = t.y - e.y,
                            c = n.x - t.x,
                            l = n.y - t.y,
                            u = a * a + s * s,
                            h = a * l - s * c;
                        if (Math.abs(h) > Number.EPSILON) {
                            var p = Math.sqrt(u),
                                d = Math.sqrt(c * c + l * l),
                                f = e.x - s / p,
                                m = e.y + a / p,
                                v = ((n.x - l / d - f) * l - (n.y + c / d - m) * c) / (a * l - s * c),
                                g = (i = f + a * v - t.x) * i + (r = m + s * v - t.y) * r;
                            if (g <= 2) return new Ye(i, r);
                            o = Math.sqrt(g / 2);
                        } else {
                            var y = !1;
                            a > Number.EPSILON ? c > Number.EPSILON && (y = !0) : a < -Number.EPSILON ? c < -Number.EPSILON && (y = !0) : Math.sign(s) === Math.sign(l) && (y = !0),
                                y ? ((i = -s), (r = a), (o = Math.sqrt(u))) : ((i = a), (r = s), (o = Math.sqrt(u / 2)));
                        }
                        return new Ye(i / o, r / o);
                    }
                    for (var U = [], j = 0, G = L.length, H = G - 1, V = j + 1; j < G; j++, H++, V++) H === G && (H = 0), V === G && (V = 0), (U[j] = F(L[j], L[H], L[V]));
                    var W,
                        q,
                        X = [],
                        Y = U.concat();
                    for (w = 0, M = A.length; w < M; w++) {
                        for (b = A[w], W = [], j = 0, H = (G = b.length) - 1, V = j + 1; j < G; j++, H++, V++) H === G && (H = 0), V === G && (V = 0), (W[j] = F(b[j], b[H], b[V]));
                        X.push(W), (Y = Y.concat(W));
                    }
                    for (R = 0; R < d; R++) {
                        for (D = R / d, I = u * Math.cos((D * Math.PI) / 2), O = h * Math.sin((D * Math.PI) / 2) + p, j = 0, G = L.length; j < G; j++) J((N = C(L[j], U[j], O)).x, N.y, -I);
                        for (w = 0, M = A.length; w < M; w++) for (b = A[w], W = X[w], j = 0, G = b.length; j < G; j++) J((N = C(b[j], W[j], O)).x, N.y, -I);
                    }
                    for (O = h + p, j = 0; j < B; j++)
                        (N = l ? C(E[j], Y[j], O) : E[j]), S ? (x.copy(g.normals[0]).multiplyScalar(N.x), y.copy(g.binormals[0]).multiplyScalar(N.y), _.copy(v[0]).add(x).add(y), J(_.x, _.y, _.z)) : J(N.x, N.y, 0);
                    for (q = 1; q <= s; q++)
                        for (j = 0; j < B; j++)
                            (N = l ? C(E[j], Y[j], O) : E[j]), S ? (x.copy(g.normals[q]).multiplyScalar(N.x), y.copy(g.binormals[q]).multiplyScalar(N.y), _.copy(v[q]).add(x).add(y), J(_.x, _.y, _.z)) : J(N.x, N.y, (c / s) * q);
                    for (R = d - 1; R >= 0; R--) {
                        for (D = R / d, I = u * Math.cos((D * Math.PI) / 2), O = h * Math.sin((D * Math.PI) / 2) + p, j = 0, G = L.length; j < G; j++) J((N = C(L[j], U[j], O)).x, N.y, c + I);
                        for (w = 0, M = A.length; w < M; w++) for (b = A[w], W = X[w], j = 0, G = b.length; j < G; j++) (N = C(b[j], W[j], O)), S ? J(N.x, N.y + v[s - 1].y, v[s - 1].x + I) : J(N.x, N.y, c + I);
                    }
                    function Z(t, e) {
                        var n, i;
                        for (j = t.length; --j >= 0; ) {
                            (n = j), (i = j - 1) < 0 && (i = t.length - 1);
                            var r = 0,
                                o = s + 2 * d;
                            for (r = 0; r < o; r++) {
                                var a = B * r,
                                    c = B * (r + 1);
                                K(e + n + a, e + i + a, e + i + c, e + n + c);
                            }
                        }
                    }
                    function J(t, e, n) {
                        o.push(t), o.push(e), o.push(n);
                    }
                    function Q(t, e, r) {
                        $(t), $(e), $(r);
                        var o = i.length / 3,
                            a = m.generateTopUV(n, i, o - 3, o - 2, o - 1);
                        tt(a[0]), tt(a[1]), tt(a[2]);
                    }
                    function K(t, e, r, o) {
                        $(t), $(e), $(o), $(e), $(r), $(o);
                        var a = i.length / 3,
                            s = m.generateSideWallUV(n, i, a - 6, a - 3, a - 2, a - 1);
                        tt(s[0]), tt(s[1]), tt(s[3]), tt(s[1]), tt(s[2]), tt(s[3]);
                    }
                    function $(t) {
                        i.push(o[3 * t + 0]), i.push(o[3 * t + 1]), i.push(o[3 * t + 2]);
                    }
                    function tt(t) {
                        r.push(t.x), r.push(t.y);
                    }
                    !(function () {
                        var t = i.length / 3;
                        if (l) {
                            var e = 0,
                                r = B * e;
                            for (j = 0; j < z; j++) Q((k = P[j])[2] + r, k[1] + r, k[0] + r);
                            for (r = B * (e = s + 2 * d), j = 0; j < z; j++) Q((k = P[j])[0] + r, k[1] + r, k[2] + r);
                        } else {
                            for (j = 0; j < z; j++) Q((k = P[j])[2], k[1], k[0]);
                            for (j = 0; j < z; j++) Q((k = P[j])[0] + B * s, k[1] + B * s, k[2] + B * s);
                        }
                        n.addGroup(t, i.length / 3 - t, 0);
                    })(),
                        (function () {
                            var t = i.length / 3,
                                e = 0;
                            for (Z(L, e), e += L.length, w = 0, M = A.length; w < M; w++) Z((b = A[w]), e), (e += b.length);
                            n.addGroup(t, i.length / 3 - t, 1);
                        })();
                }
                this.setAttribute("position", new Ui(i, 3)), this.setAttribute("uv", new Ui(r, 2)), this.computeVertexNormals();
            }
            (bc.prototype = Object.create(wr.prototype)),
                (bc.prototype.constructor = bc),
                (bc.prototype.toJSON = function () {
                    var t = wr.prototype.toJSON.call(this);
                    return Sc(this.parameters.shapes, this.parameters.options, t);
                }),
                (wc.prototype = Object.create(Qi.prototype)),
                (wc.prototype.constructor = wc),
                (wc.prototype.toJSON = function () {
                    var t = Qi.prototype.toJSON.call(this);
                    return Sc(this.parameters.shapes, this.parameters.options, t);
                });
            var Mc = {
                generateTopUV: function (t, e, n, i, r) {
                    var o = e[3 * n],
                        a = e[3 * n + 1],
                        s = e[3 * i],
                        c = e[3 * i + 1],
                        l = e[3 * r],
                        u = e[3 * r + 1];
                    return [new Ye(o, a), new Ye(s, c), new Ye(l, u)];
                },
                generateSideWallUV: function (t, e, n, i, r, o) {
                    var a = e[3 * n],
                        s = e[3 * n + 1],
                        c = e[3 * n + 2],
                        l = e[3 * i],
                        u = e[3 * i + 1],
                        h = e[3 * i + 2],
                        p = e[3 * r],
                        d = e[3 * r + 1],
                        f = e[3 * r + 2],
                        m = e[3 * o],
                        v = e[3 * o + 1],
                        g = e[3 * o + 2];
                    return Math.abs(s - u) < 0.01 ? [new Ye(a, 1 - c), new Ye(l, 1 - h), new Ye(p, 1 - f), new Ye(m, 1 - g)] : [new Ye(s, 1 - c), new Ye(u, 1 - h), new Ye(d, 1 - f), new Ye(v, 1 - g)];
                },
            };
            function Sc(t, e, n) {
                if (((n.shapes = []), Array.isArray(t)))
                    for (var i = 0, r = t.length; i < r; i++) {
                        var o = t[i];
                        n.shapes.push(o.uuid);
                    }
                else n.shapes.push(t.uuid);
                return void 0 !== e.extrudePath && (n.options.extrudePath = e.extrudePath.toJSON()), n;
            }
            function Tc(t, e) {
                wr.call(this), (this.type = "TextGeometry"), (this.parameters = { text: t, parameters: e }), this.fromBufferGeometry(new Ec(t, e)), this.mergeVertices();
            }
            function Ec(t, e) {
                var n = (e = e || {}).font;
                if (!n || !n.isFont) return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."), new wr();
                var i = n.generateShapes(t, e.size);
                (e.depth = void 0 !== e.height ? e.height : 50),
                    void 0 === e.bevelThickness && (e.bevelThickness = 10),
                    void 0 === e.bevelSize && (e.bevelSize = 8),
                    void 0 === e.bevelEnabled && (e.bevelEnabled = !1),
                    wc.call(this, i, e),
                    (this.type = "TextBufferGeometry");
            }
            function Ac(t, e, n, i, r, o, a) {
                wr.call(this),
                    (this.type = "SphereGeometry"),
                    (this.parameters = { radius: t, widthSegments: e, heightSegments: n, phiStart: i, phiLength: r, thetaStart: o, thetaLength: a }),
                    this.fromBufferGeometry(new Pc(t, e, n, i, r, o, a)),
                    this.mergeVertices();
            }
            function Pc(t, e, n, i, r, o, a) {
                Qi.call(this),
                    (this.type = "SphereBufferGeometry"),
                    (this.parameters = { radius: t, widthSegments: e, heightSegments: n, phiStart: i, phiLength: r, thetaStart: o, thetaLength: a }),
                    (t = t || 1),
                    (e = Math.max(3, Math.floor(e) || 8)),
                    (n = Math.max(2, Math.floor(n) || 6)),
                    (i = void 0 !== i ? i : 0),
                    (r = void 0 !== r ? r : 2 * Math.PI),
                    (o = void 0 !== o ? o : 0),
                    (a = void 0 !== a ? a : Math.PI);
                var s,
                    c,
                    l = Math.min(o + a, Math.PI),
                    u = 0,
                    h = [],
                    p = new an(),
                    d = new an(),
                    f = [],
                    m = [],
                    v = [],
                    g = [];
                for (c = 0; c <= n; c++) {
                    var y = [],
                        x = c / n,
                        _ = 0;
                    for (0 == c && 0 == o ? (_ = 0.5 / e) : c == n && l == Math.PI && (_ = -0.5 / e), s = 0; s <= e; s++) {
                        var b = s / e;
                        (p.x = -t * Math.cos(i + b * r) * Math.sin(o + x * a)),
                            (p.y = t * Math.cos(o + x * a)),
                            (p.z = t * Math.sin(i + b * r) * Math.sin(o + x * a)),
                            m.push(p.x, p.y, p.z),
                            d.copy(p).normalize(),
                            v.push(d.x, d.y, d.z),
                            g.push(b + _, 1 - x),
                            y.push(u++);
                    }
                    h.push(y);
                }
                for (c = 0; c < n; c++)
                    for (s = 0; s < e; s++) {
                        var w = h[c][s + 1],
                            M = h[c][s],
                            S = h[c + 1][s],
                            T = h[c + 1][s + 1];
                        (0 !== c || o > 0) && f.push(w, M, T), (c !== n - 1 || l < Math.PI) && f.push(M, S, T);
                    }
                this.setIndex(f), this.setAttribute("position", new Ui(m, 3)), this.setAttribute("normal", new Ui(v, 3)), this.setAttribute("uv", new Ui(g, 2));
            }
            function Lc(t, e, n, i, r, o) {
                wr.call(this),
                    (this.type = "RingGeometry"),
                    (this.parameters = { innerRadius: t, outerRadius: e, thetaSegments: n, phiSegments: i, thetaStart: r, thetaLength: o }),
                    this.fromBufferGeometry(new Cc(t, e, n, i, r, o)),
                    this.mergeVertices();
            }
            function Cc(t, e, n, i, r, o) {
                Qi.call(this),
                    (this.type = "RingBufferGeometry"),
                    (this.parameters = { innerRadius: t, outerRadius: e, thetaSegments: n, phiSegments: i, thetaStart: r, thetaLength: o }),
                    (t = t || 0.5),
                    (e = e || 1),
                    (r = void 0 !== r ? r : 0),
                    (o = void 0 !== o ? o : 2 * Math.PI),
                    (n = void 0 !== n ? Math.max(3, n) : 8);
                var a,
                    s,
                    c,
                    l = [],
                    u = [],
                    h = [],
                    p = [],
                    d = t,
                    f = (e - t) / (i = void 0 !== i ? Math.max(1, i) : 1),
                    m = new an(),
                    v = new Ye();
                for (s = 0; s <= i; s++) {
                    for (c = 0; c <= n; c++) (a = r + (c / n) * o), (m.x = d * Math.cos(a)), (m.y = d * Math.sin(a)), u.push(m.x, m.y, m.z), h.push(0, 0, 1), (v.x = (m.x / e + 1) / 2), (v.y = (m.y / e + 1) / 2), p.push(v.x, v.y);
                    d += f;
                }
                for (s = 0; s < i; s++) {
                    var g = s * (n + 1);
                    for (c = 0; c < n; c++) {
                        var y = (a = c + g),
                            x = a + n + 1,
                            _ = a + n + 2,
                            b = a + 1;
                        l.push(y, x, b), l.push(x, _, b);
                    }
                }
                this.setIndex(l), this.setAttribute("position", new Ui(u, 3)), this.setAttribute("normal", new Ui(h, 3)), this.setAttribute("uv", new Ui(p, 2));
            }
            function Rc(t, e, n, i) {
                wr.call(this), (this.type = "LatheGeometry"), (this.parameters = { points: t, segments: e, phiStart: n, phiLength: i }), this.fromBufferGeometry(new Oc(t, e, n, i)), this.mergeVertices();
            }
            function Oc(t, e, n, i) {
                Qi.call(this),
                    (this.type = "LatheBufferGeometry"),
                    (this.parameters = { points: t, segments: e, phiStart: n, phiLength: i }),
                    (e = Math.floor(e) || 12),
                    (n = n || 0),
                    (i = i || 2 * Math.PI),
                    (i = Xe.clamp(i, 0, 2 * Math.PI));
                var r,
                    o,
                    a,
                    s = [],
                    c = [],
                    l = [],
                    u = 1 / e,
                    h = new an(),
                    p = new Ye();
                for (o = 0; o <= e; o++) {
                    var d = n + o * u * i,
                        f = Math.sin(d),
                        m = Math.cos(d);
                    for (a = 0; a <= t.length - 1; a++) (h.x = t[a].x * f), (h.y = t[a].y), (h.z = t[a].x * m), c.push(h.x, h.y, h.z), (p.x = o / e), (p.y = a / (t.length - 1)), l.push(p.x, p.y);
                }
                for (o = 0; o < e; o++)
                    for (a = 0; a < t.length - 1; a++) {
                        var v = (r = a + o * t.length),
                            g = r + t.length,
                            y = r + t.length + 1,
                            x = r + 1;
                        s.push(v, g, x), s.push(g, y, x);
                    }
                if ((this.setIndex(s), this.setAttribute("position", new Ui(c, 3)), this.setAttribute("uv", new Ui(l, 2)), this.computeVertexNormals(), i === 2 * Math.PI)) {
                    var _ = this.attributes.normal.array,
                        b = new an(),
                        w = new an(),
                        M = new an();
                    for (r = e * t.length * 3, o = 0, a = 0; o < t.length; o++, a += 3)
                        (b.x = _[a + 0]),
                            (b.y = _[a + 1]),
                            (b.z = _[a + 2]),
                            (w.x = _[r + a + 0]),
                            (w.y = _[r + a + 1]),
                            (w.z = _[r + a + 2]),
                            M.addVectors(b, w).normalize(),
                            (_[a + 0] = _[r + a + 0] = M.x),
                            (_[a + 1] = _[r + a + 1] = M.y),
                            (_[a + 2] = _[r + a + 2] = M.z);
                }
            }
            function Dc(t, e) {
                wr.call(this),
                    (this.type = "ShapeGeometry"),
                    "object" == typeof e && (console.warn("THREE.ShapeGeometry: Options parameter has been removed."), (e = e.curveSegments)),
                    (this.parameters = { shapes: t, curveSegments: e }),
                    this.fromBufferGeometry(new Ic(t, e)),
                    this.mergeVertices();
            }
            function Ic(t, e) {
                Qi.call(this), (this.type = "ShapeBufferGeometry"), (this.parameters = { shapes: t, curveSegments: e }), (e = e || 12);
                var n = [],
                    i = [],
                    r = [],
                    o = [],
                    a = 0,
                    s = 0;
                if (!1 === Array.isArray(t)) l(t);
                else for (var c = 0; c < t.length; c++) l(t[c]), this.addGroup(a, s, c), (a += s), (s = 0);
                function l(t) {
                    var a,
                        c,
                        l,
                        u = i.length / 3,
                        h = t.extractPoints(e),
                        p = h.shape,
                        d = h.holes;
                    for (!1 === yc.isClockWise(p) && (p = p.reverse()), a = 0, c = d.length; a < c; a++) (l = d[a]), !0 === yc.isClockWise(l) && (d[a] = l.reverse());
                    var f = yc.triangulateShape(p, d);
                    for (a = 0, c = d.length; a < c; a++) (l = d[a]), (p = p.concat(l));
                    for (a = 0, c = p.length; a < c; a++) {
                        var m = p[a];
                        i.push(m.x, m.y, 0), r.push(0, 0, 1), o.push(m.x, m.y);
                    }
                    for (a = 0, c = f.length; a < c; a++) {
                        var v = f[a],
                            g = v[0] + u,
                            y = v[1] + u,
                            x = v[2] + u;
                        n.push(g, y, x), (s += 3);
                    }
                }
                this.setIndex(n), this.setAttribute("position", new Ui(i, 3)), this.setAttribute("normal", new Ui(r, 3)), this.setAttribute("uv", new Ui(o, 2));
            }
            function Nc(t, e) {
                if (((e.shapes = []), Array.isArray(t)))
                    for (var n = 0, i = t.length; n < i; n++) {
                        var r = t[n];
                        e.shapes.push(r.uuid);
                    }
                else e.shapes.push(t.uuid);
                return e;
            }
            function kc(t, e) {
                Qi.call(this), (this.type = "EdgesGeometry"), (this.parameters = { thresholdAngle: e }), (e = void 0 !== e ? e : 1);
                var n,
                    i,
                    r,
                    o,
                    a = [],
                    s = Math.cos(Xe.DEG2RAD * e),
                    c = [0, 0],
                    l = {},
                    u = ["a", "b", "c"];
                t.isBufferGeometry ? (o = new wr()).fromBufferGeometry(t) : (o = t.clone()), o.mergeVertices(), o.computeFaceNormals();
                for (var h = o.vertices, p = o.faces, d = 0, f = p.length; d < f; d++)
                    for (var m = p[d], v = 0; v < 3; v++)
                        (n = m[u[v]]), (i = m[u[(v + 1) % 3]]), (c[0] = Math.min(n, i)), (c[1] = Math.max(n, i)), void 0 === l[(r = c[0] + "," + c[1])] ? (l[r] = { index1: c[0], index2: c[1], face1: d, face2: void 0 }) : (l[r].face2 = d);
                for (r in l) {
                    var g = l[r];
                    if (void 0 === g.face2 || p[g.face1].normal.dot(p[g.face2].normal) <= s) {
                        var y = h[g.index1];
                        a.push(y.x, y.y, y.z), (y = h[g.index2]), a.push(y.x, y.y, y.z);
                    }
                }
                this.setAttribute("position", new Ui(a, 3));
            }
            function Bc(t, e, n, i, r, o, a, s) {
                wr.call(this),
                    (this.type = "CylinderGeometry"),
                    (this.parameters = { radiusTop: t, radiusBottom: e, height: n, radialSegments: i, heightSegments: r, openEnded: o, thetaStart: a, thetaLength: s }),
                    this.fromBufferGeometry(new zc(t, e, n, i, r, o, a, s)),
                    this.mergeVertices();
            }
            function zc(t, e, n, i, r, o, a, s) {
                Qi.call(this), (this.type = "CylinderBufferGeometry"), (this.parameters = { radiusTop: t, radiusBottom: e, height: n, radialSegments: i, heightSegments: r, openEnded: o, thetaStart: a, thetaLength: s });
                var c = this;
                (t = void 0 !== t ? t : 1), (e = void 0 !== e ? e : 1), (n = n || 1), (i = Math.floor(i) || 8), (r = Math.floor(r) || 1), (o = void 0 !== o && o), (a = void 0 !== a ? a : 0), (s = void 0 !== s ? s : 2 * Math.PI);
                var l = [],
                    u = [],
                    h = [],
                    p = [],
                    d = 0,
                    f = [],
                    m = n / 2,
                    v = 0;
                function g(n) {
                    var r,
                        o,
                        f,
                        g = new Ye(),
                        y = new an(),
                        x = 0,
                        _ = !0 === n ? t : e,
                        b = !0 === n ? 1 : -1;
                    for (o = d, r = 1; r <= i; r++) u.push(0, m * b, 0), h.push(0, b, 0), p.push(0.5, 0.5), d++;
                    for (f = d, r = 0; r <= i; r++) {
                        var w = (r / i) * s + a,
                            M = Math.cos(w),
                            S = Math.sin(w);
                        (y.x = _ * S), (y.y = m * b), (y.z = _ * M), u.push(y.x, y.y, y.z), h.push(0, b, 0), (g.x = 0.5 * M + 0.5), (g.y = 0.5 * S * b + 0.5), p.push(g.x, g.y), d++;
                    }
                    for (r = 0; r < i; r++) {
                        var T = o + r,
                            E = f + r;
                        !0 === n ? l.push(E, E + 1, T) : l.push(E + 1, E, T), (x += 3);
                    }
                    c.addGroup(v, x, !0 === n ? 1 : 2), (v += x);
                }
                !(function () {
                    var o,
                        g,
                        y = new an(),
                        x = new an(),
                        _ = 0,
                        b = (e - t) / n;
                    for (g = 0; g <= r; g++) {
                        var w = [],
                            M = g / r,
                            S = M * (e - t) + t;
                        for (o = 0; o <= i; o++) {
                            var T = o / i,
                                E = T * s + a,
                                A = Math.sin(E),
                                P = Math.cos(E);
                            (x.x = S * A), (x.y = -M * n + m), (x.z = S * P), u.push(x.x, x.y, x.z), y.set(A, b, P).normalize(), h.push(y.x, y.y, y.z), p.push(T, 1 - M), w.push(d++);
                        }
                        f.push(w);
                    }
                    for (o = 0; o < i; o++)
                        for (g = 0; g < r; g++) {
                            var L = f[g][o],
                                C = f[g + 1][o],
                                R = f[g + 1][o + 1],
                                O = f[g][o + 1];
                            l.push(L, C, O), l.push(C, R, O), (_ += 6);
                        }
                    c.addGroup(v, _, 0), (v += _);
                })(),
                    !1 === o && (t > 0 && g(!0), e > 0 && g(!1)),
                    this.setIndex(l),
                    this.setAttribute("position", new Ui(u, 3)),
                    this.setAttribute("normal", new Ui(h, 3)),
                    this.setAttribute("uv", new Ui(p, 2));
            }
            function Fc(t, e, n, i, r, o, a) {
                Bc.call(this, 0, t, e, n, i, r, o, a), (this.type = "ConeGeometry"), (this.parameters = { radius: t, height: e, radialSegments: n, heightSegments: i, openEnded: r, thetaStart: o, thetaLength: a });
            }
            function Uc(t, e, n, i, r, o, a) {
                zc.call(this, 0, t, e, n, i, r, o, a), (this.type = "ConeBufferGeometry"), (this.parameters = { radius: t, height: e, radialSegments: n, heightSegments: i, openEnded: r, thetaStart: o, thetaLength: a });
            }
            function jc(t, e, n, i) {
                wr.call(this), (this.type = "CircleGeometry"), (this.parameters = { radius: t, segments: e, thetaStart: n, thetaLength: i }), this.fromBufferGeometry(new Gc(t, e, n, i)), this.mergeVertices();
            }
            function Gc(t, e, n, i) {
                Qi.call(this),
                    (this.type = "CircleBufferGeometry"),
                    (this.parameters = { radius: t, segments: e, thetaStart: n, thetaLength: i }),
                    (t = t || 1),
                    (e = void 0 !== e ? Math.max(3, e) : 8),
                    (n = void 0 !== n ? n : 0),
                    (i = void 0 !== i ? i : 2 * Math.PI);
                var r,
                    o,
                    a = [],
                    s = [],
                    c = [],
                    l = [],
                    u = new an(),
                    h = new Ye();
                for (s.push(0, 0, 0), c.push(0, 0, 1), l.push(0.5, 0.5), o = 0, r = 3; o <= e; o++, r += 3) {
                    var p = n + (o / e) * i;
                    (u.x = t * Math.cos(p)), (u.y = t * Math.sin(p)), s.push(u.x, u.y, u.z), c.push(0, 0, 1), (h.x = (s[r] / t + 1) / 2), (h.y = (s[r + 1] / t + 1) / 2), l.push(h.x, h.y);
                }
                for (r = 1; r <= e; r++) a.push(r, r + 1, 0);
                this.setIndex(a), this.setAttribute("position", new Ui(s, 3)), this.setAttribute("normal", new Ui(c, 3)), this.setAttribute("uv", new Ui(l, 2));
            }
            (Tc.prototype = Object.create(wr.prototype)),
                (Tc.prototype.constructor = Tc),
                (Ec.prototype = Object.create(wc.prototype)),
                (Ec.prototype.constructor = Ec),
                (Ac.prototype = Object.create(wr.prototype)),
                (Ac.prototype.constructor = Ac),
                (Pc.prototype = Object.create(Qi.prototype)),
                (Pc.prototype.constructor = Pc),
                (Lc.prototype = Object.create(wr.prototype)),
                (Lc.prototype.constructor = Lc),
                (Cc.prototype = Object.create(Qi.prototype)),
                (Cc.prototype.constructor = Cc),
                (Rc.prototype = Object.create(wr.prototype)),
                (Rc.prototype.constructor = Rc),
                (Oc.prototype = Object.create(Qi.prototype)),
                (Oc.prototype.constructor = Oc),
                (Dc.prototype = Object.create(wr.prototype)),
                (Dc.prototype.constructor = Dc),
                (Dc.prototype.toJSON = function () {
                    var t = wr.prototype.toJSON.call(this);
                    return Nc(this.parameters.shapes, t);
                }),
                (Ic.prototype = Object.create(Qi.prototype)),
                (Ic.prototype.constructor = Ic),
                (Ic.prototype.toJSON = function () {
                    var t = Qi.prototype.toJSON.call(this);
                    return Nc(this.parameters.shapes, t);
                }),
                (kc.prototype = Object.create(Qi.prototype)),
                (kc.prototype.constructor = kc),
                (Bc.prototype = Object.create(wr.prototype)),
                (Bc.prototype.constructor = Bc),
                (zc.prototype = Object.create(Qi.prototype)),
                (zc.prototype.constructor = zc),
                (Fc.prototype = Object.create(Bc.prototype)),
                (Fc.prototype.constructor = Fc),
                (Uc.prototype = Object.create(zc.prototype)),
                (Uc.prototype.constructor = Uc),
                (jc.prototype = Object.create(wr.prototype)),
                (jc.prototype.constructor = jc),
                (Gc.prototype = Object.create(Qi.prototype)),
                (Gc.prototype.constructor = Gc);
            var Hc = Object.freeze({
                __proto__: null,
                WireframeGeometry: Rs,
                ParametricGeometry: Os,
                ParametricBufferGeometry: Ds,
                TetrahedronGeometry: ks,
                TetrahedronBufferGeometry: Bs,
                OctahedronGeometry: zs,
                OctahedronBufferGeometry: Fs,
                IcosahedronGeometry: Us,
                IcosahedronBufferGeometry: js,
                DodecahedronGeometry: Gs,
                DodecahedronBufferGeometry: Hs,
                PolyhedronGeometry: Is,
                PolyhedronBufferGeometry: Ns,
                TubeGeometry: Vs,
                TubeBufferGeometry: Ws,
                TorusKnotGeometry: qs,
                TorusKnotBufferGeometry: Xs,
                TorusGeometry: Ys,
                TorusBufferGeometry: Zs,
                TextGeometry: Tc,
                TextBufferGeometry: Ec,
                SphereGeometry: Ac,
                SphereBufferGeometry: Pc,
                RingGeometry: Lc,
                RingBufferGeometry: Cc,
                PlaneGeometry: Hr,
                PlaneBufferGeometry: Vr,
                LatheGeometry: Rc,
                LatheBufferGeometry: Oc,
                ShapeGeometry: Dc,
                ShapeBufferGeometry: Ic,
                ExtrudeGeometry: bc,
                ExtrudeBufferGeometry: wc,
                EdgesGeometry: kc,
                ConeGeometry: Fc,
                ConeBufferGeometry: Uc,
                CylinderGeometry: Bc,
                CylinderBufferGeometry: zc,
                CircleGeometry: jc,
                CircleBufferGeometry: Gc,
                BoxGeometry: class extends wr {
                    constructor(t, e, n, i, r, o) {
                        super(),
                            (this.type = "BoxGeometry"),
                            (this.parameters = { width: t, height: e, depth: n, widthSegments: i, heightSegments: r, depthSegments: o }),
                            this.fromBufferGeometry(new Mr(t, e, n, i, r, o)),
                            this.mergeVertices();
                    }
                },
                BoxBufferGeometry: Mr,
            });
            function Vc(t) {
                Li.call(this), (this.type = "ShadowMaterial"), (this.color = new Mi(0)), (this.transparent = !0), this.setValues(t);
            }
            function Wc(t) {
                Lr.call(this, t), (this.type = "RawShaderMaterial");
            }
            function qc(t) {
                Li.call(this),
                    (this.defines = { STANDARD: "" }),
                    (this.type = "MeshStandardMaterial"),
                    (this.color = new Mi(16777215)),
                    (this.roughness = 1),
                    (this.metalness = 0),
                    (this.map = null),
                    (this.lightMap = null),
                    (this.lightMapIntensity = 1),
                    (this.aoMap = null),
                    (this.aoMapIntensity = 1),
                    (this.emissive = new Mi(0)),
                    (this.emissiveIntensity = 1),
                    (this.emissiveMap = null),
                    (this.bumpMap = null),
                    (this.bumpScale = 1),
                    (this.normalMap = null),
                    (this.normalMapType = Be),
                    (this.normalScale = new Ye(1, 1)),
                    (this.displacementMap = null),
                    (this.displacementScale = 1),
                    (this.displacementBias = 0),
                    (this.roughnessMap = null),
                    (this.metalnessMap = null),
                    (this.alphaMap = null),
                    (this.envMap = null),
                    (this.envMapIntensity = 1),
                    (this.refractionRatio = 0.98),
                    (this.wireframe = !1),
                    (this.wireframeLinewidth = 1),
                    (this.wireframeLinecap = "round"),
                    (this.wireframeLinejoin = "round"),
                    (this.skinning = !1),
                    (this.morphTargets = !1),
                    (this.morphNormals = !1),
                    (this.vertexTangents = !1),
                    this.setValues(t);
            }
            function Xc(t) {
                qc.call(this),
                    (this.defines = { STANDARD: "", PHYSICAL: "" }),
                    (this.type = "MeshPhysicalMaterial"),
                    (this.clearcoat = 0),
                    (this.clearcoatMap = null),
                    (this.clearcoatRoughness = 0),
                    (this.clearcoatRoughnessMap = null),
                    (this.clearcoatNormalScale = new Ye(1, 1)),
                    (this.clearcoatNormalMap = null),
                    (this.reflectivity = 0.5),
                    (this.sheen = null),
                    (this.transparency = 0),
                    this.setValues(t);
            }
            function Yc(t) {
                Li.call(this),
                    (this.type = "MeshPhongMaterial"),
                    (this.color = new Mi(16777215)),
                    (this.specular = new Mi(1118481)),
                    (this.shininess = 30),
                    (this.map = null),
                    (this.lightMap = null),
                    (this.lightMapIntensity = 1),
                    (this.aoMap = null),
                    (this.aoMapIntensity = 1),
                    (this.emissive = new Mi(0)),
                    (this.emissiveIntensity = 1),
                    (this.emissiveMap = null),
                    (this.bumpMap = null),
                    (this.bumpScale = 1),
                    (this.normalMap = null),
                    (this.normalMapType = Be),
                    (this.normalScale = new Ye(1, 1)),
                    (this.displacementMap = null),
                    (this.displacementScale = 1),
                    (this.displacementBias = 0),
                    (this.specularMap = null),
                    (this.alphaMap = null),
                    (this.envMap = null),
                    (this.combine = G),
                    (this.reflectivity = 1),
                    (this.refractionRatio = 0.98),
                    (this.wireframe = !1),
                    (this.wireframeLinewidth = 1),
                    (this.wireframeLinecap = "round"),
                    (this.wireframeLinejoin = "round"),
                    (this.skinning = !1),
                    (this.morphTargets = !1),
                    (this.morphNormals = !1),
                    this.setValues(t);
            }
            function Zc(t) {
                Li.call(this),
                    (this.defines = { TOON: "" }),
                    (this.type = "MeshToonMaterial"),
                    (this.color = new Mi(16777215)),
                    (this.specular = new Mi(1118481)),
                    (this.shininess = 30),
                    (this.map = null),
                    (this.gradientMap = null),
                    (this.lightMap = null),
                    (this.lightMapIntensity = 1),
                    (this.aoMap = null),
                    (this.aoMapIntensity = 1),
                    (this.emissive = new Mi(0)),
                    (this.emissiveIntensity = 1),
                    (this.emissiveMap = null),
                    (this.bumpMap = null),
                    (this.bumpScale = 1),
                    (this.normalMap = null),
                    (this.normalMapType = Be),
                    (this.normalScale = new Ye(1, 1)),
                    (this.displacementMap = null),
                    (this.displacementScale = 1),
                    (this.displacementBias = 0),
                    (this.specularMap = null),
                    (this.alphaMap = null),
                    (this.wireframe = !1),
                    (this.wireframeLinewidth = 1),
                    (this.wireframeLinecap = "round"),
                    (this.wireframeLinejoin = "round"),
                    (this.skinning = !1),
                    (this.morphTargets = !1),
                    (this.morphNormals = !1),
                    this.setValues(t);
            }
            function Jc(t) {
                Li.call(this),
                    (this.type = "MeshNormalMaterial"),
                    (this.bumpMap = null),
                    (this.bumpScale = 1),
                    (this.normalMap = null),
                    (this.normalMapType = Be),
                    (this.normalScale = new Ye(1, 1)),
                    (this.displacementMap = null),
                    (this.displacementScale = 1),
                    (this.displacementBias = 0),
                    (this.wireframe = !1),
                    (this.wireframeLinewidth = 1),
                    (this.fog = !1),
                    (this.skinning = !1),
                    (this.morphTargets = !1),
                    (this.morphNormals = !1),
                    this.setValues(t);
            }
            function Qc(t) {
                Li.call(this),
                    (this.type = "MeshLambertMaterial"),
                    (this.color = new Mi(16777215)),
                    (this.map = null),
                    (this.lightMap = null),
                    (this.lightMapIntensity = 1),
                    (this.aoMap = null),
                    (this.aoMapIntensity = 1),
                    (this.emissive = new Mi(0)),
                    (this.emissiveIntensity = 1),
                    (this.emissiveMap = null),
                    (this.specularMap = null),
                    (this.alphaMap = null),
                    (this.envMap = null),
                    (this.combine = G),
                    (this.reflectivity = 1),
                    (this.refractionRatio = 0.98),
                    (this.wireframe = !1),
                    (this.wireframeLinewidth = 1),
                    (this.wireframeLinecap = "round"),
                    (this.wireframeLinejoin = "round"),
                    (this.skinning = !1),
                    (this.morphTargets = !1),
                    (this.morphNormals = !1),
                    this.setValues(t);
            }
            function Kc(t) {
                Li.call(this),
                    (this.defines = { MATCAP: "" }),
                    (this.type = "MeshMatcapMaterial"),
                    (this.color = new Mi(16777215)),
                    (this.matcap = null),
                    (this.map = null),
                    (this.bumpMap = null),
                    (this.bumpScale = 1),
                    (this.normalMap = null),
                    (this.normalMapType = Be),
                    (this.normalScale = new Ye(1, 1)),
                    (this.displacementMap = null),
                    (this.displacementScale = 1),
                    (this.displacementBias = 0),
                    (this.alphaMap = null),
                    (this.skinning = !1),
                    (this.morphTargets = !1),
                    (this.morphNormals = !1),
                    this.setValues(t);
            }
            function $c(t) {
                ls.call(this), (this.type = "LineDashedMaterial"), (this.scale = 1), (this.dashSize = 3), (this.gapSize = 1), this.setValues(t);
            }
            (Vc.prototype = Object.create(Li.prototype)),
                (Vc.prototype.constructor = Vc),
                (Vc.prototype.isShadowMaterial = !0),
                (Vc.prototype.copy = function (t) {
                    return Li.prototype.copy.call(this, t), this.color.copy(t.color), this;
                }),
                (Wc.prototype = Object.create(Lr.prototype)),
                (Wc.prototype.constructor = Wc),
                (Wc.prototype.isRawShaderMaterial = !0),
                (qc.prototype = Object.create(Li.prototype)),
                (qc.prototype.constructor = qc),
                (qc.prototype.isMeshStandardMaterial = !0),
                (qc.prototype.copy = function (t) {
                    return (
                        Li.prototype.copy.call(this, t),
                        (this.defines = { STANDARD: "" }),
                        this.color.copy(t.color),
                        (this.roughness = t.roughness),
                        (this.metalness = t.metalness),
                        (this.map = t.map),
                        (this.lightMap = t.lightMap),
                        (this.lightMapIntensity = t.lightMapIntensity),
                        (this.aoMap = t.aoMap),
                        (this.aoMapIntensity = t.aoMapIntensity),
                        this.emissive.copy(t.emissive),
                        (this.emissiveMap = t.emissiveMap),
                        (this.emissiveIntensity = t.emissiveIntensity),
                        (this.bumpMap = t.bumpMap),
                        (this.bumpScale = t.bumpScale),
                        (this.normalMap = t.normalMap),
                        (this.normalMapType = t.normalMapType),
                        this.normalScale.copy(t.normalScale),
                        (this.displacementMap = t.displacementMap),
                        (this.displacementScale = t.displacementScale),
                        (this.displacementBias = t.displacementBias),
                        (this.roughnessMap = t.roughnessMap),
                        (this.metalnessMap = t.metalnessMap),
                        (this.alphaMap = t.alphaMap),
                        (this.envMap = t.envMap),
                        (this.envMapIntensity = t.envMapIntensity),
                        (this.refractionRatio = t.refractionRatio),
                        (this.wireframe = t.wireframe),
                        (this.wireframeLinewidth = t.wireframeLinewidth),
                        (this.wireframeLinecap = t.wireframeLinecap),
                        (this.wireframeLinejoin = t.wireframeLinejoin),
                        (this.skinning = t.skinning),
                        (this.morphTargets = t.morphTargets),
                        (this.morphNormals = t.morphNormals),
                        (this.vertexTangents = t.vertexTangents),
                        this
                    );
                }),
                (Xc.prototype = Object.create(qc.prototype)),
                (Xc.prototype.constructor = Xc),
                (Xc.prototype.isMeshPhysicalMaterial = !0),
                (Xc.prototype.copy = function (t) {
                    return (
                        qc.prototype.copy.call(this, t),
                        (this.defines = { STANDARD: "", PHYSICAL: "" }),
                        (this.clearcoat = t.clearcoat),
                        (this.clearcoatMap = t.clearcoatMap),
                        (this.clearcoatRoughness = t.clearcoatRoughness),
                        (this.clearcoatRoughnessMap = t.clearcoatRoughnessMap),
                        (this.clearcoatNormalMap = t.clearcoatNormalMap),
                        this.clearcoatNormalScale.copy(t.clearcoatNormalScale),
                        (this.reflectivity = t.reflectivity),
                        t.sheen ? (this.sheen = (this.sheen || new Mi()).copy(t.sheen)) : (this.sheen = null),
                        (this.transparency = t.transparency),
                        this
                    );
                }),
                (Yc.prototype = Object.create(Li.prototype)),
                (Yc.prototype.constructor = Yc),
                (Yc.prototype.isMeshPhongMaterial = !0),
                (Yc.prototype.copy = function (t) {
                    return (
                        Li.prototype.copy.call(this, t),
                        this.color.copy(t.color),
                        this.specular.copy(t.specular),
                        (this.shininess = t.shininess),
                        (this.map = t.map),
                        (this.lightMap = t.lightMap),
                        (this.lightMapIntensity = t.lightMapIntensity),
                        (this.aoMap = t.aoMap),
                        (this.aoMapIntensity = t.aoMapIntensity),
                        this.emissive.copy(t.emissive),
                        (this.emissiveMap = t.emissiveMap),
                        (this.emissiveIntensity = t.emissiveIntensity),
                        (this.bumpMap = t.bumpMap),
                        (this.bumpScale = t.bumpScale),
                        (this.normalMap = t.normalMap),
                        (this.normalMapType = t.normalMapType),
                        this.normalScale.copy(t.normalScale),
                        (this.displacementMap = t.displacementMap),
                        (this.displacementScale = t.displacementScale),
                        (this.displacementBias = t.displacementBias),
                        (this.specularMap = t.specularMap),
                        (this.alphaMap = t.alphaMap),
                        (this.envMap = t.envMap),
                        (this.combine = t.combine),
                        (this.reflectivity = t.reflectivity),
                        (this.refractionRatio = t.refractionRatio),
                        (this.wireframe = t.wireframe),
                        (this.wireframeLinewidth = t.wireframeLinewidth),
                        (this.wireframeLinecap = t.wireframeLinecap),
                        (this.wireframeLinejoin = t.wireframeLinejoin),
                        (this.skinning = t.skinning),
                        (this.morphTargets = t.morphTargets),
                        (this.morphNormals = t.morphNormals),
                        this
                    );
                }),
                (Zc.prototype = Object.create(Li.prototype)),
                (Zc.prototype.constructor = Zc),
                (Zc.prototype.isMeshToonMaterial = !0),
                (Zc.prototype.copy = function (t) {
                    return (
                        Li.prototype.copy.call(this, t),
                        this.color.copy(t.color),
                        this.specular.copy(t.specular),
                        (this.shininess = t.shininess),
                        (this.map = t.map),
                        (this.gradientMap = t.gradientMap),
                        (this.lightMap = t.lightMap),
                        (this.lightMapIntensity = t.lightMapIntensity),
                        (this.aoMap = t.aoMap),
                        (this.aoMapIntensity = t.aoMapIntensity),
                        this.emissive.copy(t.emissive),
                        (this.emissiveMap = t.emissiveMap),
                        (this.emissiveIntensity = t.emissiveIntensity),
                        (this.bumpMap = t.bumpMap),
                        (this.bumpScale = t.bumpScale),
                        (this.normalMap = t.normalMap),
                        (this.normalMapType = t.normalMapType),
                        this.normalScale.copy(t.normalScale),
                        (this.displacementMap = t.displacementMap),
                        (this.displacementScale = t.displacementScale),
                        (this.displacementBias = t.displacementBias),
                        (this.specularMap = t.specularMap),
                        (this.alphaMap = t.alphaMap),
                        (this.wireframe = t.wireframe),
                        (this.wireframeLinewidth = t.wireframeLinewidth),
                        (this.wireframeLinecap = t.wireframeLinecap),
                        (this.wireframeLinejoin = t.wireframeLinejoin),
                        (this.skinning = t.skinning),
                        (this.morphTargets = t.morphTargets),
                        (this.morphNormals = t.morphNormals),
                        this
                    );
                }),
                (Jc.prototype = Object.create(Li.prototype)),
                (Jc.prototype.constructor = Jc),
                (Jc.prototype.isMeshNormalMaterial = !0),
                (Jc.prototype.copy = function (t) {
                    return (
                        Li.prototype.copy.call(this, t),
                        (this.bumpMap = t.bumpMap),
                        (this.bumpScale = t.bumpScale),
                        (this.normalMap = t.normalMap),
                        (this.normalMapType = t.normalMapType),
                        this.normalScale.copy(t.normalScale),
                        (this.displacementMap = t.displacementMap),
                        (this.displacementScale = t.displacementScale),
                        (this.displacementBias = t.displacementBias),
                        (this.wireframe = t.wireframe),
                        (this.wireframeLinewidth = t.wireframeLinewidth),
                        (this.skinning = t.skinning),
                        (this.morphTargets = t.morphTargets),
                        (this.morphNormals = t.morphNormals),
                        this
                    );
                }),
                (Qc.prototype = Object.create(Li.prototype)),
                (Qc.prototype.constructor = Qc),
                (Qc.prototype.isMeshLambertMaterial = !0),
                (Qc.prototype.copy = function (t) {
                    return (
                        Li.prototype.copy.call(this, t),
                        this.color.copy(t.color),
                        (this.map = t.map),
                        (this.lightMap = t.lightMap),
                        (this.lightMapIntensity = t.lightMapIntensity),
                        (this.aoMap = t.aoMap),
                        (this.aoMapIntensity = t.aoMapIntensity),
                        this.emissive.copy(t.emissive),
                        (this.emissiveMap = t.emissiveMap),
                        (this.emissiveIntensity = t.emissiveIntensity),
                        (this.specularMap = t.specularMap),
                        (this.alphaMap = t.alphaMap),
                        (this.envMap = t.envMap),
                        (this.combine = t.combine),
                        (this.reflectivity = t.reflectivity),
                        (this.refractionRatio = t.refractionRatio),
                        (this.wireframe = t.wireframe),
                        (this.wireframeLinewidth = t.wireframeLinewidth),
                        (this.wireframeLinecap = t.wireframeLinecap),
                        (this.wireframeLinejoin = t.wireframeLinejoin),
                        (this.skinning = t.skinning),
                        (this.morphTargets = t.morphTargets),
                        (this.morphNormals = t.morphNormals),
                        this
                    );
                }),
                (Kc.prototype = Object.create(Li.prototype)),
                (Kc.prototype.constructor = Kc),
                (Kc.prototype.isMeshMatcapMaterial = !0),
                (Kc.prototype.copy = function (t) {
                    return (
                        Li.prototype.copy.call(this, t),
                        (this.defines = { MATCAP: "" }),
                        this.color.copy(t.color),
                        (this.matcap = t.matcap),
                        (this.map = t.map),
                        (this.bumpMap = t.bumpMap),
                        (this.bumpScale = t.bumpScale),
                        (this.normalMap = t.normalMap),
                        (this.normalMapType = t.normalMapType),
                        this.normalScale.copy(t.normalScale),
                        (this.displacementMap = t.displacementMap),
                        (this.displacementScale = t.displacementScale),
                        (this.displacementBias = t.displacementBias),
                        (this.alphaMap = t.alphaMap),
                        (this.skinning = t.skinning),
                        (this.morphTargets = t.morphTargets),
                        (this.morphNormals = t.morphNormals),
                        this
                    );
                }),
                ($c.prototype = Object.create(ls.prototype)),
                ($c.prototype.constructor = $c),
                ($c.prototype.isLineDashedMaterial = !0),
                ($c.prototype.copy = function (t) {
                    return ls.prototype.copy.call(this, t), (this.scale = t.scale), (this.dashSize = t.dashSize), (this.gapSize = t.gapSize), this;
                });
            var tl = Object.freeze({
                    __proto__: null,
                    ShadowMaterial: Vc,
                    SpriteMaterial: Na,
                    RawShaderMaterial: Wc,
                    ShaderMaterial: Lr,
                    PointsMaterial: _s,
                    MeshPhysicalMaterial: Xc,
                    MeshStandardMaterial: qc,
                    MeshPhongMaterial: Yc,
                    MeshToonMaterial: Zc,
                    MeshNormalMaterial: Jc,
                    MeshLambertMaterial: Qc,
                    MeshDepthMaterial: xa,
                    MeshDistanceMaterial: _a,
                    MeshBasicMaterial: Ci,
                    MeshMatcapMaterial: Kc,
                    LineDashedMaterial: $c,
                    LineBasicMaterial: ls,
                    Material: Li,
                }),
                el = {
                    arraySlice: function (t, e, n) {
                        return el.isTypedArray(t) ? new t.constructor(t.subarray(e, void 0 !== n ? n : t.length)) : t.slice(e, n);
                    },
                    convertArray: function (t, e, n) {
                        return !t || (!n && t.constructor === e) ? t : "number" == typeof e.BYTES_PER_ELEMENT ? new e(t) : Array.prototype.slice.call(t);
                    },
                    isTypedArray: function (t) {
                        return ArrayBuffer.isView(t) && !(t instanceof DataView);
                    },
                    getKeyframeOrder: function (t) {
                        for (var e = t.length, n = new Array(e), i = 0; i !== e; ++i) n[i] = i;
                        return (
                            n.sort(function (e, n) {
                                return t[e] - t[n];
                            }),
                            n
                        );
                    },
                    sortedArray: function (t, e, n) {
                        for (var i = t.length, r = new t.constructor(i), o = 0, a = 0; a !== i; ++o) for (var s = n[o] * e, c = 0; c !== e; ++c) r[a++] = t[s + c];
                        return r;
                    },
                    flattenJSON: function (t, e, n, i) {
                        for (var r = 1, o = t[0]; void 0 !== o && void 0 === o[i]; ) o = t[r++];
                        if (void 0 !== o) {
                            var a = o[i];
                            if (void 0 !== a)
                                if (Array.isArray(a))
                                    do {
                                        void 0 !== (a = o[i]) && (e.push(o.time), n.push.apply(n, a)), (o = t[r++]);
                                    } while (void 0 !== o);
                                else if (void 0 !== a.toArray)
                                    do {
                                        void 0 !== (a = o[i]) && (e.push(o.time), a.toArray(n, n.length)), (o = t[r++]);
                                    } while (void 0 !== o);
                                else
                                    do {
                                        void 0 !== (a = o[i]) && (e.push(o.time), n.push(a)), (o = t[r++]);
                                    } while (void 0 !== o);
                        }
                    },
                    subclip: function (t, e, n, i, r) {
                        r = r || 30;
                        var o = t.clone();
                        o.name = e;
                        for (var a = [], s = 0; s < o.tracks.length; ++s) {
                            for (var c = o.tracks[s], l = c.getValueSize(), u = [], h = [], p = 0; p < c.times.length; ++p) {
                                var d = c.times[p] * r;
                                if (!(d < n || d >= i)) {
                                    u.push(c.times[p]);
                                    for (var f = 0; f < l; ++f) h.push(c.values[p * l + f]);
                                }
                            }
                            0 !== u.length && ((c.times = el.convertArray(u, c.times.constructor)), (c.values = el.convertArray(h, c.values.constructor)), a.push(c));
                        }
                        o.tracks = a;
                        var m = 1 / 0;
                        for (s = 0; s < o.tracks.length; ++s) m > o.tracks[s].times[0] && (m = o.tracks[s].times[0]);
                        for (s = 0; s < o.tracks.length; ++s) o.tracks[s].shift(-1 * m);
                        return o.resetDuration(), o;
                    },
                };
            function nl(t, e, n, i) {
                (this.parameterPositions = t), (this._cachedIndex = 0), (this.resultBuffer = void 0 !== i ? i : new e.constructor(n)), (this.sampleValues = e), (this.valueSize = n);
            }
            function il(t, e, n, i) {
                nl.call(this, t, e, n, i), (this._weightPrev = -0), (this._offsetPrev = -0), (this._weightNext = -0), (this._offsetNext = -0);
            }
            function rl(t, e, n, i) {
                nl.call(this, t, e, n, i);
            }
            function ol(t, e, n, i) {
                nl.call(this, t, e, n, i);
            }
            function al(t, e, n, i) {
                if (void 0 === t) throw new Error("THREE.KeyframeTrack: track name is undefined");
                if (void 0 === e || 0 === e.length) throw new Error("THREE.KeyframeTrack: no keyframes in track named " + t);
                (this.name = t), (this.times = el.convertArray(e, this.TimeBufferType)), (this.values = el.convertArray(n, this.ValueBufferType)), this.setInterpolation(i || this.DefaultInterpolation);
            }
            function sl(t, e, n) {
                al.call(this, t, e, n);
            }
            function cl(t, e, n, i) {
                al.call(this, t, e, n, i);
            }
            function ll(t, e, n, i) {
                al.call(this, t, e, n, i);
            }
            function ul(t, e, n, i) {
                nl.call(this, t, e, n, i);
            }
            function hl(t, e, n, i) {
                al.call(this, t, e, n, i);
            }
            function pl(t, e, n, i) {
                al.call(this, t, e, n, i);
            }
            function dl(t, e, n, i) {
                al.call(this, t, e, n, i);
            }
            function fl(t, e, n) {
                (this.name = t), (this.tracks = n), (this.duration = void 0 !== e ? e : -1), (this.uuid = Xe.generateUUID()), this.duration < 0 && this.resetDuration();
            }
            function ml(t) {
                if (void 0 === t.type) throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
                var e = (function (t) {
                    switch (t.toLowerCase()) {
                        case "scalar":
                        case "double":
                        case "float":
                        case "number":
                        case "integer":
                            return ll;
                        case "vector":
                        case "vector2":
                        case "vector3":
                        case "vector4":
                            return dl;
                        case "color":
                            return cl;
                        case "quaternion":
                            return hl;
                        case "bool":
                        case "boolean":
                            return sl;
                        case "string":
                            return pl;
                    }
                    throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + t);
                })(t.type);
                if (void 0 === t.times) {
                    var n = [],
                        i = [];
                    el.flattenJSON(t.keys, n, i, "value"), (t.times = n), (t.values = i);
                }
                return void 0 !== e.parse ? e.parse(t) : new e(t.name, t.times, t.values, t.interpolation);
            }
            Object.assign(nl.prototype, {
                evaluate: function (t) {
                    var e = this.parameterPositions,
                        n = this._cachedIndex,
                        i = e[n],
                        r = e[n - 1];
                    t: {
                        e: {
                            var o;
                            n: {
                                i: if (!(t < i)) {
                                    for (var a = n + 2; ; ) {
                                        if (void 0 === i) {
                                            if (t < r) break i;
                                            return (n = e.length), (this._cachedIndex = n), this.afterEnd_(n - 1, t, r);
                                        }
                                        if (n === a) break;
                                        if (((r = i), t < (i = e[++n]))) break e;
                                    }
                                    o = e.length;
                                    break n;
                                }
                                if (t >= r) break t;
                                var s = e[1];
                                t < s && ((n = 2), (r = s));
                                for (a = n - 2; ; ) {
                                    if (void 0 === r) return (this._cachedIndex = 0), this.beforeStart_(0, t, i);
                                    if (n === a) break;
                                    if (((i = r), t >= (r = e[--n - 1]))) break e;
                                }
                                (o = n), (n = 0);
                            }
                            for (; n < o; ) {
                                var c = (n + o) >>> 1;
                                t < e[c] ? (o = c) : (n = c + 1);
                            }
                            if (((i = e[n]), void 0 === (r = e[n - 1]))) return (this._cachedIndex = 0), this.beforeStart_(0, t, i);
                            if (void 0 === i) return (n = e.length), (this._cachedIndex = n), this.afterEnd_(n - 1, r, t);
                        }
                        (this._cachedIndex = n), this.intervalChanged_(n, r, i);
                    }
                    return this.interpolate_(n, r, t, i);
                },
                settings: null,
                DefaultSettings_: {},
                getSettings_: function () {
                    return this.settings || this.DefaultSettings_;
                },
                copySampleValue_: function (t) {
                    for (var e = this.resultBuffer, n = this.sampleValues, i = this.valueSize, r = t * i, o = 0; o !== i; ++o) e[o] = n[r + o];
                    return e;
                },
                interpolate_: function () {
                    throw new Error("call to abstract method");
                },
                intervalChanged_: function () {},
            }),
                Object.assign(nl.prototype, { beforeStart_: nl.prototype.copySampleValue_, afterEnd_: nl.prototype.copySampleValue_ }),
                (il.prototype = Object.assign(Object.create(nl.prototype), {
                    constructor: il,
                    DefaultSettings_: { endingStart: Ee, endingEnd: Ee },
                    intervalChanged_: function (t, e, n) {
                        var i = this.parameterPositions,
                            r = t - 2,
                            o = t + 1,
                            a = i[r],
                            s = i[o];
                        if (void 0 === a)
                            switch (this.getSettings_().endingStart) {
                                case 2401:
                                    (r = t), (a = 2 * e - n);
                                    break;
                                case 2402:
                                    a = e + i[(r = i.length - 2)] - i[r + 1];
                                    break;
                                default:
                                    (r = t), (a = n);
                            }
                        if (void 0 === s)
                            switch (this.getSettings_().endingEnd) {
                                case 2401:
                                    (o = t), (s = 2 * n - e);
                                    break;
                                case 2402:
                                    (o = 1), (s = n + i[1] - i[0]);
                                    break;
                                default:
                                    (o = t - 1), (s = e);
                            }
                        var c = 0.5 * (n - e),
                            l = this.valueSize;
                        (this._weightPrev = c / (e - a)), (this._weightNext = c / (s - n)), (this._offsetPrev = r * l), (this._offsetNext = o * l);
                    },
                    interpolate_: function (t, e, n, i) {
                        for (
                            var r = this.resultBuffer,
                                o = this.sampleValues,
                                a = this.valueSize,
                                s = t * a,
                                c = s - a,
                                l = this._offsetPrev,
                                u = this._offsetNext,
                                h = this._weightPrev,
                                p = this._weightNext,
                                d = (n - e) / (i - e),
                                f = d * d,
                                m = f * d,
                                v = -h * m + 2 * h * f - h * d,
                                g = (1 + h) * m + (-1.5 - 2 * h) * f + (-0.5 + h) * d + 1,
                                y = (-1 - p) * m + (1.5 + p) * f + 0.5 * d,
                                x = p * m - p * f,
                                _ = 0;
                            _ !== a;
                            ++_
                        )
                            r[_] = v * o[l + _] + g * o[c + _] + y * o[s + _] + x * o[u + _];
                        return r;
                    },
                })),
                (rl.prototype = Object.assign(Object.create(nl.prototype), {
                    constructor: rl,
                    interpolate_: function (t, e, n, i) {
                        for (var r = this.resultBuffer, o = this.sampleValues, a = this.valueSize, s = t * a, c = s - a, l = (n - e) / (i - e), u = 1 - l, h = 0; h !== a; ++h) r[h] = o[c + h] * u + o[s + h] * l;
                        return r;
                    },
                })),
                (ol.prototype = Object.assign(Object.create(nl.prototype), {
                    constructor: ol,
                    interpolate_: function (t) {
                        return this.copySampleValue_(t - 1);
                    },
                })),
                Object.assign(al, {
                    toJSON: function (t) {
                        var e,
                            n = t.constructor;
                        if (void 0 !== n.toJSON) e = n.toJSON(t);
                        else {
                            e = { name: t.name, times: el.convertArray(t.times, Array), values: el.convertArray(t.values, Array) };
                            var i = t.getInterpolation();
                            i !== t.DefaultInterpolation && (e.interpolation = i);
                        }
                        return (e.type = t.ValueTypeName), e;
                    },
                }),
                Object.assign(al.prototype, {
                    constructor: al,
                    TimeBufferType: Float32Array,
                    ValueBufferType: Float32Array,
                    DefaultInterpolation: 2301,
                    InterpolantFactoryMethodDiscrete: function (t) {
                        return new ol(this.times, this.values, this.getValueSize(), t);
                    },
                    InterpolantFactoryMethodLinear: function (t) {
                        return new rl(this.times, this.values, this.getValueSize(), t);
                    },
                    InterpolantFactoryMethodSmooth: function (t) {
                        return new il(this.times, this.values, this.getValueSize(), t);
                    },
                    setInterpolation: function (t) {
                        var e;
                        switch (t) {
                            case 2300:
                                e = this.InterpolantFactoryMethodDiscrete;
                                break;
                            case 2301:
                                e = this.InterpolantFactoryMethodLinear;
                                break;
                            case 2302:
                                e = this.InterpolantFactoryMethodSmooth;
                        }
                        if (void 0 === e) {
                            var n = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
                            if (void 0 === this.createInterpolant) {
                                if (t === this.DefaultInterpolation) throw new Error(n);
                                this.setInterpolation(this.DefaultInterpolation);
                            }
                            return console.warn("THREE.KeyframeTrack:", n), this;
                        }
                        return (this.createInterpolant = e), this;
                    },
                    getInterpolation: function () {
                        switch (this.createInterpolant) {
                            case this.InterpolantFactoryMethodDiscrete:
                                return 2300;
                            case this.InterpolantFactoryMethodLinear:
                                return 2301;
                            case this.InterpolantFactoryMethodSmooth:
                                return 2302;
                        }
                    },
                    getValueSize: function () {
                        return this.values.length / this.times.length;
                    },
                    shift: function (t) {
                        if (0 !== t) for (var e = this.times, n = 0, i = e.length; n !== i; ++n) e[n] += t;
                        return this;
                    },
                    scale: function (t) {
                        if (1 !== t) for (var e = this.times, n = 0, i = e.length; n !== i; ++n) e[n] *= t;
                        return this;
                    },
                    trim: function (t, e) {
                        for (var n = this.times, i = n.length, r = 0, o = i - 1; r !== i && n[r] < t; ) ++r;
                        for (; -1 !== o && n[o] > e; ) --o;
                        if ((++o, 0 !== r || o !== i)) {
                            r >= o && (r = (o = Math.max(o, 1)) - 1);
                            var a = this.getValueSize();
                            (this.times = el.arraySlice(n, r, o)), (this.values = el.arraySlice(this.values, r * a, o * a));
                        }
                        return this;
                    },
                    validate: function () {
                        var t = !0,
                            e = this.getValueSize();
                        e - Math.floor(e) != 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), (t = !1));
                        var n = this.times,
                            i = this.values,
                            r = n.length;
                        0 === r && (console.error("THREE.KeyframeTrack: Track is empty.", this), (t = !1));
                        for (var o = null, a = 0; a !== r; a++) {
                            var s = n[a];
                            if ("number" == typeof s && isNaN(s)) {
                                console.error("THREE.KeyframeTrack: Time is not a valid number.", this, a, s), (t = !1);
                                break;
                            }
                            if (null !== o && o > s) {
                                console.error("THREE.KeyframeTrack: Out of order keys.", this, a, s, o), (t = !1);
                                break;
                            }
                            o = s;
                        }
                        if (void 0 !== i && el.isTypedArray(i)) {
                            a = 0;
                            for (var c = i.length; a !== c; ++a) {
                                var l = i[a];
                                if (isNaN(l)) {
                                    console.error("THREE.KeyframeTrack: Value is not a valid number.", this, a, l), (t = !1);
                                    break;
                                }
                            }
                        }
                        return t;
                    },
                    optimize: function () {
                        for (var t = el.arraySlice(this.times), e = el.arraySlice(this.values), n = this.getValueSize(), i = 2302 === this.getInterpolation(), r = 1, o = t.length - 1, a = 1; a < o; ++a) {
                            var s = !1,
                                c = t[a];
                            if (c !== t[a + 1] && (1 !== a || c !== c[0]))
                                if (i) s = !0;
                                else
                                    for (var l = a * n, u = l - n, h = l + n, p = 0; p !== n; ++p) {
                                        var d = e[l + p];
                                        if (d !== e[u + p] || d !== e[h + p]) {
                                            s = !0;
                                            break;
                                        }
                                    }
                            if (s) {
                                if (a !== r) {
                                    t[r] = t[a];
                                    var f = a * n,
                                        m = r * n;
                                    for (p = 0; p !== n; ++p) e[m + p] = e[f + p];
                                }
                                ++r;
                            }
                        }
                        if (o > 0) {
                            t[r] = t[o];
                            for (f = o * n, m = r * n, p = 0; p !== n; ++p) e[m + p] = e[f + p];
                            ++r;
                        }
                        return r !== t.length ? ((this.times = el.arraySlice(t, 0, r)), (this.values = el.arraySlice(e, 0, r * n))) : ((this.times = t), (this.values = e)), this;
                    },
                    clone: function () {
                        var t = el.arraySlice(this.times, 0),
                            e = el.arraySlice(this.values, 0),
                            n = new (0, this.constructor)(this.name, t, e);
                        return (n.createInterpolant = this.createInterpolant), n;
                    },
                }),
                (sl.prototype = Object.assign(Object.create(al.prototype), {
                    constructor: sl,
                    ValueTypeName: "bool",
                    ValueBufferType: Array,
                    DefaultInterpolation: 2300,
                    InterpolantFactoryMethodLinear: void 0,
                    InterpolantFactoryMethodSmooth: void 0,
                })),
                (cl.prototype = Object.assign(Object.create(al.prototype), { constructor: cl, ValueTypeName: "color" })),
                (ll.prototype = Object.assign(Object.create(al.prototype), { constructor: ll, ValueTypeName: "number" })),
                (ul.prototype = Object.assign(Object.create(nl.prototype), {
                    constructor: ul,
                    interpolate_: function (t, e, n, i) {
                        for (var r = this.resultBuffer, o = this.sampleValues, a = this.valueSize, s = t * a, c = (n - e) / (i - e), l = s + a; s !== l; s += 4) nn.slerpFlat(r, 0, o, s - a, o, s, c);
                        return r;
                    },
                })),
                (hl.prototype = Object.assign(Object.create(al.prototype), {
                    constructor: hl,
                    ValueTypeName: "quaternion",
                    DefaultInterpolation: 2301,
                    InterpolantFactoryMethodLinear: function (t) {
                        return new ul(this.times, this.values, this.getValueSize(), t);
                    },
                    InterpolantFactoryMethodSmooth: void 0,
                })),
                (pl.prototype = Object.assign(Object.create(al.prototype), {
                    constructor: pl,
                    ValueTypeName: "string",
                    ValueBufferType: Array,
                    DefaultInterpolation: 2300,
                    InterpolantFactoryMethodLinear: void 0,
                    InterpolantFactoryMethodSmooth: void 0,
                })),
                (dl.prototype = Object.assign(Object.create(al.prototype), { constructor: dl, ValueTypeName: "vector" })),
                Object.assign(fl, {
                    parse: function (t) {
                        for (var e = [], n = t.tracks, i = 1 / (t.fps || 1), r = 0, o = n.length; r !== o; ++r) e.push(ml(n[r]).scale(i));
                        return new fl(t.name, t.duration, e);
                    },
                    toJSON: function (t) {
                        for (var e = [], n = t.tracks, i = { name: t.name, duration: t.duration, tracks: e, uuid: t.uuid }, r = 0, o = n.length; r !== o; ++r) e.push(al.toJSON(n[r]));
                        return i;
                    },
                    CreateFromMorphTargetSequence: function (t, e, n, i) {
                        for (var r = e.length, o = [], a = 0; a < r; a++) {
                            var s = [],
                                c = [];
                            s.push((a + r - 1) % r, a, (a + 1) % r), c.push(0, 1, 0);
                            var l = el.getKeyframeOrder(s);
                            (s = el.sortedArray(s, 1, l)), (c = el.sortedArray(c, 1, l)), i || 0 !== s[0] || (s.push(r), c.push(c[0])), o.push(new ll(".morphTargetInfluences[" + e[a].name + "]", s, c).scale(1 / n));
                        }
                        return new fl(t, -1, o);
                    },
                    findByName: function (t, e) {
                        var n = t;
                        if (!Array.isArray(t)) {
                            var i = t;
                            n = (i.geometry && i.geometry.animations) || i.animations;
                        }
                        for (var r = 0; r < n.length; r++) if (n[r].name === e) return n[r];
                        return null;
                    },
                    CreateClipsFromMorphTargetSequences: function (t, e, n) {
                        for (var i = {}, r = /^([\w-]*?)([\d]+)$/, o = 0, a = t.length; o < a; o++) {
                            var s = t[o],
                                c = s.name.match(r);
                            if (c && c.length > 1) {
                                var l = i[(h = c[1])];
                                l || (i[h] = l = []), l.push(s);
                            }
                        }
                        var u = [];
                        for (var h in i) u.push(fl.CreateFromMorphTargetSequence(h, i[h], e, n));
                        return u;
                    },
                    parseAnimation: function (t, e) {
                        if (!t) return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;
                        for (
                            var n = function (t, e, n, i, r) {
                                    if (0 !== n.length) {
                                        var o = [],
                                            a = [];
                                        el.flattenJSON(n, o, a, i), 0 !== o.length && r.push(new t(e, o, a));
                                    }
                                },
                                i = [],
                                r = t.name || "default",
                                o = t.length || -1,
                                a = t.fps || 30,
                                s = t.hierarchy || [],
                                c = 0;
                            c < s.length;
                            c++
                        ) {
                            var l = s[c].keys;
                            if (l && 0 !== l.length)
                                if (l[0].morphTargets) {
                                    for (var u = {}, h = 0; h < l.length; h++) if (l[h].morphTargets) for (var p = 0; p < l[h].morphTargets.length; p++) u[l[h].morphTargets[p]] = -1;
                                    for (var d in u) {
                                        var f = [],
                                            m = [];
                                        for (p = 0; p !== l[h].morphTargets.length; ++p) {
                                            var v = l[h];
                                            f.push(v.time), m.push(v.morphTarget === d ? 1 : 0);
                                        }
                                        i.push(new ll(".morphTargetInfluence[" + d + "]", f, m));
                                    }
                                    o = u.length * (a || 1);
                                } else {
                                    var g = ".bones[" + e[c].name + "]";
                                    n(dl, g + ".position", l, "pos", i), n(hl, g + ".quaternion", l, "rot", i), n(dl, g + ".scale", l, "scl", i);
                                }
                        }
                        return 0 === i.length ? null : new fl(r, o, i);
                    },
                }),
                Object.assign(fl.prototype, {
                    resetDuration: function () {
                        for (var t = 0, e = 0, n = this.tracks.length; e !== n; ++e) {
                            var i = this.tracks[e];
                            t = Math.max(t, i.times[i.times.length - 1]);
                        }
                        return (this.duration = t), this;
                    },
                    trim: function () {
                        for (var t = 0; t < this.tracks.length; t++) this.tracks[t].trim(0, this.duration);
                        return this;
                    },
                    validate: function () {
                        for (var t = !0, e = 0; e < this.tracks.length; e++) t = t && this.tracks[e].validate();
                        return t;
                    },
                    optimize: function () {
                        for (var t = 0; t < this.tracks.length; t++) this.tracks[t].optimize();
                        return this;
                    },
                    clone: function () {
                        for (var t = [], e = 0; e < this.tracks.length; e++) t.push(this.tracks[e].clone());
                        return new fl(this.name, this.duration, t);
                    },
                });
            var vl = {
                enabled: !1,
                files: {},
                add: function (t, e) {
                    !1 !== this.enabled && (this.files[t] = e);
                },
                get: function (t) {
                    if (!1 !== this.enabled) return this.files[t];
                },
                remove: function (t) {
                    delete this.files[t];
                },
                clear: function () {
                    this.files = {};
                },
            };
            function gl(t, e, n) {
                var i = this,
                    r = !1,
                    o = 0,
                    a = 0,
                    s = void 0,
                    c = [];
                (this.onStart = void 0),
                    (this.onLoad = t),
                    (this.onProgress = e),
                    (this.onError = n),
                    (this.itemStart = function (t) {
                        a++, !1 === r && void 0 !== i.onStart && i.onStart(t, o, a), (r = !0);
                    }),
                    (this.itemEnd = function (t) {
                        o++, void 0 !== i.onProgress && i.onProgress(t, o, a), o === a && ((r = !1), void 0 !== i.onLoad && i.onLoad());
                    }),
                    (this.itemError = function (t) {
                        void 0 !== i.onError && i.onError(t);
                    }),
                    (this.resolveURL = function (t) {
                        return s ? s(t) : t;
                    }),
                    (this.setURLModifier = function (t) {
                        return (s = t), this;
                    }),
                    (this.addHandler = function (t, e) {
                        return c.push(t, e), this;
                    }),
                    (this.removeHandler = function (t) {
                        var e = c.indexOf(t);
                        return -1 !== e && c.splice(e, 2), this;
                    }),
                    (this.getHandler = function (t) {
                        for (var e = 0, n = c.length; e < n; e += 2) {
                            var i = c[e],
                                r = c[e + 1];
                            if ((i.global && (i.lastIndex = 0), i.test(t))) return r;
                        }
                        return null;
                    });
            }
            var yl = new gl();
            function xl(t) {
                (this.manager = void 0 !== t ? t : yl), (this.crossOrigin = "anonymous"), (this.path = ""), (this.resourcePath = "");
            }
            Object.assign(xl.prototype, {
                load: function () {},
                parse: function () {},
                setCrossOrigin: function (t) {
                    return (this.crossOrigin = t), this;
                },
                setPath: function (t) {
                    return (this.path = t), this;
                },
                setResourcePath: function (t) {
                    return (this.resourcePath = t), this;
                },
            });
            var _l = {};
            function bl(t) {
                xl.call(this, t);
            }
            function wl(t) {
                xl.call(this, t);
            }
            function Ml(t) {
                xl.call(this, t);
            }
            function Sl(t) {
                xl.call(this, t);
            }
            function Tl(t) {
                xl.call(this, t);
            }
            function El(t) {
                xl.call(this, t);
            }
            function Al(t) {
                xl.call(this, t);
            }
            function Pl() {
                (this.type = "Curve"), (this.arcLengthDivisions = 200);
            }
            function Ll(t, e, n, i, r, o, a, s) {
                Pl.call(this),
                    (this.type = "EllipseCurve"),
                    (this.aX = t || 0),
                    (this.aY = e || 0),
                    (this.xRadius = n || 1),
                    (this.yRadius = i || 1),
                    (this.aStartAngle = r || 0),
                    (this.aEndAngle = o || 2 * Math.PI),
                    (this.aClockwise = a || !1),
                    (this.aRotation = s || 0);
            }
            function Cl(t, e, n, i, r, o) {
                Ll.call(this, t, e, n, n, i, r, o), (this.type = "ArcCurve");
            }
            function Rl() {
                var t = 0,
                    e = 0,
                    n = 0,
                    i = 0;
                function r(r, o, a, s) {
                    (t = r), (e = a), (n = -3 * r + 3 * o - 2 * a - s), (i = 2 * r - 2 * o + a + s);
                }
                return {
                    initCatmullRom: function (t, e, n, i, o) {
                        r(e, n, o * (n - t), o * (i - e));
                    },
                    initNonuniformCatmullRom: function (t, e, n, i, o, a, s) {
                        var c = (e - t) / o - (n - t) / (o + a) + (n - e) / a,
                            l = (n - e) / a - (i - e) / (a + s) + (i - n) / s;
                        r(e, n, (c *= a), (l *= a));
                    },
                    calc: function (r) {
                        var o = r * r;
                        return t + e * r + n * o + i * (o * r);
                    },
                };
            }
            (bl.prototype = Object.assign(Object.create(xl.prototype), {
                constructor: bl,
                load: function (t, e, n, i) {
                    void 0 === t && (t = ""), void 0 !== this.path && (t = this.path + t), (t = this.manager.resolveURL(t));
                    var r = this,
                        o = vl.get(t);
                    if (void 0 !== o)
                        return (
                            r.manager.itemStart(t),
                            setTimeout(function () {
                                e && e(o), r.manager.itemEnd(t);
                            }, 0),
                            o
                        );
                    if (void 0 === _l[t]) {
                        var a = t.match(/^data:(.*?)(;base64)?,(.*)$/);
                        if (a) {
                            var s = a[1],
                                c = !!a[2],
                                l = a[3];
                            (l = decodeURIComponent(l)), c && (l = atob(l));
                            try {
                                var u,
                                    h = (this.responseType || "").toLowerCase();
                                switch (h) {
                                    case "arraybuffer":
                                    case "blob":
                                        for (var p = new Uint8Array(l.length), d = 0; d < l.length; d++) p[d] = l.charCodeAt(d);
                                        u = "blob" === h ? new Blob([p.buffer], { type: s }) : p.buffer;
                                        break;
                                    case "document":
                                        var f = new DOMParser();
                                        u = f.parseFromString(l, s);
                                        break;
                                    case "json":
                                        u = JSON.parse(l);
                                        break;
                                    default:
                                        u = l;
                                }
                                setTimeout(function () {
                                    e && e(u), r.manager.itemEnd(t);
                                }, 0);
                            } catch (e) {
                                setTimeout(function () {
                                    i && i(e), r.manager.itemError(t), r.manager.itemEnd(t);
                                }, 0);
                            }
                        } else {
                            (_l[t] = []), _l[t].push({ onLoad: e, onProgress: n, onError: i });
                            var m = new XMLHttpRequest();
                            for (var v in (m.open("GET", t, !0),
                            m.addEventListener(
                                "load",
                                function (e) {
                                    var n = this.response,
                                        i = _l[t];
                                    if ((delete _l[t], 200 === this.status || 0 === this.status)) {
                                        0 === this.status && console.warn("THREE.FileLoader: HTTP Status 0 received."), vl.add(t, n);
                                        for (var o = 0, a = i.length; o < a; o++) {
                                            (s = i[o]).onLoad && s.onLoad(n);
                                        }
                                        r.manager.itemEnd(t);
                                    } else {
                                        for (o = 0, a = i.length; o < a; o++) {
                                            var s;
                                            (s = i[o]).onError && s.onError(e);
                                        }
                                        r.manager.itemError(t), r.manager.itemEnd(t);
                                    }
                                },
                                !1
                            ),
                            m.addEventListener(
                                "progress",
                                function (e) {
                                    for (var n = _l[t], i = 0, r = n.length; i < r; i++) {
                                        var o = n[i];
                                        o.onProgress && o.onProgress(e);
                                    }
                                },
                                !1
                            ),
                            m.addEventListener(
                                "error",
                                function (e) {
                                    var n = _l[t];
                                    delete _l[t];
                                    for (var i = 0, o = n.length; i < o; i++) {
                                        var a = n[i];
                                        a.onError && a.onError(e);
                                    }
                                    r.manager.itemError(t), r.manager.itemEnd(t);
                                },
                                !1
                            ),
                            m.addEventListener(
                                "abort",
                                function (e) {
                                    var n = _l[t];
                                    delete _l[t];
                                    for (var i = 0, o = n.length; i < o; i++) {
                                        var a = n[i];
                                        a.onError && a.onError(e);
                                    }
                                    r.manager.itemError(t), r.manager.itemEnd(t);
                                },
                                !1
                            ),
                            void 0 !== this.responseType && (m.responseType = this.responseType),
                            void 0 !== this.withCredentials && (m.withCredentials = this.withCredentials),
                            m.overrideMimeType && m.overrideMimeType(void 0 !== this.mimeType ? this.mimeType : "text/plain"),
                            this.requestHeader))
                                m.setRequestHeader(v, this.requestHeader[v]);
                            m.send(null);
                        }
                        return r.manager.itemStart(t), m;
                    }
                    _l[t].push({ onLoad: e, onProgress: n, onError: i });
                },
                setResponseType: function (t) {
                    return (this.responseType = t), this;
                },
                setWithCredentials: function (t) {
                    return (this.withCredentials = t), this;
                },
                setMimeType: function (t) {
                    return (this.mimeType = t), this;
                },
                setRequestHeader: function (t) {
                    return (this.requestHeader = t), this;
                },
            })),
                (wl.prototype = Object.assign(Object.create(xl.prototype), {
                    constructor: wl,
                    load: function (t, e, n, i) {
                        var r = this,
                            o = new bl(r.manager);
                        o.setPath(r.path),
                            o.load(
                                t,
                                function (t) {
                                    e(r.parse(JSON.parse(t)));
                                },
                                n,
                                i
                            );
                    },
                    parse: function (t) {
                        for (var e = [], n = 0; n < t.length; n++) {
                            var i = fl.parse(t[n]);
                            e.push(i);
                        }
                        return e;
                    },
                })),
                (Ml.prototype = Object.assign(Object.create(xl.prototype), {
                    constructor: Ml,
                    load: function (t, e, n, i) {
                        var r = this,
                            o = [],
                            a = new Ps();
                        a.image = o;
                        var s = new bl(this.manager);
                        function c(c) {
                            s.load(
                                t[c],
                                function (t) {
                                    var n = r.parse(t, !0);
                                    (o[c] = { width: n.width, height: n.height, format: n.format, mipmaps: n.mipmaps }), 6 === (l += 1) && (1 === n.mipmapCount && (a.minFilter = ut), (a.format = n.format), (a.needsUpdate = !0), e && e(a));
                                },
                                n,
                                i
                            );
                        }
                        if ((s.setPath(this.path), s.setResponseType("arraybuffer"), Array.isArray(t))) for (var l = 0, u = 0, h = t.length; u < h; ++u) c(u);
                        else
                            s.load(
                                t,
                                function (t) {
                                    var n = r.parse(t, !0);
                                    if (n.isCubemap)
                                        for (var i = n.mipmaps.length / n.mipmapCount, s = 0; s < i; s++) {
                                            o[s] = { mipmaps: [] };
                                            for (var c = 0; c < n.mipmapCount; c++) o[s].mipmaps.push(n.mipmaps[s * n.mipmapCount + c]), (o[s].format = n.format), (o[s].width = n.width), (o[s].height = n.height);
                                        }
                                    else (a.image.width = n.width), (a.image.height = n.height), (a.mipmaps = n.mipmaps);
                                    1 === n.mipmapCount && (a.minFilter = ut), (a.format = n.format), (a.needsUpdate = !0), e && e(a);
                                },
                                n,
                                i
                            );
                        return a;
                    },
                })),
                (Sl.prototype = Object.assign(Object.create(xl.prototype), {
                    constructor: Sl,
                    load: function (t, e, n, i) {
                        var r = this,
                            o = new kr(),
                            a = new bl(this.manager);
                        return (
                            a.setResponseType("arraybuffer"),
                            a.setPath(this.path),
                            a.load(
                                t,
                                function (t) {
                                    var n = r.parse(t);
                                    n &&
                                        (void 0 !== n.image ? (o.image = n.image) : void 0 !== n.data && ((o.image.width = n.width), (o.image.height = n.height), (o.image.data = n.data)),
                                        (o.wrapS = void 0 !== n.wrapS ? n.wrapS : ot),
                                        (o.wrapT = void 0 !== n.wrapT ? n.wrapT : ot),
                                        (o.magFilter = void 0 !== n.magFilter ? n.magFilter : ut),
                                        (o.minFilter = void 0 !== n.minFilter ? n.minFilter : ut),
                                        (o.anisotropy = void 0 !== n.anisotropy ? n.anisotropy : 1),
                                        void 0 !== n.format && (o.format = n.format),
                                        void 0 !== n.type && (o.type = n.type),
                                        void 0 !== n.mipmaps && ((o.mipmaps = n.mipmaps), (o.minFilter = pt)),
                                        1 === n.mipmapCount && (o.minFilter = ut),
                                        (o.needsUpdate = !0),
                                        e && e(o, n));
                                },
                                n,
                                i
                            ),
                            o
                        );
                    },
                })),
                (Tl.prototype = Object.assign(Object.create(xl.prototype), {
                    constructor: Tl,
                    load: function (t, e, n, i) {
                        void 0 !== this.path && (t = this.path + t), (t = this.manager.resolveURL(t));
                        var r = this,
                            o = vl.get(t);
                        if (void 0 !== o)
                            return (
                                r.manager.itemStart(t),
                                setTimeout(function () {
                                    e && e(o), r.manager.itemEnd(t);
                                }, 0),
                                o
                            );
                        var a = document.createElementNS("http://www.w3.org/1999/xhtml", "img");
                        function s() {
                            a.removeEventListener("load", s, !1), a.removeEventListener("error", c, !1), vl.add(t, this), e && e(this), r.manager.itemEnd(t);
                        }
                        function c(e) {
                            a.removeEventListener("load", s, !1), a.removeEventListener("error", c, !1), i && i(e), r.manager.itemError(t), r.manager.itemEnd(t);
                        }
                        return a.addEventListener("load", s, !1), a.addEventListener("error", c, !1), "data:" !== t.substr(0, 5) && void 0 !== this.crossOrigin && (a.crossOrigin = this.crossOrigin), r.manager.itemStart(t), (a.src = t), a;
                    },
                })),
                (El.prototype = Object.assign(Object.create(xl.prototype), {
                    constructor: El,
                    load: function (t, e, n, i) {
                        var r = new Yr(),
                            o = new Tl(this.manager);
                        o.setCrossOrigin(this.crossOrigin), o.setPath(this.path);
                        var a = 0;
                        function s(n) {
                            o.load(
                                t[n],
                                function (t) {
                                    (r.images[n] = t), 6 === ++a && ((r.needsUpdate = !0), e && e(r));
                                },
                                void 0,
                                i
                            );
                        }
                        for (var c = 0; c < t.length; ++c) s(c);
                        return r;
                    },
                })),
                (Al.prototype = Object.assign(Object.create(xl.prototype), {
                    constructor: Al,
                    load: function (t, e, n, i) {
                        var r = new Ke(),
                            o = new Tl(this.manager);
                        return (
                            o.setCrossOrigin(this.crossOrigin),
                            o.setPath(this.path),
                            o.load(
                                t,
                                function (n) {
                                    r.image = n;
                                    var i = t.search(/\.jpe?g($|\?)/i) > 0 || 0 === t.search(/^data\:image\/jpeg/);
                                    (r.format = i ? Et : At), (r.needsUpdate = !0), void 0 !== e && e(r);
                                },
                                n,
                                i
                            ),
                            r
                        );
                    },
                })),
                Object.assign(Pl.prototype, {
                    getPoint: function () {
                        return console.warn("THREE.Curve: .getPoint() not implemented."), null;
                    },
                    getPointAt: function (t, e) {
                        var n = this.getUtoTmapping(t);
                        return this.getPoint(n, e);
                    },
                    getPoints: function (t) {
                        void 0 === t && (t = 5);
                        for (var e = [], n = 0; n <= t; n++) e.push(this.getPoint(n / t));
                        return e;
                    },
                    getSpacedPoints: function (t) {
                        void 0 === t && (t = 5);
                        for (var e = [], n = 0; n <= t; n++) e.push(this.getPointAt(n / t));
                        return e;
                    },
                    getLength: function () {
                        var t = this.getLengths();
                        return t[t.length - 1];
                    },
                    getLengths: function (t) {
                        if ((void 0 === t && (t = this.arcLengthDivisions), this.cacheArcLengths && this.cacheArcLengths.length === t + 1 && !this.needsUpdate)) return this.cacheArcLengths;
                        this.needsUpdate = !1;
                        var e,
                            n,
                            i = [],
                            r = this.getPoint(0),
                            o = 0;
                        for (i.push(0), n = 1; n <= t; n++) (o += (e = this.getPoint(n / t)).distanceTo(r)), i.push(o), (r = e);
                        return (this.cacheArcLengths = i), i;
                    },
                    updateArcLengths: function () {
                        (this.needsUpdate = !0), this.getLengths();
                    },
                    getUtoTmapping: function (t, e) {
                        var n,
                            i = this.getLengths(),
                            r = 0,
                            o = i.length;
                        n = e || t * i[o - 1];
                        for (var a, s = 0, c = o - 1; s <= c; )
                            if ((a = i[(r = Math.floor(s + (c - s) / 2))] - n) < 0) s = r + 1;
                            else {
                                if (!(a > 0)) {
                                    c = r;
                                    break;
                                }
                                c = r - 1;
                            }
                        if (i[(r = c)] === n) return r / (o - 1);
                        var l = i[r];
                        return (r + (n - l) / (i[r + 1] - l)) / (o - 1);
                    },
                    getTangent: function (t) {
                        var e = t - 1e-4,
                            n = t + 1e-4;
                        e < 0 && (e = 0), n > 1 && (n = 1);
                        var i = this.getPoint(e);
                        return this.getPoint(n).clone().sub(i).normalize();
                    },
                    getTangentAt: function (t) {
                        var e = this.getUtoTmapping(t);
                        return this.getTangent(e);
                    },
                    computeFrenetFrames: function (t, e) {
                        var n,
                            i,
                            r,
                            o = new an(),
                            a = [],
                            s = [],
                            c = [],
                            l = new an(),
                            u = new fn();
                        for (n = 0; n <= t; n++) (i = n / t), (a[n] = this.getTangentAt(i)), a[n].normalize();
                        (s[0] = new an()), (c[0] = new an());
                        var h = Number.MAX_VALUE,
                            p = Math.abs(a[0].x),
                            d = Math.abs(a[0].y),
                            f = Math.abs(a[0].z);
                        for (
                            p <= h && ((h = p), o.set(1, 0, 0)), d <= h && ((h = d), o.set(0, 1, 0)), f <= h && o.set(0, 0, 1), l.crossVectors(a[0], o).normalize(), s[0].crossVectors(a[0], l), c[0].crossVectors(a[0], s[0]), n = 1;
                            n <= t;
                            n++
                        )
                            (s[n] = s[n - 1].clone()),
                                (c[n] = c[n - 1].clone()),
                                l.crossVectors(a[n - 1], a[n]),
                                l.length() > Number.EPSILON && (l.normalize(), (r = Math.acos(Xe.clamp(a[n - 1].dot(a[n]), -1, 1))), s[n].applyMatrix4(u.makeRotationAxis(l, r))),
                                c[n].crossVectors(a[n], s[n]);
                        if (!0 === e)
                            for (r = Math.acos(Xe.clamp(s[0].dot(s[t]), -1, 1)), r /= t, a[0].dot(l.crossVectors(s[0], s[t])) > 0 && (r = -r), n = 1; n <= t; n++)
                                s[n].applyMatrix4(u.makeRotationAxis(a[n], r * n)), c[n].crossVectors(a[n], s[n]);
                        return { tangents: a, normals: s, binormals: c };
                    },
                    clone: function () {
                        return new this.constructor().copy(this);
                    },
                    copy: function (t) {
                        return (this.arcLengthDivisions = t.arcLengthDivisions), this;
                    },
                    toJSON: function () {
                        var t = { metadata: { version: 4.5, type: "Curve", generator: "Curve.toJSON" } };
                        return (t.arcLengthDivisions = this.arcLengthDivisions), (t.type = this.type), t;
                    },
                    fromJSON: function (t) {
                        return (this.arcLengthDivisions = t.arcLengthDivisions), this;
                    },
                }),
                (Ll.prototype = Object.create(Pl.prototype)),
                (Ll.prototype.constructor = Ll),
                (Ll.prototype.isEllipseCurve = !0),
                (Ll.prototype.getPoint = function (t, e) {
                    for (var n = e || new Ye(), i = 2 * Math.PI, r = this.aEndAngle - this.aStartAngle, o = Math.abs(r) < Number.EPSILON; r < 0; ) r += i;
                    for (; r > i; ) r -= i;
                    r < Number.EPSILON && (r = o ? 0 : i), !0 !== this.aClockwise || o || (r === i ? (r = -i) : (r -= i));
                    var a = this.aStartAngle + t * r,
                        s = this.aX + this.xRadius * Math.cos(a),
                        c = this.aY + this.yRadius * Math.sin(a);
                    if (0 !== this.aRotation) {
                        var l = Math.cos(this.aRotation),
                            u = Math.sin(this.aRotation),
                            h = s - this.aX,
                            p = c - this.aY;
                        (s = h * l - p * u + this.aX), (c = h * u + p * l + this.aY);
                    }
                    return n.set(s, c);
                }),
                (Ll.prototype.copy = function (t) {
                    return (
                        Pl.prototype.copy.call(this, t),
                        (this.aX = t.aX),
                        (this.aY = t.aY),
                        (this.xRadius = t.xRadius),
                        (this.yRadius = t.yRadius),
                        (this.aStartAngle = t.aStartAngle),
                        (this.aEndAngle = t.aEndAngle),
                        (this.aClockwise = t.aClockwise),
                        (this.aRotation = t.aRotation),
                        this
                    );
                }),
                (Ll.prototype.toJSON = function () {
                    var t = Pl.prototype.toJSON.call(this);
                    return (
                        (t.aX = this.aX),
                        (t.aY = this.aY),
                        (t.xRadius = this.xRadius),
                        (t.yRadius = this.yRadius),
                        (t.aStartAngle = this.aStartAngle),
                        (t.aEndAngle = this.aEndAngle),
                        (t.aClockwise = this.aClockwise),
                        (t.aRotation = this.aRotation),
                        t
                    );
                }),
                (Ll.prototype.fromJSON = function (t) {
                    return (
                        Pl.prototype.fromJSON.call(this, t),
                        (this.aX = t.aX),
                        (this.aY = t.aY),
                        (this.xRadius = t.xRadius),
                        (this.yRadius = t.yRadius),
                        (this.aStartAngle = t.aStartAngle),
                        (this.aEndAngle = t.aEndAngle),
                        (this.aClockwise = t.aClockwise),
                        (this.aRotation = t.aRotation),
                        this
                    );
                }),
                (Cl.prototype = Object.create(Ll.prototype)),
                (Cl.prototype.constructor = Cl),
                (Cl.prototype.isArcCurve = !0);
            var Ol = new an(),
                Dl = new Rl(),
                Il = new Rl(),
                Nl = new Rl();
            function kl(t, e, n, i) {
                Pl.call(this), (this.type = "CatmullRomCurve3"), (this.points = t || []), (this.closed = e || !1), (this.curveType = n || "centripetal"), (this.tension = i || 0.5);
            }
            function Bl(t, e, n, i, r) {
                var o = 0.5 * (i - e),
                    a = 0.5 * (r - n),
                    s = t * t;
                return (2 * n - 2 * i + o + a) * (t * s) + (-3 * n + 3 * i - 2 * o - a) * s + o * t + n;
            }
            function zl(t, e, n, i) {
                return (
                    (function (t, e) {
                        var n = 1 - t;
                        return n * n * e;
                    })(t, e) +
                    (function (t, e) {
                        return 2 * (1 - t) * t * e;
                    })(t, n) +
                    (function (t, e) {
                        return t * t * e;
                    })(t, i)
                );
            }
            function Fl(t, e, n, i, r) {
                return (
                    (function (t, e) {
                        var n = 1 - t;
                        return n * n * n * e;
                    })(t, e) +
                    (function (t, e) {
                        var n = 1 - t;
                        return 3 * n * n * t * e;
                    })(t, n) +
                    (function (t, e) {
                        return 3 * (1 - t) * t * t * e;
                    })(t, i) +
                    (function (t, e) {
                        return t * t * t * e;
                    })(t, r)
                );
            }
            function Ul(t, e, n, i) {
                Pl.call(this), (this.type = "CubicBezierCurve"), (this.v0 = t || new Ye()), (this.v1 = e || new Ye()), (this.v2 = n || new Ye()), (this.v3 = i || new Ye());
            }
            function jl(t, e, n, i) {
                Pl.call(this), (this.type = "CubicBezierCurve3"), (this.v0 = t || new an()), (this.v1 = e || new an()), (this.v2 = n || new an()), (this.v3 = i || new an());
            }
            function Gl(t, e) {
                Pl.call(this), (this.type = "LineCurve"), (this.v1 = t || new Ye()), (this.v2 = e || new Ye());
            }
            function Hl(t, e) {
                Pl.call(this), (this.type = "LineCurve3"), (this.v1 = t || new an()), (this.v2 = e || new an());
            }
            function Vl(t, e, n) {
                Pl.call(this), (this.type = "QuadraticBezierCurve"), (this.v0 = t || new Ye()), (this.v1 = e || new Ye()), (this.v2 = n || new Ye());
            }
            function Wl(t, e, n) {
                Pl.call(this), (this.type = "QuadraticBezierCurve3"), (this.v0 = t || new an()), (this.v1 = e || new an()), (this.v2 = n || new an());
            }
            function ql(t) {
                Pl.call(this), (this.type = "SplineCurve"), (this.points = t || []);
            }
            (kl.prototype = Object.create(Pl.prototype)),
                (kl.prototype.constructor = kl),
                (kl.prototype.isCatmullRomCurve3 = !0),
                (kl.prototype.getPoint = function (t, e) {
                    var n,
                        i,
                        r,
                        o,
                        a = e || new an(),
                        s = this.points,
                        c = s.length,
                        l = (c - (this.closed ? 0 : 1)) * t,
                        u = Math.floor(l),
                        h = l - u;
                    if (
                        (this.closed ? (u += u > 0 ? 0 : (Math.floor(Math.abs(u) / c) + 1) * c) : 0 === h && u === c - 1 && ((u = c - 2), (h = 1)),
                        this.closed || u > 0 ? (n = s[(u - 1) % c]) : (Ol.subVectors(s[0], s[1]).add(s[0]), (n = Ol)),
                        (i = s[u % c]),
                        (r = s[(u + 1) % c]),
                        this.closed || u + 2 < c ? (o = s[(u + 2) % c]) : (Ol.subVectors(s[c - 1], s[c - 2]).add(s[c - 1]), (o = Ol)),
                        "centripetal" === this.curveType || "chordal" === this.curveType)
                    ) {
                        var p = "chordal" === this.curveType ? 0.5 : 0.25,
                            d = Math.pow(n.distanceToSquared(i), p),
                            f = Math.pow(i.distanceToSquared(r), p),
                            m = Math.pow(r.distanceToSquared(o), p);
                        f < 1e-4 && (f = 1),
                            d < 1e-4 && (d = f),
                            m < 1e-4 && (m = f),
                            Dl.initNonuniformCatmullRom(n.x, i.x, r.x, o.x, d, f, m),
                            Il.initNonuniformCatmullRom(n.y, i.y, r.y, o.y, d, f, m),
                            Nl.initNonuniformCatmullRom(n.z, i.z, r.z, o.z, d, f, m);
                    } else "catmullrom" === this.curveType && (Dl.initCatmullRom(n.x, i.x, r.x, o.x, this.tension), Il.initCatmullRom(n.y, i.y, r.y, o.y, this.tension), Nl.initCatmullRom(n.z, i.z, r.z, o.z, this.tension));
                    return a.set(Dl.calc(h), Il.calc(h), Nl.calc(h)), a;
                }),
                (kl.prototype.copy = function (t) {
                    Pl.prototype.copy.call(this, t), (this.points = []);
                    for (var e = 0, n = t.points.length; e < n; e++) {
                        var i = t.points[e];
                        this.points.push(i.clone());
                    }
                    return (this.closed = t.closed), (this.curveType = t.curveType), (this.tension = t.tension), this;
                }),
                (kl.prototype.toJSON = function () {
                    var t = Pl.prototype.toJSON.call(this);
                    t.points = [];
                    for (var e = 0, n = this.points.length; e < n; e++) {
                        var i = this.points[e];
                        t.points.push(i.toArray());
                    }
                    return (t.closed = this.closed), (t.curveType = this.curveType), (t.tension = this.tension), t;
                }),
                (kl.prototype.fromJSON = function (t) {
                    Pl.prototype.fromJSON.call(this, t), (this.points = []);
                    for (var e = 0, n = t.points.length; e < n; e++) {
                        var i = t.points[e];
                        this.points.push(new an().fromArray(i));
                    }
                    return (this.closed = t.closed), (this.curveType = t.curveType), (this.tension = t.tension), this;
                }),
                (Ul.prototype = Object.create(Pl.prototype)),
                (Ul.prototype.constructor = Ul),
                (Ul.prototype.isCubicBezierCurve = !0),
                (Ul.prototype.getPoint = function (t, e) {
                    var n = e || new Ye(),
                        i = this.v0,
                        r = this.v1,
                        o = this.v2,
                        a = this.v3;
                    return n.set(Fl(t, i.x, r.x, o.x, a.x), Fl(t, i.y, r.y, o.y, a.y)), n;
                }),
                (Ul.prototype.copy = function (t) {
                    return Pl.prototype.copy.call(this, t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this.v3.copy(t.v3), this;
                }),
                (Ul.prototype.toJSON = function () {
                    var t = Pl.prototype.toJSON.call(this);
                    return (t.v0 = this.v0.toArray()), (t.v1 = this.v1.toArray()), (t.v2 = this.v2.toArray()), (t.v3 = this.v3.toArray()), t;
                }),
                (Ul.prototype.fromJSON = function (t) {
                    return Pl.prototype.fromJSON.call(this, t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this.v3.fromArray(t.v3), this;
                }),
                (jl.prototype = Object.create(Pl.prototype)),
                (jl.prototype.constructor = jl),
                (jl.prototype.isCubicBezierCurve3 = !0),
                (jl.prototype.getPoint = function (t, e) {
                    var n = e || new an(),
                        i = this.v0,
                        r = this.v1,
                        o = this.v2,
                        a = this.v3;
                    return n.set(Fl(t, i.x, r.x, o.x, a.x), Fl(t, i.y, r.y, o.y, a.y), Fl(t, i.z, r.z, o.z, a.z)), n;
                }),
                (jl.prototype.copy = function (t) {
                    return Pl.prototype.copy.call(this, t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this.v3.copy(t.v3), this;
                }),
                (jl.prototype.toJSON = function () {
                    var t = Pl.prototype.toJSON.call(this);
                    return (t.v0 = this.v0.toArray()), (t.v1 = this.v1.toArray()), (t.v2 = this.v2.toArray()), (t.v3 = this.v3.toArray()), t;
                }),
                (jl.prototype.fromJSON = function (t) {
                    return Pl.prototype.fromJSON.call(this, t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this.v3.fromArray(t.v3), this;
                }),
                (Gl.prototype = Object.create(Pl.prototype)),
                (Gl.prototype.constructor = Gl),
                (Gl.prototype.isLineCurve = !0),
                (Gl.prototype.getPoint = function (t, e) {
                    var n = e || new Ye();
                    return 1 === t ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(t).add(this.v1)), n;
                }),
                (Gl.prototype.getPointAt = function (t, e) {
                    return this.getPoint(t, e);
                }),
                (Gl.prototype.getTangent = function () {
                    return this.v2.clone().sub(this.v1).normalize();
                }),
                (Gl.prototype.copy = function (t) {
                    return Pl.prototype.copy.call(this, t), this.v1.copy(t.v1), this.v2.copy(t.v2), this;
                }),
                (Gl.prototype.toJSON = function () {
                    var t = Pl.prototype.toJSON.call(this);
                    return (t.v1 = this.v1.toArray()), (t.v2 = this.v2.toArray()), t;
                }),
                (Gl.prototype.fromJSON = function (t) {
                    return Pl.prototype.fromJSON.call(this, t), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this;
                }),
                (Hl.prototype = Object.create(Pl.prototype)),
                (Hl.prototype.constructor = Hl),
                (Hl.prototype.isLineCurve3 = !0),
                (Hl.prototype.getPoint = function (t, e) {
                    var n = e || new an();
                    return 1 === t ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(t).add(this.v1)), n;
                }),
                (Hl.prototype.getPointAt = function (t, e) {
                    return this.getPoint(t, e);
                }),
                (Hl.prototype.copy = function (t) {
                    return Pl.prototype.copy.call(this, t), this.v1.copy(t.v1), this.v2.copy(t.v2), this;
                }),
                (Hl.prototype.toJSON = function () {
                    var t = Pl.prototype.toJSON.call(this);
                    return (t.v1 = this.v1.toArray()), (t.v2 = this.v2.toArray()), t;
                }),
                (Hl.prototype.fromJSON = function (t) {
                    return Pl.prototype.fromJSON.call(this, t), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this;
                }),
                (Vl.prototype = Object.create(Pl.prototype)),
                (Vl.prototype.constructor = Vl),
                (Vl.prototype.isQuadraticBezierCurve = !0),
                (Vl.prototype.getPoint = function (t, e) {
                    var n = e || new Ye(),
                        i = this.v0,
                        r = this.v1,
                        o = this.v2;
                    return n.set(zl(t, i.x, r.x, o.x), zl(t, i.y, r.y, o.y)), n;
                }),
                (Vl.prototype.copy = function (t) {
                    return Pl.prototype.copy.call(this, t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this;
                }),
                (Vl.prototype.toJSON = function () {
                    var t = Pl.prototype.toJSON.call(this);
                    return (t.v0 = this.v0.toArray()), (t.v1 = this.v1.toArray()), (t.v2 = this.v2.toArray()), t;
                }),
                (Vl.prototype.fromJSON = function (t) {
                    return Pl.prototype.fromJSON.call(this, t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this;
                }),
                (Wl.prototype = Object.create(Pl.prototype)),
                (Wl.prototype.constructor = Wl),
                (Wl.prototype.isQuadraticBezierCurve3 = !0),
                (Wl.prototype.getPoint = function (t, e) {
                    var n = e || new an(),
                        i = this.v0,
                        r = this.v1,
                        o = this.v2;
                    return n.set(zl(t, i.x, r.x, o.x), zl(t, i.y, r.y, o.y), zl(t, i.z, r.z, o.z)), n;
                }),
                (Wl.prototype.copy = function (t) {
                    return Pl.prototype.copy.call(this, t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this;
                }),
                (Wl.prototype.toJSON = function () {
                    var t = Pl.prototype.toJSON.call(this);
                    return (t.v0 = this.v0.toArray()), (t.v1 = this.v1.toArray()), (t.v2 = this.v2.toArray()), t;
                }),
                (Wl.prototype.fromJSON = function (t) {
                    return Pl.prototype.fromJSON.call(this, t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this;
                }),
                (ql.prototype = Object.create(Pl.prototype)),
                (ql.prototype.constructor = ql),
                (ql.prototype.isSplineCurve = !0),
                (ql.prototype.getPoint = function (t, e) {
                    var n = e || new Ye(),
                        i = this.points,
                        r = (i.length - 1) * t,
                        o = Math.floor(r),
                        a = r - o,
                        s = i[0 === o ? o : o - 1],
                        c = i[o],
                        l = i[o > i.length - 2 ? i.length - 1 : o + 1],
                        u = i[o > i.length - 3 ? i.length - 1 : o + 2];
                    return n.set(Bl(a, s.x, c.x, l.x, u.x), Bl(a, s.y, c.y, l.y, u.y)), n;
                }),
                (ql.prototype.copy = function (t) {
                    Pl.prototype.copy.call(this, t), (this.points = []);
                    for (var e = 0, n = t.points.length; e < n; e++) {
                        var i = t.points[e];
                        this.points.push(i.clone());
                    }
                    return this;
                }),
                (ql.prototype.toJSON = function () {
                    var t = Pl.prototype.toJSON.call(this);
                    t.points = [];
                    for (var e = 0, n = this.points.length; e < n; e++) {
                        var i = this.points[e];
                        t.points.push(i.toArray());
                    }
                    return t;
                }),
                (ql.prototype.fromJSON = function (t) {
                    Pl.prototype.fromJSON.call(this, t), (this.points = []);
                    for (var e = 0, n = t.points.length; e < n; e++) {
                        var i = t.points[e];
                        this.points.push(new Ye().fromArray(i));
                    }
                    return this;
                });
            var Xl = Object.freeze({
                __proto__: null,
                ArcCurve: Cl,
                CatmullRomCurve3: kl,
                CubicBezierCurve: Ul,
                CubicBezierCurve3: jl,
                EllipseCurve: Ll,
                LineCurve: Gl,
                LineCurve3: Hl,
                QuadraticBezierCurve: Vl,
                QuadraticBezierCurve3: Wl,
                SplineCurve: ql,
            });
            function Yl() {
                Pl.call(this), (this.type = "CurvePath"), (this.curves = []), (this.autoClose = !1);
            }
            function Zl(t) {
                Yl.call(this), (this.type = "Path"), (this.currentPoint = new Ye()), t && this.setFromPoints(t);
            }
            function Jl(t) {
                Zl.call(this, t), (this.uuid = Xe.generateUUID()), (this.type = "Shape"), (this.holes = []);
            }
            function Ql(t, e) {
                On.call(this), (this.type = "Light"), (this.color = new Mi(t)), (this.intensity = void 0 !== e ? e : 1), (this.receiveShadow = void 0);
            }
            function Kl(t, e, n) {
                Ql.call(this, t, n), (this.type = "HemisphereLight"), (this.castShadow = void 0), this.position.copy(On.DefaultUp), this.updateMatrix(), (this.groundColor = new Mi(e));
            }
            function $l(t) {
                (this.camera = t),
                    (this.bias = 0),
                    (this.radius = 1),
                    (this.mapSize = new Ye(512, 512)),
                    (this.map = null),
                    (this.mapPass = null),
                    (this.matrix = new fn()),
                    (this._frustum = new Fr()),
                    (this._frameExtents = new Ye(1, 1)),
                    (this._viewportCount = 1),
                    (this._viewports = [new $e(0, 0, 1, 1)]);
            }
            function tu() {
                $l.call(this, new Rr(50, 1, 0.5, 500));
            }
            function eu(t, e, n, i, r, o) {
                Ql.call(this, t, e),
                    (this.type = "SpotLight"),
                    this.position.copy(On.DefaultUp),
                    this.updateMatrix(),
                    (this.target = new On()),
                    Object.defineProperty(this, "power", {
                        get: function () {
                            return this.intensity * Math.PI;
                        },
                        set: function (t) {
                            this.intensity = t / Math.PI;
                        },
                    }),
                    (this.distance = void 0 !== n ? n : 0),
                    (this.angle = void 0 !== i ? i : Math.PI / 3),
                    (this.penumbra = void 0 !== r ? r : 0),
                    (this.decay = void 0 !== o ? o : 1),
                    (this.shadow = new tu());
            }
            function nu() {
                $l.call(this, new Rr(90, 1, 0.5, 500)),
                    (this._frameExtents = new Ye(4, 2)),
                    (this._viewportCount = 6),
                    (this._viewports = [new $e(2, 1, 1, 1), new $e(0, 1, 1, 1), new $e(3, 1, 1, 1), new $e(1, 1, 1, 1), new $e(3, 0, 1, 1), new $e(1, 0, 1, 1)]),
                    (this._cubeDirections = [new an(1, 0, 0), new an(-1, 0, 0), new an(0, 0, 1), new an(0, 0, -1), new an(0, 1, 0), new an(0, -1, 0)]),
                    (this._cubeUps = [new an(0, 1, 0), new an(0, 1, 0), new an(0, 1, 0), new an(0, 1, 0), new an(0, 0, 1), new an(0, 0, -1)]);
            }
            function iu(t, e, n, i) {
                Ql.call(this, t, e),
                    (this.type = "PointLight"),
                    Object.defineProperty(this, "power", {
                        get: function () {
                            return 4 * this.intensity * Math.PI;
                        },
                        set: function (t) {
                            this.intensity = t / (4 * Math.PI);
                        },
                    }),
                    (this.distance = void 0 !== n ? n : 0),
                    (this.decay = void 0 !== i ? i : 1),
                    (this.shadow = new nu());
            }
            function ru(t, e, n, i, r, o) {
                Cr.call(this),
                    (this.type = "OrthographicCamera"),
                    (this.zoom = 1),
                    (this.view = null),
                    (this.left = void 0 !== t ? t : -1),
                    (this.right = void 0 !== e ? e : 1),
                    (this.top = void 0 !== n ? n : 1),
                    (this.bottom = void 0 !== i ? i : -1),
                    (this.near = void 0 !== r ? r : 0.1),
                    (this.far = void 0 !== o ? o : 2e3),
                    this.updateProjectionMatrix();
            }
            function ou() {
                $l.call(this, new ru(-5, 5, 5, -5, 0.5, 500));
            }
            function au(t, e) {
                Ql.call(this, t, e), (this.type = "DirectionalLight"), this.position.copy(On.DefaultUp), this.updateMatrix(), (this.target = new On()), (this.shadow = new ou());
            }
            function su(t, e) {
                Ql.call(this, t, e), (this.type = "AmbientLight"), (this.castShadow = void 0);
            }
            function cu(t, e, n, i) {
                Ql.call(this, t, e), (this.type = "RectAreaLight"), (this.width = void 0 !== n ? n : 10), (this.height = void 0 !== i ? i : 10);
            }
            function lu(t) {
                xl.call(this, t), (this.textures = {});
            }
            (Yl.prototype = Object.assign(Object.create(Pl.prototype), {
                constructor: Yl,
                add: function (t) {
                    this.curves.push(t);
                },
                closePath: function () {
                    var t = this.curves[0].getPoint(0),
                        e = this.curves[this.curves.length - 1].getPoint(1);
                    t.equals(e) || this.curves.push(new Gl(e, t));
                },
                getPoint: function (t) {
                    for (var e = t * this.getLength(), n = this.getCurveLengths(), i = 0; i < n.length; ) {
                        if (n[i] >= e) {
                            var r = n[i] - e,
                                o = this.curves[i],
                                a = o.getLength(),
                                s = 0 === a ? 0 : 1 - r / a;
                            return o.getPointAt(s);
                        }
                        i++;
                    }
                    return null;
                },
                getLength: function () {
                    var t = this.getCurveLengths();
                    return t[t.length - 1];
                },
                updateArcLengths: function () {
                    (this.needsUpdate = !0), (this.cacheLengths = null), this.getCurveLengths();
                },
                getCurveLengths: function () {
                    if (this.cacheLengths && this.cacheLengths.length === this.curves.length) return this.cacheLengths;
                    for (var t = [], e = 0, n = 0, i = this.curves.length; n < i; n++) (e += this.curves[n].getLength()), t.push(e);
                    return (this.cacheLengths = t), t;
                },
                getSpacedPoints: function (t) {
                    void 0 === t && (t = 40);
                    for (var e = [], n = 0; n <= t; n++) e.push(this.getPoint(n / t));
                    return this.autoClose && e.push(e[0]), e;
                },
                getPoints: function (t) {
                    t = t || 12;
                    for (var e, n = [], i = 0, r = this.curves; i < r.length; i++)
                        for (var o = r[i], a = o && o.isEllipseCurve ? 2 * t : o && (o.isLineCurve || o.isLineCurve3) ? 1 : o && o.isSplineCurve ? t * o.points.length : t, s = o.getPoints(a), c = 0; c < s.length; c++) {
                            var l = s[c];
                            (e && e.equals(l)) || (n.push(l), (e = l));
                        }
                    return this.autoClose && n.length > 1 && !n[n.length - 1].equals(n[0]) && n.push(n[0]), n;
                },
                copy: function (t) {
                    Pl.prototype.copy.call(this, t), (this.curves = []);
                    for (var e = 0, n = t.curves.length; e < n; e++) {
                        var i = t.curves[e];
                        this.curves.push(i.clone());
                    }
                    return (this.autoClose = t.autoClose), this;
                },
                toJSON: function () {
                    var t = Pl.prototype.toJSON.call(this);
                    (t.autoClose = this.autoClose), (t.curves = []);
                    for (var e = 0, n = this.curves.length; e < n; e++) {
                        var i = this.curves[e];
                        t.curves.push(i.toJSON());
                    }
                    return t;
                },
                fromJSON: function (t) {
                    Pl.prototype.fromJSON.call(this, t), (this.autoClose = t.autoClose), (this.curves = []);
                    for (var e = 0, n = t.curves.length; e < n; e++) {
                        var i = t.curves[e];
                        this.curves.push(new Xl[i.type]().fromJSON(i));
                    }
                    return this;
                },
            })),
                (Zl.prototype = Object.assign(Object.create(Yl.prototype), {
                    constructor: Zl,
                    setFromPoints: function (t) {
                        this.moveTo(t[0].x, t[0].y);
                        for (var e = 1, n = t.length; e < n; e++) this.lineTo(t[e].x, t[e].y);
                        return this;
                    },
                    moveTo: function (t, e) {
                        return this.currentPoint.set(t, e), this;
                    },
                    lineTo: function (t, e) {
                        var n = new Gl(this.currentPoint.clone(), new Ye(t, e));
                        return this.curves.push(n), this.currentPoint.set(t, e), this;
                    },
                    quadraticCurveTo: function (t, e, n, i) {
                        var r = new Vl(this.currentPoint.clone(), new Ye(t, e), new Ye(n, i));
                        return this.curves.push(r), this.currentPoint.set(n, i), this;
                    },
                    bezierCurveTo: function (t, e, n, i, r, o) {
                        var a = new Ul(this.currentPoint.clone(), new Ye(t, e), new Ye(n, i), new Ye(r, o));
                        return this.curves.push(a), this.currentPoint.set(r, o), this;
                    },
                    splineThru: function (t) {
                        var e = new ql([this.currentPoint.clone()].concat(t));
                        return this.curves.push(e), this.currentPoint.copy(t[t.length - 1]), this;
                    },
                    arc: function (t, e, n, i, r, o) {
                        var a = this.currentPoint.x,
                            s = this.currentPoint.y;
                        return this.absarc(t + a, e + s, n, i, r, o), this;
                    },
                    absarc: function (t, e, n, i, r, o) {
                        return this.absellipse(t, e, n, n, i, r, o), this;
                    },
                    ellipse: function (t, e, n, i, r, o, a, s) {
                        var c = this.currentPoint.x,
                            l = this.currentPoint.y;
                        return this.absellipse(t + c, e + l, n, i, r, o, a, s), this;
                    },
                    absellipse: function (t, e, n, i, r, o, a, s) {
                        var c = new Ll(t, e, n, i, r, o, a, s);
                        if (this.curves.length > 0) {
                            var l = c.getPoint(0);
                            l.equals(this.currentPoint) || this.lineTo(l.x, l.y);
                        }
                        this.curves.push(c);
                        var u = c.getPoint(1);
                        return this.currentPoint.copy(u), this;
                    },
                    copy: function (t) {
                        return Yl.prototype.copy.call(this, t), this.currentPoint.copy(t.currentPoint), this;
                    },
                    toJSON: function () {
                        var t = Yl.prototype.toJSON.call(this);
                        return (t.currentPoint = this.currentPoint.toArray()), t;
                    },
                    fromJSON: function (t) {
                        return Yl.prototype.fromJSON.call(this, t), this.currentPoint.fromArray(t.currentPoint), this;
                    },
                })),
                (Jl.prototype = Object.assign(Object.create(Zl.prototype), {
                    constructor: Jl,
                    getPointsHoles: function (t) {
                        for (var e = [], n = 0, i = this.holes.length; n < i; n++) e[n] = this.holes[n].getPoints(t);
                        return e;
                    },
                    extractPoints: function (t) {
                        return { shape: this.getPoints(t), holes: this.getPointsHoles(t) };
                    },
                    copy: function (t) {
                        Zl.prototype.copy.call(this, t), (this.holes = []);
                        for (var e = 0, n = t.holes.length; e < n; e++) {
                            var i = t.holes[e];
                            this.holes.push(i.clone());
                        }
                        return this;
                    },
                    toJSON: function () {
                        var t = Zl.prototype.toJSON.call(this);
                        (t.uuid = this.uuid), (t.holes = []);
                        for (var e = 0, n = this.holes.length; e < n; e++) {
                            var i = this.holes[e];
                            t.holes.push(i.toJSON());
                        }
                        return t;
                    },
                    fromJSON: function (t) {
                        Zl.prototype.fromJSON.call(this, t), (this.uuid = t.uuid), (this.holes = []);
                        for (var e = 0, n = t.holes.length; e < n; e++) {
                            var i = t.holes[e];
                            this.holes.push(new Zl().fromJSON(i));
                        }
                        return this;
                    },
                })),
                (Ql.prototype = Object.assign(Object.create(On.prototype), {
                    constructor: Ql,
                    isLight: !0,
                    copy: function (t) {
                        return On.prototype.copy.call(this, t), this.color.copy(t.color), (this.intensity = t.intensity), this;
                    },
                    toJSON: function (t) {
                        var e = On.prototype.toJSON.call(this, t);
                        return (
                            (e.object.color = this.color.getHex()),
                            (e.object.intensity = this.intensity),
                            void 0 !== this.groundColor && (e.object.groundColor = this.groundColor.getHex()),
                            void 0 !== this.distance && (e.object.distance = this.distance),
                            void 0 !== this.angle && (e.object.angle = this.angle),
                            void 0 !== this.decay && (e.object.decay = this.decay),
                            void 0 !== this.penumbra && (e.object.penumbra = this.penumbra),
                            void 0 !== this.shadow && (e.object.shadow = this.shadow.toJSON()),
                            e
                        );
                    },
                })),
                (Kl.prototype = Object.assign(Object.create(Ql.prototype), {
                    constructor: Kl,
                    isHemisphereLight: !0,
                    copy: function (t) {
                        return Ql.prototype.copy.call(this, t), this.groundColor.copy(t.groundColor), this;
                    },
                })),
                Object.assign($l.prototype, {
                    _projScreenMatrix: new fn(),
                    _lightPositionWorld: new an(),
                    _lookTarget: new an(),
                    getViewportCount: function () {
                        return this._viewportCount;
                    },
                    getFrustum: function () {
                        return this._frustum;
                    },
                    updateMatrices: function (t) {
                        var e = this.camera,
                            n = this.matrix,
                            i = this._projScreenMatrix,
                            r = this._lookTarget,
                            o = this._lightPositionWorld;
                        o.setFromMatrixPosition(t.matrixWorld),
                            e.position.copy(o),
                            r.setFromMatrixPosition(t.target.matrixWorld),
                            e.lookAt(r),
                            e.updateMatrixWorld(),
                            i.multiplyMatrices(e.projectionMatrix, e.matrixWorldInverse),
                            this._frustum.setFromProjectionMatrix(i),
                            n.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1),
                            n.multiply(e.projectionMatrix),
                            n.multiply(e.matrixWorldInverse);
                    },
                    getViewport: function (t) {
                        return this._viewports[t];
                    },
                    getFrameExtents: function () {
                        return this._frameExtents;
                    },
                    copy: function (t) {
                        return (this.camera = t.camera.clone()), (this.bias = t.bias), (this.radius = t.radius), this.mapSize.copy(t.mapSize), this;
                    },
                    clone: function () {
                        return new this.constructor().copy(this);
                    },
                    toJSON: function () {
                        var t = {};
                        return (
                            0 !== this.bias && (t.bias = this.bias),
                            1 !== this.radius && (t.radius = this.radius),
                            (512 === this.mapSize.x && 512 === this.mapSize.y) || (t.mapSize = this.mapSize.toArray()),
                            (t.camera = this.camera.toJSON(!1).object),
                            delete t.camera.matrix,
                            t
                        );
                    },
                }),
                (tu.prototype = Object.assign(Object.create($l.prototype), {
                    constructor: tu,
                    isSpotLightShadow: !0,
                    updateMatrices: function (t) {
                        var e = this.camera,
                            n = 2 * Xe.RAD2DEG * t.angle,
                            i = this.mapSize.width / this.mapSize.height,
                            r = t.distance || e.far;
                        (n === e.fov && i === e.aspect && r === e.far) || ((e.fov = n), (e.aspect = i), (e.far = r), e.updateProjectionMatrix()), $l.prototype.updateMatrices.call(this, t);
                    },
                })),
                (eu.prototype = Object.assign(Object.create(Ql.prototype), {
                    constructor: eu,
                    isSpotLight: !0,
                    copy: function (t) {
                        return (
                            Ql.prototype.copy.call(this, t),
                            (this.distance = t.distance),
                            (this.angle = t.angle),
                            (this.penumbra = t.penumbra),
                            (this.decay = t.decay),
                            (this.target = t.target.clone()),
                            (this.shadow = t.shadow.clone()),
                            this
                        );
                    },
                })),
                (nu.prototype = Object.assign(Object.create($l.prototype), {
                    constructor: nu,
                    isPointLightShadow: !0,
                    updateMatrices: function (t, e) {
                        void 0 === e && (e = 0);
                        var n = this.camera,
                            i = this.matrix,
                            r = this._lightPositionWorld,
                            o = this._lookTarget,
                            a = this._projScreenMatrix;
                        r.setFromMatrixPosition(t.matrixWorld),
                            n.position.copy(r),
                            o.copy(n.position),
                            o.add(this._cubeDirections[e]),
                            n.up.copy(this._cubeUps[e]),
                            n.lookAt(o),
                            n.updateMatrixWorld(),
                            i.makeTranslation(-r.x, -r.y, -r.z),
                            a.multiplyMatrices(n.projectionMatrix, n.matrixWorldInverse),
                            this._frustum.setFromProjectionMatrix(a);
                    },
                })),
                (iu.prototype = Object.assign(Object.create(Ql.prototype), {
                    constructor: iu,
                    isPointLight: !0,
                    copy: function (t) {
                        return Ql.prototype.copy.call(this, t), (this.distance = t.distance), (this.decay = t.decay), (this.shadow = t.shadow.clone()), this;
                    },
                })),
                (ru.prototype = Object.assign(Object.create(Cr.prototype), {
                    constructor: ru,
                    isOrthographicCamera: !0,
                    copy: function (t, e) {
                        return (
                            Cr.prototype.copy.call(this, t, e),
                            (this.left = t.left),
                            (this.right = t.right),
                            (this.top = t.top),
                            (this.bottom = t.bottom),
                            (this.near = t.near),
                            (this.far = t.far),
                            (this.zoom = t.zoom),
                            (this.view = null === t.view ? null : Object.assign({}, t.view)),
                            this
                        );
                    },
                    setViewOffset: function (t, e, n, i, r, o) {
                        null === this.view && (this.view = { enabled: !0, fullWidth: 1, fullHeight: 1, offsetX: 0, offsetY: 0, width: 1, height: 1 }),
                            (this.view.enabled = !0),
                            (this.view.fullWidth = t),
                            (this.view.fullHeight = e),
                            (this.view.offsetX = n),
                            (this.view.offsetY = i),
                            (this.view.width = r),
                            (this.view.height = o),
                            this.updateProjectionMatrix();
                    },
                    clearViewOffset: function () {
                        null !== this.view && (this.view.enabled = !1), this.updateProjectionMatrix();
                    },
                    updateProjectionMatrix: function () {
                        var t = (this.right - this.left) / (2 * this.zoom),
                            e = (this.top - this.bottom) / (2 * this.zoom),
                            n = (this.right + this.left) / 2,
                            i = (this.top + this.bottom) / 2,
                            r = n - t,
                            o = n + t,
                            a = i + e,
                            s = i - e;
                        if (null !== this.view && this.view.enabled) {
                            var c = (this.right - this.left) / this.view.fullWidth / this.zoom,
                                l = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
                            (o = (r += c * this.view.offsetX) + c * this.view.width), (s = (a -= l * this.view.offsetY) - l * this.view.height);
                        }
                        this.projectionMatrix.makeOrthographic(r, o, a, s, this.near, this.far), this.projectionMatrixInverse.getInverse(this.projectionMatrix);
                    },
                    toJSON: function (t) {
                        var e = On.prototype.toJSON.call(this, t);
                        return (
                            (e.object.zoom = this.zoom),
                            (e.object.left = this.left),
                            (e.object.right = this.right),
                            (e.object.top = this.top),
                            (e.object.bottom = this.bottom),
                            (e.object.near = this.near),
                            (e.object.far = this.far),
                            null !== this.view && (e.object.view = Object.assign({}, this.view)),
                            e
                        );
                    },
                })),
                (ou.prototype = Object.assign(Object.create($l.prototype), {
                    constructor: ou,
                    isDirectionalLightShadow: !0,
                    updateMatrices: function (t) {
                        $l.prototype.updateMatrices.call(this, t);
                    },
                })),
                (au.prototype = Object.assign(Object.create(Ql.prototype), {
                    constructor: au,
                    isDirectionalLight: !0,
                    copy: function (t) {
                        return Ql.prototype.copy.call(this, t), (this.target = t.target.clone()), (this.shadow = t.shadow.clone()), this;
                    },
                })),
                (su.prototype = Object.assign(Object.create(Ql.prototype), { constructor: su, isAmbientLight: !0 })),
                (cu.prototype = Object.assign(Object.create(Ql.prototype), {
                    constructor: cu,
                    isRectAreaLight: !0,
                    copy: function (t) {
                        return Ql.prototype.copy.call(this, t), (this.width = t.width), (this.height = t.height), this;
                    },
                    toJSON: function (t) {
                        var e = Ql.prototype.toJSON.call(this, t);
                        return (e.object.width = this.width), (e.object.height = this.height), e;
                    },
                })),
                (lu.prototype = Object.assign(Object.create(xl.prototype), {
                    constructor: lu,
                    load: function (t, e, n, i) {
                        var r = this,
                            o = new bl(r.manager);
                        o.setPath(r.path),
                            o.load(
                                t,
                                function (t) {
                                    e(r.parse(JSON.parse(t)));
                                },
                                n,
                                i
                            );
                    },
                    parse: function (t) {
                        var e = this.textures;
                        function n(t) {
                            return void 0 === e[t] && console.warn("THREE.MaterialLoader: Undefined texture", t), e[t];
                        }
                        var i = new tl[t.type]();
                        if (
                            (void 0 !== t.uuid && (i.uuid = t.uuid),
                            void 0 !== t.name && (i.name = t.name),
                            void 0 !== t.color && i.color.setHex(t.color),
                            void 0 !== t.roughness && (i.roughness = t.roughness),
                            void 0 !== t.metalness && (i.metalness = t.metalness),
                            void 0 !== t.sheen && (i.sheen = new Mi().setHex(t.sheen)),
                            void 0 !== t.emissive && i.emissive.setHex(t.emissive),
                            void 0 !== t.specular && i.specular.setHex(t.specular),
                            void 0 !== t.shininess && (i.shininess = t.shininess),
                            void 0 !== t.clearcoat && (i.clearcoat = t.clearcoat),
                            void 0 !== t.clearcoatRoughness && (i.clearcoatRoughness = t.clearcoatRoughness),
                            void 0 !== t.fog && (i.fog = t.fog),
                            void 0 !== t.flatShading && (i.flatShading = t.flatShading),
                            void 0 !== t.blending && (i.blending = t.blending),
                            void 0 !== t.combine && (i.combine = t.combine),
                            void 0 !== t.side && (i.side = t.side),
                            void 0 !== t.opacity && (i.opacity = t.opacity),
                            void 0 !== t.transparent && (i.transparent = t.transparent),
                            void 0 !== t.alphaTest && (i.alphaTest = t.alphaTest),
                            void 0 !== t.depthTest && (i.depthTest = t.depthTest),
                            void 0 !== t.depthWrite && (i.depthWrite = t.depthWrite),
                            void 0 !== t.colorWrite && (i.colorWrite = t.colorWrite),
                            void 0 !== t.stencilWrite && (i.stencilWrite = t.stencilWrite),
                            void 0 !== t.stencilWriteMask && (i.stencilWriteMask = t.stencilWriteMask),
                            void 0 !== t.stencilFunc && (i.stencilFunc = t.stencilFunc),
                            void 0 !== t.stencilRef && (i.stencilRef = t.stencilRef),
                            void 0 !== t.stencilFuncMask && (i.stencilFuncMask = t.stencilFuncMask),
                            void 0 !== t.stencilFail && (i.stencilFail = t.stencilFail),
                            void 0 !== t.stencilZFail && (i.stencilZFail = t.stencilZFail),
                            void 0 !== t.stencilZPass && (i.stencilZPass = t.stencilZPass),
                            void 0 !== t.wireframe && (i.wireframe = t.wireframe),
                            void 0 !== t.wireframeLinewidth && (i.wireframeLinewidth = t.wireframeLinewidth),
                            void 0 !== t.wireframeLinecap && (i.wireframeLinecap = t.wireframeLinecap),
                            void 0 !== t.wireframeLinejoin && (i.wireframeLinejoin = t.wireframeLinejoin),
                            void 0 !== t.rotation && (i.rotation = t.rotation),
                            1 !== t.linewidth && (i.linewidth = t.linewidth),
                            void 0 !== t.dashSize && (i.dashSize = t.dashSize),
                            void 0 !== t.gapSize && (i.gapSize = t.gapSize),
                            void 0 !== t.scale && (i.scale = t.scale),
                            void 0 !== t.polygonOffset && (i.polygonOffset = t.polygonOffset),
                            void 0 !== t.polygonOffsetFactor && (i.polygonOffsetFactor = t.polygonOffsetFactor),
                            void 0 !== t.polygonOffsetUnits && (i.polygonOffsetUnits = t.polygonOffsetUnits),
                            void 0 !== t.skinning && (i.skinning = t.skinning),
                            void 0 !== t.morphTargets && (i.morphTargets = t.morphTargets),
                            void 0 !== t.morphNormals && (i.morphNormals = t.morphNormals),
                            void 0 !== t.dithering && (i.dithering = t.dithering),
                            void 0 !== t.vertexTangents && (i.vertexTangents = t.vertexTangents),
                            void 0 !== t.visible && (i.visible = t.visible),
                            void 0 !== t.toneMapped && (i.toneMapped = t.toneMapped),
                            void 0 !== t.userData && (i.userData = t.userData),
                            void 0 !== t.vertexColors && ("number" == typeof t.vertexColors ? (i.vertexColors = t.vertexColors > 0) : (i.vertexColors = t.vertexColors)),
                            void 0 !== t.uniforms)
                        )
                            for (var r in t.uniforms) {
                                var o = t.uniforms[r];
                                switch (((i.uniforms[r] = {}), o.type)) {
                                    case "t":
                                        i.uniforms[r].value = n(o.value);
                                        break;
                                    case "c":
                                        i.uniforms[r].value = new Mi().setHex(o.value);
                                        break;
                                    case "v2":
                                        i.uniforms[r].value = new Ye().fromArray(o.value);
                                        break;
                                    case "v3":
                                        i.uniforms[r].value = new an().fromArray(o.value);
                                        break;
                                    case "v4":
                                        i.uniforms[r].value = new $e().fromArray(o.value);
                                        break;
                                    case "m3":
                                        i.uniforms[r].value = new Ze().fromArray(o.value);
                                    case "m4":
                                        i.uniforms[r].value = new fn().fromArray(o.value);
                                        break;
                                    default:
                                        i.uniforms[r].value = o.value;
                                }
                            }
                        if ((void 0 !== t.defines && (i.defines = t.defines), void 0 !== t.vertexShader && (i.vertexShader = t.vertexShader), void 0 !== t.fragmentShader && (i.fragmentShader = t.fragmentShader), void 0 !== t.extensions))
                            for (var a in t.extensions) i.extensions[a] = t.extensions[a];
                        if (
                            (void 0 !== t.shading && (i.flatShading = 1 === t.shading),
                            void 0 !== t.size && (i.size = t.size),
                            void 0 !== t.sizeAttenuation && (i.sizeAttenuation = t.sizeAttenuation),
                            void 0 !== t.map && (i.map = n(t.map)),
                            void 0 !== t.matcap && (i.matcap = n(t.matcap)),
                            void 0 !== t.alphaMap && (i.alphaMap = n(t.alphaMap)),
                            void 0 !== t.bumpMap && (i.bumpMap = n(t.bumpMap)),
                            void 0 !== t.bumpScale && (i.bumpScale = t.bumpScale),
                            void 0 !== t.normalMap && (i.normalMap = n(t.normalMap)),
                            void 0 !== t.normalMapType && (i.normalMapType = t.normalMapType),
                            void 0 !== t.normalScale)
                        ) {
                            var s = t.normalScale;
                            !1 === Array.isArray(s) && (s = [s, s]), (i.normalScale = new Ye().fromArray(s));
                        }
                        return (
                            void 0 !== t.displacementMap && (i.displacementMap = n(t.displacementMap)),
                            void 0 !== t.displacementScale && (i.displacementScale = t.displacementScale),
                            void 0 !== t.displacementBias && (i.displacementBias = t.displacementBias),
                            void 0 !== t.roughnessMap && (i.roughnessMap = n(t.roughnessMap)),
                            void 0 !== t.metalnessMap && (i.metalnessMap = n(t.metalnessMap)),
                            void 0 !== t.emissiveMap && (i.emissiveMap = n(t.emissiveMap)),
                            void 0 !== t.emissiveIntensity && (i.emissiveIntensity = t.emissiveIntensity),
                            void 0 !== t.specularMap && (i.specularMap = n(t.specularMap)),
                            void 0 !== t.envMap && (i.envMap = n(t.envMap)),
                            void 0 !== t.envMapIntensity && (i.envMapIntensity = t.envMapIntensity),
                            void 0 !== t.reflectivity && (i.reflectivity = t.reflectivity),
                            void 0 !== t.refractionRatio && (i.refractionRatio = t.refractionRatio),
                            void 0 !== t.lightMap && (i.lightMap = n(t.lightMap)),
                            void 0 !== t.lightMapIntensity && (i.lightMapIntensity = t.lightMapIntensity),
                            void 0 !== t.aoMap && (i.aoMap = n(t.aoMap)),
                            void 0 !== t.aoMapIntensity && (i.aoMapIntensity = t.aoMapIntensity),
                            void 0 !== t.gradientMap && (i.gradientMap = n(t.gradientMap)),
                            void 0 !== t.clearcoatMap && (i.clearcoatMap = n(t.clearcoatMap)),
                            void 0 !== t.clearcoatRoughnessMap && (i.clearcoatRoughnessMap = n(t.clearcoatRoughnessMap)),
                            void 0 !== t.clearcoatNormalMap && (i.clearcoatNormalMap = n(t.clearcoatNormalMap)),
                            void 0 !== t.clearcoatNormalScale && (i.clearcoatNormalScale = new Ye().fromArray(t.clearcoatNormalScale)),
                            i
                        );
                    },
                    setTextures: function (t) {
                        return (this.textures = t), this;
                    },
                }));
            var uu = function (t) {
                var e = t.lastIndexOf("/");
                return -1 === e ? "./" : t.substr(0, e + 1);
            };
            function hu() {
                Qi.call(this), (this.type = "InstancedBufferGeometry"), (this.maxInstancedCount = void 0);
            }
            function pu(t, e, n, i) {
                "number" == typeof n && ((i = n), (n = !1), console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")), Oi.call(this, t, e, n), (this.meshPerAttribute = i || 1);
            }
            function du(t) {
                xl.call(this, t);
            }
            (hu.prototype = Object.assign(Object.create(Qi.prototype), {
                constructor: hu,
                isInstancedBufferGeometry: !0,
                copy: function (t) {
                    return Qi.prototype.copy.call(this, t), (this.maxInstancedCount = t.maxInstancedCount), this;
                },
                clone: function () {
                    return new this.constructor().copy(this);
                },
                toJSON: function () {
                    var t = Qi.prototype.toJSON.call(this);
                    return (t.maxInstancedCount = this.maxInstancedCount), (t.isInstancedBufferGeometry = !0), t;
                },
            })),
                (pu.prototype = Object.assign(Object.create(Oi.prototype), {
                    constructor: pu,
                    isInstancedBufferAttribute: !0,
                    copy: function (t) {
                        return Oi.prototype.copy.call(this, t), (this.meshPerAttribute = t.meshPerAttribute), this;
                    },
                    toJSON: function () {
                        var t = Oi.prototype.toJSON.call(this);
                        return (t.meshPerAttribute = this.meshPerAttribute), (t.isInstancedBufferAttribute = !0), t;
                    },
                })),
                (du.prototype = Object.assign(Object.create(xl.prototype), {
                    constructor: du,
                    load: function (t, e, n, i) {
                        var r = this,
                            o = new bl(r.manager);
                        o.setPath(r.path),
                            o.load(
                                t,
                                function (t) {
                                    e(r.parse(JSON.parse(t)));
                                },
                                n,
                                i
                            );
                    },
                    parse: function (t) {
                        var e = t.isInstancedBufferGeometry ? new hu() : new Qi(),
                            n = t.data.index;
                        if (void 0 !== n) {
                            var i = new fu[n.type](n.array);
                            e.setIndex(new Oi(i, 1));
                        }
                        var r = t.data.attributes;
                        for (var o in r) {
                            var a = r[o],
                                s = ((i = new fu[a.type](a.array)), new (a.isInstancedBufferAttribute ? pu : Oi)(i, a.itemSize, a.normalized));
                            void 0 !== a.name && (s.name = a.name), e.setAttribute(o, s);
                        }
                        var c = t.data.morphAttributes;
                        if (c)
                            for (var o in c) {
                                for (var l = c[o], u = [], h = 0, p = l.length; h < p; h++) {
                                    (a = l[h]), (s = new Oi((i = new fu[a.type](a.array)), a.itemSize, a.normalized));
                                    void 0 !== a.name && (s.name = a.name), u.push(s);
                                }
                                e.morphAttributes[o] = u;
                            }
                        t.data.morphTargetsRelative && (e.morphTargetsRelative = !0);
                        var d = t.data.groups || t.data.drawcalls || t.data.offsets;
                        if (void 0 !== d) {
                            h = 0;
                            for (var f = d.length; h !== f; ++h) {
                                var m = d[h];
                                e.addGroup(m.start, m.count, m.materialIndex);
                            }
                        }
                        var v = t.data.boundingSphere;
                        if (void 0 !== v) {
                            var g = new an();
                            void 0 !== v.center && g.fromArray(v.center), (e.boundingSphere = new Jn(g, v.radius));
                        }
                        return t.name && (e.name = t.name), t.userData && (e.userData = t.userData), e;
                    },
                }));
            var fu = {
                Int8Array: Int8Array,
                Uint8Array: Uint8Array,
                Uint8ClampedArray: "undefined" != typeof Uint8ClampedArray ? Uint8ClampedArray : Uint8Array,
                Int16Array: Int16Array,
                Uint16Array: Uint16Array,
                Int32Array: Int32Array,
                Uint32Array: Uint32Array,
                Float32Array: Float32Array,
                Float64Array: Float64Array,
            };
            function mu(t) {
                xl.call(this, t);
            }
            mu.prototype = Object.assign(Object.create(xl.prototype), {
                constructor: mu,
                load: function (t, e, n, i) {
                    var r = this,
                        o = "" === this.path ? uu(t) : this.path;
                    this.resourcePath = this.resourcePath || o;
                    var a = new bl(r.manager);
                    a.setPath(this.path),
                        a.load(
                            t,
                            function (n) {
                                var o = null;
                                try {
                                    o = JSON.parse(n);
                                } catch (e) {
                                    return void 0 !== i && i(e), void console.error("THREE:ObjectLoader: Can't parse " + t + ".", e.message);
                                }
                                var a = o.metadata;
                                void 0 !== a && void 0 !== a.type && "geometry" !== a.type.toLowerCase() ? r.parse(o, e) : console.error("THREE.ObjectLoader: Can't load " + t);
                            },
                            n,
                            i
                        );
                },
                parse: function (t, e) {
                    var n = this.parseShape(t.shapes),
                        i = this.parseGeometries(t.geometries, n),
                        r = this.parseImages(t.images, function () {
                            void 0 !== e && e(s);
                        }),
                        o = this.parseTextures(t.textures, r),
                        a = this.parseMaterials(t.materials, o),
                        s = this.parseObject(t.object, i, a);
                    return t.animations && (s.animations = this.parseAnimations(t.animations)), (void 0 !== t.images && 0 !== t.images.length) || (void 0 !== e && e(s)), s;
                },
                parseShape: function (t) {
                    var e = {};
                    if (void 0 !== t)
                        for (var n = 0, i = t.length; n < i; n++) {
                            var r = new Jl().fromJSON(t[n]);
                            e[r.uuid] = r;
                        }
                    return e;
                },
                parseGeometries: function (t, e) {
                    var n = {};
                    if (void 0 !== t)
                        for (var i = new du(), r = 0, o = t.length; r < o; r++) {
                            var a,
                                s = t[r];
                            switch (s.type) {
                                case "PlaneGeometry":
                                case "PlaneBufferGeometry":
                                    a = new Hc[s.type](s.width, s.height, s.widthSegments, s.heightSegments);
                                    break;
                                case "BoxGeometry":
                                case "BoxBufferGeometry":
                                case "CubeGeometry":
                                    a = new Hc[s.type](s.width, s.height, s.depth, s.widthSegments, s.heightSegments, s.depthSegments);
                                    break;
                                case "CircleGeometry":
                                case "CircleBufferGeometry":
                                    a = new Hc[s.type](s.radius, s.segments, s.thetaStart, s.thetaLength);
                                    break;
                                case "CylinderGeometry":
                                case "CylinderBufferGeometry":
                                    a = new Hc[s.type](s.radiusTop, s.radiusBottom, s.height, s.radialSegments, s.heightSegments, s.openEnded, s.thetaStart, s.thetaLength);
                                    break;
                                case "ConeGeometry":
                                case "ConeBufferGeometry":
                                    a = new Hc[s.type](s.radius, s.height, s.radialSegments, s.heightSegments, s.openEnded, s.thetaStart, s.thetaLength);
                                    break;
                                case "SphereGeometry":
                                case "SphereBufferGeometry":
                                    a = new Hc[s.type](s.radius, s.widthSegments, s.heightSegments, s.phiStart, s.phiLength, s.thetaStart, s.thetaLength);
                                    break;
                                case "DodecahedronGeometry":
                                case "DodecahedronBufferGeometry":
                                case "IcosahedronGeometry":
                                case "IcosahedronBufferGeometry":
                                case "OctahedronGeometry":
                                case "OctahedronBufferGeometry":
                                case "TetrahedronGeometry":
                                case "TetrahedronBufferGeometry":
                                    a = new Hc[s.type](s.radius, s.detail);
                                    break;
                                case "RingGeometry":
                                case "RingBufferGeometry":
                                    a = new Hc[s.type](s.innerRadius, s.outerRadius, s.thetaSegments, s.phiSegments, s.thetaStart, s.thetaLength);
                                    break;
                                case "TorusGeometry":
                                case "TorusBufferGeometry":
                                    a = new Hc[s.type](s.radius, s.tube, s.radialSegments, s.tubularSegments, s.arc);
                                    break;
                                case "TorusKnotGeometry":
                                case "TorusKnotBufferGeometry":
                                    a = new Hc[s.type](s.radius, s.tube, s.tubularSegments, s.radialSegments, s.p, s.q);
                                    break;
                                case "TubeGeometry":
                                case "TubeBufferGeometry":
                                    a = new Hc[s.type](new Xl[s.path.type]().fromJSON(s.path), s.tubularSegments, s.radius, s.radialSegments, s.closed);
                                    break;
                                case "LatheGeometry":
                                case "LatheBufferGeometry":
                                    a = new Hc[s.type](s.points, s.segments, s.phiStart, s.phiLength);
                                    break;
                                case "PolyhedronGeometry":
                                case "PolyhedronBufferGeometry":
                                    a = new Hc[s.type](s.vertices, s.indices, s.radius, s.details);
                                    break;
                                case "ShapeGeometry":
                                case "ShapeBufferGeometry":
                                    for (var c = [], l = 0, u = s.shapes.length; l < u; l++) {
                                        var h = e[s.shapes[l]];
                                        c.push(h);
                                    }
                                    a = new Hc[s.type](c, s.curveSegments);
                                    break;
                                case "ExtrudeGeometry":
                                case "ExtrudeBufferGeometry":
                                    for (c = [], l = 0, u = s.shapes.length; l < u; l++) {
                                        h = e[s.shapes[l]];
                                        c.push(h);
                                    }
                                    var p = s.options.extrudePath;
                                    void 0 !== p && (s.options.extrudePath = new Xl[p.type]().fromJSON(p)), (a = new Hc[s.type](c, s.options));
                                    break;
                                case "BufferGeometry":
                                case "InstancedBufferGeometry":
                                    a = i.parse(s);
                                    break;
                                case "Geometry":
                                    console.error('THREE.ObjectLoader: Loading "Geometry" is not supported anymore.');
                                    break;
                                default:
                                    console.warn('THREE.ObjectLoader: Unsupported geometry type "' + s.type + '"');
                                    continue;
                            }
                            (a.uuid = s.uuid), void 0 !== s.name && (a.name = s.name), !0 === a.isBufferGeometry && void 0 !== s.userData && (a.userData = s.userData), (n[s.uuid] = a);
                        }
                    return n;
                },
                parseMaterials: function (t, e) {
                    var n = {},
                        i = {};
                    if (void 0 !== t) {
                        var r = new lu();
                        r.setTextures(e);
                        for (var o = 0, a = t.length; o < a; o++) {
                            var s = t[o];
                            if ("MultiMaterial" === s.type) {
                                for (var c = [], l = 0; l < s.materials.length; l++) {
                                    var u = s.materials[l];
                                    void 0 === n[u.uuid] && (n[u.uuid] = r.parse(u)), c.push(n[u.uuid]);
                                }
                                i[s.uuid] = c;
                            } else void 0 === n[s.uuid] && (n[s.uuid] = r.parse(s)), (i[s.uuid] = n[s.uuid]);
                        }
                    }
                    return i;
                },
                parseAnimations: function (t) {
                    for (var e = [], n = 0; n < t.length; n++) {
                        var i = t[n],
                            r = fl.parse(i);
                        void 0 !== i.uuid && (r.uuid = i.uuid), e.push(r);
                    }
                    return e;
                },
                parseImages: function (t, e) {
                    var n = this,
                        i = {};
                    function r(t) {
                        return (
                            n.manager.itemStart(t),
                            o.load(
                                t,
                                function () {
                                    n.manager.itemEnd(t);
                                },
                                void 0,
                                function () {
                                    n.manager.itemError(t), n.manager.itemEnd(t);
                                }
                            )
                        );
                    }
                    if (void 0 !== t && t.length > 0) {
                        var o = new Tl(new gl(e));
                        o.setCrossOrigin(this.crossOrigin);
                        for (var a = 0, s = t.length; a < s; a++) {
                            var c = t[a],
                                l = c.url;
                            if (Array.isArray(l)) {
                                i[c.uuid] = [];
                                for (var u = 0, h = l.length; u < h; u++) {
                                    var p = l[u],
                                        d = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(p) ? p : n.resourcePath + p;
                                    i[c.uuid].push(r(d));
                                }
                            } else {
                                d = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(c.url) ? c.url : n.resourcePath + c.url;
                                i[c.uuid] = r(d);
                            }
                        }
                    }
                    return i;
                },
                parseTextures: function (t, e) {
                    function n(t, e) {
                        return "number" == typeof t ? t : (console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", t), e[t]);
                    }
                    var i = {};
                    if (void 0 !== t)
                        for (var r = 0, o = t.length; r < o; r++) {
                            var a,
                                s = t[r];
                            void 0 === s.image && console.warn('THREE.ObjectLoader: No "image" specified for', s.uuid),
                                void 0 === e[s.image] && console.warn("THREE.ObjectLoader: Undefined image", s.image),
                                ((a = Array.isArray(e[s.image]) ? new Yr(e[s.image]) : new Ke(e[s.image])).needsUpdate = !0),
                                (a.uuid = s.uuid),
                                void 0 !== s.name && (a.name = s.name),
                                void 0 !== s.mapping && (a.mapping = n(s.mapping, gu)),
                                void 0 !== s.offset && a.offset.fromArray(s.offset),
                                void 0 !== s.repeat && a.repeat.fromArray(s.repeat),
                                void 0 !== s.center && a.center.fromArray(s.center),
                                void 0 !== s.rotation && (a.rotation = s.rotation),
                                void 0 !== s.wrap && ((a.wrapS = n(s.wrap[0], yu)), (a.wrapT = n(s.wrap[1], yu))),
                                void 0 !== s.format && (a.format = s.format),
                                void 0 !== s.type && (a.type = s.type),
                                void 0 !== s.encoding && (a.encoding = s.encoding),
                                void 0 !== s.minFilter && (a.minFilter = n(s.minFilter, xu)),
                                void 0 !== s.magFilter && (a.magFilter = n(s.magFilter, xu)),
                                void 0 !== s.anisotropy && (a.anisotropy = s.anisotropy),
                                void 0 !== s.flipY && (a.flipY = s.flipY),
                                void 0 !== s.premultiplyAlpha && (a.premultiplyAlpha = s.premultiplyAlpha),
                                void 0 !== s.unpackAlignment && (a.unpackAlignment = s.unpackAlignment),
                                (i[s.uuid] = a);
                        }
                    return i;
                },
                parseObject: function (t, e, n) {
                    var i;
                    function r(t) {
                        return void 0 === e[t] && console.warn("THREE.ObjectLoader: Undefined geometry", t), e[t];
                    }
                    function o(t) {
                        if (void 0 !== t) {
                            if (Array.isArray(t)) {
                                for (var e = [], i = 0, r = t.length; i < r; i++) {
                                    var o = t[i];
                                    void 0 === n[o] && console.warn("THREE.ObjectLoader: Undefined material", o), e.push(n[o]);
                                }
                                return e;
                            }
                            return void 0 === n[t] && console.warn("THREE.ObjectLoader: Undefined material", t), n[t];
                        }
                    }
                    switch (t.type) {
                        case "Scene":
                            (i = new Dn()),
                                void 0 !== t.background && Number.isInteger(t.background) && (i.background = new Mi(t.background)),
                                void 0 !== t.fog && ("Fog" === t.fog.type ? (i.fog = new Ca(t.fog.color, t.fog.near, t.fog.far)) : "FogExp2" === t.fog.type && (i.fog = new La(t.fog.color, t.fog.density)));
                            break;
                        case "PerspectiveCamera":
                            (i = new Rr(t.fov, t.aspect, t.near, t.far)),
                                void 0 !== t.focus && (i.focus = t.focus),
                                void 0 !== t.zoom && (i.zoom = t.zoom),
                                void 0 !== t.filmGauge && (i.filmGauge = t.filmGauge),
                                void 0 !== t.filmOffset && (i.filmOffset = t.filmOffset),
                                void 0 !== t.view && (i.view = Object.assign({}, t.view));
                            break;
                        case "OrthographicCamera":
                            (i = new ru(t.left, t.right, t.top, t.bottom, t.near, t.far)), void 0 !== t.zoom && (i.zoom = t.zoom), void 0 !== t.view && (i.view = Object.assign({}, t.view));
                            break;
                        case "AmbientLight":
                            i = new su(t.color, t.intensity);
                            break;
                        case "DirectionalLight":
                            i = new au(t.color, t.intensity);
                            break;
                        case "PointLight":
                            i = new iu(t.color, t.intensity, t.distance, t.decay);
                            break;
                        case "RectAreaLight":
                            i = new cu(t.color, t.intensity, t.width, t.height);
                            break;
                        case "SpotLight":
                            i = new eu(t.color, t.intensity, t.distance, t.angle, t.penumbra, t.decay);
                            break;
                        case "HemisphereLight":
                            i = new Kl(t.color, t.groundColor, t.intensity);
                            break;
                        case "SkinnedMesh":
                            console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");
                        case "Mesh":
                            i = new mr((a = r(t.geometry)), (s = o(t.material)));
                            break;
                        case "InstancedMesh":
                            var a = r(t.geometry),
                                s = o(t.material),
                                c = t.count,
                                l = t.instanceMatrix;
                            (i = new cs(a, s, c)).instanceMatrix = new Oi(new Float32Array(l.array), 16);
                            break;
                        case "LOD":
                            i = new Ka();
                            break;
                        case "Line":
                            i = new ms(r(t.geometry), o(t.material), t.mode);
                            break;
                        case "LineLoop":
                            i = new xs(r(t.geometry), o(t.material));
                            break;
                        case "LineSegments":
                            i = new ys(r(t.geometry), o(t.material));
                            break;
                        case "PointCloud":
                        case "Points":
                            i = new Ts(r(t.geometry), o(t.material));
                            break;
                        case "Sprite":
                            i = new Ya(o(t.material));
                            break;
                        case "Group":
                            i = new Ea();
                            break;
                        default:
                            i = new On();
                    }
                    if (
                        ((i.uuid = t.uuid),
                        void 0 !== t.name && (i.name = t.name),
                        void 0 !== t.matrix
                            ? (i.matrix.fromArray(t.matrix), void 0 !== t.matrixAutoUpdate && (i.matrixAutoUpdate = t.matrixAutoUpdate), i.matrixAutoUpdate && i.matrix.decompose(i.position, i.quaternion, i.scale))
                            : (void 0 !== t.position && i.position.fromArray(t.position),
                              void 0 !== t.rotation && i.rotation.fromArray(t.rotation),
                              void 0 !== t.quaternion && i.quaternion.fromArray(t.quaternion),
                              void 0 !== t.scale && i.scale.fromArray(t.scale)),
                        void 0 !== t.castShadow && (i.castShadow = t.castShadow),
                        void 0 !== t.receiveShadow && (i.receiveShadow = t.receiveShadow),
                        t.shadow &&
                            (void 0 !== t.shadow.bias && (i.shadow.bias = t.shadow.bias),
                            void 0 !== t.shadow.radius && (i.shadow.radius = t.shadow.radius),
                            void 0 !== t.shadow.mapSize && i.shadow.mapSize.fromArray(t.shadow.mapSize),
                            void 0 !== t.shadow.camera && (i.shadow.camera = this.parseObject(t.shadow.camera))),
                        void 0 !== t.visible && (i.visible = t.visible),
                        void 0 !== t.frustumCulled && (i.frustumCulled = t.frustumCulled),
                        void 0 !== t.renderOrder && (i.renderOrder = t.renderOrder),
                        void 0 !== t.userData && (i.userData = t.userData),
                        void 0 !== t.layers && (i.layers.mask = t.layers),
                        void 0 !== t.children)
                    )
                        for (var u = t.children, h = 0; h < u.length; h++) i.add(this.parseObject(u[h], e, n));
                    if ("LOD" === t.type) {
                        void 0 !== t.autoUpdate && (i.autoUpdate = t.autoUpdate);
                        for (var p = t.levels, d = 0; d < p.length; d++) {
                            var f = p[d],
                                m = i.getObjectByProperty("uuid", f.object);
                            void 0 !== m && i.addLevel(m, f.distance);
                        }
                    }
                    return i;
                },
            });
            var vu,
                gu = {
                    UVMapping: 300,
                    CubeReflectionMapping: Q,
                    CubeRefractionMapping: K,
                    EquirectangularReflectionMapping: $,
                    EquirectangularRefractionMapping: tt,
                    SphericalReflectionMapping: et,
                    CubeUVReflectionMapping: nt,
                    CubeUVRefractionMapping: it,
                },
                yu = { RepeatWrapping: rt, ClampToEdgeWrapping: ot, MirroredRepeatWrapping: at },
                xu = { NearestFilter: st, NearestMipmapNearestFilter: ct, NearestMipmapLinearFilter: lt, LinearFilter: ut, LinearMipmapNearestFilter: ht, LinearMipmapLinearFilter: pt };
            function _u(t) {
                "undefined" == typeof createImageBitmap && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),
                    "undefined" == typeof fetch && console.warn("THREE.ImageBitmapLoader: fetch() not supported."),
                    xl.call(this, t),
                    (this.options = void 0);
            }
            function bu() {
                (this.type = "ShapePath"), (this.color = new Mi()), (this.subPaths = []), (this.currentPath = null);
            }
            function wu(t) {
                (this.type = "Font"), (this.data = t);
            }
            function Mu(t, e, n, i, r) {
                var o = r.glyphs[t] || r.glyphs["?"];
                if (o) {
                    var a,
                        s,
                        c,
                        l,
                        u,
                        h,
                        p,
                        d,
                        f = new bu();
                    if (o.o)
                        for (var m = o._cachedOutline || (o._cachedOutline = o.o.split(" ")), v = 0, g = m.length; v < g; ) {
                            switch (m[v++]) {
                                case "m":
                                    (a = m[v++] * e + n), (s = m[v++] * e + i), f.moveTo(a, s);
                                    break;
                                case "l":
                                    (a = m[v++] * e + n), (s = m[v++] * e + i), f.lineTo(a, s);
                                    break;
                                case "q":
                                    (c = m[v++] * e + n), (l = m[v++] * e + i), (u = m[v++] * e + n), (h = m[v++] * e + i), f.quadraticCurveTo(u, h, c, l);
                                    break;
                                case "b":
                                    (c = m[v++] * e + n), (l = m[v++] * e + i), (u = m[v++] * e + n), (h = m[v++] * e + i), (p = m[v++] * e + n), (d = m[v++] * e + i), f.bezierCurveTo(u, h, p, d, c, l);
                            }
                        }
                    return { offsetX: o.ha * e, path: f };
                }
                console.error('THREE.Font: character "' + t + '" does not exists in font family ' + r.familyName + ".");
            }
            function Su(t) {
                xl.call(this, t);
            }
            (_u.prototype = Object.assign(Object.create(xl.prototype), {
                constructor: _u,
                setOptions: function (t) {
                    return (this.options = t), this;
                },
                load: function (t, e, n, i) {
                    void 0 === t && (t = ""), void 0 !== this.path && (t = this.path + t), (t = this.manager.resolveURL(t));
                    var r = this,
                        o = vl.get(t);
                    if (void 0 !== o)
                        return (
                            r.manager.itemStart(t),
                            setTimeout(function () {
                                e && e(o), r.manager.itemEnd(t);
                            }, 0),
                            o
                        );
                    fetch(t)
                        .then(function (t) {
                            return t.blob();
                        })
                        .then(function (t) {
                            return void 0 === r.options ? createImageBitmap(t) : createImageBitmap(t, r.options);
                        })
                        .then(function (n) {
                            vl.add(t, n), e && e(n), r.manager.itemEnd(t);
                        })
                        .catch(function (e) {
                            i && i(e), r.manager.itemError(t), r.manager.itemEnd(t);
                        }),
                        r.manager.itemStart(t);
                },
            })),
                Object.assign(bu.prototype, {
                    moveTo: function (t, e) {
                        return (this.currentPath = new Zl()), this.subPaths.push(this.currentPath), this.currentPath.moveTo(t, e), this;
                    },
                    lineTo: function (t, e) {
                        return this.currentPath.lineTo(t, e), this;
                    },
                    quadraticCurveTo: function (t, e, n, i) {
                        return this.currentPath.quadraticCurveTo(t, e, n, i), this;
                    },
                    bezierCurveTo: function (t, e, n, i, r, o) {
                        return this.currentPath.bezierCurveTo(t, e, n, i, r, o), this;
                    },
                    splineThru: function (t) {
                        return this.currentPath.splineThru(t), this;
                    },
                    toShapes: function (t, e) {
                        function n(t) {
                            for (var e = [], n = 0, i = t.length; n < i; n++) {
                                var r = t[n],
                                    o = new Jl();
                                (o.curves = r.curves), e.push(o);
                            }
                            return e;
                        }
                        function i(t, e) {
                            for (var n = e.length, i = !1, r = n - 1, o = 0; o < n; r = o++) {
                                var a = e[r],
                                    s = e[o],
                                    c = s.x - a.x,
                                    l = s.y - a.y;
                                if (Math.abs(l) > Number.EPSILON) {
                                    if ((l < 0 && ((a = e[o]), (c = -c), (s = e[r]), (l = -l)), t.y < a.y || t.y > s.y)) continue;
                                    if (t.y === a.y) {
                                        if (t.x === a.x) return !0;
                                    } else {
                                        var u = l * (t.x - a.x) - c * (t.y - a.y);
                                        if (0 === u) return !0;
                                        if (u < 0) continue;
                                        i = !i;
                                    }
                                } else {
                                    if (t.y !== a.y) continue;
                                    if ((s.x <= t.x && t.x <= a.x) || (a.x <= t.x && t.x <= s.x)) return !0;
                                }
                            }
                            return i;
                        }
                        var r = yc.isClockWise,
                            o = this.subPaths;
                        if (0 === o.length) return [];
                        if (!0 === e) return n(o);
                        var a,
                            s,
                            c,
                            l = [];
                        if (1 === o.length) return (s = o[0]), ((c = new Jl()).curves = s.curves), l.push(c), l;
                        var u = !r(o[0].getPoints());
                        u = t ? !u : u;
                        var h,
                            p,
                            d = [],
                            f = [],
                            m = [],
                            v = 0;
                        (f[v] = void 0), (m[v] = []);
                        for (var g = 0, y = o.length; g < y; g++)
                            (a = r((h = (s = o[g]).getPoints()))), (a = t ? !a : a) ? (!u && f[v] && v++, (f[v] = { s: new Jl(), p: h }), (f[v].s.curves = s.curves), u && v++, (m[v] = [])) : m[v].push({ h: s, p: h[0] });
                        if (!f[0]) return n(o);
                        if (f.length > 1) {
                            for (var x = !1, _ = [], b = 0, w = f.length; b < w; b++) d[b] = [];
                            for (b = 0, w = f.length; b < w; b++)
                                for (var M = m[b], S = 0; S < M.length; S++) {
                                    for (var T = M[S], E = !0, A = 0; A < f.length; A++) i(T.p, f[A].p) && (b !== A && _.push({ froms: b, tos: A, hole: S }), E ? ((E = !1), d[A].push(T)) : (x = !0));
                                    E && d[b].push(T);
                                }
                            _.length > 0 && (x || (m = d));
                        }
                        g = 0;
                        for (var P = f.length; g < P; g++) {
                            (c = f[g].s), l.push(c);
                            for (var L = 0, C = (p = m[g]).length; L < C; L++) c.holes.push(p[L].h);
                        }
                        return l;
                    },
                }),
                Object.assign(wu.prototype, {
                    isFont: !0,
                    generateShapes: function (t, e) {
                        void 0 === e && (e = 100);
                        for (
                            var n = [],
                                i = (function (t, e, n) {
                                    for (
                                        var i = Array.from ? Array.from(t) : String(t).split(""), r = e / n.resolution, o = (n.boundingBox.yMax - n.boundingBox.yMin + n.underlineThickness) * r, a = [], s = 0, c = 0, l = 0;
                                        l < i.length;
                                        l++
                                    ) {
                                        var u = i[l];
                                        if ("\n" === u) (s = 0), (c -= o);
                                        else {
                                            var h = Mu(u, r, s, c, n);
                                            (s += h.offsetX), a.push(h.path);
                                        }
                                    }
                                    return a;
                                })(t, e, this.data),
                                r = 0,
                                o = i.length;
                            r < o;
                            r++
                        )
                            Array.prototype.push.apply(n, i[r].toShapes());
                        return n;
                    },
                }),
                (Su.prototype = Object.assign(Object.create(xl.prototype), {
                    constructor: Su,
                    load: function (t, e, n, i) {
                        var r = this,
                            o = new bl(this.manager);
                        o.setPath(this.path),
                            o.load(
                                t,
                                function (t) {
                                    var n;
                                    try {
                                        n = JSON.parse(t);
                                    } catch (e) {
                                        console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."), (n = JSON.parse(t.substring(65, t.length - 2)));
                                    }
                                    var i = r.parse(n);
                                    e && e(i);
                                },
                                n,
                                i
                            );
                    },
                    parse: function (t) {
                        return new wu(t);
                    },
                }));
            var Tu = {
                getContext: function () {
                    return void 0 === vu && (vu = new (window.AudioContext || window.webkitAudioContext)()), vu;
                },
                setContext: function (t) {
                    vu = t;
                },
            };
            function Eu(t) {
                xl.call(this, t);
            }
            function Au() {
                this.coefficients = [];
                for (var t = 0; t < 9; t++) this.coefficients.push(new an());
            }
            function Pu(t, e) {
                Ql.call(this, void 0, e), (this.sh = void 0 !== t ? t : new Au());
            }
            function Lu(t, e, n) {
                Pu.call(this, void 0, n);
                var i = new Mi().set(t),
                    r = new Mi().set(e),
                    o = new an(i.r, i.g, i.b),
                    a = new an(r.r, r.g, r.b),
                    s = Math.sqrt(Math.PI),
                    c = s * Math.sqrt(0.75);
                this.sh.coefficients[0].copy(o).add(a).multiplyScalar(s), this.sh.coefficients[1].copy(o).sub(a).multiplyScalar(c);
            }
            function Cu(t, e) {
                Pu.call(this, void 0, e);
                var n = new Mi().set(t);
                this.sh.coefficients[0].set(n.r, n.g, n.b).multiplyScalar(2 * Math.sqrt(Math.PI));
            }
            (Eu.prototype = Object.assign(Object.create(xl.prototype), {
                constructor: Eu,
                load: function (t, e, n, i) {
                    var r = new bl(this.manager);
                    r.setResponseType("arraybuffer"),
                        r.setPath(this.path),
                        r.load(
                            t,
                            function (t) {
                                var n = t.slice(0);
                                Tu.getContext().decodeAudioData(n, function (t) {
                                    e(t);
                                });
                            },
                            n,
                            i
                        );
                },
            })),
                Object.assign(Au.prototype, {
                    isSphericalHarmonics3: !0,
                    set: function (t) {
                        for (var e = 0; e < 9; e++) this.coefficients[e].copy(t[e]);
                        return this;
                    },
                    zero: function () {
                        for (var t = 0; t < 9; t++) this.coefficients[t].set(0, 0, 0);
                        return this;
                    },
                    getAt: function (t, e) {
                        var n = t.x,
                            i = t.y,
                            r = t.z,
                            o = this.coefficients;
                        return (
                            e.copy(o[0]).multiplyScalar(0.282095),
                            e.addScaledVector(o[1], 0.488603 * i),
                            e.addScaledVector(o[2], 0.488603 * r),
                            e.addScaledVector(o[3], 0.488603 * n),
                            e.addScaledVector(o[4], n * i * 1.092548),
                            e.addScaledVector(o[5], i * r * 1.092548),
                            e.addScaledVector(o[6], 0.315392 * (3 * r * r - 1)),
                            e.addScaledVector(o[7], n * r * 1.092548),
                            e.addScaledVector(o[8], 0.546274 * (n * n - i * i)),
                            e
                        );
                    },
                    getIrradianceAt: function (t, e) {
                        var n = t.x,
                            i = t.y,
                            r = t.z,
                            o = this.coefficients;
                        return (
                            e.copy(o[0]).multiplyScalar(0.886227),
                            e.addScaledVector(o[1], 1.023328 * i),
                            e.addScaledVector(o[2], 1.023328 * r),
                            e.addScaledVector(o[3], 1.023328 * n),
                            e.addScaledVector(o[4], 0.858086 * n * i),
                            e.addScaledVector(o[5], 0.858086 * i * r),
                            e.addScaledVector(o[6], 0.743125 * r * r - 0.247708),
                            e.addScaledVector(o[7], 0.858086 * n * r),
                            e.addScaledVector(o[8], 0.429043 * (n * n - i * i)),
                            e
                        );
                    },
                    add: function (t) {
                        for (var e = 0; e < 9; e++) this.coefficients[e].add(t.coefficients[e]);
                        return this;
                    },
                    addScaledSH: function (t, e) {
                        for (var n = 0; n < 9; n++) this.coefficients[n].addScaledVector(t.coefficients[n], e);
                        return this;
                    },
                    scale: function (t) {
                        for (var e = 0; e < 9; e++) this.coefficients[e].multiplyScalar(t);
                        return this;
                    },
                    lerp: function (t, e) {
                        for (var n = 0; n < 9; n++) this.coefficients[n].lerp(t.coefficients[n], e);
                        return this;
                    },
                    equals: function (t) {
                        for (var e = 0; e < 9; e++) if (!this.coefficients[e].equals(t.coefficients[e])) return !1;
                        return !0;
                    },
                    copy: function (t) {
                        return this.set(t.coefficients);
                    },
                    clone: function () {
                        return new this.constructor().copy(this);
                    },
                    fromArray: function (t, e) {
                        void 0 === e && (e = 0);
                        for (var n = this.coefficients, i = 0; i < 9; i++) n[i].fromArray(t, e + 3 * i);
                        return this;
                    },
                    toArray: function (t, e) {
                        void 0 === t && (t = []), void 0 === e && (e = 0);
                        for (var n = this.coefficients, i = 0; i < 9; i++) n[i].toArray(t, e + 3 * i);
                        return t;
                    },
                }),
                Object.assign(Au, {
                    getBasisAt: function (t, e) {
                        var n = t.x,
                            i = t.y,
                            r = t.z;
                        (e[0] = 0.282095),
                            (e[1] = 0.488603 * i),
                            (e[2] = 0.488603 * r),
                            (e[3] = 0.488603 * n),
                            (e[4] = 1.092548 * n * i),
                            (e[5] = 1.092548 * i * r),
                            (e[6] = 0.315392 * (3 * r * r - 1)),
                            (e[7] = 1.092548 * n * r),
                            (e[8] = 0.546274 * (n * n - i * i));
                    },
                }),
                (Pu.prototype = Object.assign(Object.create(Ql.prototype), {
                    constructor: Pu,
                    isLightProbe: !0,
                    copy: function (t) {
                        return Ql.prototype.copy.call(this, t), this.sh.copy(t.sh), (this.intensity = t.intensity), this;
                    },
                    toJSON: function (t) {
                        return Ql.prototype.toJSON.call(this, t);
                    },
                })),
                (Lu.prototype = Object.assign(Object.create(Pu.prototype), {
                    constructor: Lu,
                    isHemisphereLightProbe: !0,
                    copy: function (t) {
                        return Pu.prototype.copy.call(this, t), this;
                    },
                    toJSON: function (t) {
                        return Pu.prototype.toJSON.call(this, t);
                    },
                })),
                (Cu.prototype = Object.assign(Object.create(Pu.prototype), {
                    constructor: Cu,
                    isAmbientLightProbe: !0,
                    copy: function (t) {
                        return Pu.prototype.copy.call(this, t), this;
                    },
                    toJSON: function (t) {
                        return Pu.prototype.toJSON.call(this, t);
                    },
                }));
            var Ru = new fn(),
                Ou = new fn();
            function Du(t) {
                (this.autoStart = void 0 === t || t), (this.startTime = 0), (this.oldTime = 0), (this.elapsedTime = 0), (this.running = !1);
            }
            Object.assign(
                function () {
                    (this.type = "StereoCamera"),
                        (this.aspect = 1),
                        (this.eyeSep = 0.064),
                        (this.cameraL = new Rr()),
                        this.cameraL.layers.enable(1),
                        (this.cameraL.matrixAutoUpdate = !1),
                        (this.cameraR = new Rr()),
                        this.cameraR.layers.enable(2),
                        (this.cameraR.matrixAutoUpdate = !1),
                        (this._cache = { focus: null, fov: null, aspect: null, near: null, far: null, zoom: null, eyeSep: null });
                }.prototype,
                {
                    update: function (t) {
                        var e = this._cache;
                        if (e.focus !== t.focus || e.fov !== t.fov || e.aspect !== t.aspect * this.aspect || e.near !== t.near || e.far !== t.far || e.zoom !== t.zoom || e.eyeSep !== this.eyeSep) {
                            (e.focus = t.focus), (e.fov = t.fov), (e.aspect = t.aspect * this.aspect), (e.near = t.near), (e.far = t.far), (e.zoom = t.zoom), (e.eyeSep = this.eyeSep);
                            var n,
                                i,
                                r = t.projectionMatrix.clone(),
                                o = e.eyeSep / 2,
                                a = (o * e.near) / e.focus,
                                s = (e.near * Math.tan(Xe.DEG2RAD * e.fov * 0.5)) / e.zoom;
                            (Ou.elements[12] = -o),
                                (Ru.elements[12] = o),
                                (n = -s * e.aspect + a),
                                (i = s * e.aspect + a),
                                (r.elements[0] = (2 * e.near) / (i - n)),
                                (r.elements[8] = (i + n) / (i - n)),
                                this.cameraL.projectionMatrix.copy(r),
                                (n = -s * e.aspect - a),
                                (i = s * e.aspect - a),
                                (r.elements[0] = (2 * e.near) / (i - n)),
                                (r.elements[8] = (i + n) / (i - n)),
                                this.cameraR.projectionMatrix.copy(r);
                        }
                        this.cameraL.matrixWorld.copy(t.matrixWorld).multiply(Ou), this.cameraR.matrixWorld.copy(t.matrixWorld).multiply(Ru);
                    },
                }
            ),
                Object.assign(Du.prototype, {
                    start: function () {
                        (this.startTime = ("undefined" == typeof performance ? Date : performance).now()), (this.oldTime = this.startTime), (this.elapsedTime = 0), (this.running = !0);
                    },
                    stop: function () {
                        this.getElapsedTime(), (this.running = !1), (this.autoStart = !1);
                    },
                    getElapsedTime: function () {
                        return this.getDelta(), this.elapsedTime;
                    },
                    getDelta: function () {
                        var t = 0;
                        if (this.autoStart && !this.running) return this.start(), 0;
                        if (this.running) {
                            var e = ("undefined" == typeof performance ? Date : performance).now();
                            (t = (e - this.oldTime) / 1e3), (this.oldTime = e), (this.elapsedTime += t);
                        }
                        return t;
                    },
                });
            var Iu = new an(),
                Nu = new nn(),
                ku = new an(),
                Bu = new an();
            function zu() {
                On.call(this),
                    (this.type = "AudioListener"),
                    (this.context = Tu.getContext()),
                    (this.gain = this.context.createGain()),
                    this.gain.connect(this.context.destination),
                    (this.filter = null),
                    (this.timeDelta = 0),
                    (this._clock = new Du());
            }
            function Fu(t) {
                On.call(this),
                    (this.type = "Audio"),
                    (this.listener = t),
                    (this.context = t.context),
                    (this.gain = this.context.createGain()),
                    this.gain.connect(t.getInput()),
                    (this.autoplay = !1),
                    (this.buffer = null),
                    (this.detune = 0),
                    (this.loop = !1),
                    (this.loopStart = 0),
                    (this.loopEnd = 0),
                    (this.offset = 0),
                    (this.duration = void 0),
                    (this.playbackRate = 1),
                    (this.isPlaying = !1),
                    (this.hasPlaybackControl = !0),
                    (this.sourceType = "empty"),
                    (this._startedAt = 0),
                    (this._pausedAt = 0),
                    (this.filters = []);
            }
            (zu.prototype = Object.assign(Object.create(On.prototype), {
                constructor: zu,
                getInput: function () {
                    return this.gain;
                },
                removeFilter: function () {
                    return null !== this.filter && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), (this.filter = null)), this;
                },
                getFilter: function () {
                    return this.filter;
                },
                setFilter: function (t) {
                    return (
                        null !== this.filter ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination),
                        (this.filter = t),
                        this.gain.connect(this.filter),
                        this.filter.connect(this.context.destination),
                        this
                    );
                },
                getMasterVolume: function () {
                    return this.gain.gain.value;
                },
                setMasterVolume: function (t) {
                    return this.gain.gain.setTargetAtTime(t, this.context.currentTime, 0.01), this;
                },
                updateMatrixWorld: function (t) {
                    On.prototype.updateMatrixWorld.call(this, t);
                    var e = this.context.listener,
                        n = this.up;
                    if (((this.timeDelta = this._clock.getDelta()), this.matrixWorld.decompose(Iu, Nu, ku), Bu.set(0, 0, -1).applyQuaternion(Nu), e.positionX)) {
                        var i = this.context.currentTime + this.timeDelta;
                        e.positionX.linearRampToValueAtTime(Iu.x, i),
                            e.positionY.linearRampToValueAtTime(Iu.y, i),
                            e.positionZ.linearRampToValueAtTime(Iu.z, i),
                            e.forwardX.linearRampToValueAtTime(Bu.x, i),
                            e.forwardY.linearRampToValueAtTime(Bu.y, i),
                            e.forwardZ.linearRampToValueAtTime(Bu.z, i),
                            e.upX.linearRampToValueAtTime(n.x, i),
                            e.upY.linearRampToValueAtTime(n.y, i),
                            e.upZ.linearRampToValueAtTime(n.z, i);
                    } else e.setPosition(Iu.x, Iu.y, Iu.z), e.setOrientation(Bu.x, Bu.y, Bu.z, n.x, n.y, n.z);
                },
            })),
                (Fu.prototype = Object.assign(Object.create(On.prototype), {
                    constructor: Fu,
                    getOutput: function () {
                        return this.gain;
                    },
                    setNodeSource: function (t) {
                        return (this.hasPlaybackControl = !1), (this.sourceType = "audioNode"), (this.source = t), this.connect(), this;
                    },
                    setMediaElementSource: function (t) {
                        return (this.hasPlaybackControl = !1), (this.sourceType = "mediaNode"), (this.source = this.context.createMediaElementSource(t)), this.connect(), this;
                    },
                    setMediaStreamSource: function (t) {
                        return (this.hasPlaybackControl = !1), (this.sourceType = "mediaStreamNode"), (this.source = this.context.createMediaStreamSource(t)), this.connect(), this;
                    },
                    setBuffer: function (t) {
                        return (this.buffer = t), (this.sourceType = "buffer"), this.autoplay && this.play(), this;
                    },
                    play: function (t) {
                        if ((void 0 === t && (t = 0), !0 !== this.isPlaying)) {
                            if (!1 !== this.hasPlaybackControl) {
                                this._startedAt = this.context.currentTime + t;
                                var e = this.context.createBufferSource();
                                return (
                                    (e.buffer = this.buffer),
                                    (e.loop = this.loop),
                                    (e.loopStart = this.loopStart),
                                    (e.loopEnd = this.loopEnd),
                                    (e.onended = this.onEnded.bind(this)),
                                    e.start(this._startedAt, this._pausedAt + this.offset, this.duration),
                                    (this.isPlaying = !0),
                                    (this.source = e),
                                    this.setDetune(this.detune),
                                    this.setPlaybackRate(this.playbackRate),
                                    this.connect()
                                );
                            }
                            console.warn("THREE.Audio: this Audio has no playback control.");
                        } else console.warn("THREE.Audio: Audio is already playing.");
                    },
                    pause: function () {
                        if (!1 !== this.hasPlaybackControl)
                            return !0 === this.isPlaying && ((this._pausedAt += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate), this.source.stop(), (this.source.onended = null), (this.isPlaying = !1)), this;
                        console.warn("THREE.Audio: this Audio has no playback control.");
                    },
                    stop: function () {
                        if (!1 !== this.hasPlaybackControl) return (this._pausedAt = 0), this.source.stop(), (this.source.onended = null), (this.isPlaying = !1), this;
                        console.warn("THREE.Audio: this Audio has no playback control.");
                    },
                    connect: function () {
                        if (this.filters.length > 0) {
                            this.source.connect(this.filters[0]);
                            for (var t = 1, e = this.filters.length; t < e; t++) this.filters[t - 1].connect(this.filters[t]);
                            this.filters[this.filters.length - 1].connect(this.getOutput());
                        } else this.source.connect(this.getOutput());
                        return this;
                    },
                    disconnect: function () {
                        if (this.filters.length > 0) {
                            this.source.disconnect(this.filters[0]);
                            for (var t = 1, e = this.filters.length; t < e; t++) this.filters[t - 1].disconnect(this.filters[t]);
                            this.filters[this.filters.length - 1].disconnect(this.getOutput());
                        } else this.source.disconnect(this.getOutput());
                        return this;
                    },
                    getFilters: function () {
                        return this.filters;
                    },
                    setFilters: function (t) {
                        return t || (t = []), !0 === this.isPlaying ? (this.disconnect(), (this.filters = t), this.connect()) : (this.filters = t), this;
                    },
                    setDetune: function (t) {
                        if (((this.detune = t), void 0 !== this.source.detune)) return !0 === this.isPlaying && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01), this;
                    },
                    getDetune: function () {
                        return this.detune;
                    },
                    getFilter: function () {
                        return this.getFilters()[0];
                    },
                    setFilter: function (t) {
                        return this.setFilters(t ? [t] : []);
                    },
                    setPlaybackRate: function (t) {
                        if (!1 !== this.hasPlaybackControl) return (this.playbackRate = t), !0 === this.isPlaying && this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01), this;
                        console.warn("THREE.Audio: this Audio has no playback control.");
                    },
                    getPlaybackRate: function () {
                        return this.playbackRate;
                    },
                    onEnded: function () {
                        this.isPlaying = !1;
                    },
                    getLoop: function () {
                        return !1 === this.hasPlaybackControl ? (console.warn("THREE.Audio: this Audio has no playback control."), !1) : this.loop;
                    },
                    setLoop: function (t) {
                        if (!1 !== this.hasPlaybackControl) return (this.loop = t), !0 === this.isPlaying && (this.source.loop = this.loop), this;
                        console.warn("THREE.Audio: this Audio has no playback control.");
                    },
                    setLoopStart: function (t) {
                        return (this.loopStart = t), this;
                    },
                    setLoopEnd: function (t) {
                        return (this.loopEnd = t), this;
                    },
                    getVolume: function () {
                        return this.gain.gain.value;
                    },
                    setVolume: function (t) {
                        return this.gain.gain.setTargetAtTime(t, this.context.currentTime, 0.01), this;
                    },
                }));
            var Uu = new an(),
                ju = new nn(),
                Gu = new an(),
                Hu = new an();
            function Vu(t) {
                Fu.call(this, t), (this.panner = this.context.createPanner()), (this.panner.panningModel = "HRTF"), this.panner.connect(this.gain);
            }
            function Wu(t, e) {
                (this.analyser = t.context.createAnalyser()), (this.analyser.fftSize = void 0 !== e ? e : 2048), (this.data = new Uint8Array(this.analyser.frequencyBinCount)), t.getOutput().connect(this.analyser);
            }
            function qu(t, e, n) {
                (this.binding = t), (this.valueSize = n);
                var i,
                    r = Float64Array;
                switch (e) {
                    case "quaternion":
                        i = this._slerp;
                        break;
                    case "string":
                    case "bool":
                        (r = Array), (i = this._select);
                        break;
                    default:
                        i = this._lerp;
                }
                (this.buffer = new r(4 * n)), (this._mixBufferRegion = i), (this.cumulativeWeight = 0), (this.useCount = 0), (this.referenceCount = 0);
            }
            (Vu.prototype = Object.assign(Object.create(Fu.prototype), {
                constructor: Vu,
                getOutput: function () {
                    return this.panner;
                },
                getRefDistance: function () {
                    return this.panner.refDistance;
                },
                setRefDistance: function (t) {
                    return (this.panner.refDistance = t), this;
                },
                getRolloffFactor: function () {
                    return this.panner.rolloffFactor;
                },
                setRolloffFactor: function (t) {
                    return (this.panner.rolloffFactor = t), this;
                },
                getDistanceModel: function () {
                    return this.panner.distanceModel;
                },
                setDistanceModel: function (t) {
                    return (this.panner.distanceModel = t), this;
                },
                getMaxDistance: function () {
                    return this.panner.maxDistance;
                },
                setMaxDistance: function (t) {
                    return (this.panner.maxDistance = t), this;
                },
                setDirectionalCone: function (t, e, n) {
                    return (this.panner.coneInnerAngle = t), (this.panner.coneOuterAngle = e), (this.panner.coneOuterGain = n), this;
                },
                updateMatrixWorld: function (t) {
                    if ((On.prototype.updateMatrixWorld.call(this, t), !0 !== this.hasPlaybackControl || !1 !== this.isPlaying)) {
                        this.matrixWorld.decompose(Uu, ju, Gu), Hu.set(0, 0, 1).applyQuaternion(ju);
                        var e = this.panner;
                        if (e.positionX) {
                            var n = this.context.currentTime + this.listener.timeDelta;
                            e.positionX.linearRampToValueAtTime(Uu.x, n),
                                e.positionY.linearRampToValueAtTime(Uu.y, n),
                                e.positionZ.linearRampToValueAtTime(Uu.z, n),
                                e.orientationX.linearRampToValueAtTime(Hu.x, n),
                                e.orientationY.linearRampToValueAtTime(Hu.y, n),
                                e.orientationZ.linearRampToValueAtTime(Hu.z, n);
                        } else e.setPosition(Uu.x, Uu.y, Uu.z), e.setOrientation(Hu.x, Hu.y, Hu.z);
                    }
                },
            })),
                Object.assign(Wu.prototype, {
                    getFrequencyData: function () {
                        return this.analyser.getByteFrequencyData(this.data), this.data;
                    },
                    getAverageFrequency: function () {
                        for (var t = 0, e = this.getFrequencyData(), n = 0; n < e.length; n++) t += e[n];
                        return t / e.length;
                    },
                }),
                Object.assign(qu.prototype, {
                    accumulate: function (t, e) {
                        var n = this.buffer,
                            i = this.valueSize,
                            r = t * i + i,
                            o = this.cumulativeWeight;
                        if (0 === o) {
                            for (var a = 0; a !== i; ++a) n[r + a] = n[a];
                            o = e;
                        } else {
                            var s = e / (o += e);
                            this._mixBufferRegion(n, r, 0, s, i);
                        }
                        this.cumulativeWeight = o;
                    },
                    apply: function (t) {
                        var e = this.valueSize,
                            n = this.buffer,
                            i = t * e + e,
                            r = this.cumulativeWeight,
                            o = this.binding;
                        if (((this.cumulativeWeight = 0), r < 1)) {
                            var a = 3 * e;
                            this._mixBufferRegion(n, i, a, 1 - r, e);
                        }
                        for (var s = e, c = e + e; s !== c; ++s)
                            if (n[s] !== n[s + e]) {
                                o.setValue(n, i);
                                break;
                            }
                    },
                    saveOriginalState: function () {
                        var t = this.binding,
                            e = this.buffer,
                            n = this.valueSize,
                            i = 3 * n;
                        t.getValue(e, i);
                        for (var r = n, o = i; r !== o; ++r) e[r] = e[i + (r % n)];
                        this.cumulativeWeight = 0;
                    },
                    restoreOriginalState: function () {
                        var t = 3 * this.valueSize;
                        this.binding.setValue(this.buffer, t);
                    },
                    _select: function (t, e, n, i, r) {
                        if (i >= 0.5) for (var o = 0; o !== r; ++o) t[e + o] = t[n + o];
                    },
                    _slerp: function (t, e, n, i) {
                        nn.slerpFlat(t, e, t, e, t, n, i);
                    },
                    _lerp: function (t, e, n, i, r) {
                        for (var o = 1 - i, a = 0; a !== r; ++a) {
                            var s = e + a;
                            t[s] = t[s] * o + t[n + a] * i;
                        }
                    },
                });
            var Xu = new RegExp("[\\[\\]\\.:\\/]", "g"),
                Yu = "[^" + "\\[\\]\\.:\\/".replace("\\.", "") + "]",
                Zu = /((?:WC+[\/:])*)/.source.replace("WC", "[^\\[\\]\\.:\\/]"),
                Ju = /(WCOD+)?/.source.replace("WCOD", Yu),
                Qu = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", "[^\\[\\]\\.:\\/]"),
                Ku = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", "[^\\[\\]\\.:\\/]"),
                $u = new RegExp("^" + Zu + Ju + Qu + Ku + "$"),
                th = ["material", "materials", "bones"];
            function eh(t, e, n) {
                var i = n || nh.parseTrackName(e);
                (this._targetGroup = t), (this._bindings = t.subscribe_(e, i));
            }
            function nh(t, e, n) {
                (this.path = e), (this.parsedPath = n || nh.parseTrackName(e)), (this.node = nh.findNode(t, this.parsedPath.nodeName) || t), (this.rootNode = t);
            }
            function ih(t, e, n) {
                (this._mixer = t), (this._clip = e), (this._localRoot = n || null);
                for (var i = e.tracks, r = i.length, o = new Array(r), a = { endingStart: Ee, endingEnd: Ee }, s = 0; s !== r; ++s) {
                    var c = i[s].createInterpolant(null);
                    (o[s] = c), (c.settings = a);
                }
                (this._interpolantSettings = a),
                    (this._interpolants = o),
                    (this._propertyBindings = new Array(r)),
                    (this._cacheIndex = null),
                    (this._byClipCacheIndex = null),
                    (this._timeScaleInterpolant = null),
                    (this._weightInterpolant = null),
                    (this.loop = Te),
                    (this._loopCount = -1),
                    (this._startTime = null),
                    (this.time = 0),
                    (this.timeScale = 1),
                    (this._effectiveTimeScale = 1),
                    (this.weight = 1),
                    (this._effectiveWeight = 1),
                    (this.repetitions = 1 / 0),
                    (this.paused = !1),
                    (this.enabled = !0),
                    (this.clampWhenFinished = !1),
                    (this.zeroSlopeAtStart = !0),
                    (this.zeroSlopeAtEnd = !0);
            }
            function rh(t) {
                (this._root = t), this._initMemoryManager(), (this._accuIndex = 0), (this.time = 0), (this.timeScale = 1);
            }
            function oh(t) {
                "string" == typeof t && (console.warn("THREE.Uniform: Type parameter is no longer needed."), (t = arguments[1])), (this.value = t);
            }
            function ah(t, e, n) {
                Ra.call(this, t, e), (this.meshPerAttribute = n || 1);
            }
            function sh(t, e, n, i) {
                (this.ray = new ri(t, e)),
                    (this.near = n || 0),
                    (this.far = i || 1 / 0),
                    (this.camera = null),
                    (this.layers = new yn()),
                    (this.params = { Mesh: {}, Line: { threshold: 1 }, LOD: {}, Points: { threshold: 1 }, Sprite: {} }),
                    Object.defineProperties(this.params, {
                        PointCloud: {
                            get: function () {
                                return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."), this.Points;
                            },
                        },
                    });
            }
            function ch(t, e) {
                return t.distance - e.distance;
            }
            function lh(t, e, n, i) {
                if ((t.layers.test(e.layers) && t.raycast(e, n), !0 === i)) for (var r = t.children, o = 0, a = r.length; o < a; o++) lh(r[o], e, n, !0);
            }
            Object.assign(eh.prototype, {
                getValue: function (t, e) {
                    this.bind();
                    var n = this._targetGroup.nCachedObjects_,
                        i = this._bindings[n];
                    void 0 !== i && i.getValue(t, e);
                },
                setValue: function (t, e) {
                    for (var n = this._bindings, i = this._targetGroup.nCachedObjects_, r = n.length; i !== r; ++i) n[i].setValue(t, e);
                },
                bind: function () {
                    for (var t = this._bindings, e = this._targetGroup.nCachedObjects_, n = t.length; e !== n; ++e) t[e].bind();
                },
                unbind: function () {
                    for (var t = this._bindings, e = this._targetGroup.nCachedObjects_, n = t.length; e !== n; ++e) t[e].unbind();
                },
            }),
                Object.assign(nh, {
                    Composite: eh,
                    create: function (t, e, n) {
                        return t && t.isAnimationObjectGroup ? new nh.Composite(t, e, n) : new nh(t, e, n);
                    },
                    sanitizeNodeName: function (t) {
                        return t.replace(/\s/g, "_").replace(Xu, "");
                    },
                    parseTrackName: function (t) {
                        var e = $u.exec(t);
                        if (!e) throw new Error("PropertyBinding: Cannot parse trackName: " + t);
                        var n = { nodeName: e[2], objectName: e[3], objectIndex: e[4], propertyName: e[5], propertyIndex: e[6] },
                            i = n.nodeName && n.nodeName.lastIndexOf(".");
                        if (void 0 !== i && -1 !== i) {
                            var r = n.nodeName.substring(i + 1);
                            -1 !== th.indexOf(r) && ((n.nodeName = n.nodeName.substring(0, i)), (n.objectName = r));
                        }
                        if (null === n.propertyName || 0 === n.propertyName.length) throw new Error("PropertyBinding: can not parse propertyName from trackName: " + t);
                        return n;
                    },
                    findNode: function (t, e) {
                        if (!e || "" === e || "." === e || -1 === e || e === t.name || e === t.uuid) return t;
                        if (t.skeleton) {
                            var n = t.skeleton.getBoneByName(e);
                            if (void 0 !== n) return n;
                        }
                        if (t.children) {
                            var i = function (t) {
                                    for (var n = 0; n < t.length; n++) {
                                        var r = t[n];
                                        if (r.name === e || r.uuid === e) return r;
                                        var o = i(r.children);
                                        if (o) return o;
                                    }
                                    return null;
                                },
                                r = i(t.children);
                            if (r) return r;
                        }
                        return null;
                    },
                }),
                Object.assign(nh.prototype, {
                    _getValue_unavailable: function () {},
                    _setValue_unavailable: function () {},
                    BindingType: { Direct: 0, EntireArray: 1, ArrayElement: 2, HasFromToArray: 3 },
                    Versioning: { None: 0, NeedsUpdate: 1, MatrixWorldNeedsUpdate: 2 },
                    GetterByBindingType: [
                        function (t, e) {
                            t[e] = this.node[this.propertyName];
                        },
                        function (t, e) {
                            for (var n = this.resolvedProperty, i = 0, r = n.length; i !== r; ++i) t[e++] = n[i];
                        },
                        function (t, e) {
                            t[e] = this.resolvedProperty[this.propertyIndex];
                        },
                        function (t, e) {
                            this.resolvedProperty.toArray(t, e);
                        },
                    ],
                    SetterByBindingTypeAndVersioning: [
                        [
                            function (t, e) {
                                this.targetObject[this.propertyName] = t[e];
                            },
                            function (t, e) {
                                (this.targetObject[this.propertyName] = t[e]), (this.targetObject.needsUpdate = !0);
                            },
                            function (t, e) {
                                (this.targetObject[this.propertyName] = t[e]), (this.targetObject.matrixWorldNeedsUpdate = !0);
                            },
                        ],
                        [
                            function (t, e) {
                                for (var n = this.resolvedProperty, i = 0, r = n.length; i !== r; ++i) n[i] = t[e++];
                            },
                            function (t, e) {
                                for (var n = this.resolvedProperty, i = 0, r = n.length; i !== r; ++i) n[i] = t[e++];
                                this.targetObject.needsUpdate = !0;
                            },
                            function (t, e) {
                                for (var n = this.resolvedProperty, i = 0, r = n.length; i !== r; ++i) n[i] = t[e++];
                                this.targetObject.matrixWorldNeedsUpdate = !0;
                            },
                        ],
                        [
                            function (t, e) {
                                this.resolvedProperty[this.propertyIndex] = t[e];
                            },
                            function (t, e) {
                                (this.resolvedProperty[this.propertyIndex] = t[e]), (this.targetObject.needsUpdate = !0);
                            },
                            function (t, e) {
                                (this.resolvedProperty[this.propertyIndex] = t[e]), (this.targetObject.matrixWorldNeedsUpdate = !0);
                            },
                        ],
                        [
                            function (t, e) {
                                this.resolvedProperty.fromArray(t, e);
                            },
                            function (t, e) {
                                this.resolvedProperty.fromArray(t, e), (this.targetObject.needsUpdate = !0);
                            },
                            function (t, e) {
                                this.resolvedProperty.fromArray(t, e), (this.targetObject.matrixWorldNeedsUpdate = !0);
                            },
                        ],
                    ],
                    getValue: function (t, e) {
                        this.bind(), this.getValue(t, e);
                    },
                    setValue: function (t, e) {
                        this.bind(), this.setValue(t, e);
                    },
                    bind: function () {
                        var t = this.node,
                            e = this.parsedPath,
                            n = e.objectName,
                            i = e.propertyName,
                            r = e.propertyIndex;
                        if ((t || ((t = nh.findNode(this.rootNode, e.nodeName) || this.rootNode), (this.node = t)), (this.getValue = this._getValue_unavailable), (this.setValue = this._setValue_unavailable), t)) {
                            if (n) {
                                var o = e.objectIndex;
                                switch (n) {
                                    case "materials":
                                        if (!t.material) return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                                        if (!t.material.materials) return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
                                        t = t.material.materials;
                                        break;
                                    case "bones":
                                        if (!t.skeleton) return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
                                        t = t.skeleton.bones;
                                        for (var a = 0; a < t.length; a++)
                                            if (t[a].name === o) {
                                                o = a;
                                                break;
                                            }
                                        break;
                                    default:
                                        if (void 0 === t[n]) return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
                                        t = t[n];
                                }
                                if (void 0 !== o) {
                                    if (void 0 === t[o]) return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, t);
                                    t = t[o];
                                }
                            }
                            var s = t[i];
                            if (void 0 !== s) {
                                var c = this.Versioning.None;
                                (this.targetObject = t), void 0 !== t.needsUpdate ? (c = this.Versioning.NeedsUpdate) : void 0 !== t.matrixWorldNeedsUpdate && (c = this.Versioning.MatrixWorldNeedsUpdate);
                                var l = this.BindingType.Direct;
                                if (void 0 !== r) {
                                    if ("morphTargetInfluences" === i) {
                                        if (!t.geometry) return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
                                        if (t.geometry.isBufferGeometry) {
                                            if (!t.geometry.morphAttributes) return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
                                            for (a = 0; a < this.node.geometry.morphAttributes.position.length; a++)
                                                if (t.geometry.morphAttributes.position[a].name === r) {
                                                    r = a;
                                                    break;
                                                }
                                        } else {
                                            if (!t.geometry.morphTargets) return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.", this);
                                            for (a = 0; a < this.node.geometry.morphTargets.length; a++)
                                                if (t.geometry.morphTargets[a].name === r) {
                                                    r = a;
                                                    break;
                                                }
                                        }
                                    }
                                    (l = this.BindingType.ArrayElement), (this.resolvedProperty = s), (this.propertyIndex = r);
                                } else
                                    void 0 !== s.fromArray && void 0 !== s.toArray
                                        ? ((l = this.BindingType.HasFromToArray), (this.resolvedProperty = s))
                                        : Array.isArray(s)
                                        ? ((l = this.BindingType.EntireArray), (this.resolvedProperty = s))
                                        : (this.propertyName = i);
                                (this.getValue = this.GetterByBindingType[l]), (this.setValue = this.SetterByBindingTypeAndVersioning[l][c]);
                            } else {
                                var u = e.nodeName;
                                console.error("THREE.PropertyBinding: Trying to update property for track: " + u + "." + i + " but it wasn't found.", t);
                            }
                        } else console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.");
                    },
                    unbind: function () {
                        (this.node = null), (this.getValue = this._getValue_unbound), (this.setValue = this._setValue_unbound);
                    },
                }),
                Object.assign(nh.prototype, { _getValue_unbound: nh.prototype.getValue, _setValue_unbound: nh.prototype.setValue }),
                Object.assign(
                    function () {
                        (this.uuid = Xe.generateUUID()), (this._objects = Array.prototype.slice.call(arguments)), (this.nCachedObjects_ = 0);
                        var t = {};
                        this._indicesByUUID = t;
                        for (var e = 0, n = arguments.length; e !== n; ++e) t[arguments[e].uuid] = e;
                        (this._paths = []), (this._parsedPaths = []), (this._bindings = []), (this._bindingsIndicesByPath = {});
                        var i = this;
                        this.stats = {
                            objects: {
                                get total() {
                                    return i._objects.length;
                                },
                                get inUse() {
                                    return this.total - i.nCachedObjects_;
                                },
                            },
                            get bindingsPerObject() {
                                return i._bindings.length;
                            },
                        };
                    }.prototype,
                    {
                        isAnimationObjectGroup: !0,
                        add: function () {
                            for (
                                var t = this._objects, e = t.length, n = this.nCachedObjects_, i = this._indicesByUUID, r = this._paths, o = this._parsedPaths, a = this._bindings, s = a.length, c = void 0, l = 0, u = arguments.length;
                                l !== u;
                                ++l
                            ) {
                                var h = arguments[l],
                                    p = h.uuid,
                                    d = i[p];
                                if (void 0 === d) {
                                    (d = e++), (i[p] = d), t.push(h);
                                    for (var f = 0, m = s; f !== m; ++f) a[f].push(new nh(h, r[f], o[f]));
                                } else if (d < n) {
                                    c = t[d];
                                    var v = --n,
                                        g = t[v];
                                    (i[g.uuid] = d), (t[d] = g), (i[p] = v), (t[v] = h);
                                    for (f = 0, m = s; f !== m; ++f) {
                                        var y = a[f],
                                            x = y[v],
                                            _ = y[d];
                                        (y[d] = x), void 0 === _ && (_ = new nh(h, r[f], o[f])), (y[v] = _);
                                    }
                                } else t[d] !== c && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
                            }
                            this.nCachedObjects_ = n;
                        },
                        remove: function () {
                            for (var t = this._objects, e = this.nCachedObjects_, n = this._indicesByUUID, i = this._bindings, r = i.length, o = 0, a = arguments.length; o !== a; ++o) {
                                var s = arguments[o],
                                    c = s.uuid,
                                    l = n[c];
                                if (void 0 !== l && l >= e) {
                                    var u = e++,
                                        h = t[u];
                                    (n[h.uuid] = l), (t[l] = h), (n[c] = u), (t[u] = s);
                                    for (var p = 0, d = r; p !== d; ++p) {
                                        var f = i[p],
                                            m = f[u],
                                            v = f[l];
                                        (f[l] = m), (f[u] = v);
                                    }
                                }
                            }
                            this.nCachedObjects_ = e;
                        },
                        uncache: function () {
                            for (var t = this._objects, e = t.length, n = this.nCachedObjects_, i = this._indicesByUUID, r = this._bindings, o = r.length, a = 0, s = arguments.length; a !== s; ++a) {
                                var c = arguments[a].uuid,
                                    l = i[c];
                                if (void 0 !== l)
                                    if ((delete i[c], l < n)) {
                                        var u = --n,
                                            h = t[u],
                                            p = t[(g = --e)];
                                        (i[h.uuid] = l), (t[l] = h), (i[p.uuid] = u), (t[u] = p), t.pop();
                                        for (var d = 0, f = o; d !== f; ++d) {
                                            var m = (y = r[d])[u],
                                                v = y[g];
                                            (y[l] = m), (y[u] = v), y.pop();
                                        }
                                    } else {
                                        var g;
                                        (i[(p = t[(g = --e)]).uuid] = l), (t[l] = p), t.pop();
                                        for (d = 0, f = o; d !== f; ++d) {
                                            var y;
                                            ((y = r[d])[l] = y[g]), y.pop();
                                        }
                                    }
                            }
                            this.nCachedObjects_ = n;
                        },
                        subscribe_: function (t, e) {
                            var n = this._bindingsIndicesByPath,
                                i = n[t],
                                r = this._bindings;
                            if (void 0 !== i) return r[i];
                            var o = this._paths,
                                a = this._parsedPaths,
                                s = this._objects,
                                c = s.length,
                                l = this.nCachedObjects_,
                                u = new Array(c);
                            (i = r.length), (n[t] = i), o.push(t), a.push(e), r.push(u);
                            for (var h = l, p = s.length; h !== p; ++h) {
                                var d = s[h];
                                u[h] = new nh(d, t, e);
                            }
                            return u;
                        },
                        unsubscribe_: function (t) {
                            var e = this._bindingsIndicesByPath,
                                n = e[t];
                            if (void 0 !== n) {
                                var i = this._paths,
                                    r = this._parsedPaths,
                                    o = this._bindings,
                                    a = o.length - 1,
                                    s = o[a];
                                (e[t[a]] = n), (o[n] = s), o.pop(), (r[n] = r[a]), r.pop(), (i[n] = i[a]), i.pop();
                            }
                        },
                    }
                ),
                Object.assign(ih.prototype, {
                    play: function () {
                        return this._mixer._activateAction(this), this;
                    },
                    stop: function () {
                        return this._mixer._deactivateAction(this), this.reset();
                    },
                    reset: function () {
                        return (this.paused = !1), (this.enabled = !0), (this.time = 0), (this._loopCount = -1), (this._startTime = null), this.stopFading().stopWarping();
                    },
                    isRunning: function () {
                        return this.enabled && !this.paused && 0 !== this.timeScale && null === this._startTime && this._mixer._isActiveAction(this);
                    },
                    isScheduled: function () {
                        return this._mixer._isActiveAction(this);
                    },
                    startAt: function (t) {
                        return (this._startTime = t), this;
                    },
                    setLoop: function (t, e) {
                        return (this.loop = t), (this.repetitions = e), this;
                    },
                    setEffectiveWeight: function (t) {
                        return (this.weight = t), (this._effectiveWeight = this.enabled ? t : 0), this.stopFading();
                    },
                    getEffectiveWeight: function () {
                        return this._effectiveWeight;
                    },
                    fadeIn: function (t) {
                        return this._scheduleFading(t, 0, 1);
                    },
                    fadeOut: function (t) {
                        return this._scheduleFading(t, 1, 0);
                    },
                    crossFadeFrom: function (t, e, n) {
                        if ((t.fadeOut(e), this.fadeIn(e), n)) {
                            var i = this._clip.duration,
                                r = t._clip.duration,
                                o = r / i,
                                a = i / r;
                            t.warp(1, o, e), this.warp(a, 1, e);
                        }
                        return this;
                    },
                    crossFadeTo: function (t, e, n) {
                        return t.crossFadeFrom(this, e, n);
                    },
                    stopFading: function () {
                        var t = this._weightInterpolant;
                        return null !== t && ((this._weightInterpolant = null), this._mixer._takeBackControlInterpolant(t)), this;
                    },
                    setEffectiveTimeScale: function (t) {
                        return (this.timeScale = t), (this._effectiveTimeScale = this.paused ? 0 : t), this.stopWarping();
                    },
                    getEffectiveTimeScale: function () {
                        return this._effectiveTimeScale;
                    },
                    setDuration: function (t) {
                        return (this.timeScale = this._clip.duration / t), this.stopWarping();
                    },
                    syncWith: function (t) {
                        return (this.time = t.time), (this.timeScale = t.timeScale), this.stopWarping();
                    },
                    halt: function (t) {
                        return this.warp(this._effectiveTimeScale, 0, t);
                    },
                    warp: function (t, e, n) {
                        var i = this._mixer,
                            r = i.time,
                            o = this._timeScaleInterpolant,
                            a = this.timeScale;
                        null === o && ((o = i._lendControlInterpolant()), (this._timeScaleInterpolant = o));
                        var s = o.parameterPositions,
                            c = o.sampleValues;
                        return (s[0] = r), (s[1] = r + n), (c[0] = t / a), (c[1] = e / a), this;
                    },
                    stopWarping: function () {
                        var t = this._timeScaleInterpolant;
                        return null !== t && ((this._timeScaleInterpolant = null), this._mixer._takeBackControlInterpolant(t)), this;
                    },
                    getMixer: function () {
                        return this._mixer;
                    },
                    getClip: function () {
                        return this._clip;
                    },
                    getRoot: function () {
                        return this._localRoot || this._mixer._root;
                    },
                    _update: function (t, e, n, i) {
                        if (this.enabled) {
                            var r = this._startTime;
                            if (null !== r) {
                                var o = (t - r) * n;
                                if (o < 0 || 0 === n) return;
                                (this._startTime = null), (e = n * o);
                            }
                            e *= this._updateTimeScale(t);
                            var a = this._updateTime(e),
                                s = this._updateWeight(t);
                            if (s > 0) for (var c = this._interpolants, l = this._propertyBindings, u = 0, h = c.length; u !== h; ++u) c[u].evaluate(a), l[u].accumulate(i, s);
                        } else this._updateWeight(t);
                    },
                    _updateWeight: function (t) {
                        var e = 0;
                        if (this.enabled) {
                            e = this.weight;
                            var n = this._weightInterpolant;
                            if (null !== n) {
                                var i = n.evaluate(t)[0];
                                (e *= i), t > n.parameterPositions[1] && (this.stopFading(), 0 === i && (this.enabled = !1));
                            }
                        }
                        return (this._effectiveWeight = e), e;
                    },
                    _updateTimeScale: function (t) {
                        var e = 0;
                        if (!this.paused) {
                            e = this.timeScale;
                            var n = this._timeScaleInterpolant;
                            if (null !== n) (e *= n.evaluate(t)[0]), t > n.parameterPositions[1] && (this.stopWarping(), 0 === e ? (this.paused = !0) : (this.timeScale = e));
                        }
                        return (this._effectiveTimeScale = e), e;
                    },
                    _updateTime: function (t) {
                        var e = this.time + t,
                            n = this._clip.duration,
                            i = this.loop,
                            r = this._loopCount,
                            o = 2202 === i;
                        if (0 === t) return -1 === r ? e : o && 1 == (1 & r) ? n - e : e;
                        if (2200 === i) {
                            -1 === r && ((this._loopCount = 0), this._setEndings(!0, !0, !1));
                            t: {
                                if (e >= n) e = n;
                                else {
                                    if (!(e < 0)) {
                                        this.time = e;
                                        break t;
                                    }
                                    e = 0;
                                }
                                this.clampWhenFinished ? (this.paused = !0) : (this.enabled = !1), (this.time = e), this._mixer.dispatchEvent({ type: "finished", action: this, direction: t < 0 ? -1 : 1 });
                            }
                        } else {
                            if ((-1 === r && (t >= 0 ? ((r = 0), this._setEndings(!0, 0 === this.repetitions, o)) : this._setEndings(0 === this.repetitions, !0, o)), e >= n || e < 0)) {
                                var a = Math.floor(e / n);
                                (e -= n * a), (r += Math.abs(a));
                                var s = this.repetitions - r;
                                if (s <= 0) this.clampWhenFinished ? (this.paused = !0) : (this.enabled = !1), (e = t > 0 ? n : 0), (this.time = e), this._mixer.dispatchEvent({ type: "finished", action: this, direction: t > 0 ? 1 : -1 });
                                else {
                                    if (1 === s) {
                                        var c = t < 0;
                                        this._setEndings(c, !c, o);
                                    } else this._setEndings(!1, !1, o);
                                    (this._loopCount = r), (this.time = e), this._mixer.dispatchEvent({ type: "loop", action: this, loopDelta: a });
                                }
                            } else this.time = e;
                            if (o && 1 == (1 & r)) return n - e;
                        }
                        return e;
                    },
                    _setEndings: function (t, e, n) {
                        var i = this._interpolantSettings;
                        n ? ((i.endingStart = 2401), (i.endingEnd = 2401)) : ((i.endingStart = t ? (this.zeroSlopeAtStart ? 2401 : Ee) : 2402), (i.endingEnd = e ? (this.zeroSlopeAtEnd ? 2401 : Ee) : 2402));
                    },
                    _scheduleFading: function (t, e, n) {
                        var i = this._mixer,
                            r = i.time,
                            o = this._weightInterpolant;
                        null === o && ((o = i._lendControlInterpolant()), (this._weightInterpolant = o));
                        var a = o.parameterPositions,
                            s = o.sampleValues;
                        return (a[0] = r), (s[0] = e), (a[1] = r + t), (s[1] = n), this;
                    },
                }),
                (rh.prototype = Object.assign(Object.create(He.prototype), {
                    constructor: rh,
                    _bindAction: function (t, e) {
                        var n = t._localRoot || this._root,
                            i = t._clip.tracks,
                            r = i.length,
                            o = t._propertyBindings,
                            a = t._interpolants,
                            s = n.uuid,
                            c = this._bindingsByRootAndName,
                            l = c[s];
                        void 0 === l && ((l = {}), (c[s] = l));
                        for (var u = 0; u !== r; ++u) {
                            var h = i[u],
                                p = h.name,
                                d = l[p];
                            if (void 0 !== d) o[u] = d;
                            else {
                                if (void 0 !== (d = o[u])) {
                                    null === d._cacheIndex && (++d.referenceCount, this._addInactiveBinding(d, s, p));
                                    continue;
                                }
                                var f = e && e._propertyBindings[u].binding.parsedPath;
                                ++(d = new qu(nh.create(n, p, f), h.ValueTypeName, h.getValueSize())).referenceCount, this._addInactiveBinding(d, s, p), (o[u] = d);
                            }
                            a[u].resultBuffer = d.buffer;
                        }
                    },
                    _activateAction: function (t) {
                        if (!this._isActiveAction(t)) {
                            if (null === t._cacheIndex) {
                                var e = (t._localRoot || this._root).uuid,
                                    n = t._clip.uuid,
                                    i = this._actionsByClip[n];
                                this._bindAction(t, i && i.knownActions[0]), this._addInactiveAction(t, n, e);
                            }
                            for (var r = t._propertyBindings, o = 0, a = r.length; o !== a; ++o) {
                                var s = r[o];
                                0 == s.useCount++ && (this._lendBinding(s), s.saveOriginalState());
                            }
                            this._lendAction(t);
                        }
                    },
                    _deactivateAction: function (t) {
                        if (this._isActiveAction(t)) {
                            for (var e = t._propertyBindings, n = 0, i = e.length; n !== i; ++n) {
                                var r = e[n];
                                0 == --r.useCount && (r.restoreOriginalState(), this._takeBackBinding(r));
                            }
                            this._takeBackAction(t);
                        }
                    },
                    _initMemoryManager: function () {
                        (this._actions = []),
                            (this._nActiveActions = 0),
                            (this._actionsByClip = {}),
                            (this._bindings = []),
                            (this._nActiveBindings = 0),
                            (this._bindingsByRootAndName = {}),
                            (this._controlInterpolants = []),
                            (this._nActiveControlInterpolants = 0);
                        var t = this;
                        this.stats = {
                            actions: {
                                get total() {
                                    return t._actions.length;
                                },
                                get inUse() {
                                    return t._nActiveActions;
                                },
                            },
                            bindings: {
                                get total() {
                                    return t._bindings.length;
                                },
                                get inUse() {
                                    return t._nActiveBindings;
                                },
                            },
                            controlInterpolants: {
                                get total() {
                                    return t._controlInterpolants.length;
                                },
                                get inUse() {
                                    return t._nActiveControlInterpolants;
                                },
                            },
                        };
                    },
                    _isActiveAction: function (t) {
                        var e = t._cacheIndex;
                        return null !== e && e < this._nActiveActions;
                    },
                    _addInactiveAction: function (t, e, n) {
                        var i = this._actions,
                            r = this._actionsByClip,
                            o = r[e];
                        if (void 0 === o) (o = { knownActions: [t], actionByRoot: {} }), (t._byClipCacheIndex = 0), (r[e] = o);
                        else {
                            var a = o.knownActions;
                            (t._byClipCacheIndex = a.length), a.push(t);
                        }
                        (t._cacheIndex = i.length), i.push(t), (o.actionByRoot[n] = t);
                    },
                    _removeInactiveAction: function (t) {
                        var e = this._actions,
                            n = e[e.length - 1],
                            i = t._cacheIndex;
                        (n._cacheIndex = i), (e[i] = n), e.pop(), (t._cacheIndex = null);
                        var r = t._clip.uuid,
                            o = this._actionsByClip,
                            a = o[r],
                            s = a.knownActions,
                            c = s[s.length - 1],
                            l = t._byClipCacheIndex;
                        (c._byClipCacheIndex = l), (s[l] = c), s.pop(), (t._byClipCacheIndex = null), delete a.actionByRoot[(t._localRoot || this._root).uuid], 0 === s.length && delete o[r], this._removeInactiveBindingsForAction(t);
                    },
                    _removeInactiveBindingsForAction: function (t) {
                        for (var e = t._propertyBindings, n = 0, i = e.length; n !== i; ++n) {
                            var r = e[n];
                            0 == --r.referenceCount && this._removeInactiveBinding(r);
                        }
                    },
                    _lendAction: function (t) {
                        var e = this._actions,
                            n = t._cacheIndex,
                            i = this._nActiveActions++,
                            r = e[i];
                        (t._cacheIndex = i), (e[i] = t), (r._cacheIndex = n), (e[n] = r);
                    },
                    _takeBackAction: function (t) {
                        var e = this._actions,
                            n = t._cacheIndex,
                            i = --this._nActiveActions,
                            r = e[i];
                        (t._cacheIndex = i), (e[i] = t), (r._cacheIndex = n), (e[n] = r);
                    },
                    _addInactiveBinding: function (t, e, n) {
                        var i = this._bindingsByRootAndName,
                            r = i[e],
                            o = this._bindings;
                        void 0 === r && ((r = {}), (i[e] = r)), (r[n] = t), (t._cacheIndex = o.length), o.push(t);
                    },
                    _removeInactiveBinding: function (t) {
                        var e = this._bindings,
                            n = t.binding,
                            i = n.rootNode.uuid,
                            r = n.path,
                            o = this._bindingsByRootAndName,
                            a = o[i],
                            s = e[e.length - 1],
                            c = t._cacheIndex;
                        (s._cacheIndex = c), (e[c] = s), e.pop(), delete a[r], 0 === Object.keys(a).length && delete o[i];
                    },
                    _lendBinding: function (t) {
                        var e = this._bindings,
                            n = t._cacheIndex,
                            i = this._nActiveBindings++,
                            r = e[i];
                        (t._cacheIndex = i), (e[i] = t), (r._cacheIndex = n), (e[n] = r);
                    },
                    _takeBackBinding: function (t) {
                        var e = this._bindings,
                            n = t._cacheIndex,
                            i = --this._nActiveBindings,
                            r = e[i];
                        (t._cacheIndex = i), (e[i] = t), (r._cacheIndex = n), (e[n] = r);
                    },
                    _lendControlInterpolant: function () {
                        var t = this._controlInterpolants,
                            e = this._nActiveControlInterpolants++,
                            n = t[e];
                        return void 0 === n && (((n = new rl(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer)).__cacheIndex = e), (t[e] = n)), n;
                    },
                    _takeBackControlInterpolant: function (t) {
                        var e = this._controlInterpolants,
                            n = t.__cacheIndex,
                            i = --this._nActiveControlInterpolants,
                            r = e[i];
                        (t.__cacheIndex = i), (e[i] = t), (r.__cacheIndex = n), (e[n] = r);
                    },
                    _controlInterpolantsResultBuffer: new Float32Array(1),
                    clipAction: function (t, e) {
                        var n = e || this._root,
                            i = n.uuid,
                            r = "string" == typeof t ? fl.findByName(n, t) : t,
                            o = null !== r ? r.uuid : t,
                            a = this._actionsByClip[o],
                            s = null;
                        if (void 0 !== a) {
                            var c = a.actionByRoot[i];
                            if (void 0 !== c) return c;
                            (s = a.knownActions[0]), null === r && (r = s._clip);
                        }
                        if (null === r) return null;
                        var l = new ih(this, r, e);
                        return this._bindAction(l, s), this._addInactiveAction(l, o, i), l;
                    },
                    existingAction: function (t, e) {
                        var n = e || this._root,
                            i = n.uuid,
                            r = "string" == typeof t ? fl.findByName(n, t) : t,
                            o = r ? r.uuid : t,
                            a = this._actionsByClip[o];
                        return (void 0 !== a && a.actionByRoot[i]) || null;
                    },
                    stopAllAction: function () {
                        var t = this._actions,
                            e = this._nActiveActions,
                            n = this._bindings,
                            i = this._nActiveBindings;
                        (this._nActiveActions = 0), (this._nActiveBindings = 0);
                        for (var r = 0; r !== e; ++r) t[r].reset();
                        for (r = 0; r !== i; ++r) n[r].useCount = 0;
                        return this;
                    },
                    update: function (t) {
                        t *= this.timeScale;
                        for (var e = this._actions, n = this._nActiveActions, i = (this.time += t), r = Math.sign(t), o = (this._accuIndex ^= 1), a = 0; a !== n; ++a) {
                            e[a]._update(i, t, r, o);
                        }
                        var s = this._bindings,
                            c = this._nActiveBindings;
                        for (a = 0; a !== c; ++a) s[a].apply(o);
                        return this;
                    },
                    setTime: function (t) {
                        this.time = 0;
                        for (var e = 0; e < this._actions.length; e++) this._actions[e].time = 0;
                        return this.update(t);
                    },
                    getRoot: function () {
                        return this._root;
                    },
                    uncacheClip: function (t) {
                        var e = this._actions,
                            n = t.uuid,
                            i = this._actionsByClip,
                            r = i[n];
                        if (void 0 !== r) {
                            for (var o = r.knownActions, a = 0, s = o.length; a !== s; ++a) {
                                var c = o[a];
                                this._deactivateAction(c);
                                var l = c._cacheIndex,
                                    u = e[e.length - 1];
                                (c._cacheIndex = null), (c._byClipCacheIndex = null), (u._cacheIndex = l), (e[l] = u), e.pop(), this._removeInactiveBindingsForAction(c);
                            }
                            delete i[n];
                        }
                    },
                    uncacheRoot: function (t) {
                        var e = t.uuid,
                            n = this._actionsByClip;
                        for (var i in n) {
                            var r = n[i].actionByRoot[e];
                            void 0 !== r && (this._deactivateAction(r), this._removeInactiveAction(r));
                        }
                        var o = this._bindingsByRootAndName[e];
                        if (void 0 !== o)
                            for (var a in o) {
                                var s = o[a];
                                s.restoreOriginalState(), this._removeInactiveBinding(s);
                            }
                    },
                    uncacheAction: function (t, e) {
                        var n = this.existingAction(t, e);
                        null !== n && (this._deactivateAction(n), this._removeInactiveAction(n));
                    },
                })),
                (oh.prototype.clone = function () {
                    return new oh(void 0 === this.value.clone ? this.value : this.value.clone());
                }),
                (ah.prototype = Object.assign(Object.create(Ra.prototype), {
                    constructor: ah,
                    isInstancedInterleavedBuffer: !0,
                    copy: function (t) {
                        return Ra.prototype.copy.call(this, t), (this.meshPerAttribute = t.meshPerAttribute), this;
                    },
                })),
                Object.assign(sh.prototype, {
                    set: function (t, e) {
                        this.ray.set(t, e);
                    },
                    setFromCamera: function (t, e) {
                        e && e.isPerspectiveCamera
                            ? (this.ray.origin.setFromMatrixPosition(e.matrixWorld), this.ray.direction.set(t.x, t.y, 0.5).unproject(e).sub(this.ray.origin).normalize(), (this.camera = e))
                            : e && e.isOrthographicCamera
                            ? (this.ray.origin.set(t.x, t.y, (e.near + e.far) / (e.near - e.far)).unproject(e), this.ray.direction.set(0, 0, -1).transformDirection(e.matrixWorld), (this.camera = e))
                            : console.error("THREE.Raycaster: Unsupported camera type.");
                    },
                    intersectObject: function (t, e, n) {
                        var i = n || [];
                        return lh(t, this, i, e), i.sort(ch), i;
                    },
                    intersectObjects: function (t, e, n) {
                        var i = n || [];
                        if (!1 === Array.isArray(t)) return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."), i;
                        for (var r = 0, o = t.length; r < o; r++) lh(t[r], this, i, e);
                        return i.sort(ch), i;
                    },
                }),
                Object.assign(
                    function (t, e, n) {
                        return (this.radius = void 0 !== t ? t : 1), (this.phi = void 0 !== e ? e : 0), (this.theta = void 0 !== n ? n : 0), this;
                    }.prototype,
                    {
                        set: function (t, e, n) {
                            return (this.radius = t), (this.phi = e), (this.theta = n), this;
                        },
                        clone: function () {
                            return new this.constructor().copy(this);
                        },
                        copy: function (t) {
                            return (this.radius = t.radius), (this.phi = t.phi), (this.theta = t.theta), this;
                        },
                        makeSafe: function () {
                            return (this.phi = Math.max(1e-6, Math.min(Math.PI - 1e-6, this.phi))), this;
                        },
                        setFromVector3: function (t) {
                            return this.setFromCartesianCoords(t.x, t.y, t.z);
                        },
                        setFromCartesianCoords: function (t, e, n) {
                            return (this.radius = Math.sqrt(t * t + e * e + n * n)), 0 === this.radius ? ((this.theta = 0), (this.phi = 0)) : ((this.theta = Math.atan2(t, n)), (this.phi = Math.acos(Xe.clamp(e / this.radius, -1, 1)))), this;
                        },
                    }
                ),
                Object.assign(
                    function (t, e, n) {
                        return (this.radius = void 0 !== t ? t : 1), (this.theta = void 0 !== e ? e : 0), (this.y = void 0 !== n ? n : 0), this;
                    }.prototype,
                    {
                        set: function (t, e, n) {
                            return (this.radius = t), (this.theta = e), (this.y = n), this;
                        },
                        clone: function () {
                            return new this.constructor().copy(this);
                        },
                        copy: function (t) {
                            return (this.radius = t.radius), (this.theta = t.theta), (this.y = t.y), this;
                        },
                        setFromVector3: function (t) {
                            return this.setFromCartesianCoords(t.x, t.y, t.z);
                        },
                        setFromCartesianCoords: function (t, e, n) {
                            return (this.radius = Math.sqrt(t * t + n * n)), (this.theta = Math.atan2(t, n)), (this.y = e), this;
                        },
                    }
                );
            var uh = new Ye();
            function hh(t, e) {
                (this.min = void 0 !== t ? t : new Ye(1 / 0, 1 / 0)), (this.max = void 0 !== e ? e : new Ye(-1 / 0, -1 / 0));
            }
            Object.assign(hh.prototype, {
                set: function (t, e) {
                    return this.min.copy(t), this.max.copy(e), this;
                },
                setFromPoints: function (t) {
                    this.makeEmpty();
                    for (var e = 0, n = t.length; e < n; e++) this.expandByPoint(t[e]);
                    return this;
                },
                setFromCenterAndSize: function (t, e) {
                    var n = uh.copy(e).multiplyScalar(0.5);
                    return this.min.copy(t).sub(n), this.max.copy(t).add(n), this;
                },
                clone: function () {
                    return new this.constructor().copy(this);
                },
                copy: function (t) {
                    return this.min.copy(t.min), this.max.copy(t.max), this;
                },
                makeEmpty: function () {
                    return (this.min.x = this.min.y = 1 / 0), (this.max.x = this.max.y = -1 / 0), this;
                },
                isEmpty: function () {
                    return this.max.x < this.min.x || this.max.y < this.min.y;
                },
                getCenter: function (t) {
                    return void 0 === t && (console.warn("THREE.Box2: .getCenter() target is now required"), (t = new Ye())), this.isEmpty() ? t.set(0, 0) : t.addVectors(this.min, this.max).multiplyScalar(0.5);
                },
                getSize: function (t) {
                    return void 0 === t && (console.warn("THREE.Box2: .getSize() target is now required"), (t = new Ye())), this.isEmpty() ? t.set(0, 0) : t.subVectors(this.max, this.min);
                },
                expandByPoint: function (t) {
                    return this.min.min(t), this.max.max(t), this;
                },
                expandByVector: function (t) {
                    return this.min.sub(t), this.max.add(t), this;
                },
                expandByScalar: function (t) {
                    return this.min.addScalar(-t), this.max.addScalar(t), this;
                },
                containsPoint: function (t) {
                    return !(t.x < this.min.x || t.x > this.max.x || t.y < this.min.y || t.y > this.max.y);
                },
                containsBox: function (t) {
                    return this.min.x <= t.min.x && t.max.x <= this.max.x && this.min.y <= t.min.y && t.max.y <= this.max.y;
                },
                getParameter: function (t, e) {
                    return void 0 === e && (console.warn("THREE.Box2: .getParameter() target is now required"), (e = new Ye())), e.set((t.x - this.min.x) / (this.max.x - this.min.x), (t.y - this.min.y) / (this.max.y - this.min.y));
                },
                intersectsBox: function (t) {
                    return !(t.max.x < this.min.x || t.min.x > this.max.x || t.max.y < this.min.y || t.min.y > this.max.y);
                },
                clampPoint: function (t, e) {
                    return void 0 === e && (console.warn("THREE.Box2: .clampPoint() target is now required"), (e = new Ye())), e.copy(t).clamp(this.min, this.max);
                },
                distanceToPoint: function (t) {
                    return uh.copy(t).clamp(this.min, this.max).sub(t).length();
                },
                intersect: function (t) {
                    return this.min.max(t.min), this.max.min(t.max), this;
                },
                union: function (t) {
                    return this.min.min(t.min), this.max.max(t.max), this;
                },
                translate: function (t) {
                    return this.min.add(t), this.max.add(t), this;
                },
                equals: function (t) {
                    return t.min.equals(this.min) && t.max.equals(this.max);
                },
            });
            var ph = new an(),
                dh = new an();
            function fh(t, e) {
                (this.start = void 0 !== t ? t : new an()), (this.end = void 0 !== e ? e : new an());
            }
            function mh(t) {
                On.call(this), (this.material = t), (this.render = function () {});
            }
            Object.assign(fh.prototype, {
                set: function (t, e) {
                    return this.start.copy(t), this.end.copy(e), this;
                },
                clone: function () {
                    return new this.constructor().copy(this);
                },
                copy: function (t) {
                    return this.start.copy(t.start), this.end.copy(t.end), this;
                },
                getCenter: function (t) {
                    return void 0 === t && (console.warn("THREE.Line3: .getCenter() target is now required"), (t = new an())), t.addVectors(this.start, this.end).multiplyScalar(0.5);
                },
                delta: function (t) {
                    return void 0 === t && (console.warn("THREE.Line3: .delta() target is now required"), (t = new an())), t.subVectors(this.end, this.start);
                },
                distanceSq: function () {
                    return this.start.distanceToSquared(this.end);
                },
                distance: function () {
                    return this.start.distanceTo(this.end);
                },
                at: function (t, e) {
                    return void 0 === e && (console.warn("THREE.Line3: .at() target is now required"), (e = new an())), this.delta(e).multiplyScalar(t).add(this.start);
                },
                closestPointToPointParameter: function (t, e) {
                    ph.subVectors(t, this.start), dh.subVectors(this.end, this.start);
                    var n = dh.dot(dh),
                        i = dh.dot(ph) / n;
                    return e && (i = Xe.clamp(i, 0, 1)), i;
                },
                closestPointToPoint: function (t, e, n) {
                    var i = this.closestPointToPointParameter(t, e);
                    return void 0 === n && (console.warn("THREE.Line3: .closestPointToPoint() target is now required"), (n = new an())), this.delta(n).multiplyScalar(i).add(this.start);
                },
                applyMatrix4: function (t) {
                    return this.start.applyMatrix4(t), this.end.applyMatrix4(t), this;
                },
                equals: function (t) {
                    return t.start.equals(this.start) && t.end.equals(this.end);
                },
            }),
                (mh.prototype = Object.create(On.prototype)),
                (mh.prototype.constructor = mh),
                (mh.prototype.isImmediateRenderObject = !0);
            var vh = new an();
            function gh(t, e) {
                On.call(this), (this.light = t), this.light.updateMatrixWorld(), (this.matrix = t.matrixWorld), (this.matrixAutoUpdate = !1), (this.color = e);
                for (var n = new Qi(), i = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1], r = 0, o = 1; r < 32; r++, o++) {
                    var a = (r / 32) * Math.PI * 2,
                        s = (o / 32) * Math.PI * 2;
                    i.push(Math.cos(a), Math.sin(a), 1, Math.cos(s), Math.sin(s), 1);
                }
                n.setAttribute("position", new Ui(i, 3));
                var c = new ls({ fog: !1, toneMapped: !1 });
                (this.cone = new ys(n, c)), this.add(this.cone), this.update();
            }
            (gh.prototype = Object.create(On.prototype)),
                (gh.prototype.constructor = gh),
                (gh.prototype.dispose = function () {
                    this.cone.geometry.dispose(), this.cone.material.dispose();
                }),
                (gh.prototype.update = function () {
                    this.light.updateMatrixWorld();
                    var t = this.light.distance ? this.light.distance : 1e3,
                        e = t * Math.tan(this.light.angle);
                    this.cone.scale.set(e, e, t),
                        vh.setFromMatrixPosition(this.light.target.matrixWorld),
                        this.cone.lookAt(vh),
                        void 0 !== this.color ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color);
                });
            var yh = new an(),
                xh = new fn(),
                _h = new fn();
            function bh(t) {
                for (
                    var e = (function t(e) {
                            var n = [];
                            e && e.isBone && n.push(e);
                            for (var i = 0; i < e.children.length; i++) n.push.apply(n, t(e.children[i]));
                            return n;
                        })(t),
                        n = new Qi(),
                        i = [],
                        r = [],
                        o = new Mi(0, 0, 1),
                        a = new Mi(0, 1, 0),
                        s = 0;
                    s < e.length;
                    s++
                ) {
                    var c = e[s];
                    c.parent && c.parent.isBone && (i.push(0, 0, 0), i.push(0, 0, 0), r.push(o.r, o.g, o.b), r.push(a.r, a.g, a.b));
                }
                n.setAttribute("position", new Ui(i, 3)), n.setAttribute("color", new Ui(r, 3));
                var l = new ls({ vertexColors: !0, depthTest: !1, depthWrite: !1, toneMapped: !1, transparent: !0 });
                ys.call(this, n, l), (this.root = t), (this.bones = e), (this.matrix = t.matrixWorld), (this.matrixAutoUpdate = !1);
            }
            function wh(t, e, n) {
                (this.light = t), this.light.updateMatrixWorld(), (this.color = n);
                var i = new Pc(e, 4, 2),
                    r = new Ci({ wireframe: !0, fog: !1, toneMapped: !1 });
                mr.call(this, i, r), (this.matrix = this.light.matrixWorld), (this.matrixAutoUpdate = !1), this.update();
            }
            (bh.prototype = Object.create(ys.prototype)),
                (bh.prototype.constructor = bh),
                (bh.prototype.isSkeletonHelper = !0),
                (bh.prototype.updateMatrixWorld = function (t) {
                    var e = this.bones,
                        n = this.geometry,
                        i = n.getAttribute("position");
                    _h.getInverse(this.root.matrixWorld);
                    for (var r = 0, o = 0; r < e.length; r++) {
                        var a = e[r];
                        a.parent &&
                            a.parent.isBone &&
                            (xh.multiplyMatrices(_h, a.matrixWorld),
                            yh.setFromMatrixPosition(xh),
                            i.setXYZ(o, yh.x, yh.y, yh.z),
                            xh.multiplyMatrices(_h, a.parent.matrixWorld),
                            yh.setFromMatrixPosition(xh),
                            i.setXYZ(o + 1, yh.x, yh.y, yh.z),
                            (o += 2));
                    }
                    (n.getAttribute("position").needsUpdate = !0), On.prototype.updateMatrixWorld.call(this, t);
                }),
                (wh.prototype = Object.create(mr.prototype)),
                (wh.prototype.constructor = wh),
                (wh.prototype.dispose = function () {
                    this.geometry.dispose(), this.material.dispose();
                }),
                (wh.prototype.update = function () {
                    void 0 !== this.color ? this.material.color.set(this.color) : this.material.color.copy(this.light.color);
                });
            var Mh = new an(),
                Sh = new Mi(),
                Th = new Mi();
            function Eh(t, e, n) {
                On.call(this), (this.light = t), this.light.updateMatrixWorld(), (this.matrix = t.matrixWorld), (this.matrixAutoUpdate = !1), (this.color = n);
                var i = new Fs(e);
                i.rotateY(0.5 * Math.PI), (this.material = new Ci({ wireframe: !0, fog: !1, toneMapped: !1 })), void 0 === this.color && (this.material.vertexColors = !0);
                var r = i.getAttribute("position"),
                    o = new Float32Array(3 * r.count);
                i.setAttribute("color", new Oi(o, 3)), this.add(new mr(i, this.material)), this.update();
            }
            function Ah(t, e, n, i) {
                (t = t || 10), (e = e || 10), (n = new Mi(void 0 !== n ? n : 4473924)), (i = new Mi(void 0 !== i ? i : 8947848));
                for (var r = e / 2, o = t / e, a = t / 2, s = [], c = [], l = 0, u = 0, h = -a; l <= e; l++, h += o) {
                    s.push(-a, 0, h, a, 0, h), s.push(h, 0, -a, h, 0, a);
                    var p = l === r ? n : i;
                    p.toArray(c, u), (u += 3), p.toArray(c, u), (u += 3), p.toArray(c, u), (u += 3), p.toArray(c, u), (u += 3);
                }
                var d = new Qi();
                d.setAttribute("position", new Ui(s, 3)), d.setAttribute("color", new Ui(c, 3));
                var f = new ls({ vertexColors: !0, toneMapped: !1 });
                ys.call(this, d, f);
            }
            function Ph(t, e, n, i, r, o) {
                (t = t || 10), (e = e || 16), (n = n || 8), (i = i || 64), (r = new Mi(void 0 !== r ? r : 4473924)), (o = new Mi(void 0 !== o ? o : 8947848));
                var a,
                    s,
                    c,
                    l,
                    u,
                    h,
                    p,
                    d = [],
                    f = [];
                for (l = 0; l <= e; l++) (c = (l / e) * (2 * Math.PI)), (a = Math.sin(c) * t), (s = Math.cos(c) * t), d.push(0, 0, 0), d.push(a, 0, s), (p = 1 & l ? r : o), f.push(p.r, p.g, p.b), f.push(p.r, p.g, p.b);
                for (l = 0; l <= n; l++)
                    for (p = 1 & l ? r : o, h = t - (t / n) * l, u = 0; u < i; u++)
                        (c = (u / i) * (2 * Math.PI)),
                            (a = Math.sin(c) * h),
                            (s = Math.cos(c) * h),
                            d.push(a, 0, s),
                            f.push(p.r, p.g, p.b),
                            (c = ((u + 1) / i) * (2 * Math.PI)),
                            (a = Math.sin(c) * h),
                            (s = Math.cos(c) * h),
                            d.push(a, 0, s),
                            f.push(p.r, p.g, p.b);
                var m = new Qi();
                m.setAttribute("position", new Ui(d, 3)), m.setAttribute("color", new Ui(f, 3));
                var v = new ls({ vertexColors: !0, toneMapped: !1 });
                ys.call(this, m, v);
            }
            (Eh.prototype = Object.create(On.prototype)),
                (Eh.prototype.constructor = Eh),
                (Eh.prototype.dispose = function () {
                    this.children[0].geometry.dispose(), this.children[0].material.dispose();
                }),
                (Eh.prototype.update = function () {
                    var t = this.children[0];
                    if (void 0 !== this.color) this.material.color.set(this.color);
                    else {
                        var e = t.geometry.getAttribute("color");
                        Sh.copy(this.light.color), Th.copy(this.light.groundColor);
                        for (var n = 0, i = e.count; n < i; n++) {
                            var r = n < i / 2 ? Sh : Th;
                            e.setXYZ(n, r.r, r.g, r.b);
                        }
                        e.needsUpdate = !0;
                    }
                    t.lookAt(Mh.setFromMatrixPosition(this.light.matrixWorld).negate());
                }),
                (Ah.prototype = Object.assign(Object.create(ys.prototype), {
                    constructor: Ah,
                    copy: function (t) {
                        return ys.prototype.copy.call(this, t), this.geometry.copy(t.geometry), this.material.copy(t.material), this;
                    },
                    clone: function () {
                        return new this.constructor().copy(this);
                    },
                })),
                (Ph.prototype = Object.create(ys.prototype)),
                (Ph.prototype.constructor = Ph);
            var Lh = new an(),
                Ch = new an(),
                Rh = new an();
            function Oh(t, e, n) {
                On.call(this), (this.light = t), this.light.updateMatrixWorld(), (this.matrix = t.matrixWorld), (this.matrixAutoUpdate = !1), (this.color = n), void 0 === e && (e = 1);
                var i = new Qi();
                i.setAttribute("position", new Ui([-e, e, 0, e, e, 0, e, -e, 0, -e, -e, 0, -e, e, 0], 3));
                var r = new ls({ fog: !1, toneMapped: !1 });
                (this.lightPlane = new ms(i, r)), this.add(this.lightPlane), (i = new Qi()).setAttribute("position", new Ui([0, 0, 0, 0, 0, 1], 3)), (this.targetLine = new ms(i, r)), this.add(this.targetLine), this.update();
            }
            (Oh.prototype = Object.create(On.prototype)),
                (Oh.prototype.constructor = Oh),
                (Oh.prototype.dispose = function () {
                    this.lightPlane.geometry.dispose(), this.lightPlane.material.dispose(), this.targetLine.geometry.dispose(), this.targetLine.material.dispose();
                }),
                (Oh.prototype.update = function () {
                    Lh.setFromMatrixPosition(this.light.matrixWorld),
                        Ch.setFromMatrixPosition(this.light.target.matrixWorld),
                        Rh.subVectors(Ch, Lh),
                        this.lightPlane.lookAt(Ch),
                        void 0 !== this.color
                            ? (this.lightPlane.material.color.set(this.color), this.targetLine.material.color.set(this.color))
                            : (this.lightPlane.material.color.copy(this.light.color), this.targetLine.material.color.copy(this.light.color)),
                        this.targetLine.lookAt(Ch),
                        (this.targetLine.scale.z = Rh.length());
                });
            var Dh = new an(),
                Ih = new Cr();
            function Nh(t) {
                var e = new Qi(),
                    n = new ls({ color: 16777215, vertexColors: !0, toneMapped: !1 }),
                    i = [],
                    r = [],
                    o = {},
                    a = new Mi(16755200),
                    s = new Mi(16711680),
                    c = new Mi(43775),
                    l = new Mi(16777215),
                    u = new Mi(3355443);
                function h(t, e, n) {
                    p(t, n), p(e, n);
                }
                function p(t, e) {
                    i.push(0, 0, 0), r.push(e.r, e.g, e.b), void 0 === o[t] && (o[t] = []), o[t].push(i.length / 3 - 1);
                }
                h("n1", "n2", a),
                    h("n2", "n4", a),
                    h("n4", "n3", a),
                    h("n3", "n1", a),
                    h("f1", "f2", a),
                    h("f2", "f4", a),
                    h("f4", "f3", a),
                    h("f3", "f1", a),
                    h("n1", "f1", a),
                    h("n2", "f2", a),
                    h("n3", "f3", a),
                    h("n4", "f4", a),
                    h("p", "n1", s),
                    h("p", "n2", s),
                    h("p", "n3", s),
                    h("p", "n4", s),
                    h("u1", "u2", c),
                    h("u2", "u3", c),
                    h("u3", "u1", c),
                    h("c", "t", l),
                    h("p", "c", u),
                    h("cn1", "cn2", u),
                    h("cn3", "cn4", u),
                    h("cf1", "cf2", u),
                    h("cf3", "cf4", u),
                    e.setAttribute("position", new Ui(i, 3)),
                    e.setAttribute("color", new Ui(r, 3)),
                    ys.call(this, e, n),
                    (this.camera = t),
                    this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix(),
                    (this.matrix = t.matrixWorld),
                    (this.matrixAutoUpdate = !1),
                    (this.pointMap = o),
                    this.update();
            }
            function kh(t, e, n, i, r, o, a) {
                Dh.set(r, o, a).unproject(i);
                var s = e[t];
                if (void 0 !== s) for (var c = n.getAttribute("position"), l = 0, u = s.length; l < u; l++) c.setXYZ(s[l], Dh.x, Dh.y, Dh.z);
            }
            (Nh.prototype = Object.create(ys.prototype)),
                (Nh.prototype.constructor = Nh),
                (Nh.prototype.update = function () {
                    var t = this.geometry,
                        e = this.pointMap;
                    Ih.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),
                        kh("c", e, t, Ih, 0, 0, -1),
                        kh("t", e, t, Ih, 0, 0, 1),
                        kh("n1", e, t, Ih, -1, -1, -1),
                        kh("n2", e, t, Ih, 1, -1, -1),
                        kh("n3", e, t, Ih, -1, 1, -1),
                        kh("n4", e, t, Ih, 1, 1, -1),
                        kh("f1", e, t, Ih, -1, -1, 1),
                        kh("f2", e, t, Ih, 1, -1, 1),
                        kh("f3", e, t, Ih, -1, 1, 1),
                        kh("f4", e, t, Ih, 1, 1, 1),
                        kh("u1", e, t, Ih, 0.7, 1.1, -1),
                        kh("u2", e, t, Ih, -0.7, 1.1, -1),
                        kh("u3", e, t, Ih, 0, 2, -1),
                        kh("cf1", e, t, Ih, -1, 0, 1),
                        kh("cf2", e, t, Ih, 1, 0, 1),
                        kh("cf3", e, t, Ih, 0, -1, 1),
                        kh("cf4", e, t, Ih, 0, 1, 1),
                        kh("cn1", e, t, Ih, -1, 0, -1),
                        kh("cn2", e, t, Ih, 1, 0, -1),
                        kh("cn3", e, t, Ih, 0, -1, -1),
                        kh("cn4", e, t, Ih, 0, 1, -1),
                        (t.getAttribute("position").needsUpdate = !0);
                });
            var Bh = new Xn();
            function zh(t, e) {
                (this.object = t), void 0 === e && (e = 16776960);
                var n = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]),
                    i = new Float32Array(24),
                    r = new Qi();
                r.setIndex(new Oi(n, 1)), r.setAttribute("position", new Oi(i, 3)), ys.call(this, r, new ls({ color: e, toneMapped: !1 })), (this.matrixAutoUpdate = !1), this.update();
            }
            function Fh(t, e) {
                (this.type = "Box3Helper"), (this.box = t), (e = e || 16776960);
                var n = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]),
                    i = new Qi();
                i.setIndex(new Oi(n, 1)),
                    i.setAttribute("position", new Ui([1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1], 3)),
                    ys.call(this, i, new ls({ color: e, toneMapped: !1 })),
                    this.geometry.computeBoundingSphere();
            }
            function Uh(t, e, n) {
                (this.type = "PlaneHelper"), (this.plane = t), (this.size = void 0 === e ? 1 : e);
                var i = void 0 !== n ? n : 16776960,
                    r = new Qi();
                r.setAttribute("position", new Ui([1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0], 3)), r.computeBoundingSphere(), ms.call(this, r, new ls({ color: i, toneMapped: !1 }));
                var o = new Qi();
                o.setAttribute("position", new Ui([1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1], 3)),
                    o.computeBoundingSphere(),
                    this.add(new mr(o, new Ci({ color: i, opacity: 0.2, transparent: !0, depthWrite: !1, toneMapped: !1 })));
            }
            (zh.prototype = Object.create(ys.prototype)),
                (zh.prototype.constructor = zh),
                (zh.prototype.update = function (t) {
                    if ((void 0 !== t && console.warn("THREE.BoxHelper: .update() has no longer arguments."), void 0 !== this.object && Bh.setFromObject(this.object), !Bh.isEmpty())) {
                        var e = Bh.min,
                            n = Bh.max,
                            i = this.geometry.attributes.position,
                            r = i.array;
                        (r[0] = n.x),
                            (r[1] = n.y),
                            (r[2] = n.z),
                            (r[3] = e.x),
                            (r[4] = n.y),
                            (r[5] = n.z),
                            (r[6] = e.x),
                            (r[7] = e.y),
                            (r[8] = n.z),
                            (r[9] = n.x),
                            (r[10] = e.y),
                            (r[11] = n.z),
                            (r[12] = n.x),
                            (r[13] = n.y),
                            (r[14] = e.z),
                            (r[15] = e.x),
                            (r[16] = n.y),
                            (r[17] = e.z),
                            (r[18] = e.x),
                            (r[19] = e.y),
                            (r[20] = e.z),
                            (r[21] = n.x),
                            (r[22] = e.y),
                            (r[23] = e.z),
                            (i.needsUpdate = !0),
                            this.geometry.computeBoundingSphere();
                    }
                }),
                (zh.prototype.setFromObject = function (t) {
                    return (this.object = t), this.update(), this;
                }),
                (zh.prototype.copy = function (t) {
                    return ys.prototype.copy.call(this, t), (this.object = t.object), this;
                }),
                (zh.prototype.clone = function () {
                    return new this.constructor().copy(this);
                }),
                (Fh.prototype = Object.create(ys.prototype)),
                (Fh.prototype.constructor = Fh),
                (Fh.prototype.updateMatrixWorld = function (t) {
                    var e = this.box;
                    e.isEmpty() || (e.getCenter(this.position), e.getSize(this.scale), this.scale.multiplyScalar(0.5), On.prototype.updateMatrixWorld.call(this, t));
                }),
                (Uh.prototype = Object.create(ms.prototype)),
                (Uh.prototype.constructor = Uh),
                (Uh.prototype.updateMatrixWorld = function (t) {
                    var e = -this.plane.constant;
                    Math.abs(e) < 1e-8 && (e = 1e-8), this.scale.set(0.5 * this.size, 0.5 * this.size, e), (this.children[0].material.side = e < 0 ? u : l), this.lookAt(this.plane.normal), On.prototype.updateMatrixWorld.call(this, t);
                });
            var jh,
                Gh,
                Hh = new an();
            function Vh(t, e, n, i, r, o) {
                On.call(this),
                    void 0 === t && (t = new an(0, 0, 1)),
                    void 0 === e && (e = new an(0, 0, 0)),
                    void 0 === n && (n = 1),
                    void 0 === i && (i = 16776960),
                    void 0 === r && (r = 0.2 * n),
                    void 0 === o && (o = 0.2 * r),
                    void 0 === jh && ((jh = new Qi()).setAttribute("position", new Ui([0, 0, 0, 0, 1, 0], 3)), (Gh = new zc(0, 0.5, 1, 5, 1)).translate(0, -0.5, 0)),
                    this.position.copy(e),
                    (this.line = new ms(jh, new ls({ color: i, toneMapped: !1 }))),
                    (this.line.matrixAutoUpdate = !1),
                    this.add(this.line),
                    (this.cone = new mr(Gh, new Ci({ color: i, toneMapped: !1 }))),
                    (this.cone.matrixAutoUpdate = !1),
                    this.add(this.cone),
                    this.setDirection(t),
                    this.setLength(n, r, o);
            }
            function Wh(t) {
                var e = [0, 0, 0, (t = t || 1), 0, 0, 0, 0, 0, 0, t, 0, 0, 0, 0, 0, 0, t],
                    n = new Qi();
                n.setAttribute("position", new Ui(e, 3)), n.setAttribute("color", new Ui([1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1], 3));
                var i = new ls({ vertexColors: !0, toneMapped: !1 });
                ys.call(this, n, i);
            }
            (Vh.prototype = Object.create(On.prototype)),
                (Vh.prototype.constructor = Vh),
                (Vh.prototype.setDirection = function (t) {
                    if (t.y > 0.99999) this.quaternion.set(0, 0, 0, 1);
                    else if (t.y < -0.99999) this.quaternion.set(1, 0, 0, 0);
                    else {
                        Hh.set(t.z, 0, -t.x).normalize();
                        var e = Math.acos(t.y);
                        this.quaternion.setFromAxisAngle(Hh, e);
                    }
                }),
                (Vh.prototype.setLength = function (t, e, n) {
                    void 0 === e && (e = 0.2 * t),
                        void 0 === n && (n = 0.2 * e),
                        this.line.scale.set(1, Math.max(1e-4, t - e), 1),
                        this.line.updateMatrix(),
                        this.cone.scale.set(n, e, n),
                        (this.cone.position.y = t),
                        this.cone.updateMatrix();
                }),
                (Vh.prototype.setColor = function (t) {
                    this.line.material.color.set(t), this.cone.material.color.set(t);
                }),
                (Vh.prototype.copy = function (t) {
                    return On.prototype.copy.call(this, t, !1), this.line.copy(t.line), this.cone.copy(t.cone), this;
                }),
                (Vh.prototype.clone = function () {
                    return new this.constructor().copy(this);
                }),
                (Wh.prototype = Object.create(ys.prototype)),
                (Wh.prototype.constructor = Wh);
            var qh,
                Xh,
                Yh,
                Zh,
                Jh = 4,
                Qh = 8,
                Kh = Math.pow(2, Qh),
                $h = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582],
                tp = Qh - Jh + 1 + $h.length,
                ep = 20,
                np = { [Ae]: 0, [Pe]: 1, [Ce]: 2, [Oe]: 3, [De]: 4, [Ie]: 5, [Le]: 6 },
                ip = new ru(),
                rp =
                    ((qh = ep),
                    (Xh = new Float32Array(qh)),
                    (Yh = new an(0, 1, 0)),
                    ((Zh = new Wc({
                        defines: { n: qh },
                        uniforms: {
                            envMap: { value: null },
                            samples: { value: 1 },
                            weights: { value: Xh },
                            latitudinal: { value: !1 },
                            dTheta: { value: 0 },
                            mipInt: { value: 0 },
                            poleAxis: { value: Yh },
                            inputEncoding: { value: np[Ae] },
                            outputEncoding: { value: np[Ae] },
                        },
                        vertexShader: Ap(),
                        fragmentShader: `\nprecision mediump float;\nprecision mediump int;\nvarying vec3 vOutputDirection;\nuniform sampler2D envMap;\nuniform int samples;\nuniform float weights[n];\nuniform bool latitudinal;\nuniform float dTheta;\nuniform float mipInt;\nuniform vec3 poleAxis;\n\n${Pp()}\n\n#define ENVMAP_TYPE_CUBE_UV\n#include <cube_uv_reflection_fragment>\n\nvec3 getSample(float theta, vec3 axis) {\n\tfloat cosTheta = cos(theta);\n\t// Rodrigues' axis-angle rotation\n\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t+ cross(axis, vOutputDirection) * sin(theta)\n\t\t+ axis * dot(axis, vOutputDirection) * (1.0 - cosTheta);\n\treturn bilinearCubeUV(envMap, sampleDirection, mipInt);\n}\n\nvoid main() {\n\tvec3 axis = latitudinal ? poleAxis : cross(poleAxis, vOutputDirection);\n\tif (all(equal(axis, vec3(0.0))))\n\t\taxis = vec3(vOutputDirection.z, 0.0, - vOutputDirection.x);\n\taxis = normalize(axis);\n\tgl_FragColor = vec4(0.0);\n\tgl_FragColor.rgb += weights[0] * getSample(0.0, axis);\n\tfor (int i = 1; i < n; i++) {\n\t\tif (i >= samples)\n\t\t\tbreak;\n\t\tfloat theta = dTheta * float(i);\n\t\tgl_FragColor.rgb += weights[i] * getSample(-1.0 * theta, axis);\n\t\tgl_FragColor.rgb += weights[i] * getSample(theta, axis);\n\t}\n\tgl_FragColor = linearToOutputTexel(gl_FragColor);\n}\n\t\t`,
                        blending: p,
                        depthTest: !1,
                        depthWrite: !1,
                    })).type = "SphericalGaussianBlur"),
                    Zh),
                op = null,
                ap = null,
                { _lodPlanes: sp, _sizeLods: cp, _sigmas: lp } = (function () {
                    for (var t = [], e = [], n = [], i = Qh, r = 0; r < tp; r++) {
                        var o = Math.pow(2, i);
                        e.push(o);
                        var a = 1 / o;
                        r > Qh - Jh ? (a = $h[r - Qh + Jh - 1]) : 0 == r && (a = 0), n.push(a);
                        for (var s = 1 / (o - 1), c = -s / 2, l = 1 + s / 2, u = [c, c, l, c, l, l, c, c, l, l, c, l], h = new Float32Array(108), p = new Float32Array(72), d = new Float32Array(36), f = 0; f < 6; f++) {
                            var m = ((f % 3) * 2) / 3 - 1,
                                v = f > 2 ? 0 : -1,
                                g = [m, v, 0, m + 2 / 3, v, 0, m + 2 / 3, v + 1, 0, m, v, 0, m + 2 / 3, v + 1, 0, m, v + 1, 0];
                            h.set(g, 18 * f), p.set(u, 12 * f);
                            var y = [f, f, f, f, f, f];
                            d.set(y, 6 * f);
                        }
                        var x = new Qi();
                        x.setAttribute("position", new Oi(h, 3)), x.setAttribute("uv", new Oi(p, 2)), x.setAttribute("faceIndex", new Oi(d, 1)), t.push(x), i > Jh && i--;
                    }
                    return { _lodPlanes: t, _sizeLods: e, _sigmas: n };
                })(),
                up = null,
                hp = null,
                pp = null,
                dp = (1 + Math.sqrt(5)) / 2,
                fp = 1 / dp,
                mp = [new an(1, 1, 1), new an(-1, 1, 1), new an(1, 1, -1), new an(-1, 1, -1), new an(0, dp, fp), new an(0, dp, -fp), new an(fp, 0, dp), new an(-fp, 0, dp), new an(dp, fp, 0), new an(-dp, fp, 0)];
            function vp(t) {
                (hp = t), xp(rp);
            }
            function gp(t) {
                var e = { magFilter: st, minFilter: st, generateMipmaps: !1, type: t ? t.type : dt, format: t ? t.format : Ct, encoding: t ? t.encoding : Ce, depthBuffer: !1, stencilBuffer: !1 },
                    n = _p(e);
                return (n.depthBuffer = !t), (up = _p(e)), n;
            }
            function yp(t) {
                up.dispose(), hp.setRenderTarget(pp), (t.scissorTest = !1), t.setSize(t.width, t.height);
            }
            function xp(t) {
                var e = new Dn();
                e.add(new mr(sp[0], t)), hp.compile(e, ip);
            }
            function _p(t) {
                var e = new tn(3 * Kh, 3 * Kh, t);
                return (e.texture.mapping = nt), (e.texture.name = "PMREM.cubeUv"), (e.scissorTest = !0), e;
            }
            function bp(t, e, n, i, r) {
                t.viewport.set(e, n, i, r), t.scissor.set(e, n, i, r);
            }
            function wp(t) {
                var e = hp.autoClear;
                hp.autoClear = !1;
                for (var n = 1; n < tp; n++) {
                    Mp(t, n - 1, n, Math.sqrt(lp[n] * lp[n] - lp[n - 1] * lp[n - 1]), mp[(n - 1) % mp.length]);
                }
                hp.autoClear = e;
            }
            function Mp(t, e, n, i, r) {
                Sp(t, up, e, n, i, "latitudinal", r), Sp(up, t, n, n, i, "longitudinal", r);
            }
            function Sp(t, e, n, i, r, o, a) {
                "latitudinal" !== o && "longitudinal" !== o && console.error("blur direction must be either latitudinal or longitudinal!");
                var s = new Dn();
                s.add(new mr(sp[i], rp));
                var c = rp.uniforms,
                    l = cp[n] - 1,
                    u = isFinite(r) ? Math.PI / (2 * l) : (2 * Math.PI) / (2 * ep - 1),
                    h = r / u,
                    p = isFinite(r) ? 1 + Math.floor(3 * h) : ep;
                p > ep && console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${p} samples when the maximum is set to ${ep}`);
                for (var d = [], f = 0, m = 0; m < ep; ++m) {
                    var v = m / h,
                        g = Math.exp((-v * v) / 2);
                    d.push(g), 0 == m ? (f += g) : m < p && (f += 2 * g);
                }
                for (m = 0; m < d.length; m++) d[m] = d[m] / f;
                (c.envMap.value = t.texture),
                    (c.samples.value = p),
                    (c.weights.value = d),
                    (c.latitudinal.value = "latitudinal" === o),
                    a && (c.poleAxis.value = a),
                    (c.dTheta.value = u),
                    (c.mipInt.value = Qh - n),
                    (c.inputEncoding.value = np[t.texture.encoding]),
                    (c.outputEncoding.value = np[t.texture.encoding]);
                var y = cp[i];
                bp(e, (v = 3 * Math.max(0, Kh - 2 * y)), (0 === i ? 0 : 2 * Kh) + 2 * y * (i > Qh - Jh ? i - Qh + Jh : 0), 3 * y, 2 * y), hp.setRenderTarget(e), hp.render(s, ip);
            }
            function Tp() {
                var t = new Wc({
                    uniforms: { envMap: { value: null }, texelSize: { value: new Ye(1, 1) }, inputEncoding: { value: np[Ae] }, outputEncoding: { value: np[Ae] } },
                    vertexShader: Ap(),
                    fragmentShader: `\nprecision mediump float;\nprecision mediump int;\nvarying vec3 vOutputDirection;\nuniform sampler2D envMap;\nuniform vec2 texelSize;\n\n${Pp()}\n\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n\nvoid main() {\n\tgl_FragColor = vec4(0.0);\n\tvec3 outputDirection = normalize(vOutputDirection);\n\tvec2 uv;\n\tuv.y = asin(clamp(outputDirection.y, -1.0, 1.0)) * RECIPROCAL_PI + 0.5;\n\tuv.x = atan(outputDirection.z, outputDirection.x) * RECIPROCAL_PI2 + 0.5;\n\tvec2 f = fract(uv / texelSize - 0.5);\n\tuv -= f * texelSize;\n\tvec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n\tuv.x += texelSize.x;\n\tvec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n\tuv.y += texelSize.y;\n\tvec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n\tuv.x -= texelSize.x;\n\tvec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n\tvec3 tm = mix(tl, tr, f.x);\n\tvec3 bm = mix(bl, br, f.x);\n\tgl_FragColor.rgb = mix(tm, bm, f.y);\n\tgl_FragColor = linearToOutputTexel(gl_FragColor);\n}\n\t\t`,
                    blending: p,
                    depthTest: !1,
                    depthWrite: !1,
                });
                return (t.type = "EquirectangularToCubeUV"), t;
            }
            function Ep() {
                var t = new Wc({
                    uniforms: { envMap: { value: null }, inputEncoding: { value: np[Ae] }, outputEncoding: { value: np[Ae] } },
                    vertexShader: Ap(),
                    fragmentShader: `\nprecision mediump float;\nprecision mediump int;\nvarying vec3 vOutputDirection;\nuniform samplerCube envMap;\n\n${Pp()}\n\nvoid main() {\n\tgl_FragColor = vec4(0.0);\n\tgl_FragColor.rgb = envMapTexelToLinear(textureCube(envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ))).rgb;\n\tgl_FragColor = linearToOutputTexel(gl_FragColor);\n}\n\t\t`,
                    blending: p,
                    depthTest: !1,
                    depthWrite: !1,
                });
                return (t.type = "CubemapToCubeUV"), t;
            }
            function Ap() {
                return "\nprecision mediump float;\nprecision mediump int;\nattribute vec3 position;\nattribute vec2 uv;\nattribute float faceIndex;\nvarying vec3 vOutputDirection;\nvec3 getDirection(vec2 uv, float face) {\n\tuv = 2.0 * uv - 1.0;\n\tvec3 direction = vec3(uv, 1.0);\n\tif (face == 0.0) {\n\t\tdirection = direction.zyx;\n\t\tdirection.z *= -1.0;\n\t} else if (face == 1.0) {\n\t\tdirection = direction.xzy;\n\t\tdirection.z *= -1.0;\n\t} else if (face == 3.0) {\n\t\tdirection = direction.zyx;\n\t\tdirection.x *= -1.0;\n\t} else if (face == 4.0) {\n\t\tdirection = direction.xzy;\n\t\tdirection.y *= -1.0;\n\t} else if (face == 5.0) {\n\t\tdirection.xz *= -1.0;\n\t}\n\treturn direction;\n}\nvoid main() {\n\tvOutputDirection = getDirection(uv, faceIndex);\n\tgl_Position = vec4( position, 1.0 );\n}\n\t";
            }
            function Pp() {
                return "\nuniform int inputEncoding;\nuniform int outputEncoding;\n\n#include <encodings_pars_fragment>\n\nvec4 inputTexelToLinear(vec4 value){\n\tif(inputEncoding == 0){\n\t\treturn value;\n\t}else if(inputEncoding == 1){\n\t\treturn sRGBToLinear(value);\n\t}else if(inputEncoding == 2){\n\t\treturn RGBEToLinear(value);\n\t}else if(inputEncoding == 3){\n\t\treturn RGBMToLinear(value, 7.0);\n\t}else if(inputEncoding == 4){\n\t\treturn RGBMToLinear(value, 16.0);\n\t}else if(inputEncoding == 5){\n\t\treturn RGBDToLinear(value, 256.0);\n\t}else{\n\t\treturn GammaToLinear(value, 2.2);\n\t}\n}\n\nvec4 linearToOutputTexel(vec4 value){\n\tif(outputEncoding == 0){\n\t\treturn value;\n\t}else if(outputEncoding == 1){\n\t\treturn LinearTosRGB(value);\n\t}else if(outputEncoding == 2){\n\t\treturn LinearToRGBE(value);\n\t}else if(outputEncoding == 3){\n\t\treturn LinearToRGBM(value, 7.0);\n\t}else if(outputEncoding == 4){\n\t\treturn LinearToRGBM(value, 16.0);\n\t}else if(outputEncoding == 5){\n\t\treturn LinearToRGBD(value, 256.0);\n\t}else{\n\t\treturn LinearToGamma(value, 2.2);\n\t}\n}\n\nvec4 envMapTexelToLinear(vec4 color) {\n\treturn inputTexelToLinear(color);\n}\n\t";
            }
            vp.prototype = {
                constructor: vp,
                fromScene: function (t, e = 0, n = 0.1, i = 100) {
                    pp = hp.getRenderTarget();
                    var r = gp();
                    return (
                        (function (t, e, n, i) {
                            var r = new Rr(90, 1, e, n),
                                o = [1, 1, 1, 1, -1, 1],
                                a = [1, 1, -1, -1, -1, 1],
                                s = hp.outputEncoding,
                                c = hp.toneMapping,
                                l = hp.toneMappingExposure,
                                u = hp.getClearColor(),
                                h = hp.getClearAlpha();
                            (hp.toneMapping = q), (hp.toneMappingExposure = 1), (hp.outputEncoding = Ae), (t.scale.z *= -1);
                            var p = t.background;
                            if (p && p.isColor) {
                                p.convertSRGBToLinear();
                                var d = Math.max(p.r, p.g, p.b),
                                    f = Math.min(Math.max(Math.ceil(Math.log2(d)), -128), 127);
                                p = p.multiplyScalar(Math.pow(2, -f));
                                var m = (f + 128) / 255;
                                hp.setClearColor(p, m), (t.background = null);
                            }
                            for (var v = 0; v < 6; v++) {
                                var g = v % 3;
                                0 == g ? (r.up.set(0, o[v], 0), r.lookAt(a[v], 0, 0)) : 1 == g ? (r.up.set(0, 0, o[v]), r.lookAt(0, a[v], 0)) : (r.up.set(0, o[v], 0), r.lookAt(0, 0, a[v])),
                                    bp(i, g * Kh, v > 2 ? Kh : 0, Kh, Kh),
                                    hp.setRenderTarget(i),
                                    hp.render(t, r);
                            }
                            (hp.toneMapping = c), (hp.toneMappingExposure = l), (hp.outputEncoding = s), hp.setClearColor(u, h), (t.scale.z *= -1);
                        })(t, n, i, r),
                        e > 0 && Mp(r, 0, 0, e),
                        wp(r),
                        yp(r),
                        r
                    );
                },
                fromEquirectangular: function (t) {
                    return (t.magFilter = st), (t.minFilter = st), (t.generateMipmaps = !1), this.fromCubemap(t);
                },
                fromCubemap: function (t) {
                    pp = hp.getRenderTarget();
                    var e = gp(t);
                    return (
                        (function (t, e) {
                            var n = new Dn();
                            t.isCubeTexture ? null == ap && (ap = Ep()) : null == op && (op = Tp());
                            var i = t.isCubeTexture ? ap : op;
                            n.add(new mr(sp[0], i));
                            var r = i.uniforms;
                            (r.envMap.value = t), t.isCubeTexture || r.texelSize.value.set(1 / t.image.width, 1 / t.image.height);
                            (r.inputEncoding.value = np[t.encoding]), (r.outputEncoding.value = np[t.encoding]), bp(e, 0, 0, 3 * Kh, 2 * Kh), hp.setRenderTarget(e), hp.render(n, ip);
                        })(t, e),
                        wp(e),
                        yp(e),
                        e
                    );
                },
                compileCubemapShader: function () {
                    null == ap && xp((ap = Ep()));
                },
                compileEquirectangularShader: function () {
                    null == op && xp((op = Tp()));
                },
                dispose: function () {
                    rp.dispose(), null != ap && ap.dispose(), null != op && op.dispose();
                    for (var t = 0; t < sp.length; t++) sp[t].dispose();
                },
            };
            function Lp(t) {
                console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead."), kl.call(this, t), (this.type = "catmullrom");
            }
            (Pl.create = function (t, e) {
                return console.log("THREE.Curve.create() has been deprecated"), (t.prototype = Object.create(Pl.prototype)), (t.prototype.constructor = t), (t.prototype.getPoint = e), t;
            }),
                Object.assign(Yl.prototype, {
                    createPointsGeometry: function (t) {
                        console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
                        var e = this.getPoints(t);
                        return this.createGeometry(e);
                    },
                    createSpacedPointsGeometry: function (t) {
                        console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
                        var e = this.getSpacedPoints(t);
                        return this.createGeometry(e);
                    },
                    createGeometry: function (t) {
                        console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
                        for (var e = new wr(), n = 0, i = t.length; n < i; n++) {
                            var r = t[n];
                            e.vertices.push(new an(r.x, r.y, r.z || 0));
                        }
                        return e;
                    },
                }),
                Object.assign(Zl.prototype, {
                    fromPoints: function (t) {
                        return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."), this.setFromPoints(t);
                    },
                }),
                Object.create(kl.prototype),
                Object.create(kl.prototype),
                (Lp.prototype = Object.create(kl.prototype)),
                Object.assign(Lp.prototype, {
                    initFromArray: function () {
                        console.error("THREE.Spline: .initFromArray() has been removed.");
                    },
                    getControlPointsArray: function () {
                        console.error("THREE.Spline: .getControlPointsArray() has been removed.");
                    },
                    reparametrizeByArcLength: function () {
                        console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.");
                    },
                }),
                (Ah.prototype.setColors = function () {
                    console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.");
                }),
                (bh.prototype.update = function () {
                    console.error("THREE.SkeletonHelper: update() no longer needs to be called.");
                }),
                Object.assign(xl.prototype, {
                    extractUrlBase: function (t) {
                        return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."), uu(t);
                    },
                }),
                (xl.Handlers = {
                    add: function () {
                        console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.");
                    },
                    get: function () {
                        console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.");
                    },
                }),
                Object.assign(mu.prototype, {
                    setTexturePath: function (t) {
                        return console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath()."), this.setResourcePath(t);
                    },
                }),
                Object.assign(hh.prototype, {
                    center: function (t) {
                        return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."), this.getCenter(t);
                    },
                    empty: function () {
                        return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."), this.isEmpty();
                    },
                    isIntersectionBox: function (t) {
                        return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."), this.intersectsBox(t);
                    },
                    size: function (t) {
                        return console.warn("THREE.Box2: .size() has been renamed to .getSize()."), this.getSize(t);
                    },
                }),
                Object.assign(Xn.prototype, {
                    center: function (t) {
                        return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."), this.getCenter(t);
                    },
                    empty: function () {
                        return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."), this.isEmpty();
                    },
                    isIntersectionBox: function (t) {
                        return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."), this.intersectsBox(t);
                    },
                    isIntersectionSphere: function (t) {
                        return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."), this.intersectsSphere(t);
                    },
                    size: function (t) {
                        return console.warn("THREE.Box3: .size() has been renamed to .getSize()."), this.getSize(t);
                    },
                }),
                (Fr.prototype.setFromMatrix = function (t) {
                    return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."), this.setFromProjectionMatrix(t);
                }),
                (fh.prototype.center = function (t) {
                    return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."), this.getCenter(t);
                }),
                Object.assign(Xe, {
                    random16: function () {
                        return console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead."), Math.random();
                    },
                    nearestPowerOfTwo: function (t) {
                        return console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo()."), Xe.floorPowerOfTwo(t);
                    },
                    nextPowerOfTwo: function (t) {
                        return console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo()."), Xe.ceilPowerOfTwo(t);
                    },
                }),
                Object.assign(Ze.prototype, {
                    flattenToArrayOffset: function (t, e) {
                        return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."), this.toArray(t, e);
                    },
                    multiplyVector3: function (t) {
                        return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."), t.applyMatrix3(this);
                    },
                    multiplyVector3Array: function () {
                        console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.");
                    },
                    applyToBufferAttribute: function (t) {
                        return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."), t.applyMatrix3(this);
                    },
                    applyToVector3Array: function () {
                        console.error("THREE.Matrix3: .applyToVector3Array() has been removed.");
                    },
                }),
                Object.assign(fn.prototype, {
                    extractPosition: function (t) {
                        return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."), this.copyPosition(t);
                    },
                    flattenToArrayOffset: function (t, e) {
                        return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."), this.toArray(t, e);
                    },
                    getPosition: function () {
                        return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."), new an().setFromMatrixColumn(this, 3);
                    },
                    setRotationFromQuaternion: function (t) {
                        return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."), this.makeRotationFromQuaternion(t);
                    },
                    multiplyToArray: function () {
                        console.warn("THREE.Matrix4: .multiplyToArray() has been removed.");
                    },
                    multiplyVector3: function (t) {
                        return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."), t.applyMatrix4(this);
                    },
                    multiplyVector4: function (t) {
                        return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."), t.applyMatrix4(this);
                    },
                    multiplyVector3Array: function () {
                        console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.");
                    },
                    rotateAxis: function (t) {
                        console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."), t.transformDirection(this);
                    },
                    crossVector: function (t) {
                        return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."), t.applyMatrix4(this);
                    },
                    translate: function () {
                        console.error("THREE.Matrix4: .translate() has been removed.");
                    },
                    rotateX: function () {
                        console.error("THREE.Matrix4: .rotateX() has been removed.");
                    },
                    rotateY: function () {
                        console.error("THREE.Matrix4: .rotateY() has been removed.");
                    },
                    rotateZ: function () {
                        console.error("THREE.Matrix4: .rotateZ() has been removed.");
                    },
                    rotateByAxis: function () {
                        console.error("THREE.Matrix4: .rotateByAxis() has been removed.");
                    },
                    applyToBufferAttribute: function (t) {
                        return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."), t.applyMatrix4(this);
                    },
                    applyToVector3Array: function () {
                        console.error("THREE.Matrix4: .applyToVector3Array() has been removed.");
                    },
                    makeFrustum: function (t, e, n, i, r, o) {
                        return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."), this.makePerspective(t, e, i, n, r, o);
                    },
                }),
                (ci.prototype.isIntersectionLine = function (t) {
                    return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."), this.intersectsLine(t);
                }),
                (nn.prototype.multiplyVector3 = function (t) {
                    return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."), t.applyQuaternion(this);
                }),
                Object.assign(ri.prototype, {
                    isIntersectionBox: function (t) {
                        return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."), this.intersectsBox(t);
                    },
                    isIntersectionPlane: function (t) {
                        return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."), this.intersectsPlane(t);
                    },
                    isIntersectionSphere: function (t) {
                        return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."), this.intersectsSphere(t);
                    },
                }),
                Object.assign(xi.prototype, {
                    area: function () {
                        return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."), this.getArea();
                    },
                    barycoordFromPoint: function (t, e) {
                        return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."), this.getBarycoord(t, e);
                    },
                    midpoint: function (t) {
                        return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."), this.getMidpoint(t);
                    },
                    normal: function (t) {
                        return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."), this.getNormal(t);
                    },
                    plane: function (t) {
                        return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."), this.getPlane(t);
                    },
                }),
                Object.assign(xi, {
                    barycoordFromPoint: function (t, e, n, i, r) {
                        return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."), xi.getBarycoord(t, e, n, i, r);
                    },
                    normal: function (t, e, n, i) {
                        return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."), xi.getNormal(t, e, n, i);
                    },
                }),
                Object.assign(Jl.prototype, {
                    extractAllPoints: function (t) {
                        return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."), this.extractPoints(t);
                    },
                    extrude: function (t) {
                        return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."), new bc(this, t);
                    },
                    makeGeometry: function (t) {
                        return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."), new Dc(this, t);
                    },
                }),
                Object.assign(Ye.prototype, {
                    fromAttribute: function (t, e, n) {
                        return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."), this.fromBufferAttribute(t, e, n);
                    },
                    distanceToManhattan: function (t) {
                        return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."), this.manhattanDistanceTo(t);
                    },
                    lengthManhattan: function () {
                        return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."), this.manhattanLength();
                    },
                }),
                Object.assign(an.prototype, {
                    setEulerFromRotationMatrix: function () {
                        console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.");
                    },
                    setEulerFromQuaternion: function () {
                        console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.");
                    },
                    getPositionFromMatrix: function (t) {
                        return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."), this.setFromMatrixPosition(t);
                    },
                    getScaleFromMatrix: function (t) {
                        return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."), this.setFromMatrixScale(t);
                    },
                    getColumnFromMatrix: function (t, e) {
                        return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."), this.setFromMatrixColumn(e, t);
                    },
                    applyProjection: function (t) {
                        return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."), this.applyMatrix4(t);
                    },
                    fromAttribute: function (t, e, n) {
                        return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."), this.fromBufferAttribute(t, e, n);
                    },
                    distanceToManhattan: function (t) {
                        return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."), this.manhattanDistanceTo(t);
                    },
                    lengthManhattan: function () {
                        return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."), this.manhattanLength();
                    },
                }),
                Object.assign($e.prototype, {
                    fromAttribute: function (t, e, n) {
                        return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."), this.fromBufferAttribute(t, e, n);
                    },
                    lengthManhattan: function () {
                        return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."), this.manhattanLength();
                    },
                }),
                Object.assign(wr.prototype, {
                    computeTangents: function () {
                        console.error("THREE.Geometry: .computeTangents() has been removed.");
                    },
                    computeLineDistances: function () {
                        console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.");
                    },
                    applyMatrix: function (t) {
                        return console.warn("THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4()."), this.applyMatrix4(t);
                    },
                }),
                Object.assign(On.prototype, {
                    getChildByName: function (t) {
                        return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."), this.getObjectByName(t);
                    },
                    renderDepth: function () {
                        console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.");
                    },
                    translate: function (t, e) {
                        return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."), this.translateOnAxis(e, t);
                    },
                    getWorldRotation: function () {
                        console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.");
                    },
                    applyMatrix: function (t) {
                        return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."), this.applyMatrix4(t);
                    },
                }),
                Object.defineProperties(On.prototype, {
                    eulerOrder: {
                        get: function () {
                            return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."), this.rotation.order;
                        },
                        set: function (t) {
                            console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."), (this.rotation.order = t);
                        },
                    },
                    useQuaternion: {
                        get: function () {
                            console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
                        },
                        set: function () {
                            console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
                        },
                    },
                }),
                Object.assign(mr.prototype, {
                    setDrawMode: function () {
                        console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.");
                    },
                }),
                Object.defineProperties(mr.prototype, {
                    drawMode: {
                        get: function () {
                            return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."), 0;
                        },
                        set: function () {
                            console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.");
                        },
                    },
                }),
                Object.defineProperties(Ka.prototype, {
                    objects: {
                        get: function () {
                            return console.warn("THREE.LOD: .objects has been renamed to .levels."), this.levels;
                        },
                    },
                }),
                Object.defineProperty(ns.prototype, "useVertexTexture", {
                    get: function () {
                        console.warn("THREE.Skeleton: useVertexTexture has been removed.");
                    },
                    set: function () {
                        console.warn("THREE.Skeleton: useVertexTexture has been removed.");
                    },
                }),
                ($a.prototype.initBones = function () {
                    console.error("THREE.SkinnedMesh: initBones() has been removed.");
                }),
                Object.defineProperty(Pl.prototype, "__arcLengthDivisions", {
                    get: function () {
                        return console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."), this.arcLengthDivisions;
                    },
                    set: function (t) {
                        console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."), (this.arcLengthDivisions = t);
                    },
                }),
                (Rr.prototype.setLens = function (t, e) {
                    console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."), void 0 !== e && (this.filmGauge = e), this.setFocalLength(t);
                }),
                Object.defineProperties(Ql.prototype, {
                    onlyShadow: {
                        set: function () {
                            console.warn("THREE.Light: .onlyShadow has been removed.");
                        },
                    },
                    shadowCameraFov: {
                        set: function (t) {
                            console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."), (this.shadow.camera.fov = t);
                        },
                    },
                    shadowCameraLeft: {
                        set: function (t) {
                            console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."), (this.shadow.camera.left = t);
                        },
                    },
                    shadowCameraRight: {
                        set: function (t) {
                            console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."), (this.shadow.camera.right = t);
                        },
                    },
                    shadowCameraTop: {
                        set: function (t) {
                            console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."), (this.shadow.camera.top = t);
                        },
                    },
                    shadowCameraBottom: {
                        set: function (t) {
                            console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."), (this.shadow.camera.bottom = t);
                        },
                    },
                    shadowCameraNear: {
                        set: function (t) {
                            console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."), (this.shadow.camera.near = t);
                        },
                    },
                    shadowCameraFar: {
                        set: function (t) {
                            console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."), (this.shadow.camera.far = t);
                        },
                    },
                    shadowCameraVisible: {
                        set: function () {
                            console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.");
                        },
                    },
                    shadowBias: {
                        set: function (t) {
                            console.warn("THREE.Light: .shadowBias is now .shadow.bias."), (this.shadow.bias = t);
                        },
                    },
                    shadowDarkness: {
                        set: function () {
                            console.warn("THREE.Light: .shadowDarkness has been removed.");
                        },
                    },
                    shadowMapWidth: {
                        set: function (t) {
                            console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."), (this.shadow.mapSize.width = t);
                        },
                    },
                    shadowMapHeight: {
                        set: function (t) {
                            console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."), (this.shadow.mapSize.height = t);
                        },
                    },
                }),
                Object.defineProperties(Oi.prototype, {
                    length: {
                        get: function () {
                            return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."), this.array.length;
                        },
                    },
                    dynamic: {
                        get: function () {
                            return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."), this.usage === Ge;
                        },
                        set: function () {
                            console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."), this.setUsage(Ge);
                        },
                    },
                }),
                Object.assign(Oi.prototype, {
                    setDynamic: function (t) {
                        return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."), this.setUsage(!0 === t ? Ge : je), this;
                    },
                    copyIndicesArray: function () {
                        console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.");
                    },
                    setArray: function () {
                        console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers");
                    },
                }),
                Object.assign(Qi.prototype, {
                    addIndex: function (t) {
                        console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."), this.setIndex(t);
                    },
                    addAttribute: function (t, e) {
                        return (
                            console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."),
                            (e && e.isBufferAttribute) || (e && e.isInterleavedBufferAttribute)
                                ? "index" === t
                                    ? (console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."), this.setIndex(e), this)
                                    : this.setAttribute(t, e)
                                : (console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."), this.setAttribute(t, new Oi(arguments[1], arguments[2])))
                        );
                    },
                    addDrawCall: function (t, e, n) {
                        void 0 !== n && console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."), console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."), this.addGroup(t, e);
                    },
                    clearDrawCalls: function () {
                        console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."), this.clearGroups();
                    },
                    computeTangents: function () {
                        console.warn("THREE.BufferGeometry: .computeTangents() has been removed.");
                    },
                    computeOffsets: function () {
                        console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.");
                    },
                    removeAttribute: function (t) {
                        return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."), this.deleteAttribute(t);
                    },
                    applyMatrix: function (t) {
                        return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."), this.applyMatrix4(t);
                    },
                }),
                Object.defineProperties(Qi.prototype, {
                    drawcalls: {
                        get: function () {
                            return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."), this.groups;
                        },
                    },
                    offsets: {
                        get: function () {
                            return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."), this.groups;
                        },
                    },
                }),
                Object.defineProperties(sh.prototype, {
                    linePrecision: {
                        get: function () {
                            return console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead."), this.params.Line.threshold;
                        },
                        set: function (t) {
                            console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead."), (this.params.Line.threshold = t);
                        },
                    },
                }),
                Object.defineProperties(Ra.prototype, {
                    dynamic: {
                        get: function () {
                            return console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead."), this.usage === Ge;
                        },
                        set: function (t) {
                            console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead."), this.setUsage(t);
                        },
                    },
                }),
                Object.assign(Ra.prototype, {
                    setDynamic: function (t) {
                        return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."), this.setUsage(!0 === t ? Ge : je), this;
                    },
                    setArray: function () {
                        console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers");
                    },
                }),
                Object.assign(wc.prototype, {
                    getArrays: function () {
                        console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.");
                    },
                    addShapeList: function () {
                        console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.");
                    },
                    addShape: function () {
                        console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.");
                    },
                }),
                Object.defineProperties(oh.prototype, {
                    dynamic: {
                        set: function () {
                            console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.");
                        },
                    },
                    onUpdate: {
                        value: function () {
                            return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."), this;
                        },
                    },
                }),
                Object.defineProperties(Li.prototype, {
                    wrapAround: {
                        get: function () {
                            console.warn("THREE.Material: .wrapAround has been removed.");
                        },
                        set: function () {
                            console.warn("THREE.Material: .wrapAround has been removed.");
                        },
                    },
                    overdraw: {
                        get: function () {
                            console.warn("THREE.Material: .overdraw has been removed.");
                        },
                        set: function () {
                            console.warn("THREE.Material: .overdraw has been removed.");
                        },
                    },
                    wrapRGB: {
                        get: function () {
                            return console.warn("THREE.Material: .wrapRGB has been removed."), new Mi();
                        },
                    },
                    shading: {
                        get: function () {
                            console.error("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
                        },
                        set: function (t) {
                            console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."), (this.flatShading = 1 === t);
                        },
                    },
                    stencilMask: {
                        get: function () {
                            return console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead."), this.stencilFuncMask;
                        },
                        set: function (t) {
                            console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead."), (this.stencilFuncMask = t);
                        },
                    },
                }),
                Object.defineProperties(Yc.prototype, {
                    metal: {
                        get: function () {
                            return console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."), !1;
                        },
                        set: function () {
                            console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead");
                        },
                    },
                }),
                Object.defineProperties(Lr.prototype, {
                    derivatives: {
                        get: function () {
                            return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."), this.extensions.derivatives;
                        },
                        set: function (t) {
                            console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."), (this.extensions.derivatives = t);
                        },
                    },
                }),
                Object.assign(Pa.prototype, {
                    clearTarget: function (t, e, n, i) {
                        console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."), this.setRenderTarget(t), this.clear(e, n, i);
                    },
                    animate: function (t) {
                        console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."), this.setAnimationLoop(t);
                    },
                    getCurrentRenderTarget: function () {
                        return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."), this.getRenderTarget();
                    },
                    getMaxAnisotropy: function () {
                        return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."), this.capabilities.getMaxAnisotropy();
                    },
                    getPrecision: function () {
                        return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."), this.capabilities.precision;
                    },
                    resetGLState: function () {
                        return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."), this.state.reset();
                    },
                    supportsFloatTextures: function () {
                        return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."), this.extensions.get("OES_texture_float");
                    },
                    supportsHalfFloatTextures: function () {
                        return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."), this.extensions.get("OES_texture_half_float");
                    },
                    supportsStandardDerivatives: function () {
                        return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."), this.extensions.get("OES_standard_derivatives");
                    },
                    supportsCompressedTextureS3TC: function () {
                        return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."), this.extensions.get("WEBGL_compressed_texture_s3tc");
                    },
                    supportsCompressedTexturePVRTC: function () {
                        return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."), this.extensions.get("WEBGL_compressed_texture_pvrtc");
                    },
                    supportsBlendMinMax: function () {
                        return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."), this.extensions.get("EXT_blend_minmax");
                    },
                    supportsVertexTextures: function () {
                        return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."), this.capabilities.vertexTextures;
                    },
                    supportsInstancedArrays: function () {
                        return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."), this.extensions.get("ANGLE_instanced_arrays");
                    },
                    enableScissorTest: function (t) {
                        console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."), this.setScissorTest(t);
                    },
                    initMaterial: function () {
                        console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.");
                    },
                    addPrePlugin: function () {
                        console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.");
                    },
                    addPostPlugin: function () {
                        console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.");
                    },
                    updateShadowMap: function () {
                        console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.");
                    },
                    setFaceCulling: function () {
                        console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.");
                    },
                    allocTextureUnit: function () {
                        console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.");
                    },
                    setTexture: function () {
                        console.warn("THREE.WebGLRenderer: .setTexture() has been removed.");
                    },
                    setTexture2D: function () {
                        console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.");
                    },
                    setTextureCube: function () {
                        console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.");
                    },
                    getActiveMipMapLevel: function () {
                        return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."), this.getActiveMipmapLevel();
                    },
                }),
                Object.defineProperties(Pa.prototype, {
                    shadowMapEnabled: {
                        get: function () {
                            return this.shadowMap.enabled;
                        },
                        set: function (t) {
                            console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."), (this.shadowMap.enabled = t);
                        },
                    },
                    shadowMapType: {
                        get: function () {
                            return this.shadowMap.type;
                        },
                        set: function (t) {
                            console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."), (this.shadowMap.type = t);
                        },
                    },
                    shadowMapCullFace: {
                        get: function () {
                            console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
                        },
                        set: function () {
                            console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
                        },
                    },
                    context: {
                        get: function () {
                            return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."), this.getContext();
                        },
                    },
                    vr: {
                        get: function () {
                            return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"), this.xr;
                        },
                    },
                    gammaInput: {
                        get: function () {
                            return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."), !1;
                        },
                        set: function () {
                            console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.");
                        },
                    },
                    gammaOutput: {
                        get: function () {
                            return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."), !1;
                        },
                        set: function (t) {
                            console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."), (this.outputEncoding = !0 === t ? Pe : Ae);
                        },
                    },
                }),
                Object.defineProperties(Ma.prototype, {
                    cullFace: {
                        get: function () {
                            console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
                        },
                        set: function () {
                            console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
                        },
                    },
                    renderReverseSided: {
                        get: function () {
                            console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
                        },
                        set: function () {
                            console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
                        },
                    },
                    renderSingleSided: {
                        get: function () {
                            console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
                        },
                        set: function () {
                            console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
                        },
                    },
                }),
                Object.defineProperties(tn.prototype, {
                    wrapS: {
                        get: function () {
                            return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."), this.texture.wrapS;
                        },
                        set: function (t) {
                            console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."), (this.texture.wrapS = t);
                        },
                    },
                    wrapT: {
                        get: function () {
                            return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."), this.texture.wrapT;
                        },
                        set: function (t) {
                            console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."), (this.texture.wrapT = t);
                        },
                    },
                    magFilter: {
                        get: function () {
                            return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."), this.texture.magFilter;
                        },
                        set: function (t) {
                            console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."), (this.texture.magFilter = t);
                        },
                    },
                    minFilter: {
                        get: function () {
                            return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."), this.texture.minFilter;
                        },
                        set: function (t) {
                            console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."), (this.texture.minFilter = t);
                        },
                    },
                    anisotropy: {
                        get: function () {
                            return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."), this.texture.anisotropy;
                        },
                        set: function (t) {
                            console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."), (this.texture.anisotropy = t);
                        },
                    },
                    offset: {
                        get: function () {
                            return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."), this.texture.offset;
                        },
                        set: function (t) {
                            console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."), (this.texture.offset = t);
                        },
                    },
                    repeat: {
                        get: function () {
                            return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."), this.texture.repeat;
                        },
                        set: function (t) {
                            console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."), (this.texture.repeat = t);
                        },
                    },
                    format: {
                        get: function () {
                            return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."), this.texture.format;
                        },
                        set: function (t) {
                            console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."), (this.texture.format = t);
                        },
                    },
                    type: {
                        get: function () {
                            return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."), this.texture.type;
                        },
                        set: function (t) {
                            console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."), (this.texture.type = t);
                        },
                    },
                    generateMipmaps: {
                        get: function () {
                            return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."), this.texture.generateMipmaps;
                        },
                        set: function (t) {
                            console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."), (this.texture.generateMipmaps = t);
                        },
                    },
                }),
                Object.defineProperties(Fu.prototype, {
                    load: {
                        value: function (t) {
                            console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");
                            var e = this;
                            return (
                                new Eu().load(t, function (t) {
                                    e.setBuffer(t);
                                }),
                                this
                            );
                        },
                    },
                    startTime: {
                        set: function () {
                            console.warn("THREE.Audio: .startTime is now .play( delay ).");
                        },
                    },
                }),
                (Wu.prototype.getData = function () {
                    return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."), this.getFrequencyData();
                }),
                (Ir.prototype.updateCubeMap = function (t, e) {
                    return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."), this.update(t, e);
                });
            (Je.crossOrigin = void 0),
                (Je.loadTexture = function (t, e, n, i) {
                    console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");
                    var r = new Al();
                    r.setCrossOrigin(this.crossOrigin);
                    var o = r.load(t, n, void 0, i);
                    return e && (o.mapping = e), o;
                }),
                (Je.loadTextureCube = function (t, e, n, i) {
                    console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");
                    var r = new El();
                    r.setCrossOrigin(this.crossOrigin);
                    var o = r.load(t, n, void 0, i);
                    return e && (o.mapping = e), o;
                }),
                (Je.loadCompressedTexture = function () {
                    console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.");
                }),
                (Je.loadCompressedTextureCube = function () {
                    console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.");
                });
            "undefined" != typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: { revision: "115" } }));
        },
        function (t, e, n) {
            "use strict";
            n.d(e, "a", function () {
                return s;
            });
            var i,
                r,
                o,
                a = n(59);
            function s() {
                (this.enabled = !0), (this.needsSwap = !0), (this.clear = !1), (this.renderToScreen = !1);
            }
            Object.assign(s.prototype, {
                setSize: function () {},
                render: function () {
                    console.error("THREE.Pass: .render() must be implemented in derived pass.");
                },
            }),
                (s.FullScreenQuad =
                    ((i = new a.j(-1, 1, 1, -1, 0, 1)),
                    (r = new a.l(2, 2)),
                    (o = function (t) {
                        this._mesh = new a.h(r, t);
                    }),
                    Object.defineProperty(o.prototype, "material", {
                        get: function () {
                            return this._mesh.material;
                        },
                        set: function (t) {
                            this._mesh.material = t;
                        },
                    }),
                    Object.assign(o.prototype, {
                        dispose: function () {
                            this._mesh.geometry.dispose();
                        },
                        render: function (t) {
                            t.render(this._mesh, i);
                        },
                    }),
                    o));
        },
        function (t, e, n) {
            "use strict";
            Object.defineProperty(e, "__esModule", { value: !0 }), (e.default = void 0);
            var i = o(n(14)),
                r = o(n(4));
            function o(t) {
                return t && t.__esModule ? t : { default: t };
            }
            function a(t) {
                return (a =
                    "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                        ? function (t) {
                              return typeof t;
                          }
                        : function (t) {
                              return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                          })(t);
            }
            function s(t, e) {
                for (var n = 0; n < e.length; n++) {
                    var i = e[n];
                    (i.enumerable = i.enumerable || !1), (i.configurable = !0), "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);
                }
            }
            function c(t, e) {
                return !e || ("object" !== a(e) && "function" != typeof e)
                    ? (function (t) {
                          if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                          return t;
                      })(t)
                    : e;
            }
            function l(t, e, n) {
                return (l =
                    "undefined" != typeof Reflect && Reflect.get
                        ? Reflect.get
                        : function (t, e, n) {
                              var i = (function (t, e) {
                                  for (; !Object.prototype.hasOwnProperty.call(t, e) && null !== (t = u(t)); );
                                  return t;
                              })(t, e);
                              if (i) {
                                  var r = Object.getOwnPropertyDescriptor(i, e);
                                  return r.get ? r.get.call(n) : r.value;
                              }
                          })(t, e, n || t);
            }
            function u(t) {
                return (u = Object.setPrototypeOf
                    ? Object.getPrototypeOf
                    : function (t) {
                          return t.__proto__ || Object.getPrototypeOf(t);
                      })(t);
            }
            function h(t, e) {
                return (h =
                    Object.setPrototypeOf ||
                    function (t, e) {
                        return (t.__proto__ = e), t;
                    })(t, e);
            }
            var p = n(1),
                d = (function () {
                    function t(e) {
                        return (
                            (function (t, e) {
                                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                            })(this, t),
                            c(this, u(t).call(this, e))
                        );
                    }
                    var e, n, o;
                    return (
                        (function (t, e) {
                            if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                            (t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } })), e && h(t, e);
                        })(t, i.default),
                        (e = t),
                        (n = [
                            {
                                key: "_extra",
                                value: function () {
                                    l(u(t.prototype), "_extra", this).call(this),
                                        (this._start = { x: 0, y: 0 }),
                                        (this._global = { x: 0, y: 0 }),
                                        (this._prev = { x: 0, y: 0 }),
                                        (this._diff = { x: 0, y: 0 }),
                                        (this._dragging = !1),
                                        (this._prevent = !1),
                                        (this._decelerating = !1),
                                        (this._deceleration = { x: 0, y: 0 }),
                                        (this._pointerID = !1),
                                        (this._trackingPoints = []),
                                        (this._runningListeners = []),
                                        this._getElements();
                                },
                            },
                            {
                                key: "_getElements",
                                value: function () {
                                    this._outer = p.one(this._prop.outer);
                                },
                            },
                            {
                                key: "_changeProp",
                                value: function () {
                                    this.removeEventListeners(), this._getElements(), this._setEvents();
                                },
                            },
                            {
                                key: "_setEvents",
                                value: function () {
                                    this._prop.on && this._setStartEvents();
                                },
                            },
                            {
                                key: "_setStartEvents",
                                value: function () {
                                    this.listener(this._outer, "mousedown", this._onStart.bind(this)), this.listener(this._outer, "touchstart", this._onStart.bind(this));
                                },
                            },
                            {
                                key: "_addRunningEvents",
                                value: function () {
                                    this._removeRunningEvents();
                                    var t = this._runningListeners,
                                        e = this._outer;
                                    t.push(this.listener(e, "touchmove", this._onMove.bind(this))),
                                        t.push(this.listener(e, "touchend", this._onEnd.bind(this))),
                                        t.push(this.listener(e, "touchcancel", this._onStop.bind(this))),
                                        t.push(this.listener(window, "mousemove", this._onMove.bind(this))),
                                        t.push(this.listener(window, "mouseup", this._onEnd.bind(this))),
                                        t.push(this.listener(window, "blur", this._onStop.bind(this)));
                                },
                            },
                            {
                                key: "_removeRunningEvents",
                                value: function () {
                                    var t = this;
                                    this._runningListeners.forEach(function (e) {
                                        t.removeEventListener({ id: e.id, el: e.el });
                                    }),
                                        (this._runningListeners = []);
                                },
                            },
                            {
                                key: "_onStart",
                                value: function (t) {
                                    var e = this._normalizeEvent(t);
                                    if (!this._dragging) {
                                        if ("mousedown" == t.type) {
                                            if (1 != t.which) return;
                                            t.stopPropagation();
                                        }
                                        (this._dragging = !0),
                                            (this._decelerating = !1),
                                            (this._prevent = !1),
                                            (this._pointerID = e.id),
                                            (this._diff.x = 0),
                                            (this._diff.y = 0),
                                            (this._global.x = this._prev.x = this._start.x = e.x),
                                            (this._global.y = this._prev.y = this._start.y = e.y),
                                            (this._trackingPoints = []),
                                            this._addTrackingPoint(e.x, e.y),
                                            this._addRunningEvents(),
                                            this._callEvents("start");
                                    }
                                },
                            },
                            {
                                key: "_onMove",
                                value: function (t) {
                                    var e = this._normalizeEvent(t);
                                    if (this._dragging && e.id === this._pointerID) {
                                        this._diff.x += Math.abs(e.x - this._global.x);
                                        var n = this._diff.x;
                                        this._diff.y += Math.abs(e.y - this._global.y);
                                        var i = this._diff.y;
                                        (this._global.x = e.x), (this._global.y = e.y);
                                        var r = this._prop.thresholdPropagation;
                                        if (r) {
                                            var o = r.value;
                                            if (!(("x" == r.dir) & (n > o) & (n > i) || ("y" == r.dir) & (i > o) & (i > n))) return (this._start.x = e.x), void (this._start.y = e.y);
                                            t.stopPropagation(), t.preventDefault(), (this._prevent = !0);
                                        }
                                        this._addTrackingPoint(this._prev.x, this._prev.y), this._callEvents("move");
                                    }
                                },
                            },
                            {
                                key: "_onEnd",
                                value: function (t) {
                                    var e = this._normalizeEvent(t);
                                    this._dragging && e.id === this._pointerID && (this.stopDrag(!1), this._prop.momentum ? this._startDeceleration() : this._callEvents("end"));
                                },
                            },
                            {
                                key: "_onStop",
                                value: function () {
                                    this._dragging && this.stopDrag();
                                },
                            },
                            {
                                key: "stopDrag",
                                value: function () {
                                    var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                                    (this._dragging = !1), (this._decelerating = !1), (this._prevent = !1), this._removeRunningEvents(), t && this._callEvents("end");
                                },
                            },
                            {
                                key: "_normalizeEvent",
                                value: function (t) {
                                    if ("touchmove" === t.type || "touchstart" === t.type || "touchend" === t.type) {
                                        var e = t.targetTouches[0] || t.changedTouches[0];
                                        return { x: e.clientX, y: e.clientY, id: e.identifier };
                                    }
                                    return { x: t.clientX, y: t.clientY, id: null };
                                },
                            },
                            {
                                key: "_addTrackingPoint",
                                value: function (t, e) {
                                    for (var n = Date.now(), i = this._trackingPoints; i.length > 0 && !(n - i[0].time <= 100); ) i.shift();
                                    i.push({ x: t, y: e, time: n }), (this._trackingPoints = i);
                                },
                            },
                            {
                                key: "_startDeceleration",
                                value: function () {
                                    var t = this._trackingPoints,
                                        e = t[0],
                                        n = t[t.length - 1],
                                        i = n.x - e.x,
                                        r = n.y - e.y,
                                        o = (n.time - e.time) / 35,
                                        a = this._deceleration;
                                    (a.x = i / o || 0), (a.y = r / o || 0), Math.abs(a.x) > 1 || Math.abs(a.y) > 1 ? ((this._decelerating = !0), window.requestAnimationFrame(this._decelerationAnim.bind(this))) : this.stopDrag();
                                },
                            },
                            {
                                key: "_decelerationAnim",
                                value: function () {
                                    if (this._decelerating) {
                                        var t = this._prop.momentumStopThreshold,
                                            e = this._prop.friction;
                                        this._deceleration.x *= e;
                                        var n = this._deceleration.x;
                                        this._deceleration.y *= e;
                                        var i = this._deceleration.y;
                                        (this._global.x += n), (this._global.y += i), this._callEvents("move"), (Math.abs(n) > t) & (Math.abs(i) > t) ? window.requestAnimationFrame(this._decelerationAnim.bind(this)) : this.stopDrag();
                                    }
                                },
                            },
                            {
                                key: "_callEvents",
                                value: function (t) {
                                    var e = this._calcCoords();
                                    "start" == t ? this.lbt("start", e) : "move" == t ? this.lbt("move", e) : (this.lbt("end", e), this._callOnceEvents(e)), (this._prev.x = this._global.x), (this._prev.y = this._global.y);
                                },
                            },
                            {
                                key: "_callOnceEvents",
                                value: function (t) {
                                    var e = t.global,
                                        n = this._start.x,
                                        i = this._start.y,
                                        r = this._prop.min;
                                    n > e.x && Math.abs(n - e.x) > Math.abs(r) && this.lbt("left"),
                                        n < e.x && Math.abs(n - e.x) > Math.abs(r) && this.lbt("right"),
                                        i > e.y && Math.abs(i - e.y) > Math.abs(r) && this.lbt("up"),
                                        i < e.y && Math.abs(i - e.y) > Math.abs(r) && this.lbt("down");
                                },
                            },
                            {
                                key: "_calcCoords",
                                value: function () {
                                    var t = this._outer,
                                        e = this._global,
                                        n = { top: 0, left: 0 },
                                        i = { x: 0, y: 0 },
                                        r = { x: 0, y: 0 },
                                        o = { x: 0, y: 0 };
                                    return (
                                        t instanceof Window || t instanceof Document ? ((i.x = e.x), (i.y = e.y)) : ((n = t.getBoundingClientRect()), (i.x = e.x - n.left), (i.y = e.y - n.top)),
                                        (r.x = i.x - (this._start.x - n.left)),
                                        (r.y = i.y - (this._start.y - n.top)),
                                        (o.x = e.x - this._prev.x),
                                        (o.y = e.y - this._prev.y),
                                        { global: e, inner: i, diff: r, step: o }
                                    );
                                },
                            },
                            {
                                key: "defaultProp",
                                get: function () {
                                    return (0, r.default)(l(u(t.prototype), "defaultProp", this), { on: !0, outer: "", min: 100, momentum: !1, momentumStopThreshold: 0.01, friction: 0.95, thresholdPropagation: !1 });
                                },
                            },
                        ]) && s(e.prototype, n),
                        o && s(e, o),
                        t
                    );
                })();
            e.default = d;
        },
        function (t, e, n) {
            "use strict";
            n.d(e, "a", function () {
                return i;
            });
            var i = {
                uniforms: { tDiffuse: { value: null }, opacity: { value: 1 } },
                vertexShader: ["varying vec2 vUv;", "void main() {", "\tvUv = uv;", "\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),
                fragmentShader: ["uniform float opacity;", "uniform sampler2D tDiffuse;", "varying vec2 vUv;", "void main() {", "\tvec4 texel = texture2D( tDiffuse, vUv );", "\tgl_FragColor = opacity * texel;", "}"].join("\n"),
            };
        },
        function (t) {
            t.exports = function (t) {
                t = t || {};
                var e = document.createElement(t.selector);
                if (t.attr) for (var n in t.attr) t.attr.hasOwnProperty(n) && e.setAttribute(n, t.attr[n]);
                return (
                    "a" == t.selector && t.link && ((e.href = t.link), t.target && e.setAttribute("target", t.target)),
                    "img" == t.selector &&
                        t.src &&
                        ((e.src = t.src),
                        t.lazyload &&
                            ((e.style.opacity = 0),
                            (e.onload = function () {
                                e.style.opacity = 1;
                            }))),
                    t.id && (e.id = t.id),
                    t.styles && (e.className = t.styles),
                    t.html && (e.innerHTML = t.html),
                    t.children && e.appendChild(t.children),
                    e
                );
            };
        },
        function (t, e, n) {
            var i = n(80);
            t.exports = function (t) {
                return i("number" == typeof t, "Degrees should be a number"), t * (Math.PI / 180);
            };
        },
        function (t, e) {
            "use strict";
            Object.defineProperty(e, "__esModule", { value: !0 }), (e.default = void 0);
            var n = function (t) {
                var e,
                    n,
                    i = { media: !1, rule: "cover", width: 1e3, height: 1e3, scale: 1 },
                    r = 0,
                    o = 0,
                    a = 0,
                    s = 0,
                    c = (i = Object.assign(i, t)).media;
                "VIDEO" == c.tagName ? ((a = c.videoWidth), (s = c.videoHeight)) : ((a = c.width), (s = c.height));
                var l = i.width,
                    u = i.height;
                return (
                    "cover" === i.rule ? (o = (s * (r = l * i.scale)) / a) < u && (r = (a * (o = u * i.scale)) / s) : "contain" === i.rule && (a > s ? (o = (s * (r = l * i.scale)) / a) : s >= a && (r = (a * (o = u * i.scale)) / s)),
                    (e = (l - r) / 2),
                    (n = (u - o) / 2),
                    { media: i.media, width: r, height: o, mediaWidth: a, mediaHeight: s, scale: i.scale, x: e, y: n }
                );
            };
            e.default = n;
        },
        function (t, e) {
            "use strict";
            Object.defineProperty(e, "__esModule", { value: !0 }), (e.default = void 0);
            var n = function (t) {
                var e = 0,
                    n = 0,
                    i = 0,
                    r = 0;
                return (
                    "detail" in t && (n = t.detail),
                    "wheelDelta" in t && (n = -t.wheelDelta / 120),
                    "wheelDeltaY" in t && (n = -t.wheelDeltaY / 120),
                    "wheelDeltaX" in t && (e = -t.wheelDeltaX / 120),
                    "axis" in t && t.axis === t.HORIZONTAL_AXIS && ((e = n), (n = 0)),
                    (i = 10 * e),
                    (r = 10 * n),
                    "deltaY" in t && (r = t.deltaY),
                    "deltaX" in t && (i = t.deltaX),
                    (i || r) && t.deltaMode && (1 == t.deltaMode ? ((i *= 40), (r *= 40)) : ((i *= 800), (r *= 800))),
                    i && !e && (e = i < 1 ? -1 : 1),
                    r && !n && (n = r < 1 ? -1 : 1),
                    { spinX: e, spinY: n, pixelX: i, pixelY: r }
                );
            };
            e.default = n;
        },
        function (t, e, n) {
            "use strict";
            Object.defineProperty(e, "__esModule", { value: !0 }), (e.default = void 0);
            var i = a(n(4)),
                r = a(n(61)),
                o = a(n(89));
            function a(t) {
                return t && t.__esModule ? t : { default: t };
            }
            function s(t) {
                return (s =
                    "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                        ? function (t) {
                              return typeof t;
                          }
                        : function (t) {
                              return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                          })(t);
            }
            function c(t, e) {
                for (var n = 0; n < e.length; n++) {
                    var i = e[n];
                    (i.enumerable = i.enumerable || !1), (i.configurable = !0), "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);
                }
            }
            function l(t, e) {
                return !e || ("object" !== s(e) && "function" != typeof e)
                    ? (function (t) {
                          if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                          return t;
                      })(t)
                    : e;
            }
            function u(t, e, n) {
                return (u =
                    "undefined" != typeof Reflect && Reflect.get
                        ? Reflect.get
                        : function (t, e, n) {
                              var i = (function (t, e) {
                                  for (; !Object.prototype.hasOwnProperty.call(t, e) && null !== (t = h(t)); );
                                  return t;
                              })(t, e);
                              if (i) {
                                  var r = Object.getOwnPropertyDescriptor(i, e);
                                  return r.get ? r.get.call(n) : r.value;
                              }
                          })(t, e, n || t);
            }
            function h(t) {
                return (h = Object.setPrototypeOf
                    ? Object.getPrototypeOf
                    : function (t) {
                          return t.__proto__ || Object.getPrototypeOf(t);
                      })(t);
            }
            function p(t, e) {
                return (p =
                    Object.setPrototypeOf ||
                    function (t, e) {
                        return (t.__proto__ = e), t;
                    })(t, e);
            }
            var d = (function () {
                function t(e) {
                    return (
                        (function (t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        })(this, t),
                        l(this, h(t).call(this, e, !1))
                    );
                }
                var e, n, a;
                return (
                    (function (t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        (t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } })), e && p(t, e);
                    })(t, o.default),
                    (e = t),
                    (n = [
                        {
                            key: "_extra",
                            value: function () {
                                u(h(t.prototype), "_extra", this).call(this), this._vars(), this._prop.draggable && this._preventInnerDrag(), (this._moduleEvents = []), this._overrideGetEase();
                            },
                        },
                        {
                            key: "_vars",
                            value: function () {
                                (this._dragging = !1), (this._dragger = !1);
                            },
                        },
                        {
                            key: "_preventInnerDrag",
                            value: function () {
                                this._m.outer.querySelectorAll("img, a").forEach(function (t) {
                                    (t.draggable = !1),
                                        (t.ondragstart = function () {
                                            return !1;
                                        });
                                });
                            },
                        },
                        {
                            key: "_changeProp",
                            value: function (e) {
                                u(h(t.prototype), "_changeProp", this).call(this, e), this._destroyDrag(), this._setEvents();
                            },
                        },
                        {
                            key: "_setEvents",
                            value: function () {
                                var t = this._m,
                                    e = new r.default({
                                        on: this._prop.on,
                                        parent: this,
                                        outer: t.outer,
                                        momentum: this._prop.momentum,
                                        momentumStopThreshold: this._prop.momentumStopThreshold,
                                        friction: this._prop.friction,
                                        thresholdPropagation: this._prop.thresholdPropagation,
                                    });
                                (this._dragger = e), e.on("move", this._start.bind(this)), e.on("move", this._move.bind(this)), e.on("end", this._end.bind(this));
                                var n = t.on("wheel", function () {
                                    e.stopDrag();
                                });
                                this._moduleEvents.push(n);
                            },
                        },
                        {
                            key: "_start",
                            value: function () {
                                this._m.prop.run && this._prop.on && ((this._dragging = !0), this.lbt("start"));
                            },
                        },
                        {
                            key: "_move",
                            value: function (t) {
                                var e = this._prop,
                                    n = this._m;
                                if (n.prop.run && e.on && this._dragging) {
                                    this._m.play();
                                    var i = t.step,
                                        r = e.multiplier,
                                        o = i.x * r,
                                        a = i.y * r;
                                    (n.targetLeft -= o), (n.targetTop -= a), n._boundariesBoth();
                                    var s = "y";
                                    n._prop.horizontal && (s = "x"), t.diff[s] > 0 ? (n._direction = -1) : (n._direction = 1), e.disableListeners && n.outer.classList.add("".concat(n._prefix, "_dragging")), this.lbt("move");
                                }
                            },
                        },
                        {
                            key: "_end",
                            value: function () {
                                var t = this,
                                    e = this._prop,
                                    n = this._m;
                                n.prop.run &&
                                    e.on &&
                                    ((this._dragging = !1),
                                    e.disableListeners &&
                                        setTimeout(function () {
                                            t._dragging || n.outer.classList.remove("".concat(n._prefix, "_dragging"));
                                        }, e.timeoutListeners),
                                    this.lbt("end"));
                            },
                        },
                        {
                            key: "_overrideGetEase",
                            value: function () {
                                var t = this,
                                    e = this._m,
                                    n = e._getEase.bind(e);
                                e._getEase = function (e, i) {
                                    var r = n(e, i);
                                    return t._dragging ? t._prop.ease : r;
                                };
                            },
                        },
                        {
                            key: "_destroyDrag",
                            value: function () {
                                var t = this;
                                this._dragger && (this._dragger.destroy(), (this._dragger = !1)),
                                    this._moduleEvents.forEach(function (e) {
                                        t._m.remove(e);
                                    }),
                                    (this._moduleEvents = []);
                            },
                        },
                        {
                            key: "destroy",
                            value: function () {
                                u(h(t.prototype), "destroy", this).call(this), this._destroyDrag();
                            },
                        },
                        {
                            key: "defaultProp",
                            get: function () {
                                return (0, i.default)(u(h(t.prototype), "defaultProp", this), {
                                    on: !0,
                                    multiplier: 1,
                                    momentum: !0,
                                    momentumStopThreshold: 0.01,
                                    friction: 0.95,
                                    thresholdPropagation: !1,
                                    ease: 0.15,
                                    disableListeners: !0,
                                    timeoutListeners: 10,
                                    draggable: !0,
                                });
                            },
                        },
                    ]) && c(e.prototype, n),
                    a && c(e, a),
                    t
                );
            })();
            e.default = d;
        },
        function (t, e, n) {
            "use strict";
            n.d(e, "a", function () {
                return o;
            });
            var i = n(59),
                r = n(60),
                o = function (t, e) {
                    r.a.call(this),
                        (this.textureID = void 0 !== e ? e : "tDiffuse"),
                        t instanceof i.o
                            ? ((this.uniforms = t.uniforms), (this.material = t))
                            : t && ((this.uniforms = i.q.clone(t.uniforms)), (this.material = new i.o({ defines: Object.assign({}, t.defines), uniforms: this.uniforms, vertexShader: t.vertexShader, fragmentShader: t.fragmentShader }))),
                        (this.fsQuad = new r.a.FullScreenQuad(this.material));
                };
            o.prototype = Object.assign(Object.create(r.a.prototype), {
                constructor: o,
                render: function (t, e, n) {
                    this.uniforms[this.textureID] && (this.uniforms[this.textureID].value = n.texture),
                        (this.fsQuad.material = this.material),
                        this.renderToScreen ? (t.setRenderTarget(null), this.fsQuad.render(t)) : (t.setRenderTarget(e), this.clear && t.clear(t.autoClearColor, t.autoClearDepth, t.autoClearStencil), this.fsQuad.render(t));
                },
            });
        },
        function (t, e, n) {
            "use strict";
            Object.defineProperty(e, "__esModule", { value: !0 }), (e.default = void 0);
            var i = s(n(95)),
                r = s(n(4)),
                o = s(n(37)),
                a = s(n(16));
            function s(t) {
                return t && t.__esModule ? t : { default: t };
            }
            function c(t) {
                return (c =
                    "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                        ? function (t) {
                              return typeof t;
                          }
                        : function (t) {
                              return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                          })(t);
            }
            function l(t, e) {
                for (var n = 0; n < e.length; n++) {
                    var i = e[n];
                    (i.enumerable = i.enumerable || !1), (i.configurable = !0), "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);
                }
            }
            function u(t, e) {
                return !e || ("object" !== c(e) && "function" != typeof e)
                    ? (function (t) {
                          if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                          return t;
                      })(t)
                    : e;
            }
            function h(t, e, n) {
                return (h =
                    "undefined" != typeof Reflect && Reflect.get
                        ? Reflect.get
                        : function (t, e, n) {
                              var i = (function (t, e) {
                                  for (; !Object.prototype.hasOwnProperty.call(t, e) && null !== (t = p(t)); );
                                  return t;
                              })(t, e);
                              if (i) {
                                  var r = Object.getOwnPropertyDescriptor(i, e);
                                  return r.get ? r.get.call(n) : r.value;
                              }
                          })(t, e, n || t);
            }
            function p(t) {
                return (p = Object.setPrototypeOf
                    ? Object.getPrototypeOf
                    : function (t) {
                          return t.__proto__ || Object.getPrototypeOf(t);
                      })(t);
            }
            function d(t, e) {
                return (d =
                    Object.setPrototypeOf ||
                    function (t, e) {
                        return (t.__proto__ = e), t;
                    })(t, e);
            }
            var f = (function () {
                function t(e) {
                    return (
                        (function (t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        })(this, t),
                        u(this, p(t).call(this, e))
                    );
                }
                var e, n, s;
                return (
                    (function (t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        (t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } })), e && d(t, e);
                    })(t, i.default),
                    (e = t),
                    (n = [
                        {
                            key: "_extra",
                            value: function () {
                                h(p(t.prototype), "_extra", this).call(this);
                                var e = this._prop.timeline,
                                    n = e.easing;
                                this._timeline = new a.default();
                                var i = this._timeline;
                                i.on("progress", this._timelineAnimation.bind(this)),
                                    i.on("end", this._timelineAnimationEnd.bind(this)),
                                    (this._timelineOuter = new o.default({ line: e.outerScope, easing: n })),
                                    this._timelineOuter.on("progress", this._timelineOuterAnimation.bind(this)),
                                    i.addTimeline(this._timelineOuter),
                                    (this._timelineInner = new o.default({ line: e.innerScope, easing: n })),
                                    this._timelineInner.on("progress", this._timelineInnerAnimation.bind(this)),
                                    i.addTimeline(this._timelineInner);
                            },
                        },
                        {
                            key: "_timelineAnimation",
                            value: function (t) {
                                this.lbt("progress", t);
                            },
                        },
                        {
                            key: "_timelineAnimationEnd",
                            value: function () {
                                this._timeline.reversed ? this.lbt("hidden") : this.lbt("shown");
                                var t = this._outer,
                                    e = this._prefix;
                                this._timeline.reversed && (t.classList.remove("".concat(e, "_show")), t.classList.remove("".concat(e, "_hide")));
                            },
                        },
                        {
                            key: "_timelineOuterAnimation",
                            value: function (t) {
                                this.lbt("progressOuter", t);
                                var e = this._outer,
                                    n = this._button,
                                    i = this._prefix;
                                this._timeline.reversed
                                    ? t.p < 1 && (e.classList.add("".concat(i, "_hide")), n && n.classList.remove("".concat(i, "-button_close")))
                                    : t.p > 0 && (e.classList.add("".concat(i, "_show")), e.classList.remove("".concat(i, "_hide")), n && n.classList.add("".concat(i, "-button_close")));
                            },
                        },
                        {
                            key: "_timelineInnerAnimation",
                            value: function (t) {
                                this.lbt("progressInner", t);
                            },
                        },
                        {
                            key: "_show",
                            value: function () {
                                h(p(t.prototype), "_show", this).call(this);
                                var e = this._timeline;
                                e.playing ? e.reverse() : (e.reversed && e.reverse(), e.play({ duration: this._prop.timeline.duration, easing: this._prop.timeline.easing }));
                            },
                        },
                        {
                            key: "_hide",
                            value: function () {
                                h(p(t.prototype), "_hide", this).call(this);
                                var e = this._timeline;
                                e.playing ? e.reverse() : (e.reverse(), e.play());
                            },
                        },
                        {
                            key: "defaultProp",
                            get: function () {
                                return (0, r.default)(h(p(t.prototype), "defaultProp", this), { timeline: { duration: 1500, outerScope: [0, 0.25], innerScope: [0, 1], easing: this._vp.easing } });
                            },
                        },
                    ]) && l(e.prototype, n),
                    s && l(e, s),
                    t
                );
            })();
            e.default = f;
        },
        function (t, e, n) {
            "use strict";
            Object.defineProperty(e, "__esModule", { value: !0 }), (e.default = void 0);
            var i = a(n(14)),
                r = a(n(4)),
                o = a(n(101));
            function a(t) {
                return t && t.__esModule ? t : { default: t };
            }
            function s(t) {
                return (s =
                    "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                        ? function (t) {
                              return typeof t;
                          }
                        : function (t) {
                              return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                          })(t);
            }
            function c(t, e) {
                for (var n = 0; n < e.length; n++) {
                    var i = e[n];
                    (i.enumerable = i.enumerable || !1), (i.configurable = !0), "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);
                }
            }
            function l(t, e) {
                return !e || ("object" !== s(e) && "function" != typeof e)
                    ? (function (t) {
                          if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                          return t;
                      })(t)
                    : e;
            }
            function u(t, e, n) {
                return (u =
                    "undefined" != typeof Reflect && Reflect.get
                        ? Reflect.get
                        : function (t, e, n) {
                              var i = (function (t, e) {
                                  for (; !Object.prototype.hasOwnProperty.call(t, e) && null !== (t = h(t)); );
                                  return t;
                              })(t, e);
                              if (i) {
                                  var r = Object.getOwnPropertyDescriptor(i, e);
                                  return r.get ? r.get.call(n) : r.value;
                              }
                          })(t, e, n || t);
            }
            function h(t) {
                return (h = Object.setPrototypeOf
                    ? Object.getPrototypeOf
                    : function (t) {
                          return t.__proto__ || Object.getPrototypeOf(t);
                      })(t);
            }
            function p(t, e) {
                return (p =
                    Object.setPrototypeOf ||
                    function (t, e) {
                        return (t.__proto__ = e), t;
                    })(t, e);
            }
            var d = n(1),
                f = n(63),
                m = (function () {
                    function t(e) {
                        return (
                            (function (t, e) {
                                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                            })(this, t),
                            l(this, h(t).call(this, e))
                        );
                    }
                    var e, n, a;
                    return (
                        (function (t, e) {
                            if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                            (t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } })), e && p(t, e);
                        })(t, i.default),
                        (e = t),
                        (n = [
                            {
                                key: "_extra",
                                value: function () {
                                    u(h(t.prototype), "_extra", this).call(this), (this._outer = d.one(this._prop.selector));
                                    var e = this._outer;
                                    e.classList.add("".concat(this._prefix)),
                                        (this._text = e.innerText),
                                        0 == this._text.length && (this._text = e.textContent),
                                        (this._html = e.innerHTML),
                                        (this._splitBool = !1),
                                        (this._el = { letters: [], words: [], lines: [] }),
                                        this.split();
                                },
                            },
                            {
                                key: "_setEvents",
                                value: function () {
                                    var e = this;
                                    u(h(t.prototype), "_setEvents", this).call(this),
                                        this.addEvent("viewport", {
                                            target: "w_",
                                            name: this.name,
                                            do: function () {
                                                e._resize();
                                            },
                                        });
                                },
                            },
                            {
                                key: "_resize",
                                value: function () {
                                    var t = this;
                                    setTimeout(function () {
                                        t._resizeFunc();
                                    }, this._prop.resizeTimeout);
                                },
                            },
                            {
                                key: "_resizeFunc",
                                value: function () {
                                    this.split(), this.lbt("resize");
                                },
                            },
                            {
                                key: "split",
                                value: function () {
                                    var t = this._prop;
                                    this._outer.classList.add("".concat(this._prefix, "_splitting")),
                                        this._splitBool || (this._wordsSplit(), this._lettersSplit(), (this._outer.innerHTML = ""), this._lettersAppend(), this._wordsAppend()),
                                        this._splitBool && this._linesRemove(),
                                        t.appendLines || this._splitBool || this._appendSpaces(),
                                        t.appendLines ? (this._appendSpaces(), this._linesSplit(), this._removeBr(), this._linesAppend(), this._appendSpaces()) : this._linesSplit(),
                                        (this._splitBool = !0),
                                        this._outer.classList.remove("".concat(this._prefix, "_splitting")),
                                        this.lbt("split", this._el);
                                },
                            },
                            {
                                key: "_wordsSplit",
                                value: function () {
                                    var t = this,
                                        e = this._text.split(""),
                                        n = [],
                                        i = [],
                                        r = 0;
                                    e.forEach(function (t) {
                                        var o = !1,
                                            a = !1,
                                            s = t.charCodeAt(0),
                                            c = !1,
                                            l = r == e.length - 1;
                                        32 === s || 160 === s ? (o = !0) : 10 === s && (a = !0),
                                            (a || o || l) && ((c = !0), l && i.push(t)),
                                            c ? (i.length > 0 && n.push({ el: !1, children: i, newline: a, content: i.join(""), type: "word" }), (i = [])) : i.push(t),
                                            r++;
                                    }),
                                        this._prop.appendWords &&
                                            n.forEach(function (e) {
                                                (e.el = f({ selector: "span", styles: "".concat(t._prefix, "__word") })), e.el.classList.add(), t._prop.appendLetters || (e.el.innerHTML = e.content);
                                            }),
                                        (this._el.words = n);
                                },
                            },
                            {
                                key: "_wordsAppend",
                                value: function () {
                                    var t = this;
                                    this._prop.appendWords &&
                                        this._el.words.forEach(function (e) {
                                            t._outer.appendChild(e.el);
                                        });
                                },
                            },
                            {
                                key: "_lettersSplit",
                                value: function () {
                                    var t = this;
                                    this._el.words.forEach(function (e) {
                                        var n = e.children,
                                            i = [],
                                            r = 0;
                                        n.forEach(function (o) {
                                            var a = r == n.length - 1,
                                                s = { el: !1, content: o, whitespace: a, newline: !(!a || !e.newline), type: "letter" };
                                            t._prop.appendLetters && ((s.el = f({ selector: "span", styles: "".concat(t._prefix, "__letter") })), (s.el.innerHTML = o)), i.push(s), t._el.letters.push(s), r++;
                                        }),
                                            (e.children = i);
                                    });
                                },
                            },
                            {
                                key: "_lettersAppend",
                                value: function () {
                                    var t = this;
                                    this._prop.appendLetters &&
                                        (this._prop.appendWords
                                            ? this._el.words.forEach(function (t) {
                                                  t.children.forEach(function (e) {
                                                      t.el.appendChild(e.el);
                                                  });
                                              })
                                            : this._prop.appendWords ||
                                              this._el.letters.forEach(function (e) {
                                                  t._outer.appendChild(e.el);
                                              }));
                                },
                            },
                            {
                                key: "_appendSpaces",
                                value: function () {
                                    var t = this._prop,
                                        e = this._el;
                                    t.appendWords ? this._appendSpacesType(e.words) : t.appendLetters && this._appendSpacesType(e.letters);
                                },
                            },
                            {
                                key: "_appendSpacesType",
                                value: function (t) {
                                    t.forEach(function (t) {
                                        var e = !1;
                                        if (("word" == t.type ? (e = !0) : t.whitespace && (e = !0), e && ((e = document.createTextNode(" ")), (0, o.default)(e, t.el)), t.newline)) {
                                            var n = f({ selector: "br" });
                                            (0, o.default)(n, t.el);
                                        }
                                    });
                                },
                            },
                            {
                                key: "_removeBr",
                                value: function () {
                                    this._outer.querySelectorAll("br").forEach(function (t) {
                                        t.remove();
                                    });
                                },
                            },
                            {
                                key: "_linesSplit",
                                value: function () {
                                    var t = this,
                                        e = this._prop,
                                        n = [];
                                    e.appendWords ? (n = this._el.words) : e.appendLetters && (n = this._el.letters);
                                    for (var i = [], r = [], o = 0, a = !1, s = 0; s < n.length; s++) {
                                        var c = n[s],
                                            l = c.el.offsetTop;
                                        (a = l !== o), (o = l), a & (r.length > 0) && (i.push(r), (r = [])), r.push(c);
                                    }
                                    i.push(r);
                                    var u = this._el.lines;
                                    i.forEach(function (n) {
                                        var i = { el: !1, children: n, content: "", type: "line" };
                                        n.forEach(function (t) {
                                            (i.content += t.content), ("word" == t.type || t.whitespace) && (i.content += " ");
                                        }),
                                            e.appendLines && (i.el = f({ selector: "span", styles: "".concat(t._prefix, "__line") })),
                                            u.push(i);
                                    });
                                },
                            },
                            {
                                key: "_linesAppend",
                                value: function () {
                                    var t = this;
                                    this._prop.appendLines &&
                                        this._el.lines.forEach(function (e) {
                                            t._outer.appendChild(e.el),
                                                e.children.forEach(function (t) {
                                                    e.el.appendChild(t.el);
                                                });
                                        });
                                },
                            },
                            {
                                key: "_linesRemove",
                                value: function () {
                                    var t = this._prop,
                                        e = this._el,
                                        n = this._outer;
                                    t.appendLines &&
                                        (t.appendWords
                                            ? e.words.forEach(function (t) {
                                                  n.appendChild(t.el);
                                              })
                                            : t.appendLetters &&
                                              e.letters.forEach(function (t) {
                                                  n.appendChild(t.el);
                                              })),
                                        e.lines.forEach(function (t) {
                                            t.el && t.el.remove();
                                        }),
                                        (e.lines = []);
                                },
                            },
                            {
                                key: "destroy",
                                value: function () {
                                    u(h(t.prototype), "destroy", this).call(this), (this._outer.innerHTML = this._html);
                                },
                            },
                            {
                                key: "prefix",
                                get: function () {
                                    return "".concat(this._v.prefix, "text-split");
                                },
                            },
                            {
                                key: "defaultProp",
                                get: function () {
                                    return (0, r.default)(u(h(t.prototype), "defaultProp", this), { selector: ".".concat(this._prefix), resizeTimeout: 0, appendLetters: !0, appendWords: !0, appendLines: !1 });
                                },
                            },
                            {
                                key: "letters",
                                get: function () {
                                    return this._el.letters;
                                },
                            },
                            {
                                key: "words",
                                get: function () {
                                    return this._el.words;
                                },
                            },
                            {
                                key: "lines",
                                get: function () {
                                    return this._el.lines;
                                },
                            },
                            {
                                key: "elements",
                                get: function () {
                                    return this._el;
                                },
                            },
                            {
                                key: "outer",
                                get: function () {
                                    return this._outer;
                                },
                            },
                        ]) && c(e.prototype, n),
                        a && c(e, a),
                        t
                    );
                })();
            e.default = m;
        },
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        function (t, e, n) {
            "use strict";
            (function (e) {
                var i = n(81);
                function r(t, e) {
                    if (t === e) return 0;
                    for (var n = t.length, i = e.length, r = 0, o = Math.min(n, i); r < o; ++r)
                        if (t[r] !== e[r]) {
                            (n = t[r]), (i = e[r]);
                            break;
                        }
                    return n < i ? -1 : i < n ? 1 : 0;
                }
                function o(t) {
                    return e.Buffer && "function" == typeof e.Buffer.isBuffer ? e.Buffer.isBuffer(t) : !(null == t || !t._isBuffer);
                }
                var a = n(82),
                    s = Object.prototype.hasOwnProperty,
                    c = Array.prototype.slice,
                    l = "foo" === function () {}.name;
                function u(t) {
                    return Object.prototype.toString.call(t);
                }
                function h(t) {
                    return !o(t) && "function" == typeof e.ArrayBuffer && ("function" == typeof ArrayBuffer.isView ? ArrayBuffer.isView(t) : !!t && (t instanceof DataView || !!(t.buffer && t.buffer instanceof ArrayBuffer)));
                }
                var p = (t.exports = y),
                    d = /\s*function\s+([^\(\s]*)\s*/;
                function f(t) {
                    if (a.isFunction(t)) {
                        if (l) return t.name;
                        var e = t.toString().match(d);
                        return e && e[1];
                    }
                }
                function m(t, e) {
                    return "string" == typeof t ? (t.length < e ? t : t.slice(0, e)) : t;
                }
                function v(t) {
                    if (l || !a.isFunction(t)) return a.inspect(t);
                    var e = f(t);
                    return "[Function" + (e ? ": " + e : "") + "]";
                }
                function g(t, e, n, i, r) {
                    throw new p.AssertionError({ message: n, actual: t, expected: e, operator: i, stackStartFunction: r });
                }
                function y(t, e) {
                    t || g(t, !0, e, "==", p.ok);
                }
                function x(t, e, n, i) {
                    if (t === e) return !0;
                    if (o(t) && o(e)) return 0 === r(t, e);
                    if (a.isDate(t) && a.isDate(e)) return t.getTime() === e.getTime();
                    if (a.isRegExp(t) && a.isRegExp(e)) return t.source === e.source && t.global === e.global && t.multiline === e.multiline && t.lastIndex === e.lastIndex && t.ignoreCase === e.ignoreCase;
                    if ((null !== t && "object" == typeof t) || (null !== e && "object" == typeof e)) {
                        if (h(t) && h(e) && u(t) === u(e) && !(t instanceof Float32Array || t instanceof Float64Array)) return 0 === r(new Uint8Array(t.buffer), new Uint8Array(e.buffer));
                        if (o(t) !== o(e)) return !1;
                        var s = (i = i || { actual: [], expected: [] }).actual.indexOf(t);
                        return (
                            (-1 !== s && s === i.expected.indexOf(e)) ||
                            (i.actual.push(t),
                            i.expected.push(e),
                            (function (t, e, n, i) {
                                if (null === t || void 0 === t || null === e || void 0 === e) return !1;
                                if (a.isPrimitive(t) || a.isPrimitive(e)) return t === e;
                                if (n && Object.getPrototypeOf(t) !== Object.getPrototypeOf(e)) return !1;
                                var r = _(t),
                                    o = _(e);
                                if ((r && !o) || (!r && o)) return !1;
                                if (r) return (t = c.call(t)), (e = c.call(e)), x(t, e, n);
                                var s,
                                    l,
                                    u = M(t),
                                    h = M(e);
                                if (u.length !== h.length) return !1;
                                for (u.sort(), h.sort(), l = u.length - 1; l >= 0; l--) if (u[l] !== h[l]) return !1;
                                for (l = u.length - 1; l >= 0; l--) if (((s = u[l]), !x(t[s], e[s], n, i))) return !1;
                                return !0;
                            })(t, e, n, i))
                        );
                    }
                    return n ? t === e : t == e;
                }
                function _(t) {
                    return "[object Arguments]" == Object.prototype.toString.call(t);
                }
                function b(t, e) {
                    if (!t || !e) return !1;
                    if ("[object RegExp]" == Object.prototype.toString.call(e)) return e.test(t);
                    try {
                        if (t instanceof e) return !0;
                    } catch (t) {}
                    return !Error.isPrototypeOf(e) && !0 === e.call({}, t);
                }
                function w(t, e, n, i) {
                    var r;
                    if ("function" != typeof e) throw new TypeError('"block" argument must be a function');
                    "string" == typeof n && ((i = n), (n = null)),
                        (r = (function (t) {
                            var e;
                            try {
                                t();
                            } catch (t) {
                                e = t;
                            }
                            return e;
                        })(e)),
                        (i = (n && n.name ? " (" + n.name + ")." : ".") + (i ? " " + i : ".")),
                        t && !r && g(r, n, "Missing expected exception" + i);
                    var o = "string" == typeof i,
                        s = !t && a.isError(r),
                        c = !t && r && !n;
                    if ((((s && o && b(r, n)) || c) && g(r, n, "Got unwanted exception" + i), (t && r && n && !b(r, n)) || (!t && r))) throw r;
                }
                (p.AssertionError = function (t) {
                    var e;
                    (this.name = "AssertionError"),
                        (this.actual = t.actual),
                        (this.expected = t.expected),
                        (this.operator = t.operator),
                        t.message ? ((this.message = t.message), (this.generatedMessage = !1)) : ((this.message = m(v((e = this).actual), 128) + " " + e.operator + " " + m(v(e.expected), 128)), (this.generatedMessage = !0));
                    var n = t.stackStartFunction || g;
                    if (Error.captureStackTrace) Error.captureStackTrace(this, n);
                    else {
                        var i = new Error();
                        if (i.stack) {
                            var r = i.stack,
                                o = f(n),
                                a = r.indexOf("\n" + o);
                            if (a >= 0) {
                                var s = r.indexOf("\n", a + 1);
                                r = r.substring(s + 1);
                            }
                            this.stack = r;
                        }
                    }
                }),
                    a.inherits(p.AssertionError, Error),
                    (p.fail = g),
                    (p.ok = y),
                    (p.equal = function (t, e, n) {
                        t != e && g(t, e, n, "==", p.equal);
                    }),
                    (p.notEqual = function (t, e, n) {
                        t == e && g(t, e, n, "!=", p.notEqual);
                    }),
                    (p.deepEqual = function (t, e, n) {
                        x(t, e, !1) || g(t, e, n, "deepEqual", p.deepEqual);
                    }),
                    (p.deepStrictEqual = function (t, e, n) {
                        x(t, e, !0) || g(t, e, n, "deepStrictEqual", p.deepStrictEqual);
                    }),
                    (p.notDeepEqual = function (t, e, n) {
                        x(t, e, !1) && g(t, e, n, "notDeepEqual", p.notDeepEqual);
                    }),
                    (p.notDeepStrictEqual = function t(e, n, i) {
                        x(e, n, !0) && g(e, n, i, "notDeepStrictEqual", t);
                    }),
                    (p.strictEqual = function (t, e, n) {
                        t !== e && g(t, e, n, "===", p.strictEqual);
                    }),
                    (p.notStrictEqual = function (t, e, n) {
                        t === e && g(t, e, n, "!==", p.notStrictEqual);
                    }),
                    (p.throws = function (t, e, n) {
                        w(!0, t, e, n);
                    }),
                    (p.doesNotThrow = function (t, e, n) {
                        w(!1, t, e, n);
                    }),
                    (p.ifError = function (t) {
                        if (t) throw t;
                    }),
                    (p.strict = i(
                        function t(e, n) {
                            e || g(e, !0, n, "==", t);
                        },
                        p,
                        { equal: p.strictEqual, deepEqual: p.deepStrictEqual, notEqual: p.notStrictEqual, notDeepEqual: p.notDeepStrictEqual }
                    )),
                    (p.strict.strict = p.strict);
                var M =
                    Object.keys ||
                    function (t) {
                        var e = [];
                        for (var n in t) s.call(t, n) && e.push(n);
                        return e;
                    };
            }.call(this, n(36)));
        },
        function (t) {
            "use strict";
            var e = Object.getOwnPropertySymbols,
                n = Object.prototype.hasOwnProperty,
                i = Object.prototype.propertyIsEnumerable;
            t.exports = (function () {
                try {
                    if (!Object.assign) return !1;
                    var t = new String("abc");
                    if (((t[5] = "de"), "5" === Object.getOwnPropertyNames(t)[0])) return !1;
                    for (var e = {}, n = 0; n < 10; n++) e["_" + String.fromCharCode(n)] = n;
                    if (
                        "0123456789" !==
                        Object.getOwnPropertyNames(e)
                            .map(function (t) {
                                return e[t];
                            })
                            .join("")
                    )
                        return !1;
                    var i = {};
                    return (
                        "abcdefghijklmnopqrst".split("").forEach(function (t) {
                            i[t] = t;
                        }),
                        "abcdefghijklmnopqrst" === Object.keys(Object.assign({}, i)).join("")
                    );
                } catch (t) {
                    return !1;
                }
            })()
                ? Object.assign
                : function (t) {
                      for (
                          var r,
                              o,
                              a = (function (t) {
                                  if (null === t || void 0 === t) throw new TypeError("Object.assign cannot be called with null or undefined");
                                  return Object(t);
                              })(t),
                              s = 1;
                          s < arguments.length;
                          s++
                      ) {
                          for (var c in (r = Object(arguments[s]))) n.call(r, c) && (a[c] = r[c]);
                          if (e) {
                              o = e(r);
                              for (var l = 0; l < o.length; l++) i.call(r, o[l]) && (a[o[l]] = r[o[l]]);
                          }
                      }
                      return a;
                  };
        },
        function (t, e, n) {
            (function (t) {
                var i =
                        Object.getOwnPropertyDescriptors ||
                        function (t) {
                            for (var e = Object.keys(t), n = {}, i = 0; i < e.length; i++) n[e[i]] = Object.getOwnPropertyDescriptor(t, e[i]);
                            return n;
                        },
                    r = /%[sdj%]/g;
                (e.format = function (t) {
                    if (!g(t)) {
                        for (var e = [], n = 0; n < arguments.length; n++) e.push(s(arguments[n]));
                        return e.join(" ");
                    }
                    n = 1;
                    for (
                        var i = arguments,
                            o = i.length,
                            a = String(t).replace(r, function (t) {
                                if ("%%" === t) return "%";
                                if (n >= o) return t;
                                switch (t) {
                                    case "%s":
                                        return String(i[n++]);
                                    case "%d":
                                        return Number(i[n++]);
                                    case "%j":
                                        try {
                                            return JSON.stringify(i[n++]);
                                        } catch (t) {
                                            return "[Circular]";
                                        }
                                    default:
                                        return t;
                                }
                            }),
                            c = i[n];
                        n < o;
                        c = i[++n]
                    )
                        m(c) || !_(c) ? (a += " " + c) : (a += " " + s(c));
                    return a;
                }),
                    (e.deprecate = function (n, i) {
                        if (void 0 !== t && !0 === t.noDeprecation) return n;
                        if (void 0 === t)
                            return function () {
                                return e.deprecate(n, i).apply(this, arguments);
                            };
                        var r = !1;
                        return function () {
                            if (!r) {
                                if (t.throwDeprecation) throw new Error(i);
                                t.traceDeprecation ? console.trace(i) : console.error(i), (r = !0);
                            }
                            return n.apply(this, arguments);
                        };
                    });
                var o,
                    a = {};
                function s(t, n) {
                    var i = { seen: [], stylize: l };
                    return (
                        arguments.length >= 3 && (i.depth = arguments[2]),
                        arguments.length >= 4 && (i.colors = arguments[3]),
                        f(n) ? (i.showHidden = n) : n && e._extend(i, n),
                        y(i.showHidden) && (i.showHidden = !1),
                        y(i.depth) && (i.depth = 2),
                        y(i.colors) && (i.colors = !1),
                        y(i.customInspect) && (i.customInspect = !0),
                        i.colors && (i.stylize = c),
                        u(i, t, i.depth)
                    );
                }
                function c(t, e) {
                    var n = s.styles[e];
                    return n ? "[" + s.colors[n][0] + "m" + t + "[" + s.colors[n][1] + "m" : t;
                }
                function l(t) {
                    return t;
                }
                function u(t, n, i) {
                    if (t.customInspect && n && M(n.inspect) && n.inspect !== e.inspect && (!n.constructor || n.constructor.prototype !== n)) {
                        var r = n.inspect(i, t);
                        return g(r) || (r = u(t, r, i)), r;
                    }
                    var o = (function (t, e) {
                        if (y(e)) return t.stylize("undefined", "undefined");
                        if (g(e)) {
                            var n = "'" + JSON.stringify(e).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
                            return t.stylize(n, "string");
                        }
                        if (v(e)) return t.stylize("" + e, "number");
                        if (f(e)) return t.stylize("" + e, "boolean");
                        if (m(e)) return t.stylize("null", "null");
                    })(t, n);
                    if (o) return o;
                    var a = Object.keys(n),
                        s = (function (t) {
                            var e = {};
                            return (
                                t.forEach(function (t) {
                                    e[t] = !0;
                                }),
                                e
                            );
                        })(a);
                    if ((t.showHidden && (a = Object.getOwnPropertyNames(n)), w(n) && (a.indexOf("message") >= 0 || a.indexOf("description") >= 0))) return h(n);
                    if (0 === a.length) {
                        if (M(n)) {
                            var c = n.name ? ": " + n.name : "";
                            return t.stylize("[Function" + c + "]", "special");
                        }
                        if (x(n)) return t.stylize(RegExp.prototype.toString.call(n), "regexp");
                        if (b(n)) return t.stylize(Date.prototype.toString.call(n), "date");
                        if (w(n)) return h(n);
                    }
                    var l,
                        _ = "",
                        S = !1,
                        T = ["{", "}"];
                    (d(n) && ((S = !0), (T = ["[", "]"])), M(n)) && (_ = " [Function" + (n.name ? ": " + n.name : "") + "]");
                    return (
                        x(n) && (_ = " " + RegExp.prototype.toString.call(n)),
                        b(n) && (_ = " " + Date.prototype.toUTCString.call(n)),
                        w(n) && (_ = " " + h(n)),
                        0 !== a.length || (S && 0 != n.length)
                            ? i < 0
                                ? x(n)
                                    ? t.stylize(RegExp.prototype.toString.call(n), "regexp")
                                    : t.stylize("[Object]", "special")
                                : (t.seen.push(n),
                                  (l = S
                                      ? (function (t, e, n, i, r) {
                                            for (var o = [], a = 0, s = e.length; a < s; ++a) A(e, String(a)) ? o.push(p(t, e, n, i, String(a), !0)) : o.push("");
                                            return (
                                                r.forEach(function (r) {
                                                    r.match(/^\d+$/) || o.push(p(t, e, n, i, r, !0));
                                                }),
                                                o
                                            );
                                        })(t, n, i, s, a)
                                      : a.map(function (e) {
                                            return p(t, n, i, s, e, S);
                                        })),
                                  t.seen.pop(),
                                  (function (t, e, n) {
                                      if (
                                          t.reduce(function (t, e) {
                                              return 0, e.indexOf("\n") >= 0 && 0, t + e.replace(/\u001b\[\d\d?m/g, "").length + 1;
                                          }, 0) > 60
                                      )
                                          return n[0] + ("" === e ? "" : e + "\n ") + " " + t.join(",\n  ") + " " + n[1];
                                      return n[0] + e + " " + t.join(", ") + " " + n[1];
                                  })(l, _, T))
                            : T[0] + _ + T[1]
                    );
                }
                function h(t) {
                    return "[" + Error.prototype.toString.call(t) + "]";
                }
                function p(t, e, n, i, r, o) {
                    var a, s, c;
                    if (
                        ((c = Object.getOwnPropertyDescriptor(e, r) || { value: e[r] }).get ? (s = c.set ? t.stylize("[Getter/Setter]", "special") : t.stylize("[Getter]", "special")) : c.set && (s = t.stylize("[Setter]", "special")),
                        A(i, r) || (a = "[" + r + "]"),
                        s ||
                            (t.seen.indexOf(c.value) < 0
                                ? (s = m(n) ? u(t, c.value, null) : u(t, c.value, n - 1)).indexOf("\n") > -1 &&
                                  (s = o
                                      ? s
                                            .split("\n")
                                            .map(function (t) {
                                                return "  " + t;
                                            })
                                            .join("\n")
                                            .substr(2)
                                      : "\n" +
                                        s
                                            .split("\n")
                                            .map(function (t) {
                                                return "   " + t;
                                            })
                                            .join("\n"))
                                : (s = t.stylize("[Circular]", "special"))),
                        y(a))
                    ) {
                        if (o && r.match(/^\d+$/)) return s;
                        (a = JSON.stringify("" + r)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)
                            ? ((a = a.substr(1, a.length - 2)), (a = t.stylize(a, "name")))
                            : ((a = a
                                  .replace(/'/g, "\\'")
                                  .replace(/\\"/g, '"')
                                  .replace(/(^"|"$)/g, "'")),
                              (a = t.stylize(a, "string")));
                    }
                    return a + ": " + s;
                }
                function d(t) {
                    return Array.isArray(t);
                }
                function f(t) {
                    return "boolean" == typeof t;
                }
                function m(t) {
                    return null === t;
                }
                function v(t) {
                    return "number" == typeof t;
                }
                function g(t) {
                    return "string" == typeof t;
                }
                function y(t) {
                    return void 0 === t;
                }
                function x(t) {
                    return _(t) && "[object RegExp]" === S(t);
                }
                function _(t) {
                    return "object" == typeof t && null !== t;
                }
                function b(t) {
                    return _(t) && "[object Date]" === S(t);
                }
                function w(t) {
                    return _(t) && ("[object Error]" === S(t) || t instanceof Error);
                }
                function M(t) {
                    return "function" == typeof t;
                }
                function S(t) {
                    return Object.prototype.toString.call(t);
                }
                function T(t) {
                    return t < 10 ? "0" + t.toString(10) : t.toString(10);
                }
                (e.debuglog = function (n) {
                    if ((y(o) && (o = t.env.NODE_DEBUG || ""), (n = n.toUpperCase()), !a[n]))
                        if (new RegExp("\\b" + n + "\\b", "i").test(o)) {
                            var i = t.pid;
                            a[n] = function () {
                                var t = e.format.apply(e, arguments);
                                console.error("%s %d: %s", n, i, t);
                            };
                        } else a[n] = function () {};
                    return a[n];
                }),
                    (e.inspect = s),
                    (s.colors = {
                        bold: [1, 22],
                        italic: [3, 23],
                        underline: [4, 24],
                        inverse: [7, 27],
                        white: [37, 39],
                        grey: [90, 39],
                        black: [30, 39],
                        blue: [34, 39],
                        cyan: [36, 39],
                        green: [32, 39],
                        magenta: [35, 39],
                        red: [31, 39],
                        yellow: [33, 39],
                    }),
                    (s.styles = { special: "cyan", number: "yellow", boolean: "yellow", undefined: "grey", null: "bold", string: "green", date: "magenta", regexp: "red" }),
                    (e.isArray = d),
                    (e.isBoolean = f),
                    (e.isNull = m),
                    (e.isNullOrUndefined = function (t) {
                        return null == t;
                    }),
                    (e.isNumber = v),
                    (e.isString = g),
                    (e.isSymbol = function (t) {
                        return "symbol" == typeof t;
                    }),
                    (e.isUndefined = y),
                    (e.isRegExp = x),
                    (e.isObject = _),
                    (e.isDate = b),
                    (e.isError = w),
                    (e.isFunction = M),
                    (e.isPrimitive = function (t) {
                        return null === t || "boolean" == typeof t || "number" == typeof t || "string" == typeof t || "symbol" == typeof t || void 0 === t;
                    }),
                    (e.isBuffer = n(84));
                var E = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
                function A(t, e) {
                    return Object.prototype.hasOwnProperty.call(t, e);
                }
                (e.log = function () {
                    var t, n;
                    console.log("%s - %s", ((t = new Date()), (n = [T(t.getHours()), T(t.getMinutes()), T(t.getSeconds())].join(":")), [t.getDate(), E[t.getMonth()], n].join(" ")), e.format.apply(e, arguments));
                }),
                    (e.inherits = n(85)),
                    (e._extend = function (t, e) {
                        if (!e || !_(e)) return t;
                        for (var n = Object.keys(e), i = n.length; i--; ) t[n[i]] = e[n[i]];
                        return t;
                    });
                var P = "undefined" != typeof Symbol ? Symbol("util.promisify.custom") : void 0;
                function L(t, e) {
                    if (!t) {
                        var n = new Error("Promise was rejected with a falsy value");
                        (n.reason = t), (t = n);
                    }
                    return e(t);
                }
                (e.promisify = function (t) {
                    if ("function" != typeof t) throw new TypeError('The "original" argument must be of type Function');
                    if (P && t[P]) {
                        var e;
                        if ("function" != typeof (e = t[P])) throw new TypeError('The "util.promisify.custom" argument must be of type Function');
                        return Object.defineProperty(e, P, { value: e, enumerable: !1, writable: !1, configurable: !0 }), e;
                    }
                    function e() {
                        for (
                            var e,
                                n,
                                i = new Promise(function (t, i) {
                                    (e = t), (n = i);
                                }),
                                r = [],
                                o = 0;
                            o < arguments.length;
                            o++
                        )
                            r.push(arguments[o]);
                        r.push(function (t, i) {
                            t ? n(t) : e(i);
                        });
                        try {
                            t.apply(this, r);
                        } catch (t) {
                            n(t);
                        }
                        return i;
                    }
                    return Object.setPrototypeOf(e, Object.getPrototypeOf(t)), P && Object.defineProperty(e, P, { value: e, enumerable: !1, writable: !1, configurable: !0 }), Object.defineProperties(e, i(t));
                }),
                    (e.promisify.custom = P),
                    (e.callbackify = function (e) {
                        if ("function" != typeof e) throw new TypeError('The "original" argument must be of type Function');
                        function n() {
                            for (var n = [], i = 0; i < arguments.length; i++) n.push(arguments[i]);
                            var r = n.pop();
                            if ("function" != typeof r) throw new TypeError("The last argument must be of type Function");
                            var o = this,
                                a = function () {
                                    return r.apply(o, arguments);
                                };
                            e.apply(this, n).then(
                                function (e) {
                                    t.nextTick(a, null, e);
                                },
                                function (e) {
                                    t.nextTick(L, e, a);
                                }
                            );
                        }
                        return Object.setPrototypeOf(n, Object.getPrototypeOf(e)), Object.defineProperties(n, i(e)), n;
                    });
            }.call(this, n(83)));
        },
        function (t) {
            var e,
                n,
                i = (t.exports = {});
            function r() {
                throw new Error("setTimeout has not been defined");
            }
            function o() {
                throw new Error("clearTimeout has not been defined");
            }
            function a(t) {
                if (e === setTimeout) return setTimeout(t, 0);
                if ((e === r || !e) && setTimeout) return (e = setTimeout), setTimeout(t, 0);
                try {
                    return e(t, 0);
                } catch (n) {
                    try {
                        return e.call(null, t, 0);
                    } catch (n) {
                        return e.call(this, t, 0);
                    }
                }
            }
            !(function () {
                try {
                    e = "function" == typeof setTimeout ? setTimeout : r;
                } catch (t) {
                    e = r;
                }
                try {
                    n = "function" == typeof clearTimeout ? clearTimeout : o;
                } catch (t) {
                    n = o;
                }
            })();
            var s,
                c = [],
                l = !1,
                u = -1;
            function h() {
                l && s && ((l = !1), s.length ? (c = s.concat(c)) : (u = -1), c.length && p());
            }
            function p() {
                if (!l) {
                    var t = a(h);
                    l = !0;
                    for (var e = c.length; e; ) {
                        for (s = c, c = []; ++u < e; ) s && s[u].run();
                        (u = -1), (e = c.length);
                    }
                    (s = null),
                        (l = !1),
                        (function (t) {
                            if (n === clearTimeout) return clearTimeout(t);
                            if ((n === o || !n) && clearTimeout) return (n = clearTimeout), clearTimeout(t);
                            try {
                                n(t);
                            } catch (e) {
                                try {
                                    return n.call(null, t);
                                } catch (e) {
                                    return n.call(this, t);
                                }
                            }
                        })(t);
                }
            }
            function d(t, e) {
                (this.fun = t), (this.array = e);
            }
            function f() {}
            (i.nextTick = function (t) {
                var e = new Array(arguments.length - 1);
                if (arguments.length > 1) for (var n = 1; n < arguments.length; n++) e[n - 1] = arguments[n];
                c.push(new d(t, e)), 1 !== c.length || l || a(p);
            }),
                (d.prototype.run = function () {
                    this.fun.apply(null, this.array);
                }),
                (i.title = "browser"),
                (i.browser = !0),
                (i.env = {}),
                (i.argv = []),
                (i.version = ""),
                (i.versions = {}),
                (i.on = f),
                (i.addListener = f),
                (i.once = f),
                (i.off = f),
                (i.removeListener = f),
                (i.removeAllListeners = f),
                (i.emit = f),
                (i.prependListener = f),
                (i.prependOnceListener = f),
                (i.listeners = function () {
                    return [];
                }),
                (i.binding = function () {
                    throw new Error("process.binding is not supported");
                }),
                (i.cwd = function () {
                    return "/";
                }),
                (i.chdir = function () {
                    throw new Error("process.chdir is not supported");
                }),
                (i.umask = function () {
                    return 0;
                });
        },
        function (t) {
            t.exports = function (t) {
                return t && "object" == typeof t && "function" == typeof t.copy && "function" == typeof t.fill && "function" == typeof t.readUInt8;
            };
        },
        function (t) {
            "function" == typeof Object.create
                ? (t.exports = function (t, e) {
                      (t.super_ = e), (t.prototype = Object.create(e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }));
                  })
                : (t.exports = function (t, e) {
                      t.super_ = e;
                      var n = function () {};
                      (n.prototype = e.prototype), (t.prototype = new n()), (t.prototype.constructor = t);
                  });
        },
        function (t, e, n) {
            "use strict";
            Object.defineProperty(e, "__esModule", { value: !0 }),
                Object.defineProperty(e, "get", {
                    enumerable: !0,
                    get: function () {
                        return i.default;
                    },
                }),
                Object.defineProperty(e, "apply", {
                    enumerable: !0,
                    get: function () {
                        return r.default;
                    },
                });
            var i = o(n(65)),
                r = o(n(87));
            function o(t) {
                return t && t.__esModule ? t : { default: t };
            }
        },
        function (t, e, n) {
            "use strict";
            Object.defineProperty(e, "__esModule", { value: !0 }), (e.default = void 0);
            var i,
                r = (i = n(65)) && i.__esModule ? i : { default: i };
            var o = function (t) {
                var e = { media: !1, rule: "cover", scale: 1 },
                    n = (e = Object.assign(e, t)).media;
                void 0 === e.parent && (e.parent = n.parentElement);
                var i = e.parent.clientWidth,
                    o = e.parent.clientHeight,
                    a = (0, r.default)({ media: n, rule: e.rule, width: i, height: o, scale: e.scale });
                (n.style.position = "absolute"), (n.style.left = a.x + "px"), (n.style.top = a.y + "px"), (n.style.width = a.width + "px"), (n.style.height = a.height + "px");
            };
            e.default = o;
        },
        ,
        function (t, e, n) {
            "use strict";
            Object.defineProperty(e, "__esModule", { value: !0 }), (e.default = void 0);
            var i,
                r = (i = n(14)) && i.__esModule ? i : { default: i };
            function o(t) {
                return (o =
                    "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                        ? function (t) {
                              return typeof t;
                          }
                        : function (t) {
                              return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                          })(t);
            }
            function a(t, e) {
                for (var n = 0; n < e.length; n++) {
                    var i = e[n];
                    (i.enumerable = i.enumerable || !1), (i.configurable = !0), "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);
                }
            }
            function s(t, e) {
                return !e || ("object" !== o(e) && "function" != typeof e)
                    ? (function (t) {
                          if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                          return t;
                      })(t)
                    : e;
            }
            function c(t) {
                return (c = Object.setPrototypeOf
                    ? Object.getPrototypeOf
                    : function (t) {
                          return t.__proto__ || Object.getPrototypeOf(t);
                      })(t);
            }
            function l(t, e) {
                return (l =
                    Object.setPrototypeOf ||
                    function (t, e) {
                        return (t.__proto__ = e), t;
                    })(t, e);
            }
            var u = (function () {
                function t(e) {
                    return (
                        (function (t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        })(this, t),
                        s(this, c(t).call(this, e, !1))
                    );
                }
                var e, n, i;
                return (
                    (function (t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        (t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } })), e && l(t, e);
                    })(t, r.default),
                    (e = t),
                    (n = [
                        {
                            key: "init",
                            value: function (t) {
                                (this._m = t), this._init();
                            },
                        },
                    ]) && a(e.prototype, n),
                    i && a(e, i),
                    t
                );
            })();
            e.default = u;
        },
        function (t, e, n) {
            "use strict";
            Object.defineProperty(e, "__esModule", { value: !0 }), (e.default = void 0);
            var i = o(n(14)),
                r = o(n(4));
            function o(t) {
                return t && t.__esModule ? t : { default: t };
            }
            function a(t) {
                return (a =
                    "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                        ? function (t) {
                              return typeof t;
                          }
                        : function (t) {
                              return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                          })(t);
            }
            function s(t, e) {
                for (var n = 0; n < e.length; n++) {
                    var i = e[n];
                    (i.enumerable = i.enumerable || !1), (i.configurable = !0), "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);
                }
            }
            function c(t, e) {
                return !e || ("object" !== a(e) && "function" != typeof e)
                    ? (function (t) {
                          if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                          return t;
                      })(t)
                    : e;
            }
            function l(t, e, n) {
                return (l =
                    "undefined" != typeof Reflect && Reflect.get
                        ? Reflect.get
                        : function (t, e, n) {
                              var i = (function (t, e) {
                                  for (; !Object.prototype.hasOwnProperty.call(t, e) && null !== (t = u(t)); );
                                  return t;
                              })(t, e);
                              if (i) {
                                  var r = Object.getOwnPropertyDescriptor(i, e);
                                  return r.get ? r.get.call(n) : r.value;
                              }
                          })(t, e, n || t);
            }
            function u(t) {
                return (u = Object.setPrototypeOf
                    ? Object.getPrototypeOf
                    : function (t) {
                          return t.__proto__ || Object.getPrototypeOf(t);
                      })(t);
            }
            function h(t, e) {
                return (h =
                    Object.setPrototypeOf ||
                    function (t, e) {
                        return (t.__proto__ = e), t;
                    })(t, e);
            }
            var p = n(1),
                d = (function () {
                    function t(e) {
                        return (
                            (function (t, e) {
                                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                            })(this, t),
                            c(this, u(t).call(this, e))
                        );
                    }
                    var e, n, o;
                    return (
                        (function (t, e) {
                            if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                            (t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } })), e && h(t, e);
                        })(t, i.default),
                        (e = t),
                        (n = [
                            {
                                key: "_extra",
                                value: function () {
                                    l(u(t.prototype), "_extra", this).call(this), (this._scrollModuleCallback = !1), (this._vevetScroll = !1), (this._size = 0), (this._scrollValue = 0), (this._bounding = !1), this._elGet();
                                },
                            },
                            {
                                key: "_init",
                                value: function () {
                                    l(u(t.prototype), "_init", this).call(this), this._prop.seekInit && this.seek();
                                },
                            },
                            {
                                key: "_changeProp",
                                value: function () {
                                    l(u(t.prototype), "_changeProp", this).call(this), this._removeScrollListeners(), this._elGet(), this.setSize();
                                },
                            },
                            {
                                key: "_removeScrollListeners",
                                value: function () {
                                    this.removeEventListeners(), this._scrollModuleCallback && this._vevetScroll.remove(this._scrollModuleCallback);
                                },
                            },
                            {
                                key: "_elGet",
                                value: function () {
                                    var t = !1,
                                        e = this._prop,
                                        n = e.selectors,
                                        r = n.outer;
                                    if (r instanceof i.default) (this._vevetScroll = r), (this._outer = r.outer), (t = !0);
                                    else {
                                        var o = p.one(r);
                                        (this._vevetScroll = o), (this._outer = o);
                                    }
                                    var a = n.elements;
                                    n.inside ? (this._el = this._outer.querySelectorAll(a)) : (this._el = p.all(a)),
                                        (this._scrollModuleCallback = !1),
                                        e.event && (t ? (this._scrollModuleCallback = this._vevetScroll.add({ target: "update", do: this.seek.bind(this, null) })) : this.listener(this._outer, "scroll", this.seek.bind(this, null)));
                                },
                            },
                            {
                                key: "_setEvents",
                                value: function () {
                                    var e = this;
                                    l(u(t.prototype), "_setEvents", this).call(this);
                                    var n = this._prop;
                                    this.setSize(),
                                        this.addEvent("viewport", {
                                            target: "",
                                            name: this.name,
                                            do: function () {
                                                setTimeout(function () {
                                                    e.setSize(), n.resize & n.on && e.seek();
                                                }, n.resizeTimeout);
                                            },
                                        });
                                },
                            },
                            {
                                key: "setSize",
                                value: function () {
                                    var t = this._prop,
                                        e = this._outer;
                                    if (e instanceof Window) {
                                        var n = this._v.viewport.size;
                                        (this._size = t.horizontal ? n[0] : n[1]), (this._bounding = { top: 0, left: 0, bottom: n[1], right: n[0] });
                                    } else (this._size = t.horizontal ? e.clientWidth : e.clientHeight), (this._bounding = e.getBoundingClientRect());
                                    this._setScrollValue(null);
                                },
                            },
                            {
                                key: "_setScrollValue",
                                value: function () {
                                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
                                        e = this._prop.horizontal;
                                    this._outer instanceof Window ? (this._scrollValue = e ? window.pageXOffset : window.pageYOffset) : (this._scrollValue = null != t ? t : e ? this._vevetScroll.scrollLeft : this._vevetScroll.scrollTop);
                                },
                            },
                            {
                                key: "seek",
                                value: function () {
                                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
                                    return !!this._prop.on && (this._setScrollValue(t), !0);
                                },
                            },
                            {
                                key: "destroy",
                                value: function () {
                                    l(u(t.prototype), "destroy", this).call(this), this._scrollModuleCallback && this._vevetScroll.remove(this._scrollModuleCallback);
                                },
                            },
                            {
                                key: "prefix",
                                get: function () {
                                    return "".concat(this._v.prefix, "scrollAnimate");
                                },
                            },
                            {
                                key: "defaultProp",
                                get: function () {
                                    var e = this._prefix;
                                    return (0, r.default)(l(u(t.prototype), "defaultProp", this), {
                                        selectors: { outer: ".".concat(e), elements: ".".concat(e, "__el"), inside: !0 },
                                        on: !0,
                                        resize: !0,
                                        resizeTimeout: 0,
                                        event: !0,
                                        seekInit: !0,
                                        horizontal: !1,
                                    });
                                },
                            },
                            {
                                key: "outer",
                                get: function () {
                                    return this._outer;
                                },
                            },
                            {
                                key: "elements",
                                get: function () {
                                    return this._el;
                                },
                            },
                        ]) && s(e.prototype, n),
                        o && s(e, o),
                        t
                    );
                })();
            e.default = d;
        },
        function (t, e, n) {
            "use strict";
            Object.defineProperty(e, "__esModule", { value: !0 }), (e.default = void 0);
            var i = o(n(14)),
                r = o(n(4));
            function o(t) {
                return t && t.__esModule ? t : { default: t };
            }
            function a(t) {
                return (a =
                    "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                        ? function (t) {
                              return typeof t;
                          }
                        : function (t) {
                              return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                          })(t);
            }
            function s(t, e) {
                for (var n = 0; n < e.length; n++) {
                    var i = e[n];
                    (i.enumerable = i.enumerable || !1), (i.configurable = !0), "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);
                }
            }
            function c(t, e) {
                return !e || ("object" !== a(e) && "function" != typeof e)
                    ? (function (t) {
                          if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                          return t;
                      })(t)
                    : e;
            }
            function l(t, e, n) {
                return (l =
                    "undefined" != typeof Reflect && Reflect.get
                        ? Reflect.get
                        : function (t, e, n) {
                              var i = (function (t, e) {
                                  for (; !Object.prototype.hasOwnProperty.call(t, e) && null !== (t = u(t)); );
                                  return t;
                              })(t, e);
                              if (i) {
                                  var r = Object.getOwnPropertyDescriptor(i, e);
                                  return r.get ? r.get.call(n) : r.value;
                              }
                          })(t, e, n || t);
            }
            function u(t) {
                return (u = Object.setPrototypeOf
                    ? Object.getPrototypeOf
                    : function (t) {
                          return t.__proto__ || Object.getPrototypeOf(t);
                      })(t);
            }
            function h(t, e) {
                return (h =
                    Object.setPrototypeOf ||
                    function (t, e) {
                        return (t.__proto__ = e), t;
                    })(t, e);
            }
            var p = (function () {
                function t(e) {
                    return (
                        (function (t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        })(this, t),
                        c(this, u(t).call(this, e))
                    );
                }
                var e, n, o;
                return (
                    (function (t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        (t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } })), e && h(t, e);
                    })(t, i.default),
                    (e = t),
                    (n = [
                        {
                            key: "_extra",
                            value: function () {
                                l(u(t.prototype), "_extra", this).call(this), (this._time = null), (this._frameSeg = -1), (this._frame = null), (this._playing = !1);
                            },
                        },
                        {
                            key: "play",
                            value: function () {
                                return !this._playing && ((this._playing = !0), this._start(), !0);
                            },
                        },
                        {
                            key: "_start",
                            value: function () {
                                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
                                (this._frame = window.requestAnimationFrame(this._start.bind(this))), null == this._time && (this._time = t);
                                var e = Math.floor((t - this._time) / (1e3 / this._prop.fps));
                                e > this._frameSeg && ((this._frameSeg = e), this.launchAll());
                            },
                        },
                        {
                            key: "pause",
                            value: function () {
                                return !!this._playing && (window.cancelAnimationFrame(this._frame), (this._playing = !1), !0);
                            },
                        },
                        {
                            key: "destroy",
                            value: function () {
                                l(u(t.prototype), "destroy", this).call(this), this.pause();
                            },
                        },
                        {
                            key: "defaultProp",
                            get: function () {
                                return (0, r.default)(l(u(t.prototype), "defaultProp", this), { fps: 60 });
                            },
                        },
                        {
                            key: "playing",
                            get: function () {
                                return this._playing;
                            },
                        },
                    ]) && s(e.prototype, n),
                    o && s(e, o),
                    t
                );
            })();
            e.default = p;
        },
        function (t, e, n) {
            (function (e) {
                var n;
                t.exports = (function t(e, i, r) {
                    function o(s, c) {
                        if (!i[s]) {
                            if (!e[s]) {
                                var l = "function" == typeof n && n;
                                if (!c && l) return n(s, !0);
                                if (a) return a(s, !0);
                                var u = new Error("Cannot find module '" + s + "'");
                                throw ((u.code = "MODULE_NOT_FOUND"), u);
                            }
                            var h = (i[s] = { exports: {} });
                            e[s][0].call(
                                h.exports,
                                function (t) {
                                    var n = e[s][1][t];
                                    return o(n || t);
                                },
                                h,
                                h.exports,
                                t,
                                e,
                                i,
                                r
                            );
                        }
                        return i[s].exports;
                    }
                    for (var a = "function" == typeof n && n, s = 0; s < r.length; s++) o(r[s]);
                    return o;
                })(
                    {
                        1: [
                            function (t, e) {
                                var n = {};
                                e.exports = n;
                                var i = t("../geometry/Vertices"),
                                    r = t("../geometry/Vector"),
                                    o = t("../core/Sleeping"),
                                    a = (t("../render/Render"), t("../core/Common")),
                                    s = t("../geometry/Bounds"),
                                    c = t("../geometry/Axes");
                                !(function () {
                                    (n._inertiaScale = 4),
                                        (n._nextCollidingGroupId = 1),
                                        (n._nextNonCollidingGroupId = -1),
                                        (n._nextCategory = 1),
                                        (n.create = function (e) {
                                            var n = {
                                                    id: a.nextId(),
                                                    type: "body",
                                                    label: "Body",
                                                    parts: [],
                                                    plugin: {},
                                                    angle: 0,
                                                    vertices: i.fromPath("L 0 0 L 40 0 L 40 40 L 0 40"),
                                                    position: { x: 0, y: 0 },
                                                    force: { x: 0, y: 0 },
                                                    torque: 0,
                                                    positionImpulse: { x: 0, y: 0 },
                                                    constraintImpulse: { x: 0, y: 0, angle: 0 },
                                                    totalContacts: 0,
                                                    speed: 0,
                                                    angularSpeed: 0,
                                                    velocity: { x: 0, y: 0 },
                                                    angularVelocity: 0,
                                                    isSensor: !1,
                                                    isStatic: !1,
                                                    isSleeping: !1,
                                                    motion: 0,
                                                    sleepThreshold: 60,
                                                    density: 0.001,
                                                    restitution: 0,
                                                    friction: 0.1,
                                                    frictionStatic: 0.5,
                                                    frictionAir: 0.01,
                                                    collisionFilter: { category: 1, mask: 4294967295, group: 0 },
                                                    slop: 0.05,
                                                    timeScale: 1,
                                                    render: { visible: !0, opacity: 1, sprite: { xScale: 1, yScale: 1, xOffset: 0, yOffset: 0 }, lineWidth: 0 },
                                                },
                                                r = a.extend(n, e);
                                            return t(r, e), r;
                                        }),
                                        (n.nextGroup = function (t) {
                                            return t ? n._nextNonCollidingGroupId-- : n._nextCollidingGroupId++;
                                        }),
                                        (n.nextCategory = function () {
                                            return (n._nextCategory = n._nextCategory << 1), n._nextCategory;
                                        });
                                    var t = function (t, e) {
                                        (e = e || {}),
                                            n.set(t, {
                                                bounds: t.bounds || s.create(t.vertices),
                                                positionPrev: t.positionPrev || r.clone(t.position),
                                                anglePrev: t.anglePrev || t.angle,
                                                vertices: t.vertices,
                                                parts: t.parts || [t],
                                                isStatic: t.isStatic,
                                                isSleeping: t.isSleeping,
                                                parent: t.parent || t,
                                            }),
                                            i.rotate(t.vertices, t.angle, t.position),
                                            c.rotate(t.axes, t.angle),
                                            s.update(t.bounds, t.vertices, t.velocity),
                                            n.set(t, { axes: e.axes || t.axes, area: e.area || t.area, mass: e.mass || t.mass, inertia: e.inertia || t.inertia });
                                        var o = t.isStatic ? "#2e2b44" : a.choose(["#006BA6", "#0496FF", "#FFBC42", "#D81159", "#8F2D56"]);
                                        (t.render.fillStyle = t.render.fillStyle || o),
                                            (t.render.strokeStyle = t.render.strokeStyle || "#000"),
                                            (t.render.sprite.xOffset += -(t.bounds.min.x - t.position.x) / (t.bounds.max.x - t.bounds.min.x)),
                                            (t.render.sprite.yOffset += -(t.bounds.min.y - t.position.y) / (t.bounds.max.y - t.bounds.min.y));
                                    };
                                    (n.set = function (t, e, i) {
                                        var r;
                                        for (r in ("string" == typeof e && ((r = e), ((e = {})[r] = i)), e))
                                            if (((i = e[r]), e.hasOwnProperty(r)))
                                                switch (r) {
                                                    case "isStatic":
                                                        n.setStatic(t, i);
                                                        break;
                                                    case "isSleeping":
                                                        o.set(t, i);
                                                        break;
                                                    case "mass":
                                                        n.setMass(t, i);
                                                        break;
                                                    case "density":
                                                        n.setDensity(t, i);
                                                        break;
                                                    case "inertia":
                                                        n.setInertia(t, i);
                                                        break;
                                                    case "vertices":
                                                        n.setVertices(t, i);
                                                        break;
                                                    case "position":
                                                        n.setPosition(t, i);
                                                        break;
                                                    case "angle":
                                                        n.setAngle(t, i);
                                                        break;
                                                    case "velocity":
                                                        n.setVelocity(t, i);
                                                        break;
                                                    case "angularVelocity":
                                                        n.setAngularVelocity(t, i);
                                                        break;
                                                    case "parts":
                                                        n.setParts(t, i);
                                                        break;
                                                    default:
                                                        t[r] = i;
                                                }
                                    }),
                                        (n.setStatic = function (t, e) {
                                            for (var n = 0; n < t.parts.length; n++) {
                                                var i = t.parts[n];
                                                (i.isStatic = e),
                                                    e
                                                        ? ((i._original = {
                                                              restitution: i.restitution,
                                                              friction: i.friction,
                                                              mass: i.mass,
                                                              inertia: i.inertia,
                                                              density: i.density,
                                                              inverseMass: i.inverseMass,
                                                              inverseInertia: i.inverseInertia,
                                                          }),
                                                          (i.restitution = 0),
                                                          (i.friction = 1),
                                                          (i.mass = i.inertia = i.density = 1 / 0),
                                                          (i.inverseMass = i.inverseInertia = 0),
                                                          (i.positionPrev.x = i.position.x),
                                                          (i.positionPrev.y = i.position.y),
                                                          (i.anglePrev = i.angle),
                                                          (i.angularVelocity = 0),
                                                          (i.speed = 0),
                                                          (i.angularSpeed = 0),
                                                          (i.motion = 0))
                                                        : i._original &&
                                                          ((i.restitution = i._original.restitution),
                                                          (i.friction = i._original.friction),
                                                          (i.mass = i._original.mass),
                                                          (i.inertia = i._original.inertia),
                                                          (i.density = i._original.density),
                                                          (i.inverseMass = i._original.inverseMass),
                                                          (i.inverseInertia = i._original.inverseInertia),
                                                          delete i._original);
                                            }
                                        }),
                                        (n.setMass = function (t, e) {
                                            var n = t.inertia / (t.mass / 6);
                                            (t.inertia = n * (e / 6)), (t.inverseInertia = 1 / t.inertia), (t.mass = e), (t.inverseMass = 1 / t.mass), (t.density = t.mass / t.area);
                                        }),
                                        (n.setDensity = function (t, e) {
                                            n.setMass(t, e * t.area), (t.density = e);
                                        }),
                                        (n.setInertia = function (t, e) {
                                            (t.inertia = e), (t.inverseInertia = 1 / t.inertia);
                                        }),
                                        (n.setVertices = function (t, e) {
                                            e[0].body === t ? (t.vertices = e) : (t.vertices = i.create(e, t)), (t.axes = c.fromVertices(t.vertices)), (t.area = i.area(t.vertices)), n.setMass(t, t.density * t.area);
                                            var r = i.centre(t.vertices);
                                            i.translate(t.vertices, r, -1), n.setInertia(t, n._inertiaScale * i.inertia(t.vertices, t.mass)), i.translate(t.vertices, t.position), s.update(t.bounds, t.vertices, t.velocity);
                                        }),
                                        (n.setParts = function (t, e, r) {
                                            var o;
                                            for (e = e.slice(0), t.parts.length = 0, t.parts.push(t), t.parent = t, o = 0; o < e.length; o++) {
                                                var a = e[o];
                                                a !== t && ((a.parent = t), t.parts.push(a));
                                            }
                                            if (1 !== t.parts.length) {
                                                if ((r = void 0 === r || r)) {
                                                    var s = [];
                                                    for (o = 0; o < e.length; o++) s = s.concat(e[o].vertices);
                                                    i.clockwiseSort(s);
                                                    var c = i.hull(s),
                                                        l = i.centre(c);
                                                    n.setVertices(t, c), i.translate(t.vertices, l);
                                                }
                                                var u = n._totalProperties(t);
                                                (t.area = u.area),
                                                    (t.parent = t),
                                                    (t.position.x = u.centre.x),
                                                    (t.position.y = u.centre.y),
                                                    (t.positionPrev.x = u.centre.x),
                                                    (t.positionPrev.y = u.centre.y),
                                                    n.setMass(t, u.mass),
                                                    n.setInertia(t, u.inertia),
                                                    n.setPosition(t, u.centre);
                                            }
                                        }),
                                        (n.setPosition = function (t, e) {
                                            var n = r.sub(e, t.position);
                                            (t.positionPrev.x += n.x), (t.positionPrev.y += n.y);
                                            for (var o = 0; o < t.parts.length; o++) {
                                                var a = t.parts[o];
                                                (a.position.x += n.x), (a.position.y += n.y), i.translate(a.vertices, n), s.update(a.bounds, a.vertices, t.velocity);
                                            }
                                        }),
                                        (n.setAngle = function (t, e) {
                                            var n = e - t.angle;
                                            t.anglePrev += n;
                                            for (var o = 0; o < t.parts.length; o++) {
                                                var a = t.parts[o];
                                                (a.angle += n), i.rotate(a.vertices, n, t.position), c.rotate(a.axes, n), s.update(a.bounds, a.vertices, t.velocity), o > 0 && r.rotateAbout(a.position, n, t.position, a.position);
                                            }
                                        }),
                                        (n.setVelocity = function (t, e) {
                                            (t.positionPrev.x = t.position.x - e.x), (t.positionPrev.y = t.position.y - e.y), (t.velocity.x = e.x), (t.velocity.y = e.y), (t.speed = r.magnitude(t.velocity));
                                        }),
                                        (n.setAngularVelocity = function (t, e) {
                                            (t.anglePrev = t.angle - e), (t.angularVelocity = e), (t.angularSpeed = Math.abs(t.angularVelocity));
                                        }),
                                        (n.translate = function (t, e) {
                                            n.setPosition(t, r.add(t.position, e));
                                        }),
                                        (n.rotate = function (t, e, i) {
                                            if (i) {
                                                var r = Math.cos(e),
                                                    o = Math.sin(e),
                                                    a = t.position.x - i.x,
                                                    s = t.position.y - i.y;
                                                n.setPosition(t, { x: i.x + (a * r - s * o), y: i.y + (a * o + s * r) }), n.setAngle(t, t.angle + e);
                                            } else n.setAngle(t, t.angle + e);
                                        }),
                                        (n.scale = function (t, e, r, o) {
                                            var a = 0,
                                                l = 0;
                                            o = o || t.position;
                                            for (var u = 0; u < t.parts.length; u++) {
                                                var h = t.parts[u];
                                                i.scale(h.vertices, e, r, o),
                                                    (h.axes = c.fromVertices(h.vertices)),
                                                    (h.area = i.area(h.vertices)),
                                                    n.setMass(h, t.density * h.area),
                                                    i.translate(h.vertices, { x: -h.position.x, y: -h.position.y }),
                                                    n.setInertia(h, n._inertiaScale * i.inertia(h.vertices, h.mass)),
                                                    i.translate(h.vertices, { x: h.position.x, y: h.position.y }),
                                                    u > 0 && ((a += h.area), (l += h.inertia)),
                                                    (h.position.x = o.x + (h.position.x - o.x) * e),
                                                    (h.position.y = o.y + (h.position.y - o.y) * r),
                                                    s.update(h.bounds, h.vertices, t.velocity);
                                            }
                                            t.parts.length > 1 && ((t.area = a), t.isStatic || (n.setMass(t, t.density * a), n.setInertia(t, l))), t.circleRadius && (e === r ? (t.circleRadius *= e) : (t.circleRadius = null));
                                        }),
                                        (n.update = function (t, e, n, o) {
                                            var a = Math.pow(e * n * t.timeScale, 2),
                                                l = 1 - t.frictionAir * n * t.timeScale,
                                                u = t.position.x - t.positionPrev.x,
                                                h = t.position.y - t.positionPrev.y;
                                            (t.velocity.x = u * l * o + (t.force.x / t.mass) * a),
                                                (t.velocity.y = h * l * o + (t.force.y / t.mass) * a),
                                                (t.positionPrev.x = t.position.x),
                                                (t.positionPrev.y = t.position.y),
                                                (t.position.x += t.velocity.x),
                                                (t.position.y += t.velocity.y),
                                                (t.angularVelocity = (t.angle - t.anglePrev) * l * o + (t.torque / t.inertia) * a),
                                                (t.anglePrev = t.angle),
                                                (t.angle += t.angularVelocity),
                                                (t.speed = r.magnitude(t.velocity)),
                                                (t.angularSpeed = Math.abs(t.angularVelocity));
                                            for (var p = 0; p < t.parts.length; p++) {
                                                var d = t.parts[p];
                                                i.translate(d.vertices, t.velocity),
                                                    p > 0 && ((d.position.x += t.velocity.x), (d.position.y += t.velocity.y)),
                                                    0 !== t.angularVelocity &&
                                                        (i.rotate(d.vertices, t.angularVelocity, t.position), c.rotate(d.axes, t.angularVelocity), p > 0 && r.rotateAbout(d.position, t.angularVelocity, t.position, d.position)),
                                                    s.update(d.bounds, d.vertices, t.velocity);
                                            }
                                        }),
                                        (n.applyForce = function (t, e, n) {
                                            (t.force.x += n.x), (t.force.y += n.y);
                                            var i = { x: e.x - t.position.x, y: e.y - t.position.y };
                                            t.torque += i.x * n.y - i.y * n.x;
                                        }),
                                        (n._totalProperties = function (t) {
                                            for (var e = { mass: 0, area: 0, inertia: 0, centre: { x: 0, y: 0 } }, n = 1 === t.parts.length ? 0 : 1; n < t.parts.length; n++) {
                                                var i = t.parts[n],
                                                    o = i.mass !== 1 / 0 ? i.mass : 1;
                                                (e.mass += o), (e.area += i.area), (e.inertia += i.inertia), (e.centre = r.add(e.centre, r.mult(i.position, o)));
                                            }
                                            return (e.centre = r.div(e.centre, e.mass)), e;
                                        });
                                })();
                            },
                            { "../core/Common": 14, "../core/Sleeping": 22, "../geometry/Axes": 25, "../geometry/Bounds": 26, "../geometry/Vector": 28, "../geometry/Vertices": 29, "../render/Render": 31 },
                        ],
                        2: [
                            function (t, e) {
                                var n = {};
                                e.exports = n;
                                var i = t("../core/Events"),
                                    r = t("../core/Common"),
                                    o = t("../geometry/Bounds"),
                                    a = t("./Body");
                                (n.create = function (t) {
                                    return r.extend({ id: r.nextId(), type: "composite", parent: null, isModified: !1, bodies: [], constraints: [], composites: [], label: "Composite", plugin: {} }, t);
                                }),
                                    (n.setModified = function (t, e, i, r) {
                                        if (((t.isModified = e), i && t.parent && n.setModified(t.parent, e, i, r), r))
                                            for (var o = 0; o < t.composites.length; o++) {
                                                var a = t.composites[o];
                                                n.setModified(a, e, i, r);
                                            }
                                    }),
                                    (n.add = function (t, e) {
                                        var o = [].concat(e);
                                        i.trigger(t, "beforeAdd", { object: e });
                                        for (var a = 0; a < o.length; a++) {
                                            var s = o[a];
                                            switch (s.type) {
                                                case "body":
                                                    if (s.parent !== s) {
                                                        r.warn("Composite.add: skipped adding a compound body part (you must add its parent instead)");
                                                        break;
                                                    }
                                                    n.addBody(t, s);
                                                    break;
                                                case "constraint":
                                                    n.addConstraint(t, s);
                                                    break;
                                                case "composite":
                                                    n.addComposite(t, s);
                                                    break;
                                                case "mouseConstraint":
                                                    n.addConstraint(t, s.constraint);
                                            }
                                        }
                                        return i.trigger(t, "afterAdd", { object: e }), t;
                                    }),
                                    (n.remove = function (t, e, r) {
                                        var o = [].concat(e);
                                        i.trigger(t, "beforeRemove", { object: e });
                                        for (var a = 0; a < o.length; a++) {
                                            var s = o[a];
                                            switch (s.type) {
                                                case "body":
                                                    n.removeBody(t, s, r);
                                                    break;
                                                case "constraint":
                                                    n.removeConstraint(t, s, r);
                                                    break;
                                                case "composite":
                                                    n.removeComposite(t, s, r);
                                                    break;
                                                case "mouseConstraint":
                                                    n.removeConstraint(t, s.constraint);
                                            }
                                        }
                                        return i.trigger(t, "afterRemove", { object: e }), t;
                                    }),
                                    (n.addComposite = function (t, e) {
                                        return t.composites.push(e), (e.parent = t), n.setModified(t, !0, !0, !1), t;
                                    }),
                                    (n.removeComposite = function (t, e, i) {
                                        var o = r.indexOf(t.composites, e);
                                        if ((-1 !== o && (n.removeCompositeAt(t, o), n.setModified(t, !0, !0, !1)), i)) for (var a = 0; a < t.composites.length; a++) n.removeComposite(t.composites[a], e, !0);
                                        return t;
                                    }),
                                    (n.removeCompositeAt = function (t, e) {
                                        return t.composites.splice(e, 1), n.setModified(t, !0, !0, !1), t;
                                    }),
                                    (n.addBody = function (t, e) {
                                        return t.bodies.push(e), n.setModified(t, !0, !0, !1), t;
                                    }),
                                    (n.removeBody = function (t, e, i) {
                                        var o = r.indexOf(t.bodies, e);
                                        if ((-1 !== o && (n.removeBodyAt(t, o), n.setModified(t, !0, !0, !1)), i)) for (var a = 0; a < t.composites.length; a++) n.removeBody(t.composites[a], e, !0);
                                        return t;
                                    }),
                                    (n.removeBodyAt = function (t, e) {
                                        return t.bodies.splice(e, 1), n.setModified(t, !0, !0, !1), t;
                                    }),
                                    (n.addConstraint = function (t, e) {
                                        return t.constraints.push(e), n.setModified(t, !0, !0, !1), t;
                                    }),
                                    (n.removeConstraint = function (t, e, i) {
                                        var o = r.indexOf(t.constraints, e);
                                        if ((-1 !== o && n.removeConstraintAt(t, o), i)) for (var a = 0; a < t.composites.length; a++) n.removeConstraint(t.composites[a], e, !0);
                                        return t;
                                    }),
                                    (n.removeConstraintAt = function (t, e) {
                                        return t.constraints.splice(e, 1), n.setModified(t, !0, !0, !1), t;
                                    }),
                                    (n.clear = function (t, e, i) {
                                        if (i) for (var r = 0; r < t.composites.length; r++) n.clear(t.composites[r], e, !0);
                                        return (
                                            e
                                                ? (t.bodies = t.bodies.filter(function (t) {
                                                      return t.isStatic;
                                                  }))
                                                : (t.bodies.length = 0),
                                            (t.constraints.length = 0),
                                            (t.composites.length = 0),
                                            n.setModified(t, !0, !0, !1),
                                            t
                                        );
                                    }),
                                    (n.allBodies = function (t) {
                                        for (var e = [].concat(t.bodies), i = 0; i < t.composites.length; i++) e = e.concat(n.allBodies(t.composites[i]));
                                        return e;
                                    }),
                                    (n.allConstraints = function (t) {
                                        for (var e = [].concat(t.constraints), i = 0; i < t.composites.length; i++) e = e.concat(n.allConstraints(t.composites[i]));
                                        return e;
                                    }),
                                    (n.allComposites = function (t) {
                                        for (var e = [].concat(t.composites), i = 0; i < t.composites.length; i++) e = e.concat(n.allComposites(t.composites[i]));
                                        return e;
                                    }),
                                    (n.get = function (t, e, i) {
                                        var r, o;
                                        switch (i) {
                                            case "body":
                                                r = n.allBodies(t);
                                                break;
                                            case "constraint":
                                                r = n.allConstraints(t);
                                                break;
                                            case "composite":
                                                r = n.allComposites(t).concat(t);
                                        }
                                        return r
                                            ? 0 ===
                                              (o = r.filter(function (t) {
                                                  return t.id.toString() === e.toString();
                                              })).length
                                                ? null
                                                : o[0]
                                            : null;
                                    }),
                                    (n.move = function (t, e, i) {
                                        return n.remove(t, e), n.add(i, e), t;
                                    }),
                                    (n.rebase = function (t) {
                                        for (var e = n.allBodies(t).concat(n.allConstraints(t)).concat(n.allComposites(t)), i = 0; i < e.length; i++) e[i].id = r.nextId();
                                        return n.setModified(t, !0, !0, !1), t;
                                    }),
                                    (n.translate = function (t, e, i) {
                                        for (var r = i ? n.allBodies(t) : t.bodies, o = 0; o < r.length; o++) a.translate(r[o], e);
                                        return n.setModified(t, !0, !0, !1), t;
                                    }),
                                    (n.rotate = function (t, e, i, r) {
                                        for (var o = Math.cos(e), s = Math.sin(e), c = r ? n.allBodies(t) : t.bodies, l = 0; l < c.length; l++) {
                                            var u = c[l],
                                                h = u.position.x - i.x,
                                                p = u.position.y - i.y;
                                            a.setPosition(u, { x: i.x + (h * o - p * s), y: i.y + (h * s + p * o) }), a.rotate(u, e);
                                        }
                                        return n.setModified(t, !0, !0, !1), t;
                                    }),
                                    (n.scale = function (t, e, i, r, o) {
                                        for (var s = o ? n.allBodies(t) : t.bodies, c = 0; c < s.length; c++) {
                                            var l = s[c],
                                                u = l.position.x - r.x,
                                                h = l.position.y - r.y;
                                            a.setPosition(l, { x: r.x + u * e, y: r.y + h * i }), a.scale(l, e, i);
                                        }
                                        return n.setModified(t, !0, !0, !1), t;
                                    }),
                                    (n.bounds = function (t) {
                                        for (var e = n.allBodies(t), i = [], r = 0; r < e.length; r += 1) {
                                            var a = e[r];
                                            i.push(a.bounds.min, a.bounds.max);
                                        }
                                        return o.create(i);
                                    });
                            },
                            { "../core/Common": 14, "../core/Events": 16, "../geometry/Bounds": 26, "./Body": 1 },
                        ],
                        3: [
                            function (t, e) {
                                var n = {};
                                e.exports = n;
                                var i = t("./Composite"),
                                    r = (t("../constraint/Constraint"), t("../core/Common"));
                                n.create = function (t) {
                                    var e = i.create(),
                                        n = { label: "World", gravity: { x: 0, y: 1, scale: 0.001 }, bounds: { min: { x: -1 / 0, y: -1 / 0 }, max: { x: 1 / 0, y: 1 / 0 } } };
                                    return r.extend(e, n, t);
                                };
                            },
                            { "../constraint/Constraint": 12, "../core/Common": 14, "./Composite": 2 },
                        ],
                        4: [
                            function (t, e) {
                                var n = {};
                                (e.exports = n),
                                    (n.create = function (t) {
                                        return { id: n.id(t), vertex: t, normalImpulse: 0, tangentImpulse: 0 };
                                    }),
                                    (n.id = function (t) {
                                        return t.body.id + "_" + t.index;
                                    });
                            },
                            {},
                        ],
                        5: [
                            function (t, e) {
                                var n = {};
                                e.exports = n;
                                var i = t("./SAT"),
                                    r = t("./Pair"),
                                    o = t("../geometry/Bounds");
                                (n.collisions = function (t, e) {
                                    for (var a = [], s = e.pairs.table, c = 0; c < t.length; c++) {
                                        var l = t[c][0],
                                            u = t[c][1];
                                        if (((!l.isStatic && !l.isSleeping) || (!u.isStatic && !u.isSleeping)) && n.canCollide(l.collisionFilter, u.collisionFilter) && o.overlaps(l.bounds, u.bounds))
                                            for (var h = l.parts.length > 1 ? 1 : 0; h < l.parts.length; h++)
                                                for (var p = l.parts[h], d = u.parts.length > 1 ? 1 : 0; d < u.parts.length; d++) {
                                                    var f = u.parts[d];
                                                    if ((p === l && f === u) || o.overlaps(p.bounds, f.bounds)) {
                                                        var m,
                                                            v = r.id(p, f),
                                                            g = s[v];
                                                        m = g && g.isActive ? g.collision : null;
                                                        var y = i.collides(p, f, m);
                                                        y.collided && a.push(y);
                                                    }
                                                }
                                    }
                                    return a;
                                }),
                                    (n.canCollide = function (t, e) {
                                        return t.group === e.group && 0 !== t.group ? t.group > 0 : 0 != (t.mask & e.category) && 0 != (e.mask & t.category);
                                    });
                            },
                            { "../geometry/Bounds": 26, "./Pair": 7, "./SAT": 11 },
                        ],
                        6: [
                            function (t, e) {
                                var n = {};
                                e.exports = n;
                                var i = t("./Pair"),
                                    r = t("./Detector"),
                                    o = t("../core/Common");
                                (n.create = function (t) {
                                    var e = { controller: n, detector: r.collisions, buckets: {}, pairs: {}, pairsList: [], bucketWidth: 48, bucketHeight: 48 };
                                    return o.extend(e, t);
                                }),
                                    (n.update = function (t, e, i, r) {
                                        var o,
                                            a,
                                            s,
                                            c,
                                            l,
                                            u = i.world,
                                            h = t.buckets,
                                            p = !1;
                                        for (o = 0; o < e.length; o++) {
                                            var d = e[o];
                                            if ((!d.isSleeping || r) && !(d.bounds.max.x < u.bounds.min.x || d.bounds.min.x > u.bounds.max.x || d.bounds.max.y < u.bounds.min.y || d.bounds.min.y > u.bounds.max.y)) {
                                                var f = n._getRegion(t, d);
                                                if (!d.region || f.id !== d.region.id || r) {
                                                    (d.region && !r) || (d.region = f);
                                                    var m = n._regionUnion(f, d.region);
                                                    for (a = m.startCol; a <= m.endCol; a++)
                                                        for (s = m.startRow; s <= m.endRow; s++) {
                                                            (l = n._getBucketId(a, s)), (c = h[l]);
                                                            var v = a >= f.startCol && a <= f.endCol && s >= f.startRow && s <= f.endRow,
                                                                g = a >= d.region.startCol && a <= d.region.endCol && s >= d.region.startRow && s <= d.region.endRow;
                                                            !v && g && g && c && n._bucketRemoveBody(t, c, d), (d.region === f || (v && !g) || r) && (c || (c = n._createBucket(h, l)), n._bucketAddBody(t, c, d));
                                                        }
                                                    (d.region = f), (p = !0);
                                                }
                                            }
                                        }
                                        p && (t.pairsList = n._createActivePairsList(t));
                                    }),
                                    (n.clear = function (t) {
                                        (t.buckets = {}), (t.pairs = {}), (t.pairsList = []);
                                    }),
                                    (n._regionUnion = function (t, e) {
                                        var i = Math.min(t.startCol, e.startCol),
                                            r = Math.max(t.endCol, e.endCol),
                                            o = Math.min(t.startRow, e.startRow),
                                            a = Math.max(t.endRow, e.endRow);
                                        return n._createRegion(i, r, o, a);
                                    }),
                                    (n._getRegion = function (t, e) {
                                        var i = e.bounds,
                                            r = Math.floor(i.min.x / t.bucketWidth),
                                            o = Math.floor(i.max.x / t.bucketWidth),
                                            a = Math.floor(i.min.y / t.bucketHeight),
                                            s = Math.floor(i.max.y / t.bucketHeight);
                                        return n._createRegion(r, o, a, s);
                                    }),
                                    (n._createRegion = function (t, e, n, i) {
                                        return { id: t + "," + e + "," + n + "," + i, startCol: t, endCol: e, startRow: n, endRow: i };
                                    }),
                                    (n._getBucketId = function (t, e) {
                                        return "C" + t + "R" + e;
                                    }),
                                    (n._createBucket = function (t, e) {
                                        var n = (t[e] = []);
                                        return n;
                                    }),
                                    (n._bucketAddBody = function (t, e, n) {
                                        for (var r = 0; r < e.length; r++) {
                                            var o = e[r];
                                            if (!(n.id === o.id || (n.isStatic && o.isStatic))) {
                                                var a = i.id(n, o),
                                                    s = t.pairs[a];
                                                s ? (s[2] += 1) : (t.pairs[a] = [n, o, 1]);
                                            }
                                        }
                                        e.push(n);
                                    }),
                                    (n._bucketRemoveBody = function (t, e, n) {
                                        e.splice(o.indexOf(e, n), 1);
                                        for (var r = 0; r < e.length; r++) {
                                            var a = e[r],
                                                s = i.id(n, a),
                                                c = t.pairs[s];
                                            c && (c[2] -= 1);
                                        }
                                    }),
                                    (n._createActivePairsList = function (t) {
                                        var e,
                                            n,
                                            i = [];
                                        e = o.keys(t.pairs);
                                        for (var r = 0; r < e.length; r++) (n = t.pairs[e[r]])[2] > 0 ? i.push(n) : delete t.pairs[e[r]];
                                        return i;
                                    });
                            },
                            { "../core/Common": 14, "./Detector": 5, "./Pair": 7 },
                        ],
                        7: [
                            function (t, e) {
                                var n = {};
                                e.exports = n;
                                var i = t("./Contact");
                                (n.create = function (t, e) {
                                    var i = t.bodyA,
                                        r = t.bodyB,
                                        o = t.parentA,
                                        a = t.parentB,
                                        s = {
                                            id: n.id(i, r),
                                            bodyA: i,
                                            bodyB: r,
                                            contacts: {},
                                            activeContacts: [],
                                            separation: 0,
                                            isActive: !0,
                                            isSensor: i.isSensor || r.isSensor,
                                            timeCreated: e,
                                            timeUpdated: e,
                                            inverseMass: o.inverseMass + a.inverseMass,
                                            friction: Math.min(o.friction, a.friction),
                                            frictionStatic: Math.max(o.frictionStatic, a.frictionStatic),
                                            restitution: Math.max(o.restitution, a.restitution),
                                            slop: Math.max(o.slop, a.slop),
                                        };
                                    return n.update(s, t, e), s;
                                }),
                                    (n.update = function (t, e, r) {
                                        var o = t.contacts,
                                            a = e.supports,
                                            s = t.activeContacts,
                                            c = e.parentA,
                                            l = e.parentB;
                                        if (
                                            ((t.collision = e),
                                            (t.inverseMass = c.inverseMass + l.inverseMass),
                                            (t.friction = Math.min(c.friction, l.friction)),
                                            (t.frictionStatic = Math.max(c.frictionStatic, l.frictionStatic)),
                                            (t.restitution = Math.max(c.restitution, l.restitution)),
                                            (t.slop = Math.max(c.slop, l.slop)),
                                            (s.length = 0),
                                            e.collided)
                                        ) {
                                            for (var u = 0; u < a.length; u++) {
                                                var h = a[u],
                                                    p = i.id(h),
                                                    d = o[p];
                                                d ? s.push(d) : s.push((o[p] = i.create(h)));
                                            }
                                            (t.separation = e.depth), n.setActive(t, !0, r);
                                        } else !0 === t.isActive && n.setActive(t, !1, r);
                                    }),
                                    (n.setActive = function (t, e, n) {
                                        e ? ((t.isActive = !0), (t.timeUpdated = n)) : ((t.isActive = !1), (t.activeContacts.length = 0));
                                    }),
                                    (n.id = function (t, e) {
                                        return t.id < e.id ? "A" + t.id + "B" + e.id : "A" + e.id + "B" + t.id;
                                    });
                            },
                            { "./Contact": 4 },
                        ],
                        8: [
                            function (t, e) {
                                var n = {};
                                e.exports = n;
                                var i = t("./Pair"),
                                    r = t("../core/Common");
                                (n._pairMaxIdleLife = 1e3),
                                    (n.create = function (t) {
                                        return r.extend({ table: {}, list: [], collisionStart: [], collisionActive: [], collisionEnd: [] }, t);
                                    }),
                                    (n.update = function (t, e, n) {
                                        var o,
                                            a,
                                            s,
                                            c,
                                            l = t.list,
                                            u = t.table,
                                            h = t.collisionStart,
                                            p = t.collisionEnd,
                                            d = t.collisionActive,
                                            f = [];
                                        for (h.length = 0, p.length = 0, d.length = 0, c = 0; c < e.length; c++)
                                            (o = e[c]).collided && ((a = i.id(o.bodyA, o.bodyB)), f.push(a), (s = u[a]) ? (s.isActive ? d.push(s) : h.push(s), i.update(s, o, n)) : ((s = i.create(o, n)), (u[a] = s), h.push(s), l.push(s)));
                                        for (c = 0; c < l.length; c++) (s = l[c]).isActive && -1 === r.indexOf(f, s.id) && (i.setActive(s, !1, n), p.push(s));
                                    }),
                                    (n.removeOld = function (t, e) {
                                        var i,
                                            r,
                                            o,
                                            a,
                                            s = t.list,
                                            c = t.table,
                                            l = [];
                                        for (a = 0; a < s.length; a++) (i = s[a]), (r = i.collision).bodyA.isSleeping || r.bodyB.isSleeping ? (i.timeUpdated = e) : e - i.timeUpdated > n._pairMaxIdleLife && l.push(a);
                                        for (a = 0; a < l.length; a++) (o = l[a] - a), (i = s[o]), delete c[i.id], s.splice(o, 1);
                                    }),
                                    (n.clear = function (t) {
                                        return (t.table = {}), (t.list.length = 0), (t.collisionStart.length = 0), (t.collisionActive.length = 0), (t.collisionEnd.length = 0), t;
                                    });
                            },
                            { "../core/Common": 14, "./Pair": 7 },
                        ],
                        9: [
                            function (t, e) {
                                var n = {};
                                e.exports = n;
                                var i = t("../geometry/Vector"),
                                    r = t("./SAT"),
                                    o = t("../geometry/Bounds"),
                                    a = t("../factory/Bodies"),
                                    s = t("../geometry/Vertices");
                                (n.collides = function (t, e) {
                                    for (var n = [], i = 0; i < e.length; i++) {
                                        var a = e[i];
                                        if (o.overlaps(a.bounds, t.bounds))
                                            for (var s = 1 === a.parts.length ? 0 : 1; s < a.parts.length; s++) {
                                                var c = a.parts[s];
                                                if (o.overlaps(c.bounds, t.bounds)) {
                                                    var l = r.collides(c, t);
                                                    if (l.collided) {
                                                        n.push(l);
                                                        break;
                                                    }
                                                }
                                            }
                                    }
                                    return n;
                                }),
                                    (n.ray = function (t, e, r, o) {
                                        o = o || 1e-100;
                                        for (var s = i.angle(e, r), c = i.magnitude(i.sub(e, r)), l = 0.5 * (r.x + e.x), u = 0.5 * (r.y + e.y), h = a.rectangle(l, u, c, o, { angle: s }), p = n.collides(h, t), d = 0; d < p.length; d += 1) {
                                            var f = p[d];
                                            f.body = f.bodyB = f.bodyA;
                                        }
                                        return p;
                                    }),
                                    (n.region = function (t, e, n) {
                                        for (var i = [], r = 0; r < t.length; r++) {
                                            var a = t[r],
                                                s = o.overlaps(a.bounds, e);
                                            ((s && !n) || (!s && n)) && i.push(a);
                                        }
                                        return i;
                                    }),
                                    (n.point = function (t, e) {
                                        for (var n = [], i = 0; i < t.length; i++) {
                                            var r = t[i];
                                            if (o.contains(r.bounds, e))
                                                for (var a = 1 === r.parts.length ? 0 : 1; a < r.parts.length; a++) {
                                                    var c = r.parts[a];
                                                    if (o.contains(c.bounds, e) && s.contains(c.vertices, e)) {
                                                        n.push(r);
                                                        break;
                                                    }
                                                }
                                        }
                                        return n;
                                    });
                            },
                            { "../factory/Bodies": 23, "../geometry/Bounds": 26, "../geometry/Vector": 28, "../geometry/Vertices": 29, "./SAT": 11 },
                        ],
                        10: [
                            function (t, e) {
                                var n = {};
                                e.exports = n;
                                var i = t("../geometry/Vertices"),
                                    r = t("../geometry/Vector"),
                                    o = t("../core/Common"),
                                    a = t("../geometry/Bounds");
                                (n._restingThresh = 4),
                                    (n._restingThreshTangent = 6),
                                    (n._positionDampen = 0.9),
                                    (n._positionWarming = 0.8),
                                    (n._frictionNormalMultiplier = 5),
                                    (n.preSolvePosition = function (t) {
                                        var e, n, i;
                                        for (e = 0; e < t.length; e++) (n = t[e]).isActive && ((i = n.activeContacts.length), (n.collision.parentA.totalContacts += i), (n.collision.parentB.totalContacts += i));
                                    }),
                                    (n.solvePosition = function (t, e) {
                                        var i,
                                            o,
                                            a,
                                            s,
                                            c,
                                            l,
                                            u,
                                            h,
                                            p,
                                            d = r._temp[0],
                                            f = r._temp[1],
                                            m = r._temp[2],
                                            v = r._temp[3];
                                        for (i = 0; i < t.length; i++)
                                            (o = t[i]).isActive &&
                                                !o.isSensor &&
                                                ((a = o.collision),
                                                (s = a.parentA),
                                                (c = a.parentB),
                                                (l = a.normal),
                                                (u = r.sub(r.add(c.positionImpulse, c.position, d), r.add(s.positionImpulse, r.sub(c.position, a.penetration, f), m), v)),
                                                (o.separation = r.dot(l, u)));
                                        for (i = 0; i < t.length; i++)
                                            (o = t[i]).isActive &&
                                                !o.isSensor &&
                                                ((a = o.collision),
                                                (s = a.parentA),
                                                (c = a.parentB),
                                                (l = a.normal),
                                                (p = (o.separation - o.slop) * e),
                                                (s.isStatic || c.isStatic) && (p *= 2),
                                                s.isStatic || s.isSleeping || ((h = n._positionDampen / s.totalContacts), (s.positionImpulse.x += l.x * p * h), (s.positionImpulse.y += l.y * p * h)),
                                                c.isStatic || c.isSleeping || ((h = n._positionDampen / c.totalContacts), (c.positionImpulse.x -= l.x * p * h), (c.positionImpulse.y -= l.y * p * h)));
                                    }),
                                    (n.postSolvePosition = function (t) {
                                        for (var e = 0; e < t.length; e++) {
                                            var o = t[e];
                                            if (((o.totalContacts = 0), 0 !== o.positionImpulse.x || 0 !== o.positionImpulse.y)) {
                                                for (var s = 0; s < o.parts.length; s++) {
                                                    var c = o.parts[s];
                                                    i.translate(c.vertices, o.positionImpulse), a.update(c.bounds, c.vertices, o.velocity), (c.position.x += o.positionImpulse.x), (c.position.y += o.positionImpulse.y);
                                                }
                                                (o.positionPrev.x += o.positionImpulse.x),
                                                    (o.positionPrev.y += o.positionImpulse.y),
                                                    r.dot(o.positionImpulse, o.velocity) < 0
                                                        ? ((o.positionImpulse.x = 0), (o.positionImpulse.y = 0))
                                                        : ((o.positionImpulse.x *= n._positionWarming), (o.positionImpulse.y *= n._positionWarming));
                                            }
                                        }
                                    }),
                                    (n.preSolveVelocity = function (t) {
                                        var e,
                                            n,
                                            i,
                                            o,
                                            a,
                                            s,
                                            c,
                                            l,
                                            u,
                                            h,
                                            p,
                                            d,
                                            f,
                                            m,
                                            v = r._temp[0],
                                            g = r._temp[1];
                                        for (e = 0; e < t.length; e++)
                                            if ((i = t[e]).isActive && !i.isSensor)
                                                for (o = i.activeContacts, a = i.collision, s = a.parentA, c = a.parentB, l = a.normal, u = a.tangent, n = 0; n < o.length; n++)
                                                    (h = o[n]),
                                                        (p = h.vertex),
                                                        (d = h.normalImpulse),
                                                        (f = h.tangentImpulse),
                                                        (0 === d && 0 === f) ||
                                                            ((v.x = l.x * d + u.x * f),
                                                            (v.y = l.y * d + u.y * f),
                                                            s.isStatic ||
                                                                s.isSleeping ||
                                                                ((m = r.sub(p, s.position, g)), (s.positionPrev.x += v.x * s.inverseMass), (s.positionPrev.y += v.y * s.inverseMass), (s.anglePrev += r.cross(m, v) * s.inverseInertia)),
                                                            c.isStatic ||
                                                                c.isSleeping ||
                                                                ((m = r.sub(p, c.position, g)), (c.positionPrev.x -= v.x * c.inverseMass), (c.positionPrev.y -= v.y * c.inverseMass), (c.anglePrev -= r.cross(m, v) * c.inverseInertia)));
                                    }),
                                    (n.solveVelocity = function (t, e) {
                                        for (var i = e * e, a = r._temp[0], s = r._temp[1], c = r._temp[2], l = r._temp[3], u = r._temp[4], h = r._temp[5], p = 0; p < t.length; p++) {
                                            var d = t[p];
                                            if (d.isActive && !d.isSensor) {
                                                var f = d.collision,
                                                    m = f.parentA,
                                                    v = f.parentB,
                                                    g = f.normal,
                                                    y = f.tangent,
                                                    x = d.activeContacts,
                                                    _ = 1 / x.length;
                                                (m.velocity.x = m.position.x - m.positionPrev.x),
                                                    (m.velocity.y = m.position.y - m.positionPrev.y),
                                                    (v.velocity.x = v.position.x - v.positionPrev.x),
                                                    (v.velocity.y = v.position.y - v.positionPrev.y),
                                                    (m.angularVelocity = m.angle - m.anglePrev),
                                                    (v.angularVelocity = v.angle - v.anglePrev);
                                                for (var b = 0; b < x.length; b++) {
                                                    var w = x[b],
                                                        M = w.vertex,
                                                        S = r.sub(M, m.position, s),
                                                        T = r.sub(M, v.position, c),
                                                        E = r.add(m.velocity, r.mult(r.perp(S), m.angularVelocity), l),
                                                        A = r.add(v.velocity, r.mult(r.perp(T), v.angularVelocity), u),
                                                        P = r.sub(E, A, h),
                                                        L = r.dot(g, P),
                                                        C = r.dot(y, P),
                                                        R = Math.abs(C),
                                                        O = o.sign(C),
                                                        D = (1 + d.restitution) * L,
                                                        I = o.clamp(d.separation + L, 0, 1) * n._frictionNormalMultiplier,
                                                        N = C,
                                                        k = 1 / 0;
                                                    R > d.friction * d.frictionStatic * I * i && ((k = R), (N = o.clamp(d.friction * O * i, -k, k)));
                                                    var B = r.cross(S, g),
                                                        z = r.cross(T, g),
                                                        F = _ / (m.inverseMass + v.inverseMass + m.inverseInertia * B * B + v.inverseInertia * z * z);
                                                    if (((D *= F), (N *= F), L < 0 && L * L > n._restingThresh * i)) w.normalImpulse = 0;
                                                    else {
                                                        var U = w.normalImpulse;
                                                        (w.normalImpulse = Math.min(w.normalImpulse + D, 0)), (D = w.normalImpulse - U);
                                                    }
                                                    if (C * C > n._restingThreshTangent * i) w.tangentImpulse = 0;
                                                    else {
                                                        var j = w.tangentImpulse;
                                                        (w.tangentImpulse = o.clamp(w.tangentImpulse + N, -k, k)), (N = w.tangentImpulse - j);
                                                    }
                                                    (a.x = g.x * D + y.x * N),
                                                        (a.y = g.y * D + y.y * N),
                                                        m.isStatic || m.isSleeping || ((m.positionPrev.x += a.x * m.inverseMass), (m.positionPrev.y += a.y * m.inverseMass), (m.anglePrev += r.cross(S, a) * m.inverseInertia)),
                                                        v.isStatic || v.isSleeping || ((v.positionPrev.x -= a.x * v.inverseMass), (v.positionPrev.y -= a.y * v.inverseMass), (v.anglePrev -= r.cross(T, a) * v.inverseInertia));
                                                }
                                            }
                                        }
                                    });
                            },
                            { "../core/Common": 14, "../geometry/Bounds": 26, "../geometry/Vector": 28, "../geometry/Vertices": 29 },
                        ],
                        11: [
                            function (t, e) {
                                var n = {};
                                e.exports = n;
                                var i = t("../geometry/Vertices"),
                                    r = t("../geometry/Vector");
                                (n.collides = function (t, e, o) {
                                    var a,
                                        s,
                                        c,
                                        l,
                                        u = !1;
                                    if (o) {
                                        var h = t.parent,
                                            p = e.parent,
                                            d = h.speed * h.speed + h.angularSpeed * h.angularSpeed + p.speed * p.speed + p.angularSpeed * p.angularSpeed;
                                        (u = o && o.collided && d < 0.2), (l = o);
                                    } else l = { collided: !1, bodyA: t, bodyB: e };
                                    if (o && u) {
                                        var f = l.axisBody,
                                            m = f === t ? e : t,
                                            v = [f.axes[o.axisNumber]];
                                        if (((c = n._overlapAxes(f.vertices, m.vertices, v)), (l.reused = !0), c.overlap <= 0)) return (l.collided = !1), l;
                                    } else {
                                        if ((a = n._overlapAxes(t.vertices, e.vertices, t.axes)).overlap <= 0) return (l.collided = !1), l;
                                        if ((s = n._overlapAxes(e.vertices, t.vertices, e.axes)).overlap <= 0) return (l.collided = !1), l;
                                        a.overlap < s.overlap ? ((c = a), (l.axisBody = t)) : ((c = s), (l.axisBody = e)), (l.axisNumber = c.axisNumber);
                                    }
                                    (l.bodyA = t.id < e.id ? t : e),
                                        (l.bodyB = t.id < e.id ? e : t),
                                        (l.collided = !0),
                                        (l.depth = c.overlap),
                                        (l.parentA = l.bodyA.parent),
                                        (l.parentB = l.bodyB.parent),
                                        (t = l.bodyA),
                                        (e = l.bodyB),
                                        r.dot(c.axis, r.sub(e.position, t.position)) < 0 ? (l.normal = { x: c.axis.x, y: c.axis.y }) : (l.normal = { x: -c.axis.x, y: -c.axis.y }),
                                        (l.tangent = r.perp(l.normal)),
                                        (l.penetration = l.penetration || {}),
                                        (l.penetration.x = l.normal.x * l.depth),
                                        (l.penetration.y = l.normal.y * l.depth);
                                    var g = n._findSupports(t, e, l.normal),
                                        y = [];
                                    if ((i.contains(t.vertices, g[0]) && y.push(g[0]), i.contains(t.vertices, g[1]) && y.push(g[1]), y.length < 2)) {
                                        var x = n._findSupports(e, t, r.neg(l.normal));
                                        i.contains(e.vertices, x[0]) && y.push(x[0]), y.length < 2 && i.contains(e.vertices, x[1]) && y.push(x[1]);
                                    }
                                    return y.length < 1 && (y = [g[0]]), (l.supports = y), l;
                                }),
                                    (n._overlapAxes = function (t, e, i) {
                                        for (var o, a, s = r._temp[0], c = r._temp[1], l = { overlap: Number.MAX_VALUE }, u = 0; u < i.length; u++) {
                                            if (((a = i[u]), n._projectToAxis(s, t, a), n._projectToAxis(c, e, a), (o = Math.min(s.max - c.min, c.max - s.min)) <= 0)) return (l.overlap = o), l;
                                            o < l.overlap && ((l.overlap = o), (l.axis = a), (l.axisNumber = u));
                                        }
                                        return l;
                                    }),
                                    (n._projectToAxis = function (t, e, n) {
                                        for (var i = r.dot(e[0], n), o = i, a = 1; a < e.length; a += 1) {
                                            var s = r.dot(e[a], n);
                                            s > o ? (o = s) : s < i && (i = s);
                                        }
                                        (t.min = i), (t.max = o);
                                    }),
                                    (n._findSupports = function (t, e, n) {
                                        for (var i, o, a, s, c = Number.MAX_VALUE, l = r._temp[0], u = e.vertices, h = t.position, p = 0; p < u.length; p++)
                                            (o = u[p]), (l.x = o.x - h.x), (l.y = o.y - h.y), (i = -r.dot(n, l)) < c && ((c = i), (a = o));
                                        var d = a.index - 1 >= 0 ? a.index - 1 : u.length - 1;
                                        (o = u[d]), (l.x = o.x - h.x), (l.y = o.y - h.y), (c = -r.dot(n, l)), (s = o);
                                        var f = (a.index + 1) % u.length;
                                        return (o = u[f]), (l.x = o.x - h.x), (l.y = o.y - h.y), (i = -r.dot(n, l)) < c && (s = o), [a, s];
                                    });
                            },
                            { "../geometry/Vector": 28, "../geometry/Vertices": 29 },
                        ],
                        12: [
                            function (t, e) {
                                var n = {};
                                e.exports = n;
                                var i = t("../geometry/Vertices"),
                                    r = t("../geometry/Vector"),
                                    o = t("../core/Sleeping"),
                                    a = t("../geometry/Bounds"),
                                    s = t("../geometry/Axes"),
                                    c = t("../core/Common");
                                (n._warming = 0.4),
                                    (n._torqueDampen = 1),
                                    (n._minLength = 1e-6),
                                    (n.create = function (t) {
                                        var e = t;
                                        e.bodyA && !e.pointA && (e.pointA = { x: 0, y: 0 }), e.bodyB && !e.pointB && (e.pointB = { x: 0, y: 0 });
                                        var n = e.bodyA ? r.add(e.bodyA.position, e.pointA) : e.pointA,
                                            i = e.bodyB ? r.add(e.bodyB.position, e.pointB) : e.pointB,
                                            o = r.magnitude(r.sub(n, i));
                                        (e.length = void 0 !== e.length ? e.length : o),
                                            (e.id = e.id || c.nextId()),
                                            (e.label = e.label || "Constraint"),
                                            (e.type = "constraint"),
                                            (e.stiffness = e.stiffness || (e.length > 0 ? 1 : 0.7)),
                                            (e.damping = e.damping || 0),
                                            (e.angularStiffness = e.angularStiffness || 0),
                                            (e.angleA = e.bodyA ? e.bodyA.angle : e.angleA),
                                            (e.angleB = e.bodyB ? e.bodyB.angle : e.angleB),
                                            (e.plugin = {});
                                        var a = { visible: !0, lineWidth: 2, strokeStyle: "#ffffff", type: "line", anchors: !0 };
                                        return 0 === e.length && e.stiffness > 0.1 ? ((a.type = "pin"), (a.anchors = !1)) : e.stiffness < 0.9 && (a.type = "spring"), (e.render = c.extend(a, e.render)), e;
                                    }),
                                    (n.preSolveAll = function (t) {
                                        for (var e = 0; e < t.length; e += 1) {
                                            var n = t[e],
                                                i = n.constraintImpulse;
                                            n.isStatic || (0 === i.x && 0 === i.y && 0 === i.angle) || ((n.position.x += i.x), (n.position.y += i.y), (n.angle += i.angle));
                                        }
                                    }),
                                    (n.solveAll = function (t, e) {
                                        for (var i = 0; i < t.length; i += 1) {
                                            var r = t[i],
                                                o = !r.bodyA || (r.bodyA && r.bodyA.isStatic),
                                                a = !r.bodyB || (r.bodyB && r.bodyB.isStatic);
                                            (o || a) && n.solve(t[i], e);
                                        }
                                        for (i = 0; i < t.length; i += 1) (r = t[i]), (o = !r.bodyA || (r.bodyA && r.bodyA.isStatic)), (a = !r.bodyB || (r.bodyB && r.bodyB.isStatic)), o || a || n.solve(t[i], e);
                                    }),
                                    (n.solve = function (t, e) {
                                        var i = t.bodyA,
                                            o = t.bodyB,
                                            a = t.pointA,
                                            s = t.pointB;
                                        if (i || o) {
                                            i && !i.isStatic && (r.rotate(a, i.angle - t.angleA, a), (t.angleA = i.angle)), o && !o.isStatic && (r.rotate(s, o.angle - t.angleB, s), (t.angleB = o.angle));
                                            var c = a,
                                                l = s;
                                            if ((i && (c = r.add(i.position, a)), o && (l = r.add(o.position, s)), c && l)) {
                                                var u = r.sub(c, l),
                                                    h = r.magnitude(u);
                                                h < n._minLength && (h = n._minLength);
                                                var p,
                                                    d,
                                                    f,
                                                    m,
                                                    v,
                                                    g = (h - t.length) / h,
                                                    y = t.stiffness < 1 ? t.stiffness * e : t.stiffness,
                                                    x = r.mult(u, g * y),
                                                    _ = (i ? i.inverseMass : 0) + (o ? o.inverseMass : 0),
                                                    b = (i ? i.inverseInertia : 0) + (o ? o.inverseInertia : 0),
                                                    w = _ + b;
                                                if (t.damping) {
                                                    var M = r.create();
                                                    (f = r.div(u, h)), (v = r.sub((o && r.sub(o.position, o.positionPrev)) || M, (i && r.sub(i.position, i.positionPrev)) || M)), (m = r.dot(f, v));
                                                }
                                                i &&
                                                    !i.isStatic &&
                                                    ((d = i.inverseMass / _),
                                                    (i.constraintImpulse.x -= x.x * d),
                                                    (i.constraintImpulse.y -= x.y * d),
                                                    (i.position.x -= x.x * d),
                                                    (i.position.y -= x.y * d),
                                                    t.damping && ((i.positionPrev.x -= t.damping * f.x * m * d), (i.positionPrev.y -= t.damping * f.y * m * d)),
                                                    (p = (r.cross(a, x) / w) * n._torqueDampen * i.inverseInertia * (1 - t.angularStiffness)),
                                                    (i.constraintImpulse.angle -= p),
                                                    (i.angle -= p)),
                                                    o &&
                                                        !o.isStatic &&
                                                        ((d = o.inverseMass / _),
                                                        (o.constraintImpulse.x += x.x * d),
                                                        (o.constraintImpulse.y += x.y * d),
                                                        (o.position.x += x.x * d),
                                                        (o.position.y += x.y * d),
                                                        t.damping && ((o.positionPrev.x += t.damping * f.x * m * d), (o.positionPrev.y += t.damping * f.y * m * d)),
                                                        (p = (r.cross(s, x) / w) * n._torqueDampen * o.inverseInertia * (1 - t.angularStiffness)),
                                                        (o.constraintImpulse.angle += p),
                                                        (o.angle += p));
                                            }
                                        }
                                    }),
                                    (n.postSolveAll = function (t) {
                                        for (var e = 0; e < t.length; e++) {
                                            var c = t[e],
                                                l = c.constraintImpulse;
                                            if (!(c.isStatic || (0 === l.x && 0 === l.y && 0 === l.angle))) {
                                                o.set(c, !1);
                                                for (var u = 0; u < c.parts.length; u++) {
                                                    var h = c.parts[u];
                                                    i.translate(h.vertices, l),
                                                        u > 0 && ((h.position.x += l.x), (h.position.y += l.y)),
                                                        0 !== l.angle && (i.rotate(h.vertices, l.angle, c.position), s.rotate(h.axes, l.angle), u > 0 && r.rotateAbout(h.position, l.angle, c.position, h.position)),
                                                        a.update(h.bounds, h.vertices, c.velocity);
                                                }
                                                (l.angle *= n._warming), (l.x *= n._warming), (l.y *= n._warming);
                                            }
                                        }
                                    });
                            },
                            { "../core/Common": 14, "../core/Sleeping": 22, "../geometry/Axes": 25, "../geometry/Bounds": 26, "../geometry/Vector": 28, "../geometry/Vertices": 29 },
                        ],
                        13: [
                            function (t, e) {
                                var n = {};
                                e.exports = n;
                                var i = t("../geometry/Vertices"),
                                    r = t("../core/Sleeping"),
                                    o = t("../core/Mouse"),
                                    a = t("../core/Events"),
                                    s = t("../collision/Detector"),
                                    c = t("./Constraint"),
                                    l = t("../body/Composite"),
                                    u = t("../core/Common"),
                                    h = t("../geometry/Bounds");
                                (n.create = function (t, e) {
                                    var i = (t ? t.mouse : null) || (e ? e.mouse : null);
                                    i ||
                                        (t && t.render && t.render.canvas
                                            ? (i = o.create(t.render.canvas))
                                            : e && e.element
                                            ? (i = o.create(e.element))
                                            : ((i = o.create()), u.warn("MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected")));
                                    var r = c.create({ label: "Mouse Constraint", pointA: i.position, pointB: { x: 0, y: 0 }, length: 0.01, stiffness: 0.1, angularStiffness: 1, render: { strokeStyle: "#90EE90", lineWidth: 3 } }),
                                        s = { type: "mouseConstraint", mouse: i, element: null, body: null, constraint: r, collisionFilter: { category: 1, mask: 4294967295, group: 0 } },
                                        h = u.extend(s, e);
                                    return (
                                        a.on(t, "beforeUpdate", function () {
                                            var e = l.allBodies(t.world);
                                            n.update(h, e), n._triggerEvents(h);
                                        }),
                                        h
                                    );
                                }),
                                    (n.update = function (t, e) {
                                        var n = t.mouse,
                                            o = t.constraint,
                                            c = t.body;
                                        if (0 === n.button) {
                                            if (o.bodyB) r.set(o.bodyB, !1), (o.pointA = n.position);
                                            else
                                                for (var l = 0; l < e.length; l++)
                                                    if (((c = e[l]), h.contains(c.bounds, n.position) && s.canCollide(c.collisionFilter, t.collisionFilter)))
                                                        for (var u = c.parts.length > 1 ? 1 : 0; u < c.parts.length; u++) {
                                                            var p = c.parts[u];
                                                            if (i.contains(p.vertices, n.position)) {
                                                                (o.pointA = n.position),
                                                                    (o.bodyB = t.body = c),
                                                                    (o.pointB = { x: n.position.x - c.position.x, y: n.position.y - c.position.y }),
                                                                    (o.angleB = c.angle),
                                                                    r.set(c, !1),
                                                                    a.trigger(t, "startdrag", { mouse: n, body: c });
                                                                break;
                                                            }
                                                        }
                                        } else (o.bodyB = t.body = null), (o.pointB = null), c && a.trigger(t, "enddrag", { mouse: n, body: c });
                                    }),
                                    (n._triggerEvents = function (t) {
                                        var e = t.mouse,
                                            n = e.sourceEvents;
                                        n.mousemove && a.trigger(t, "mousemove", { mouse: e }), n.mousedown && a.trigger(t, "mousedown", { mouse: e }), n.mouseup && a.trigger(t, "mouseup", { mouse: e }), o.clearSourceEvents(e);
                                    });
                            },
                            {
                                "../body/Composite": 2,
                                "../collision/Detector": 5,
                                "../core/Common": 14,
                                "../core/Events": 16,
                                "../core/Mouse": 19,
                                "../core/Sleeping": 22,
                                "../geometry/Bounds": 26,
                                "../geometry/Vertices": 29,
                                "./Constraint": 12,
                            },
                        ],
                        14: [
                            function (t, n) {
                                (function (e) {
                                    var i = {};
                                    (n.exports = i),
                                        (function () {
                                            (i._nextId = 0),
                                                (i._seed = 0),
                                                (i._nowStartTime = +new Date()),
                                                (i.extend = function (t, e) {
                                                    var n, r;
                                                    "boolean" == typeof e ? ((n = 2), (r = e)) : ((n = 1), (r = !0));
                                                    for (var o = n; o < arguments.length; o++) {
                                                        var a = arguments[o];
                                                        if (a)
                                                            for (var s in a) r && a[s] && a[s].constructor === Object ? (t[s] && t[s].constructor !== Object ? (t[s] = a[s]) : ((t[s] = t[s] || {}), i.extend(t[s], r, a[s]))) : (t[s] = a[s]);
                                                    }
                                                    return t;
                                                }),
                                                (i.clone = function (t, e) {
                                                    return i.extend({}, e, t);
                                                }),
                                                (i.keys = function (t) {
                                                    if (Object.keys) return Object.keys(t);
                                                    var e = [];
                                                    for (var n in t) e.push(n);
                                                    return e;
                                                }),
                                                (i.values = function (t) {
                                                    var e = [];
                                                    if (Object.keys) {
                                                        for (var n = Object.keys(t), i = 0; i < n.length; i++) e.push(t[n[i]]);
                                                        return e;
                                                    }
                                                    for (var r in t) e.push(t[r]);
                                                    return e;
                                                }),
                                                (i.get = function (t, e, n, i) {
                                                    e = e.split(".").slice(n, i);
                                                    for (var r = 0; r < e.length; r += 1) t = t[e[r]];
                                                    return t;
                                                }),
                                                (i.set = function (t, e, n, r, o) {
                                                    var a = e.split(".").slice(r, o);
                                                    return (i.get(t, e, 0, -1)[a[a.length - 1]] = n), n;
                                                }),
                                                (i.shuffle = function (t) {
                                                    for (var e = t.length - 1; e > 0; e--) {
                                                        var n = Math.floor(i.random() * (e + 1)),
                                                            r = t[e];
                                                        (t[e] = t[n]), (t[n] = r);
                                                    }
                                                    return t;
                                                }),
                                                (i.choose = function (t) {
                                                    return t[Math.floor(i.random() * t.length)];
                                                }),
                                                (i.isElement = function (t) {
                                                    return "undefined" != typeof HTMLElement ? t instanceof HTMLElement : !!(t && t.nodeType && t.nodeName);
                                                }),
                                                (i.isArray = function (t) {
                                                    return "[object Array]" === Object.prototype.toString.call(t);
                                                }),
                                                (i.isFunction = function (t) {
                                                    return "function" == typeof t;
                                                }),
                                                (i.isPlainObject = function (t) {
                                                    return "object" == typeof t && t.constructor === Object;
                                                }),
                                                (i.isString = function (t) {
                                                    return "[object String]" === toString.call(t);
                                                }),
                                                (i.clamp = function (t, e, n) {
                                                    return t < e ? e : t > n ? n : t;
                                                }),
                                                (i.sign = function (t) {
                                                    return t < 0 ? -1 : 1;
                                                }),
                                                (i.now = function () {
                                                    if (window.performance) {
                                                        if (window.performance.now) return window.performance.now();
                                                        if (window.performance.webkitNow) return window.performance.webkitNow();
                                                    }
                                                    return new Date() - i._nowStartTime;
                                                }),
                                                (i.random = function (t, e) {
                                                    return (t = void 0 !== t ? t : 0), (e = void 0 !== e ? e : 1), t + n() * (e - t);
                                                });
                                            var n = function () {
                                                return (i._seed = (9301 * i._seed + 49297) % 233280), i._seed / 233280;
                                            };
                                            (i.colorToNumber = function (t) {
                                                return 3 == (t = t.replace("#", "")).length && (t = t.charAt(0) + t.charAt(0) + t.charAt(1) + t.charAt(1) + t.charAt(2) + t.charAt(2)), parseInt(t, 16);
                                            }),
                                                (i.logLevel = 1),
                                                (i.log = function () {
                                                    console && i.logLevel > 0 && i.logLevel <= 3 && console.log.apply(console, ["matter-js:"].concat(Array.prototype.slice.call(arguments)));
                                                }),
                                                (i.info = function () {
                                                    console && i.logLevel > 0 && i.logLevel <= 2 && console.info.apply(console, ["matter-js:"].concat(Array.prototype.slice.call(arguments)));
                                                }),
                                                (i.warn = function () {
                                                    console && i.logLevel > 0 && i.logLevel <= 3 && console.warn.apply(console, ["matter-js:"].concat(Array.prototype.slice.call(arguments)));
                                                }),
                                                (i.nextId = function () {
                                                    return i._nextId++;
                                                }),
                                                (i.indexOf = function (t, e) {
                                                    if (t.indexOf) return t.indexOf(e);
                                                    for (var n = 0; n < t.length; n++) if (t[n] === e) return n;
                                                    return -1;
                                                }),
                                                (i.map = function (t, e) {
                                                    if (t.map) return t.map(e);
                                                    for (var n = [], i = 0; i < t.length; i += 1) n.push(e(t[i]));
                                                    return n;
                                                }),
                                                (i.topologicalSort = function (t) {
                                                    var e = [],
                                                        n = [],
                                                        r = [];
                                                    for (var o in t) n[o] || r[o] || i._topologicalSort(o, n, r, t, e);
                                                    return e;
                                                }),
                                                (i._topologicalSort = function (t, e, n, r, o) {
                                                    var a = r[t] || [];
                                                    n[t] = !0;
                                                    for (var s = 0; s < a.length; s += 1) {
                                                        var c = a[s];
                                                        n[c] || e[c] || i._topologicalSort(c, e, n, r, o);
                                                    }
                                                    (n[t] = !1), (e[t] = !0), o.push(t);
                                                }),
                                                (i.chain = function () {
                                                    for (var t = [], e = 0; e < arguments.length; e += 1) {
                                                        var n = arguments[e];
                                                        n._chained ? t.push.apply(t, n._chained) : t.push(n);
                                                    }
                                                    var i = function () {
                                                        for (var e, n = new Array(arguments.length), i = 0, r = arguments.length; i < r; i++) n[i] = arguments[i];
                                                        for (i = 0; i < t.length; i += 1) {
                                                            var o = t[i].apply(e, n);
                                                            void 0 !== o && (e = o);
                                                        }
                                                        return e;
                                                    };
                                                    return (i._chained = t), i;
                                                }),
                                                (i.chainPathBefore = function (t, e, n) {
                                                    return i.set(t, e, i.chain(n, i.get(t, e)));
                                                }),
                                                (i.chainPathAfter = function (t, e, n) {
                                                    return i.set(t, e, i.chain(i.get(t, e), n));
                                                }),
                                                (i._requireGlobal = function (n, i) {
                                                    var r = "undefined" != typeof window ? window[n] : void 0 !== e ? e[n] : null;
                                                    return r || t(i);
                                                });
                                        })();
                                }.call(this, void 0 !== e ? e : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}));
                            },
                            {},
                        ],
                        15: [
                            function (t, e) {
                                var n = {};
                                e.exports = n;
                                var i = t("../body/World"),
                                    r = t("./Sleeping"),
                                    o = t("../collision/Resolver"),
                                    a = t("../render/Render"),
                                    s = t("../collision/Pairs"),
                                    c = (t("./Metrics"), t("../collision/Grid")),
                                    l = t("./Events"),
                                    u = t("../body/Composite"),
                                    h = t("../constraint/Constraint"),
                                    p = t("./Common"),
                                    d = t("../body/Body");
                                (n.create = function (t, e) {
                                    (e = p.isElement(t) ? e : t), (t = p.isElement(t) ? t : null), (e = e || {}), (t || e.render) && p.warn("Engine.create: engine.render is deprecated (see docs)");
                                    var n = { positionIterations: 6, velocityIterations: 4, constraintIterations: 2, enableSleeping: !1, events: [], plugin: {}, timing: { timestamp: 0, timeScale: 1 }, broadphase: { controller: c } },
                                        r = p.extend(n, e);
                                    if (t || r.render) {
                                        var o = { element: t, controller: a };
                                        r.render = p.extend(o, r.render);
                                    }
                                    return (
                                        r.render && r.render.controller && (r.render = r.render.controller.create(r.render)),
                                        r.render && (r.render.engine = r),
                                        (r.world = e.world || i.create(r.world)),
                                        (r.pairs = s.create()),
                                        (r.broadphase = r.broadphase.controller.create(r.broadphase)),
                                        (r.metrics = r.metrics || { extended: !1 }),
                                        r
                                    );
                                }),
                                    (n.update = function (t, e, i) {
                                        (e = e || 1e3 / 60), (i = i || 1);
                                        var a,
                                            c = t.world,
                                            p = t.timing,
                                            d = t.broadphase,
                                            f = [];
                                        p.timestamp += e * p.timeScale;
                                        var m = { timestamp: p.timestamp };
                                        l.trigger(t, "beforeUpdate", m);
                                        var v = u.allBodies(c),
                                            g = u.allConstraints(c);
                                        for (t.enableSleeping && r.update(v, p.timeScale), n._bodiesApplyGravity(v, c.gravity), n._bodiesUpdate(v, e, p.timeScale, i, c.bounds), h.preSolveAll(v), a = 0; a < t.constraintIterations; a++)
                                            h.solveAll(g, p.timeScale);
                                        h.postSolveAll(v), d.controller ? (c.isModified && d.controller.clear(d), d.controller.update(d, v, t, c.isModified), (f = d.pairsList)) : (f = v), c.isModified && u.setModified(c, !1, !1, !0);
                                        var y = d.detector(f, t),
                                            x = t.pairs,
                                            _ = p.timestamp;
                                        for (
                                            s.update(x, y, _),
                                                s.removeOld(x, _),
                                                t.enableSleeping && r.afterCollisions(x.list, p.timeScale),
                                                x.collisionStart.length > 0 && l.trigger(t, "collisionStart", { pairs: x.collisionStart }),
                                                o.preSolvePosition(x.list),
                                                a = 0;
                                            a < t.positionIterations;
                                            a++
                                        )
                                            o.solvePosition(x.list, p.timeScale);
                                        for (o.postSolvePosition(v), h.preSolveAll(v), a = 0; a < t.constraintIterations; a++) h.solveAll(g, p.timeScale);
                                        for (h.postSolveAll(v), o.preSolveVelocity(x.list), a = 0; a < t.velocityIterations; a++) o.solveVelocity(x.list, p.timeScale);
                                        return (
                                            x.collisionActive.length > 0 && l.trigger(t, "collisionActive", { pairs: x.collisionActive }),
                                            x.collisionEnd.length > 0 && l.trigger(t, "collisionEnd", { pairs: x.collisionEnd }),
                                            n._bodiesClearForces(v),
                                            l.trigger(t, "afterUpdate", m),
                                            t
                                        );
                                    }),
                                    (n.merge = function (t, e) {
                                        if ((p.extend(t, e), e.world)) {
                                            (t.world = e.world), n.clear(t);
                                            for (var i = u.allBodies(t.world), o = 0; o < i.length; o++) {
                                                var a = i[o];
                                                r.set(a, !1), (a.id = p.nextId());
                                            }
                                        }
                                    }),
                                    (n.clear = function (t) {
                                        var e = t.world;
                                        s.clear(t.pairs);
                                        var n = t.broadphase;
                                        if (n.controller) {
                                            var i = u.allBodies(e);
                                            n.controller.clear(n), n.controller.update(n, i, t, !0);
                                        }
                                    }),
                                    (n._bodiesClearForces = function (t) {
                                        for (var e = 0; e < t.length; e++) {
                                            var n = t[e];
                                            (n.force.x = 0), (n.force.y = 0), (n.torque = 0);
                                        }
                                    }),
                                    (n._bodiesApplyGravity = function (t, e) {
                                        var n = void 0 !== e.scale ? e.scale : 0.001;
                                        if ((0 !== e.x || 0 !== e.y) && 0 !== n)
                                            for (var i = 0; i < t.length; i++) {
                                                var r = t[i];
                                                r.isStatic || r.isSleeping || ((r.force.y += r.mass * e.y * n), (r.force.x += r.mass * e.x * n));
                                            }
                                    }),
                                    (n._bodiesUpdate = function (t, e, n, i) {
                                        for (var r = 0; r < t.length; r++) {
                                            var o = t[r];
                                            o.isStatic || o.isSleeping || d.update(o, e, n, i);
                                        }
                                    });
                            },
                            {
                                "../body/Body": 1,
                                "../body/Composite": 2,
                                "../body/World": 3,
                                "../collision/Grid": 6,
                                "../collision/Pairs": 8,
                                "../collision/Resolver": 10,
                                "../constraint/Constraint": 12,
                                "../render/Render": 31,
                                "./Common": 14,
                                "./Events": 16,
                                "./Metrics": 18,
                                "./Sleeping": 22,
                            },
                        ],
                        16: [
                            function (t, e) {
                                var n = {};
                                e.exports = n;
                                var i = t("./Common");
                                (n.on = function (t, e, n) {
                                    for (var i, r = e.split(" "), o = 0; o < r.length; o++) (i = r[o]), (t.events = t.events || {}), (t.events[i] = t.events[i] || []), t.events[i].push(n);
                                    return n;
                                }),
                                    (n.off = function (t, e, n) {
                                        if (e) {
                                            "function" == typeof e && ((n = e), (e = i.keys(t.events).join(" ")));
                                            for (var r = e.split(" "), o = 0; o < r.length; o++) {
                                                var a = t.events[r[o]],
                                                    s = [];
                                                if (n && a) for (var c = 0; c < a.length; c++) a[c] !== n && s.push(a[c]);
                                                t.events[r[o]] = s;
                                            }
                                        } else t.events = {};
                                    }),
                                    (n.trigger = function (t, e, n) {
                                        var r, o, a, s;
                                        if (t.events) {
                                            n || (n = {}), (r = e.split(" "));
                                            for (var c = 0; c < r.length; c++)
                                                if (((o = r[c]), (a = t.events[o]))) {
                                                    ((s = i.clone(n, !1)).name = o), (s.source = t);
                                                    for (var l = 0; l < a.length; l++) a[l].apply(t, [s]);
                                                }
                                        }
                                    });
                            },
                            { "./Common": 14 },
                        ],
                        17: [
                            function (t, e) {
                                var n = {};
                                e.exports = n;
                                var i = t("./Plugin"),
                                    r = t("./Common");
                                (n.name = "matter-js"),
                                    (n.version = "0.14.2"),
                                    (n.uses = []),
                                    (n.used = []),
                                    (n.use = function () {
                                        i.use(n, Array.prototype.slice.call(arguments));
                                    }),
                                    (n.before = function (t, e) {
                                        return (t = t.replace(/^Matter./, "")), r.chainPathBefore(n, t, e);
                                    }),
                                    (n.after = function (t, e) {
                                        return (t = t.replace(/^Matter./, "")), r.chainPathAfter(n, t, e);
                                    });
                            },
                            { "./Common": 14, "./Plugin": 20 },
                        ],
                        18: [function () {}, { "../body/Composite": 2, "./Common": 14 }],
                        19: [
                            function (t, e) {
                                var n = {};
                                e.exports = n;
                                var i = t("../core/Common");
                                (n.create = function (t) {
                                    var e = {};
                                    return (
                                        t || i.log("Mouse.create: element was undefined, defaulting to document.body", "warn"),
                                        (e.element = t || document.body),
                                        (e.absolute = { x: 0, y: 0 }),
                                        (e.position = { x: 0, y: 0 }),
                                        (e.mousedownPosition = { x: 0, y: 0 }),
                                        (e.mouseupPosition = { x: 0, y: 0 }),
                                        (e.offset = { x: 0, y: 0 }),
                                        (e.scale = { x: 1, y: 1 }),
                                        (e.wheelDelta = 0),
                                        (e.button = -1),
                                        (e.pixelRatio = e.element.getAttribute("data-pixel-ratio") || 1),
                                        (e.sourceEvents = { mousemove: null, mousedown: null, mouseup: null, mousewheel: null }),
                                        (e.mousemove = function (t) {
                                            var i = n._getRelativeMousePosition(t, e.element, e.pixelRatio),
                                                r = t.changedTouches;
                                            r && ((e.button = 0), t.preventDefault()),
                                                (e.absolute.x = i.x),
                                                (e.absolute.y = i.y),
                                                (e.position.x = e.absolute.x * e.scale.x + e.offset.x),
                                                (e.position.y = e.absolute.y * e.scale.y + e.offset.y),
                                                (e.sourceEvents.mousemove = t);
                                        }),
                                        (e.mousedown = function (t) {
                                            var i = n._getRelativeMousePosition(t, e.element, e.pixelRatio),
                                                r = t.changedTouches;
                                            r ? ((e.button = 0), t.preventDefault()) : (e.button = t.button),
                                                (e.absolute.x = i.x),
                                                (e.absolute.y = i.y),
                                                (e.position.x = e.absolute.x * e.scale.x + e.offset.x),
                                                (e.position.y = e.absolute.y * e.scale.y + e.offset.y),
                                                (e.mousedownPosition.x = e.position.x),
                                                (e.mousedownPosition.y = e.position.y),
                                                (e.sourceEvents.mousedown = t);
                                        }),
                                        (e.mouseup = function (t) {
                                            var i = n._getRelativeMousePosition(t, e.element, e.pixelRatio),
                                                r = t.changedTouches;
                                            r && t.preventDefault(),
                                                (e.button = -1),
                                                (e.absolute.x = i.x),
                                                (e.absolute.y = i.y),
                                                (e.position.x = e.absolute.x * e.scale.x + e.offset.x),
                                                (e.position.y = e.absolute.y * e.scale.y + e.offset.y),
                                                (e.mouseupPosition.x = e.position.x),
                                                (e.mouseupPosition.y = e.position.y),
                                                (e.sourceEvents.mouseup = t);
                                        }),
                                        (e.mousewheel = function (t) {
                                            (e.wheelDelta = Math.max(-1, Math.min(1, t.wheelDelta || -t.detail))), t.preventDefault();
                                        }),
                                        n.setElement(e, e.element),
                                        e
                                    );
                                }),
                                    (n.setElement = function (t, e) {
                                        (t.element = e),
                                            e.addEventListener("mousemove", t.mousemove),
                                            e.addEventListener("mousedown", t.mousedown),
                                            e.addEventListener("mouseup", t.mouseup),
                                            e.addEventListener("mousewheel", t.mousewheel),
                                            e.addEventListener("DOMMouseScroll", t.mousewheel),
                                            e.addEventListener("touchmove", t.mousemove),
                                            e.addEventListener("touchstart", t.mousedown),
                                            e.addEventListener("touchend", t.mouseup);
                                    }),
                                    (n.clearSourceEvents = function (t) {
                                        (t.sourceEvents.mousemove = null), (t.sourceEvents.mousedown = null), (t.sourceEvents.mouseup = null), (t.sourceEvents.mousewheel = null), (t.wheelDelta = 0);
                                    }),
                                    (n.setOffset = function (t, e) {
                                        (t.offset.x = e.x), (t.offset.y = e.y), (t.position.x = t.absolute.x * t.scale.x + t.offset.x), (t.position.y = t.absolute.y * t.scale.y + t.offset.y);
                                    }),
                                    (n.setScale = function (t, e) {
                                        (t.scale.x = e.x), (t.scale.y = e.y), (t.position.x = t.absolute.x * t.scale.x + t.offset.x), (t.position.y = t.absolute.y * t.scale.y + t.offset.y);
                                    }),
                                    (n._getRelativeMousePosition = function (t, e, n) {
                                        var i,
                                            r,
                                            o = e.getBoundingClientRect(),
                                            a = document.documentElement || document.body.parentNode || document.body,
                                            s = void 0 !== window.pageXOffset ? window.pageXOffset : a.scrollLeft,
                                            c = void 0 !== window.pageYOffset ? window.pageYOffset : a.scrollTop,
                                            l = t.changedTouches;
                                        return (
                                            l ? ((i = l[0].pageX - o.left - s), (r = l[0].pageY - o.top - c)) : ((i = t.pageX - o.left - s), (r = t.pageY - o.top - c)),
                                            { x: i / ((e.clientWidth / (e.width || e.clientWidth)) * n), y: r / ((e.clientHeight / (e.height || e.clientHeight)) * n) }
                                        );
                                    });
                            },
                            { "../core/Common": 14 },
                        ],
                        20: [
                            function (t, e) {
                                var n = {};
                                e.exports = n;
                                var i = t("./Common");
                                (n._registry = {}),
                                    (n.register = function (t) {
                                        if ((n.isPlugin(t) || i.warn("Plugin.register:", n.toString(t), "does not implement all required fields."), t.name in n._registry)) {
                                            var e = n._registry[t.name],
                                                r = n.versionParse(t.version).number,
                                                o = n.versionParse(e.version).number;
                                            r > o
                                                ? (i.warn("Plugin.register:", n.toString(e), "was upgraded to", n.toString(t)), (n._registry[t.name] = t))
                                                : r < o
                                                ? i.warn("Plugin.register:", n.toString(e), "can not be downgraded to", n.toString(t))
                                                : t !== e && i.warn("Plugin.register:", n.toString(t), "is already registered to different plugin object");
                                        } else n._registry[t.name] = t;
                                        return t;
                                    }),
                                    (n.resolve = function (t) {
                                        return n._registry[n.dependencyParse(t).name];
                                    }),
                                    (n.toString = function (t) {
                                        return "string" == typeof t ? t : (t.name || "anonymous") + "@" + (t.version || t.range || "0.0.0");
                                    }),
                                    (n.isPlugin = function (t) {
                                        return t && t.name && t.version && t.install;
                                    }),
                                    (n.isUsed = function (t, e) {
                                        return t.used.indexOf(e) > -1;
                                    }),
                                    (n.isFor = function (t, e) {
                                        var i = t.for && n.dependencyParse(t.for);
                                        return !t.for || (e.name === i.name && n.versionSatisfies(e.version, i.range));
                                    }),
                                    (n.use = function (t, e) {
                                        if (((t.uses = (t.uses || []).concat(e || [])), 0 !== t.uses.length)) {
                                            for (var r = n.dependencies(t), o = i.topologicalSort(r), a = [], s = 0; s < o.length; s += 1)
                                                if (o[s] !== t.name) {
                                                    var c = n.resolve(o[s]);
                                                    c
                                                        ? n.isUsed(t, c.name) ||
                                                          (n.isFor(c, t) || (i.warn("Plugin.use:", n.toString(c), "is for", c.for, "but installed on", n.toString(t) + "."), (c._warned = !0)),
                                                          c.install ? c.install(t) : (i.warn("Plugin.use:", n.toString(c), "does not specify an install function."), (c._warned = !0)),
                                                          c._warned ? (a.push("🔶 " + n.toString(c)), delete c._warned) : a.push("✅ " + n.toString(c)),
                                                          t.used.push(c.name))
                                                        : a.push("❌ " + o[s]);
                                                }
                                            a.length > 0 && i.info(a.join("  "));
                                        } else i.warn("Plugin.use:", n.toString(t), "does not specify any dependencies to install.");
                                    }),
                                    (n.dependencies = function (t, e) {
                                        var r = n.dependencyParse(t),
                                            o = r.name;
                                        if (!(o in (e = e || {}))) {
                                            (t = n.resolve(t) || t),
                                                (e[o] = i.map(t.uses || [], function (e) {
                                                    n.isPlugin(e) && n.register(e);
                                                    var o = n.dependencyParse(e),
                                                        a = n.resolve(e);
                                                    return (
                                                        a && !n.versionSatisfies(a.version, o.range)
                                                            ? (i.warn("Plugin.dependencies:", n.toString(a), "does not satisfy", n.toString(o), "used by", n.toString(r) + "."), (a._warned = !0), (t._warned = !0))
                                                            : a || (i.warn("Plugin.dependencies:", n.toString(e), "used by", n.toString(r), "could not be resolved."), (t._warned = !0)),
                                                        o.name
                                                    );
                                                }));
                                            for (var a = 0; a < e[o].length; a += 1) n.dependencies(e[o][a], e);
                                            return e;
                                        }
                                    }),
                                    (n.dependencyParse = function (t) {
                                        return i.isString(t)
                                            ? (/^[\w-]+(@(\*|[\^~]?\d+\.\d+\.\d+(-[0-9A-Za-z-]+)?))?$/.test(t) || i.warn("Plugin.dependencyParse:", t, "is not a valid dependency string."),
                                              { name: t.split("@")[0], range: t.split("@")[1] || "*" })
                                            : { name: t.name, range: t.range || t.version };
                                    }),
                                    (n.versionParse = function (t) {
                                        /^\*|[\^~]?\d+\.\d+\.\d+(-[0-9A-Za-z-]+)?$/.test(t) || i.warn("Plugin.versionParse:", t, "is not a valid version or range.");
                                        var e = t.split("-");
                                        t = e[0];
                                        var n = isNaN(Number(t[0])),
                                            r = n ? t.substr(1) : t,
                                            o = i.map(r.split("."), function (t) {
                                                return Number(t);
                                            });
                                        return { isRange: n, version: r, range: t, operator: n ? t[0] : "", parts: o, prerelease: e[1], number: 1e8 * o[0] + 1e4 * o[1] + o[2] };
                                    }),
                                    (n.versionSatisfies = function (t, e) {
                                        e = e || "*";
                                        var i = n.versionParse(e),
                                            r = i.parts,
                                            o = n.versionParse(t),
                                            a = o.parts;
                                        if (i.isRange) {
                                            if ("*" === i.operator || "*" === t) return !0;
                                            if ("~" === i.operator) return a[0] === r[0] && a[1] === r[1] && a[2] >= r[2];
                                            if ("^" === i.operator) return r[0] > 0 ? a[0] === r[0] && o.number >= i.number : r[1] > 0 ? a[1] === r[1] && a[2] >= r[2] : a[2] === r[2];
                                        }
                                        return t === e || "*" === t;
                                    });
                            },
                            { "./Common": 14 },
                        ],
                        21: [
                            function (t, e) {
                                var n = {};
                                e.exports = n;
                                var i,
                                    r,
                                    o,
                                    a = t("./Events"),
                                    s = t("./Engine"),
                                    c = t("./Common");
                                "undefined" != typeof window &&
                                    ((i = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame),
                                    (r = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame)),
                                    i ||
                                        ((i = function (t) {
                                            o = setTimeout(function () {
                                                t(c.now());
                                            }, 1e3 / 60);
                                        }),
                                        (r = function () {
                                            clearTimeout(o);
                                        })),
                                    (n.create = function (t) {
                                        var e = c.extend(
                                            { fps: 60, correction: 1, deltaSampleSize: 60, counterTimestamp: 0, frameCounter: 0, deltaHistory: [], timePrev: null, timeScalePrev: 1, frameRequestId: null, isFixed: !1, enabled: !0 },
                                            t
                                        );
                                        return (e.delta = e.delta || 1e3 / e.fps), (e.deltaMin = e.deltaMin || 1e3 / e.fps), (e.deltaMax = e.deltaMax || 1e3 / (0.5 * e.fps)), (e.fps = 1e3 / e.delta), e;
                                    }),
                                    (n.run = function (t, e) {
                                        return (
                                            void 0 !== t.positionIterations && ((e = t), (t = n.create())),
                                            (function r(o) {
                                                (t.frameRequestId = i(r)), o && t.enabled && n.tick(t, e, o);
                                            })(),
                                            t
                                        );
                                    }),
                                    (n.tick = function (t, e, n) {
                                        var i,
                                            r = e.timing,
                                            o = 1,
                                            c = { timestamp: r.timestamp };
                                        a.trigger(t, "beforeTick", c),
                                            a.trigger(e, "beforeTick", c),
                                            t.isFixed
                                                ? (i = t.delta)
                                                : ((i = n - t.timePrev || t.delta),
                                                  (t.timePrev = n),
                                                  t.deltaHistory.push(i),
                                                  (t.deltaHistory = t.deltaHistory.slice(-t.deltaSampleSize)),
                                                  (i = (i = (i = Math.min.apply(null, t.deltaHistory)) < t.deltaMin ? t.deltaMin : i) > t.deltaMax ? t.deltaMax : i),
                                                  (o = i / t.delta),
                                                  (t.delta = i)),
                                            0 !== t.timeScalePrev && (o *= r.timeScale / t.timeScalePrev),
                                            0 === r.timeScale && (o = 0),
                                            (t.timeScalePrev = r.timeScale),
                                            (t.correction = o),
                                            (t.frameCounter += 1),
                                            n - t.counterTimestamp >= 1e3 && ((t.fps = t.frameCounter * ((n - t.counterTimestamp) / 1e3)), (t.counterTimestamp = n), (t.frameCounter = 0)),
                                            a.trigger(t, "tick", c),
                                            a.trigger(e, "tick", c),
                                            e.world.isModified && e.render && e.render.controller && e.render.controller.clear && e.render.controller.clear(e.render),
                                            a.trigger(t, "beforeUpdate", c),
                                            s.update(e, i, o),
                                            a.trigger(t, "afterUpdate", c),
                                            e.render &&
                                                e.render.controller &&
                                                (a.trigger(t, "beforeRender", c), a.trigger(e, "beforeRender", c), e.render.controller.world(e.render), a.trigger(t, "afterRender", c), a.trigger(e, "afterRender", c)),
                                            a.trigger(t, "afterTick", c),
                                            a.trigger(e, "afterTick", c);
                                    }),
                                    (n.stop = function (t) {
                                        r(t.frameRequestId);
                                    }),
                                    (n.start = function (t, e) {
                                        n.run(t, e);
                                    });
                            },
                            { "./Common": 14, "./Engine": 15, "./Events": 16 },
                        ],
                        22: [
                            function (t, e) {
                                var n = {};
                                e.exports = n;
                                var i = t("./Events");
                                (n._motionWakeThreshold = 0.18),
                                    (n._motionSleepThreshold = 0.08),
                                    (n._minBias = 0.9),
                                    (n.update = function (t, e) {
                                        for (var i = e * e * e, r = 0; r < t.length; r++) {
                                            var o = t[r],
                                                a = o.speed * o.speed + o.angularSpeed * o.angularSpeed;
                                            if (0 === o.force.x && 0 === o.force.y) {
                                                var s = Math.min(o.motion, a),
                                                    c = Math.max(o.motion, a);
                                                (o.motion = n._minBias * s + (1 - n._minBias) * c),
                                                    o.sleepThreshold > 0 && o.motion < n._motionSleepThreshold * i ? ((o.sleepCounter += 1), o.sleepCounter >= o.sleepThreshold && n.set(o, !0)) : o.sleepCounter > 0 && (o.sleepCounter -= 1);
                                            } else n.set(o, !1);
                                        }
                                    }),
                                    (n.afterCollisions = function (t, e) {
                                        for (var i = e * e * e, r = 0; r < t.length; r++) {
                                            var o = t[r];
                                            if (o.isActive) {
                                                var a = o.collision,
                                                    s = a.bodyA.parent,
                                                    c = a.bodyB.parent;
                                                if (!((s.isSleeping && c.isSleeping) || s.isStatic || c.isStatic) && (s.isSleeping || c.isSleeping)) {
                                                    var l = s.isSleeping && !s.isStatic ? s : c,
                                                        u = l === s ? c : s;
                                                    !l.isStatic && u.motion > n._motionWakeThreshold * i && n.set(l, !1);
                                                }
                                            }
                                        }
                                    }),
                                    (n.set = function (t, e) {
                                        var n = t.isSleeping;
                                        e
                                            ? ((t.isSleeping = !0),
                                              (t.sleepCounter = t.sleepThreshold),
                                              (t.positionImpulse.x = 0),
                                              (t.positionImpulse.y = 0),
                                              (t.positionPrev.x = t.position.x),
                                              (t.positionPrev.y = t.position.y),
                                              (t.anglePrev = t.angle),
                                              (t.speed = 0),
                                              (t.angularSpeed = 0),
                                              (t.motion = 0),
                                              n || i.trigger(t, "sleepStart"))
                                            : ((t.isSleeping = !1), (t.sleepCounter = 0), n && i.trigger(t, "sleepEnd"));
                                    });
                            },
                            { "./Events": 16 },
                        ],
                        23: [
                            function (t, e) {
                                var n = {};
                                e.exports = n;
                                var i,
                                    r = t("../geometry/Vertices"),
                                    o = t("../core/Common"),
                                    a = t("../body/Body"),
                                    s = t("../geometry/Bounds"),
                                    c = t("../geometry/Vector");
                                (n.rectangle = function (t, e, n, i, s) {
                                    s = s || {};
                                    var c = { label: "Rectangle Body", position: { x: t, y: e }, vertices: r.fromPath("L 0 0 L " + n + " 0 L " + n + " " + i + " L 0 " + i) };
                                    if (s.chamfer) {
                                        var l = s.chamfer;
                                        (c.vertices = r.chamfer(c.vertices, l.radius, l.quality, l.qualityMin, l.qualityMax)), delete s.chamfer;
                                    }
                                    return a.create(o.extend({}, c, s));
                                }),
                                    (n.trapezoid = function (t, e, n, i, s, c) {
                                        c = c || {};
                                        var l,
                                            u = (1 - 2 * (s *= 0.5)) * n,
                                            h = n * s,
                                            p = h + u,
                                            d = p + h;
                                        l = s < 0.5 ? "L 0 0 L " + h + " " + -i + " L " + p + " " + -i + " L " + d + " 0" : "L 0 0 L " + p + " " + -i + " L " + d + " 0";
                                        var f = { label: "Trapezoid Body", position: { x: t, y: e }, vertices: r.fromPath(l) };
                                        if (c.chamfer) {
                                            var m = c.chamfer;
                                            (f.vertices = r.chamfer(f.vertices, m.radius, m.quality, m.qualityMin, m.qualityMax)), delete c.chamfer;
                                        }
                                        return a.create(o.extend({}, f, c));
                                    }),
                                    (n.circle = function (t, e, i, r, a) {
                                        r = r || {};
                                        var s = { label: "Circle Body", circleRadius: i };
                                        a = a || 25;
                                        var c = Math.ceil(Math.max(10, Math.min(a, i)));
                                        return c % 2 == 1 && (c += 1), n.polygon(t, e, c, i, o.extend({}, s, r));
                                    }),
                                    (n.polygon = function (t, e, i, s, c) {
                                        if (((c = c || {}), i < 3)) return n.circle(t, e, s, c);
                                        for (var l = (2 * Math.PI) / i, u = "", h = 0.5 * l, p = 0; p < i; p += 1) {
                                            var d = h + p * l,
                                                f = Math.cos(d) * s,
                                                m = Math.sin(d) * s;
                                            u += "L " + f.toFixed(3) + " " + m.toFixed(3) + " ";
                                        }
                                        var v = { label: "Polygon Body", position: { x: t, y: e }, vertices: r.fromPath(u) };
                                        if (c.chamfer) {
                                            var g = c.chamfer;
                                            (v.vertices = r.chamfer(v.vertices, g.radius, g.quality, g.qualityMin, g.qualityMax)), delete c.chamfer;
                                        }
                                        return a.create(o.extend({}, v, c));
                                    }),
                                    (n.fromVertices = function (t, e, n, l, u, h, p) {
                                        var d, f, m, v, g, y, x, _, b;
                                        for (
                                            i || (i = o._requireGlobal("decomp", "poly-decomp")),
                                                l = l || {},
                                                f = [],
                                                u = void 0 !== u && u,
                                                h = void 0 !== h ? h : 0.01,
                                                p = void 0 !== p ? p : 10,
                                                i || o.warn("Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull."),
                                                o.isArray(n[0]) || (n = [n]),
                                                _ = 0;
                                            _ < n.length;
                                            _ += 1
                                        )
                                            if (((v = n[_]), (m = r.isConvex(v)) || !i)) (v = m ? r.clockwiseSort(v) : r.hull(v)), f.push({ position: { x: t, y: e }, vertices: v });
                                            else {
                                                var w = v.map(function (t) {
                                                    return [t.x, t.y];
                                                });
                                                i.makeCCW(w), !1 !== h && i.removeCollinearPoints(w, h);
                                                var M = i.quickDecomp(w);
                                                for (g = 0; g < M.length; g++) {
                                                    var S = M[g],
                                                        T = S.map(function (t) {
                                                            return { x: t[0], y: t[1] };
                                                        });
                                                    (p > 0 && r.area(T) < p) || f.push({ position: r.centre(T), vertices: T });
                                                }
                                            }
                                        for (g = 0; g < f.length; g++) f[g] = a.create(o.extend(f[g], l));
                                        if (u)
                                            for (g = 0; g < f.length; g++) {
                                                var E = f[g];
                                                for (y = g + 1; y < f.length; y++) {
                                                    var A = f[y];
                                                    if (s.overlaps(E.bounds, A.bounds)) {
                                                        var P = E.vertices,
                                                            L = A.vertices;
                                                        for (x = 0; x < E.vertices.length; x++)
                                                            for (b = 0; b < A.vertices.length; b++) {
                                                                var C = c.magnitudeSquared(c.sub(P[(x + 1) % P.length], L[b])),
                                                                    R = c.magnitudeSquared(c.sub(P[x], L[(b + 1) % L.length]));
                                                                C < 5 && R < 5 && ((P[x].isInternal = !0), (L[b].isInternal = !0));
                                                            }
                                                    }
                                                }
                                            }
                                        return f.length > 1 ? ((d = a.create(o.extend({ parts: f.slice(0) }, l))), a.setPosition(d, { x: t, y: e }), d) : f[0];
                                    });
                            },
                            { "../body/Body": 1, "../core/Common": 14, "../geometry/Bounds": 26, "../geometry/Vector": 28, "../geometry/Vertices": 29 },
                        ],
                        24: [
                            function (t, e) {
                                var n = {};
                                e.exports = n;
                                var i = t("../body/Composite"),
                                    r = t("../constraint/Constraint"),
                                    o = t("../core/Common"),
                                    a = t("../body/Body"),
                                    s = t("./Bodies");
                                (n.stack = function (t, e, n, r, o, s, c) {
                                    for (var l, u = i.create({ label: "Stack" }), h = t, p = e, d = 0, f = 0; f < r; f++) {
                                        for (var m = 0, v = 0; v < n; v++) {
                                            var g = c(h, p, v, f, l, d);
                                            if (g) {
                                                var y = g.bounds.max.y - g.bounds.min.y,
                                                    x = g.bounds.max.x - g.bounds.min.x;
                                                y > m && (m = y), a.translate(g, { x: 0.5 * x, y: 0.5 * y }), (h = g.bounds.max.x + o), i.addBody(u, g), (l = g), (d += 1);
                                            } else h += o;
                                        }
                                        (p += m + s), (h = t);
                                    }
                                    return u;
                                }),
                                    (n.chain = function (t, e, n, a, s, c) {
                                        for (var l = t.bodies, u = 1; u < l.length; u++) {
                                            var h = l[u - 1],
                                                p = l[u],
                                                d = h.bounds.max.y - h.bounds.min.y,
                                                f = h.bounds.max.x - h.bounds.min.x,
                                                m = p.bounds.max.y - p.bounds.min.y,
                                                v = p.bounds.max.x - p.bounds.min.x,
                                                g = { bodyA: h, pointA: { x: f * e, y: d * n }, bodyB: p, pointB: { x: v * a, y: m * s } },
                                                y = o.extend(g, c);
                                            i.addConstraint(t, r.create(y));
                                        }
                                        return (t.label += " Chain"), t;
                                    }),
                                    (n.mesh = function (t, e, n, a, s) {
                                        var c,
                                            l,
                                            u,
                                            h,
                                            p,
                                            d = t.bodies;
                                        for (c = 0; c < n; c++) {
                                            for (l = 1; l < e; l++) (u = d[l - 1 + c * e]), (h = d[l + c * e]), i.addConstraint(t, r.create(o.extend({ bodyA: u, bodyB: h }, s)));
                                            if (c > 0)
                                                for (l = 0; l < e; l++)
                                                    (u = d[l + (c - 1) * e]),
                                                        (h = d[l + c * e]),
                                                        i.addConstraint(t, r.create(o.extend({ bodyA: u, bodyB: h }, s))),
                                                        a && l > 0 && ((p = d[l - 1 + (c - 1) * e]), i.addConstraint(t, r.create(o.extend({ bodyA: p, bodyB: h }, s)))),
                                                        a && l < e - 1 && ((p = d[l + 1 + (c - 1) * e]), i.addConstraint(t, r.create(o.extend({ bodyA: p, bodyB: h }, s))));
                                        }
                                        return (t.label += " Mesh"), t;
                                    }),
                                    (n.pyramid = function (t, e, i, r, o, s, c) {
                                        return n.stack(t, e, i, r, o, s, function (e, n, s, l, u, h) {
                                            var p = Math.min(r, Math.ceil(i / 2)),
                                                d = u ? u.bounds.max.x - u.bounds.min.x : 0;
                                            if (!(l > p)) {
                                                var f = (l = p - l),
                                                    m = i - 1 - l;
                                                if (!(s < f || s > m)) {
                                                    1 === h && a.translate(u, { x: (s + (i % 2 == 1 ? 1 : -1)) * d, y: 0 });
                                                    var v = u ? s * d : 0;
                                                    return c(t + v + s * o, n, s, l, u, h);
                                                }
                                            }
                                        });
                                    }),
                                    (n.newtonsCradle = function (t, e, n, o, a) {
                                        for (var c = i.create({ label: "Newtons Cradle" }), l = 0; l < n; l++) {
                                            var u = s.circle(t + l * (1.9 * o), e + a, o, { inertia: 1 / 0, restitution: 1, friction: 0, frictionAir: 1e-4, slop: 1 }),
                                                h = r.create({ pointA: { x: t + l * (1.9 * o), y: e }, bodyB: u });
                                            i.addBody(c, u), i.addConstraint(c, h);
                                        }
                                        return c;
                                    }),
                                    (n.car = function (t, e, n, o, c) {
                                        var l = a.nextGroup(!0),
                                            u = 0.5 * -n + 20,
                                            h = 0.5 * n - 20,
                                            p = i.create({ label: "Car" }),
                                            d = s.rectangle(t, e, n, o, { collisionFilter: { group: l }, chamfer: { radius: 0.5 * o }, density: 2e-4 }),
                                            f = s.circle(t + u, e + 0, c, { collisionFilter: { group: l }, friction: 0.8 }),
                                            m = s.circle(t + h, e + 0, c, { collisionFilter: { group: l }, friction: 0.8 }),
                                            v = r.create({ bodyB: d, pointB: { x: u, y: 0 }, bodyA: f, stiffness: 1, length: 0 }),
                                            g = r.create({ bodyB: d, pointB: { x: h, y: 0 }, bodyA: m, stiffness: 1, length: 0 });
                                        return i.addBody(p, d), i.addBody(p, f), i.addBody(p, m), i.addConstraint(p, v), i.addConstraint(p, g), p;
                                    }),
                                    (n.softBody = function (t, e, i, r, a, c, l, u, h, p) {
                                        (h = o.extend({ inertia: 1 / 0 }, h)), (p = o.extend({ stiffness: 0.2, render: { type: "line", anchors: !1 } }, p));
                                        var d = n.stack(t, e, i, r, a, c, function (t, e) {
                                            return s.circle(t, e, u, h);
                                        });
                                        return n.mesh(d, i, r, l, p), (d.label = "Soft Body"), d;
                                    });
                            },
                            { "../body/Body": 1, "../body/Composite": 2, "../constraint/Constraint": 12, "../core/Common": 14, "./Bodies": 23 },
                        ],
                        25: [
                            function (t, e) {
                                var n = {};
                                e.exports = n;
                                var i = t("../geometry/Vector"),
                                    r = t("../core/Common");
                                (n.fromVertices = function (t) {
                                    for (var e = {}, n = 0; n < t.length; n++) {
                                        var o = (n + 1) % t.length,
                                            a = i.normalise({ x: t[o].y - t[n].y, y: t[n].x - t[o].x }),
                                            s = 0 === a.y ? 1 / 0 : a.x / a.y;
                                        (s = s.toFixed(3).toString()), (e[s] = a);
                                    }
                                    return r.values(e);
                                }),
                                    (n.rotate = function (t, e) {
                                        if (0 !== e)
                                            for (var n = Math.cos(e), i = Math.sin(e), r = 0; r < t.length; r++) {
                                                var o,
                                                    a = t[r];
                                                (o = a.x * n - a.y * i), (a.y = a.x * i + a.y * n), (a.x = o);
                                            }
                                    });
                            },
                            { "../core/Common": 14, "../geometry/Vector": 28 },
                        ],
                        26: [
                            function (t, e) {
                                var n = {};
                                (e.exports = n),
                                    (n.create = function (t) {
                                        var e = { min: { x: 0, y: 0 }, max: { x: 0, y: 0 } };
                                        return t && n.update(e, t), e;
                                    }),
                                    (n.update = function (t, e, n) {
                                        (t.min.x = 1 / 0), (t.max.x = -1 / 0), (t.min.y = 1 / 0), (t.max.y = -1 / 0);
                                        for (var i = 0; i < e.length; i++) {
                                            var r = e[i];
                                            r.x > t.max.x && (t.max.x = r.x), r.x < t.min.x && (t.min.x = r.x), r.y > t.max.y && (t.max.y = r.y), r.y < t.min.y && (t.min.y = r.y);
                                        }
                                        n && (n.x > 0 ? (t.max.x += n.x) : (t.min.x += n.x), n.y > 0 ? (t.max.y += n.y) : (t.min.y += n.y));
                                    }),
                                    (n.contains = function (t, e) {
                                        return e.x >= t.min.x && e.x <= t.max.x && e.y >= t.min.y && e.y <= t.max.y;
                                    }),
                                    (n.overlaps = function (t, e) {
                                        return t.min.x <= e.max.x && t.max.x >= e.min.x && t.max.y >= e.min.y && t.min.y <= e.max.y;
                                    }),
                                    (n.translate = function (t, e) {
                                        (t.min.x += e.x), (t.max.x += e.x), (t.min.y += e.y), (t.max.y += e.y);
                                    }),
                                    (n.shift = function (t, e) {
                                        var n = t.max.x - t.min.x,
                                            i = t.max.y - t.min.y;
                                        (t.min.x = e.x), (t.max.x = e.x + n), (t.min.y = e.y), (t.max.y = e.y + i);
                                    });
                            },
                            {},
                        ],
                        27: [
                            function (t, e) {
                                var n = {};
                                (e.exports = n), t("../geometry/Bounds");
                                var i = t("../core/Common");
                                (n.pathToVertices = function (t, e) {
                                    "undefined" == typeof window || "SVGPathSeg" in window || i.warn("Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.");
                                    var r,
                                        o,
                                        a,
                                        s,
                                        c,
                                        l,
                                        u,
                                        h,
                                        p,
                                        d,
                                        f,
                                        m,
                                        v = [],
                                        g = 0,
                                        y = 0,
                                        x = 0;
                                    e = e || 15;
                                    var _ = function (t, e, n) {
                                            var i = n % 2 == 1 && n > 1;
                                            if (!p || t != p.x || e != p.y) {
                                                p && i ? ((f = p.x), (m = p.y)) : ((f = 0), (m = 0));
                                                var r = { x: f + t, y: m + e };
                                                (!i && p) || (p = r), v.push(r), (y = f + t), (x = m + e);
                                            }
                                        },
                                        b = function (t) {
                                            var e = t.pathSegTypeAsLetter.toUpperCase();
                                            if ("Z" !== e) {
                                                switch (e) {
                                                    case "M":
                                                    case "L":
                                                    case "T":
                                                    case "C":
                                                    case "S":
                                                    case "Q":
                                                        (y = t.x), (x = t.y);
                                                        break;
                                                    case "H":
                                                        y = t.x;
                                                        break;
                                                    case "V":
                                                        x = t.y;
                                                }
                                                _(y, x, t.pathSegType);
                                            }
                                        };
                                    for (n._svgPathToAbsolute(t), a = t.getTotalLength(), l = [], r = 0; r < t.pathSegList.numberOfItems; r += 1) l.push(t.pathSegList.getItem(r));
                                    for (u = l.concat(); g < a; ) {
                                        if (((d = t.getPathSegAtLength(g)), (c = l[d]) != h)) {
                                            for (; u.length && u[0] != c; ) b(u.shift());
                                            h = c;
                                        }
                                        switch (c.pathSegTypeAsLetter.toUpperCase()) {
                                            case "C":
                                            case "T":
                                            case "S":
                                            case "Q":
                                            case "A":
                                                (s = t.getPointAtLength(g)), _(s.x, s.y, 0);
                                        }
                                        g += e;
                                    }
                                    for (r = 0, o = u.length; r < o; ++r) b(u[r]);
                                    return v;
                                }),
                                    (n._svgPathToAbsolute = function (t) {
                                        for (var e, n, i, r, o, a, s = t.pathSegList, c = 0, l = 0, u = s.numberOfItems, h = 0; h < u; ++h) {
                                            var p = s.getItem(h),
                                                d = p.pathSegTypeAsLetter;
                                            if (/[MLHVCSQTA]/.test(d)) "x" in p && (c = p.x), "y" in p && (l = p.y);
                                            else
                                                switch (("x1" in p && (i = c + p.x1), "x2" in p && (o = c + p.x2), "y1" in p && (r = l + p.y1), "y2" in p && (a = l + p.y2), "x" in p && (c += p.x), "y" in p && (l += p.y), d)) {
                                                    case "m":
                                                        s.replaceItem(t.createSVGPathSegMovetoAbs(c, l), h);
                                                        break;
                                                    case "l":
                                                        s.replaceItem(t.createSVGPathSegLinetoAbs(c, l), h);
                                                        break;
                                                    case "h":
                                                        s.replaceItem(t.createSVGPathSegLinetoHorizontalAbs(c), h);
                                                        break;
                                                    case "v":
                                                        s.replaceItem(t.createSVGPathSegLinetoVerticalAbs(l), h);
                                                        break;
                                                    case "c":
                                                        s.replaceItem(t.createSVGPathSegCurvetoCubicAbs(c, l, i, r, o, a), h);
                                                        break;
                                                    case "s":
                                                        s.replaceItem(t.createSVGPathSegCurvetoCubicSmoothAbs(c, l, o, a), h);
                                                        break;
                                                    case "q":
                                                        s.replaceItem(t.createSVGPathSegCurvetoQuadraticAbs(c, l, i, r), h);
                                                        break;
                                                    case "t":
                                                        s.replaceItem(t.createSVGPathSegCurvetoQuadraticSmoothAbs(c, l), h);
                                                        break;
                                                    case "a":
                                                        s.replaceItem(t.createSVGPathSegArcAbs(c, l, p.r1, p.r2, p.angle, p.largeArcFlag, p.sweepFlag), h);
                                                        break;
                                                    case "z":
                                                    case "Z":
                                                        (c = e), (l = n);
                                                }
                                            ("M" != d && "m" != d) || ((e = c), (n = l));
                                        }
                                    });
                            },
                            { "../core/Common": 14, "../geometry/Bounds": 26 },
                        ],
                        28: [
                            function (t, e) {
                                var n = {};
                                (e.exports = n),
                                    (n.create = function (t, e) {
                                        return { x: t || 0, y: e || 0 };
                                    }),
                                    (n.clone = function (t) {
                                        return { x: t.x, y: t.y };
                                    }),
                                    (n.magnitude = function (t) {
                                        return Math.sqrt(t.x * t.x + t.y * t.y);
                                    }),
                                    (n.magnitudeSquared = function (t) {
                                        return t.x * t.x + t.y * t.y;
                                    }),
                                    (n.rotate = function (t, e, n) {
                                        var i = Math.cos(e),
                                            r = Math.sin(e);
                                        n || (n = {});
                                        var o = t.x * i - t.y * r;
                                        return (n.y = t.x * r + t.y * i), (n.x = o), n;
                                    }),
                                    (n.rotateAbout = function (t, e, n, i) {
                                        var r = Math.cos(e),
                                            o = Math.sin(e);
                                        i || (i = {});
                                        var a = n.x + ((t.x - n.x) * r - (t.y - n.y) * o);
                                        return (i.y = n.y + ((t.x - n.x) * o + (t.y - n.y) * r)), (i.x = a), i;
                                    }),
                                    (n.normalise = function (t) {
                                        var e = n.magnitude(t);
                                        return 0 === e ? { x: 0, y: 0 } : { x: t.x / e, y: t.y / e };
                                    }),
                                    (n.dot = function (t, e) {
                                        return t.x * e.x + t.y * e.y;
                                    }),
                                    (n.cross = function (t, e) {
                                        return t.x * e.y - t.y * e.x;
                                    }),
                                    (n.cross3 = function (t, e, n) {
                                        return (e.x - t.x) * (n.y - t.y) - (e.y - t.y) * (n.x - t.x);
                                    }),
                                    (n.add = function (t, e, n) {
                                        return n || (n = {}), (n.x = t.x + e.x), (n.y = t.y + e.y), n;
                                    }),
                                    (n.sub = function (t, e, n) {
                                        return n || (n = {}), (n.x = t.x - e.x), (n.y = t.y - e.y), n;
                                    }),
                                    (n.mult = function (t, e) {
                                        return { x: t.x * e, y: t.y * e };
                                    }),
                                    (n.div = function (t, e) {
                                        return { x: t.x / e, y: t.y / e };
                                    }),
                                    (n.perp = function (t, e) {
                                        return { x: (e = !0 === e ? -1 : 1) * -t.y, y: e * t.x };
                                    }),
                                    (n.neg = function (t) {
                                        return { x: -t.x, y: -t.y };
                                    }),
                                    (n.angle = function (t, e) {
                                        return Math.atan2(e.y - t.y, e.x - t.x);
                                    }),
                                    (n._temp = [n.create(), n.create(), n.create(), n.create(), n.create(), n.create()]);
                            },
                            {},
                        ],
                        29: [
                            function (t, e) {
                                var n = {};
                                e.exports = n;
                                var i = t("../geometry/Vector"),
                                    r = t("../core/Common");
                                (n.create = function (t, e) {
                                    for (var n = [], i = 0; i < t.length; i++) {
                                        var r = t[i],
                                            o = { x: r.x, y: r.y, index: i, body: e, isInternal: !1 };
                                        n.push(o);
                                    }
                                    return n;
                                }),
                                    (n.fromPath = function (t, e) {
                                        var i = [];
                                        return (
                                            t.replace(/L?\s*([\-\d\.e]+)[\s,]*([\-\d\.e]+)*/gi, function (t, e, n) {
                                                i.push({ x: parseFloat(e), y: parseFloat(n) });
                                            }),
                                            n.create(i, e)
                                        );
                                    }),
                                    (n.centre = function (t) {
                                        for (var e, r, o, a = n.area(t, !0), s = { x: 0, y: 0 }, c = 0; c < t.length; c++) (o = (c + 1) % t.length), (e = i.cross(t[c], t[o])), (r = i.mult(i.add(t[c], t[o]), e)), (s = i.add(s, r));
                                        return i.div(s, 6 * a);
                                    }),
                                    (n.mean = function (t) {
                                        for (var e = { x: 0, y: 0 }, n = 0; n < t.length; n++) (e.x += t[n].x), (e.y += t[n].y);
                                        return i.div(e, t.length);
                                    }),
                                    (n.area = function (t, e) {
                                        for (var n = 0, i = t.length - 1, r = 0; r < t.length; r++) (n += (t[i].x - t[r].x) * (t[i].y + t[r].y)), (i = r);
                                        return e ? n / 2 : Math.abs(n) / 2;
                                    }),
                                    (n.inertia = function (t, e) {
                                        for (var n, r, o = 0, a = 0, s = t, c = 0; c < s.length; c++)
                                            (r = (c + 1) % s.length), (n = Math.abs(i.cross(s[r], s[c]))), (o += n * (i.dot(s[r], s[r]) + i.dot(s[r], s[c]) + i.dot(s[c], s[c]))), (a += n);
                                        return (e / 6) * (o / a);
                                    }),
                                    (n.translate = function (t, e, n) {
                                        var i;
                                        if (n) for (i = 0; i < t.length; i++) (t[i].x += e.x * n), (t[i].y += e.y * n);
                                        else for (i = 0; i < t.length; i++) (t[i].x += e.x), (t[i].y += e.y);
                                        return t;
                                    }),
                                    (n.rotate = function (t, e, n) {
                                        if (0 !== e) {
                                            for (var i = Math.cos(e), r = Math.sin(e), o = 0; o < t.length; o++) {
                                                var a = t[o],
                                                    s = a.x - n.x,
                                                    c = a.y - n.y;
                                                (a.x = n.x + (s * i - c * r)), (a.y = n.y + (s * r + c * i));
                                            }
                                            return t;
                                        }
                                    }),
                                    (n.contains = function (t, e) {
                                        for (var n = 0; n < t.length; n++) {
                                            var i = t[n],
                                                r = t[(n + 1) % t.length];
                                            if ((e.x - i.x) * (r.y - i.y) + (e.y - i.y) * (i.x - r.x) > 0) return !1;
                                        }
                                        return !0;
                                    }),
                                    (n.scale = function (t, e, r, o) {
                                        if (1 === e && 1 === r) return t;
                                        var a, s;
                                        o = o || n.centre(t);
                                        for (var c = 0; c < t.length; c++) (a = t[c]), (s = i.sub(a, o)), (t[c].x = o.x + s.x * e), (t[c].y = o.y + s.y * r);
                                        return t;
                                    }),
                                    (n.chamfer = function (t, e, n, o, a) {
                                        (e = "number" == typeof e ? [e] : e || [8]), (n = void 0 !== n ? n : -1), (o = o || 2), (a = a || 14);
                                        for (var s = [], c = 0; c < t.length; c++) {
                                            var l = t[c - 1 >= 0 ? c - 1 : t.length - 1],
                                                u = t[c],
                                                h = t[(c + 1) % t.length],
                                                p = e[c < e.length ? c : e.length - 1];
                                            if (0 !== p) {
                                                var d = i.normalise({ x: u.y - l.y, y: l.x - u.x }),
                                                    f = i.normalise({ x: h.y - u.y, y: u.x - h.x }),
                                                    m = Math.sqrt(2 * Math.pow(p, 2)),
                                                    v = i.mult(r.clone(d), p),
                                                    g = i.normalise(i.mult(i.add(d, f), 0.5)),
                                                    y = i.sub(u, i.mult(g, m)),
                                                    x = n;
                                                -1 === n && (x = 1.75 * Math.pow(p, 0.32)), (x = r.clamp(x, o, a)) % 2 == 1 && (x += 1);
                                                for (var _ = Math.acos(i.dot(d, f)), b = _ / x, w = 0; w < x; w++) s.push(i.add(i.rotate(v, b * w), y));
                                            } else s.push(u);
                                        }
                                        return s;
                                    }),
                                    (n.clockwiseSort = function (t) {
                                        var e = n.mean(t);
                                        return (
                                            t.sort(function (t, n) {
                                                return i.angle(e, t) - i.angle(e, n);
                                            }),
                                            t
                                        );
                                    }),
                                    (n.isConvex = function (t) {
                                        var e,
                                            n,
                                            i,
                                            r,
                                            o = 0,
                                            a = t.length;
                                        if (a < 3) return null;
                                        for (e = 0; e < a; e++)
                                            if (((i = (e + 2) % a), (r = (t[(n = (e + 1) % a)].x - t[e].x) * (t[i].y - t[n].y)), (r -= (t[n].y - t[e].y) * (t[i].x - t[n].x)) < 0 ? (o |= 1) : r > 0 && (o |= 2), 3 === o)) return !1;
                                        return 0 !== o || null;
                                    }),
                                    (n.hull = function (t) {
                                        var e,
                                            n,
                                            r = [],
                                            o = [];
                                        for (
                                            (t = t.slice(0)).sort(function (t, e) {
                                                var n = t.x - e.x;
                                                return 0 !== n ? n : t.y - e.y;
                                            }),
                                                n = 0;
                                            n < t.length;
                                            n += 1
                                        ) {
                                            for (e = t[n]; o.length >= 2 && i.cross3(o[o.length - 2], o[o.length - 1], e) <= 0; ) o.pop();
                                            o.push(e);
                                        }
                                        for (n = t.length - 1; n >= 0; n -= 1) {
                                            for (e = t[n]; r.length >= 2 && i.cross3(r[r.length - 2], r[r.length - 1], e) <= 0; ) r.pop();
                                            r.push(e);
                                        }
                                        return r.pop(), o.pop(), r.concat(o);
                                    });
                            },
                            { "../core/Common": 14, "../geometry/Vector": 28 },
                        ],
                        30: [
                            function (t, e) {
                                var n = (e.exports = t("../core/Matter"));
                                (n.Body = t("../body/Body")),
                                    (n.Composite = t("../body/Composite")),
                                    (n.World = t("../body/World")),
                                    (n.Contact = t("../collision/Contact")),
                                    (n.Detector = t("../collision/Detector")),
                                    (n.Grid = t("../collision/Grid")),
                                    (n.Pairs = t("../collision/Pairs")),
                                    (n.Pair = t("../collision/Pair")),
                                    (n.Query = t("../collision/Query")),
                                    (n.Resolver = t("../collision/Resolver")),
                                    (n.SAT = t("../collision/SAT")),
                                    (n.Constraint = t("../constraint/Constraint")),
                                    (n.MouseConstraint = t("../constraint/MouseConstraint")),
                                    (n.Common = t("../core/Common")),
                                    (n.Engine = t("../core/Engine")),
                                    (n.Events = t("../core/Events")),
                                    (n.Mouse = t("../core/Mouse")),
                                    (n.Runner = t("../core/Runner")),
                                    (n.Sleeping = t("../core/Sleeping")),
                                    (n.Plugin = t("../core/Plugin")),
                                    (n.Bodies = t("../factory/Bodies")),
                                    (n.Composites = t("../factory/Composites")),
                                    (n.Axes = t("../geometry/Axes")),
                                    (n.Bounds = t("../geometry/Bounds")),
                                    (n.Svg = t("../geometry/Svg")),
                                    (n.Vector = t("../geometry/Vector")),
                                    (n.Vertices = t("../geometry/Vertices")),
                                    (n.Render = t("../render/Render")),
                                    (n.RenderPixi = t("../render/RenderPixi")),
                                    (n.World.add = n.Composite.add),
                                    (n.World.remove = n.Composite.remove),
                                    (n.World.addComposite = n.Composite.addComposite),
                                    (n.World.addBody = n.Composite.addBody),
                                    (n.World.addConstraint = n.Composite.addConstraint),
                                    (n.World.clear = n.Composite.clear),
                                    (n.Engine.run = n.Runner.run);
                            },
                            {
                                "../body/Body": 1,
                                "../body/Composite": 2,
                                "../body/World": 3,
                                "../collision/Contact": 4,
                                "../collision/Detector": 5,
                                "../collision/Grid": 6,
                                "../collision/Pair": 7,
                                "../collision/Pairs": 8,
                                "../collision/Query": 9,
                                "../collision/Resolver": 10,
                                "../collision/SAT": 11,
                                "../constraint/Constraint": 12,
                                "../constraint/MouseConstraint": 13,
                                "../core/Common": 14,
                                "../core/Engine": 15,
                                "../core/Events": 16,
                                "../core/Matter": 17,
                                "../core/Metrics": 18,
                                "../core/Mouse": 19,
                                "../core/Plugin": 20,
                                "../core/Runner": 21,
                                "../core/Sleeping": 22,
                                "../factory/Bodies": 23,
                                "../factory/Composites": 24,
                                "../geometry/Axes": 25,
                                "../geometry/Bounds": 26,
                                "../geometry/Svg": 27,
                                "../geometry/Vector": 28,
                                "../geometry/Vertices": 29,
                                "../render/Render": 31,
                                "../render/RenderPixi": 32,
                            },
                        ],
                        31: [
                            function (t, e) {
                                var n = {};
                                e.exports = n;
                                var i = t("../core/Common"),
                                    r = t("../body/Composite"),
                                    o = t("../geometry/Bounds"),
                                    a = t("../core/Events"),
                                    s = t("../collision/Grid"),
                                    c = t("../geometry/Vector"),
                                    l = t("../core/Mouse");
                                !(function () {
                                    var t, e;
                                    "undefined" != typeof window &&
                                        ((t =
                                            window.requestAnimationFrame ||
                                            window.webkitRequestAnimationFrame ||
                                            window.mozRequestAnimationFrame ||
                                            window.msRequestAnimationFrame ||
                                            function (t) {
                                                window.setTimeout(function () {
                                                    t(i.now());
                                                }, 1e3 / 60);
                                            }),
                                        (e = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame)),
                                        (n.create = function (t) {
                                            var e = {
                                                    controller: n,
                                                    engine: null,
                                                    element: null,
                                                    canvas: null,
                                                    mouse: null,
                                                    frameRequestId: null,
                                                    options: {
                                                        width: 800,
                                                        height: 600,
                                                        pixelRatio: 1,
                                                        background: "#18181d",
                                                        wireframeBackground: "#0f0f13",
                                                        hasBounds: !!t.bounds,
                                                        enabled: !0,
                                                        wireframes: !0,
                                                        showSleeping: !0,
                                                        showDebug: !1,
                                                        showBroadphase: !1,
                                                        showBounds: !1,
                                                        showVelocity: !1,
                                                        showCollisions: !1,
                                                        showSeparations: !1,
                                                        showAxes: !1,
                                                        showPositions: !1,
                                                        showAngleIndicator: !1,
                                                        showIds: !1,
                                                        showShadows: !1,
                                                        showVertexNumbers: !1,
                                                        showConvexHulls: !1,
                                                        showInternalEdges: !1,
                                                        showMousePosition: !1,
                                                    },
                                                },
                                                r = i.extend(e, t);
                                            return (
                                                r.canvas && ((r.canvas.width = r.options.width || r.canvas.width), (r.canvas.height = r.options.height || r.canvas.height)),
                                                (r.mouse = t.mouse),
                                                (r.engine = t.engine),
                                                (r.canvas = r.canvas || u(r.options.width, r.options.height)),
                                                (r.context = r.canvas.getContext("2d")),
                                                (r.textures = {}),
                                                (r.bounds = r.bounds || { min: { x: 0, y: 0 }, max: { x: r.canvas.width, y: r.canvas.height } }),
                                                1 !== r.options.pixelRatio && n.setPixelRatio(r, r.options.pixelRatio),
                                                i.isElement(r.element) ? r.element.appendChild(r.canvas) : r.canvas.parentNode || i.log("Render.create: options.element was undefined, render.canvas was created but not appended", "warn"),
                                                r
                                            );
                                        }),
                                        (n.run = function (e) {
                                            !(function i() {
                                                (e.frameRequestId = t(i)), n.world(e);
                                            })();
                                        }),
                                        (n.stop = function (t) {
                                            e(t.frameRequestId);
                                        }),
                                        (n.setPixelRatio = function (t, e) {
                                            var n = t.options,
                                                i = t.canvas;
                                            "auto" === e && (e = h(i)),
                                                (n.pixelRatio = e),
                                                i.setAttribute("data-pixel-ratio", e),
                                                (i.width = n.width * e),
                                                (i.height = n.height * e),
                                                (i.style.width = n.width + "px"),
                                                (i.style.height = n.height + "px"),
                                                t.context.scale(e, e);
                                        }),
                                        (n.lookAt = function (t, e, n, r) {
                                            (r = void 0 === r || r), (e = i.isArray(e) ? e : [e]), (n = n || { x: 0, y: 0 });
                                            for (var o = { min: { x: 1 / 0, y: 1 / 0 }, max: { x: -1 / 0, y: -1 / 0 } }, a = 0; a < e.length; a += 1) {
                                                var s = e[a],
                                                    c = s.bounds ? s.bounds.min : s.min || s.position || s,
                                                    u = s.bounds ? s.bounds.max : s.max || s.position || s;
                                                c && u && (c.x < o.min.x && (o.min.x = c.x), u.x > o.max.x && (o.max.x = u.x), c.y < o.min.y && (o.min.y = c.y), u.y > o.max.y && (o.max.y = u.y));
                                            }
                                            var h = o.max.x - o.min.x + 2 * n.x,
                                                p = o.max.y - o.min.y + 2 * n.y,
                                                d = t.canvas.height,
                                                f = t.canvas.width,
                                                m = f / d,
                                                v = h / p,
                                                g = 1,
                                                y = 1;
                                            v > m ? (y = v / m) : (g = m / v),
                                                (t.options.hasBounds = !0),
                                                (t.bounds.min.x = o.min.x),
                                                (t.bounds.max.x = o.min.x + h * g),
                                                (t.bounds.min.y = o.min.y),
                                                (t.bounds.max.y = o.min.y + p * y),
                                                r && ((t.bounds.min.x += 0.5 * h - h * g * 0.5), (t.bounds.max.x += 0.5 * h - h * g * 0.5), (t.bounds.min.y += 0.5 * p - p * y * 0.5), (t.bounds.max.y += 0.5 * p - p * y * 0.5)),
                                                (t.bounds.min.x -= n.x),
                                                (t.bounds.max.x -= n.x),
                                                (t.bounds.min.y -= n.y),
                                                (t.bounds.max.y -= n.y),
                                                t.mouse && (l.setScale(t.mouse, { x: (t.bounds.max.x - t.bounds.min.x) / t.canvas.width, y: (t.bounds.max.y - t.bounds.min.y) / t.canvas.height }), l.setOffset(t.mouse, t.bounds.min));
                                        }),
                                        (n.startViewTransform = function (t) {
                                            var e = t.bounds.max.x - t.bounds.min.x,
                                                n = t.bounds.max.y - t.bounds.min.y,
                                                i = e / t.options.width,
                                                r = n / t.options.height;
                                            t.context.scale(1 / i, 1 / r), t.context.translate(-t.bounds.min.x, -t.bounds.min.y);
                                        }),
                                        (n.endViewTransform = function (t) {
                                            t.context.setTransform(t.options.pixelRatio, 0, 0, t.options.pixelRatio, 0, 0);
                                        }),
                                        (n.world = function (t) {
                                            var e,
                                                i = t.engine,
                                                u = i.world,
                                                h = t.canvas,
                                                p = t.context,
                                                f = t.options,
                                                m = r.allBodies(u),
                                                v = r.allConstraints(u),
                                                g = f.wireframes ? f.wireframeBackground : f.background,
                                                y = [],
                                                x = [],
                                                _ = { timestamp: i.timing.timestamp };
                                            if (
                                                (a.trigger(t, "beforeRender", _),
                                                t.currentBackground !== g && d(t, g),
                                                (p.globalCompositeOperation = "source-in"),
                                                (p.fillStyle = "transparent"),
                                                p.fillRect(0, 0, h.width, h.height),
                                                (p.globalCompositeOperation = "source-over"),
                                                f.hasBounds)
                                            ) {
                                                for (e = 0; e < m.length; e++) {
                                                    var b = m[e];
                                                    o.overlaps(b.bounds, t.bounds) && y.push(b);
                                                }
                                                for (e = 0; e < v.length; e++) {
                                                    var w = v[e],
                                                        M = w.bodyA,
                                                        S = w.bodyB,
                                                        T = w.pointA,
                                                        E = w.pointB;
                                                    M && (T = c.add(M.position, w.pointA)), S && (E = c.add(S.position, w.pointB)), T && E && (o.contains(t.bounds, T) || o.contains(t.bounds, E)) && x.push(w);
                                                }
                                                n.startViewTransform(t),
                                                    t.mouse && (l.setScale(t.mouse, { x: (t.bounds.max.x - t.bounds.min.x) / t.canvas.width, y: (t.bounds.max.y - t.bounds.min.y) / t.canvas.height }), l.setOffset(t.mouse, t.bounds.min));
                                            } else (x = v), (y = m);
                                            !f.wireframes || (i.enableSleeping && f.showSleeping) ? n.bodies(t, y, p) : (f.showConvexHulls && n.bodyConvexHulls(t, y, p), n.bodyWireframes(t, y, p)),
                                                f.showBounds && n.bodyBounds(t, y, p),
                                                (f.showAxes || f.showAngleIndicator) && n.bodyAxes(t, y, p),
                                                f.showPositions && n.bodyPositions(t, y, p),
                                                f.showVelocity && n.bodyVelocity(t, y, p),
                                                f.showIds && n.bodyIds(t, y, p),
                                                f.showSeparations && n.separations(t, i.pairs.list, p),
                                                f.showCollisions && n.collisions(t, i.pairs.list, p),
                                                f.showVertexNumbers && n.vertexNumbers(t, y, p),
                                                f.showMousePosition && n.mousePosition(t, t.mouse, p),
                                                n.constraints(x, p),
                                                f.showBroadphase && i.broadphase.controller === s && n.grid(t, i.broadphase, p),
                                                f.showDebug && n.debug(t, p),
                                                f.hasBounds && n.endViewTransform(t),
                                                a.trigger(t, "afterRender", _);
                                        }),
                                        (n.debug = function (t, e) {
                                            var n = e,
                                                i = t.engine,
                                                o = i.world,
                                                a = i.metrics,
                                                s = t.options;
                                            if ((r.allBodies(o), i.timing.timestamp - (t.debugTimestamp || 0) >= 500)) {
                                                var c = "";
                                                a.timing && (c += "fps: " + Math.round(a.timing.fps) + "    "), (t.debugString = c), (t.debugTimestamp = i.timing.timestamp);
                                            }
                                            if (t.debugString) {
                                                (n.font = "12px Arial"), s.wireframes ? (n.fillStyle = "rgba(255,255,255,0.5)") : (n.fillStyle = "rgba(0,0,0,0.5)");
                                                for (var l = t.debugString.split("\n"), u = 0; u < l.length; u++) n.fillText(l[u], 50, 50 + 18 * u);
                                            }
                                        }),
                                        (n.constraints = function (t, e) {
                                            for (var n = e, r = 0; r < t.length; r++) {
                                                var o = t[r];
                                                if (o.render.visible && o.pointA && o.pointB) {
                                                    var a,
                                                        s,
                                                        l = o.bodyA,
                                                        u = o.bodyB;
                                                    if (((a = l ? c.add(l.position, o.pointA) : o.pointA), "pin" === o.render.type)) n.beginPath(), n.arc(a.x, a.y, 3, 0, 2 * Math.PI), n.closePath();
                                                    else {
                                                        if (((s = u ? c.add(u.position, o.pointB) : o.pointB), n.beginPath(), n.moveTo(a.x, a.y), "spring" === o.render.type))
                                                            for (var h, p = c.sub(s, a), d = c.perp(c.normalise(p)), f = Math.ceil(i.clamp(o.length / 5, 12, 20)), m = 1; m < f; m += 1)
                                                                (h = m % 2 == 0 ? 1 : -1), n.lineTo(a.x + p.x * (m / f) + d.x * h * 4, a.y + p.y * (m / f) + d.y * h * 4);
                                                        n.lineTo(s.x, s.y);
                                                    }
                                                    o.render.lineWidth && ((n.lineWidth = o.render.lineWidth), (n.strokeStyle = o.render.strokeStyle), n.stroke()),
                                                        o.render.anchors && ((n.fillStyle = o.render.strokeStyle), n.beginPath(), n.arc(a.x, a.y, 3, 0, 2 * Math.PI), n.arc(s.x, s.y, 3, 0, 2 * Math.PI), n.closePath(), n.fill());
                                                }
                                            }
                                        }),
                                        (n.bodyShadows = function (t, e, n) {
                                            for (var i = n, r = (t.engine, 0); r < e.length; r++) {
                                                var o = e[r];
                                                if (o.render.visible) {
                                                    if (o.circleRadius) i.beginPath(), i.arc(o.position.x, o.position.y, o.circleRadius, 0, 2 * Math.PI), i.closePath();
                                                    else {
                                                        i.beginPath(), i.moveTo(o.vertices[0].x, o.vertices[0].y);
                                                        for (var a = 1; a < o.vertices.length; a++) i.lineTo(o.vertices[a].x, o.vertices[a].y);
                                                        i.closePath();
                                                    }
                                                    var s = o.position.x - 0.5 * t.options.width,
                                                        c = o.position.y - 0.2 * t.options.height,
                                                        l = Math.abs(s) + Math.abs(c);
                                                    (i.shadowColor = "rgba(0,0,0,0.15)"),
                                                        (i.shadowOffsetX = 0.05 * s),
                                                        (i.shadowOffsetY = 0.05 * c),
                                                        (i.shadowBlur = 1 + 12 * Math.min(1, l / 1e3)),
                                                        i.fill(),
                                                        (i.shadowColor = null),
                                                        (i.shadowOffsetX = null),
                                                        (i.shadowOffsetY = null),
                                                        (i.shadowBlur = null);
                                                }
                                            }
                                        }),
                                        (n.bodies = function (t, e, n) {
                                            var i,
                                                r,
                                                o,
                                                a,
                                                s = n,
                                                c = (t.engine, t.options),
                                                l = c.showInternalEdges || !c.wireframes;
                                            for (o = 0; o < e.length; o++)
                                                if ((i = e[o]).render.visible)
                                                    for (a = i.parts.length > 1 ? 1 : 0; a < i.parts.length; a++)
                                                        if ((r = i.parts[a]).render.visible) {
                                                            if (
                                                                (c.showSleeping && i.isSleeping ? (s.globalAlpha = 0.5 * r.render.opacity) : 1 !== r.render.opacity && (s.globalAlpha = r.render.opacity),
                                                                r.render.sprite && r.render.sprite.texture && !c.wireframes)
                                                            ) {
                                                                var u = r.render.sprite,
                                                                    h = p(t, u.texture);
                                                                s.translate(r.position.x, r.position.y),
                                                                    s.rotate(r.angle),
                                                                    s.drawImage(h, h.width * -u.xOffset * u.xScale, h.height * -u.yOffset * u.yScale, h.width * u.xScale, h.height * u.yScale),
                                                                    s.rotate(-r.angle),
                                                                    s.translate(-r.position.x, -r.position.y);
                                                            } else {
                                                                if (r.circleRadius) s.beginPath(), s.arc(r.position.x, r.position.y, r.circleRadius, 0, 2 * Math.PI);
                                                                else {
                                                                    s.beginPath(), s.moveTo(r.vertices[0].x, r.vertices[0].y);
                                                                    for (var d = 1; d < r.vertices.length; d++)
                                                                        !r.vertices[d - 1].isInternal || l ? s.lineTo(r.vertices[d].x, r.vertices[d].y) : s.moveTo(r.vertices[d].x, r.vertices[d].y),
                                                                            r.vertices[d].isInternal && !l && s.moveTo(r.vertices[(d + 1) % r.vertices.length].x, r.vertices[(d + 1) % r.vertices.length].y);
                                                                    s.lineTo(r.vertices[0].x, r.vertices[0].y), s.closePath();
                                                                }
                                                                c.wireframes
                                                                    ? ((s.lineWidth = 1), (s.strokeStyle = "#bbb"), s.stroke())
                                                                    : ((s.fillStyle = r.render.fillStyle), r.render.lineWidth && ((s.lineWidth = r.render.lineWidth), (s.strokeStyle = r.render.strokeStyle), s.stroke()), s.fill());
                                                            }
                                                            s.globalAlpha = 1;
                                                        }
                                        }),
                                        (n.bodyWireframes = function (t, e, n) {
                                            var i,
                                                r,
                                                o,
                                                a,
                                                s,
                                                c = n,
                                                l = t.options.showInternalEdges;
                                            for (c.beginPath(), o = 0; o < e.length; o++)
                                                if ((i = e[o]).render.visible)
                                                    for (s = i.parts.length > 1 ? 1 : 0; s < i.parts.length; s++) {
                                                        for (r = i.parts[s], c.moveTo(r.vertices[0].x, r.vertices[0].y), a = 1; a < r.vertices.length; a++)
                                                            !r.vertices[a - 1].isInternal || l ? c.lineTo(r.vertices[a].x, r.vertices[a].y) : c.moveTo(r.vertices[a].x, r.vertices[a].y),
                                                                r.vertices[a].isInternal && !l && c.moveTo(r.vertices[(a + 1) % r.vertices.length].x, r.vertices[(a + 1) % r.vertices.length].y);
                                                        c.lineTo(r.vertices[0].x, r.vertices[0].y);
                                                    }
                                            (c.lineWidth = 1), (c.strokeStyle = "#bbb"), c.stroke();
                                        }),
                                        (n.bodyConvexHulls = function (t, e, n) {
                                            var i,
                                                r,
                                                o,
                                                a = n;
                                            for (a.beginPath(), r = 0; r < e.length; r++)
                                                if ((i = e[r]).render.visible && 1 !== i.parts.length) {
                                                    for (a.moveTo(i.vertices[0].x, i.vertices[0].y), o = 1; o < i.vertices.length; o++) a.lineTo(i.vertices[o].x, i.vertices[o].y);
                                                    a.lineTo(i.vertices[0].x, i.vertices[0].y);
                                                }
                                            (a.lineWidth = 1), (a.strokeStyle = "rgba(255,255,255,0.2)"), a.stroke();
                                        }),
                                        (n.vertexNumbers = function (t, e, n) {
                                            var i,
                                                r,
                                                o,
                                                a = n;
                                            for (i = 0; i < e.length; i++) {
                                                var s = e[i].parts;
                                                for (o = s.length > 1 ? 1 : 0; o < s.length; o++) {
                                                    var c = s[o];
                                                    for (r = 0; r < c.vertices.length; r++)
                                                        (a.fillStyle = "rgba(255,255,255,0.2)"), a.fillText(i + "_" + r, c.position.x + 0.8 * (c.vertices[r].x - c.position.x), c.position.y + 0.8 * (c.vertices[r].y - c.position.y));
                                                }
                                            }
                                        }),
                                        (n.mousePosition = function (t, e, n) {
                                            var i = n;
                                            (i.fillStyle = "rgba(255,255,255,0.8)"), i.fillText(e.position.x + "  " + e.position.y, e.position.x + 5, e.position.y - 5);
                                        }),
                                        (n.bodyBounds = function (t, e, n) {
                                            var i = n,
                                                r = (t.engine, t.options);
                                            i.beginPath();
                                            for (var o = 0; o < e.length; o++) {
                                                var a = e[o];
                                                if (a.render.visible)
                                                    for (var s = e[o].parts, c = s.length > 1 ? 1 : 0; c < s.length; c++) {
                                                        var l = s[c];
                                                        i.rect(l.bounds.min.x, l.bounds.min.y, l.bounds.max.x - l.bounds.min.x, l.bounds.max.y - l.bounds.min.y);
                                                    }
                                            }
                                            r.wireframes ? (i.strokeStyle = "rgba(255,255,255,0.08)") : (i.strokeStyle = "rgba(0,0,0,0.1)"), (i.lineWidth = 1), i.stroke();
                                        }),
                                        (n.bodyAxes = function (t, e, n) {
                                            var i,
                                                r,
                                                o,
                                                a,
                                                s = n,
                                                c = (t.engine, t.options);
                                            for (s.beginPath(), r = 0; r < e.length; r++) {
                                                var l = e[r],
                                                    u = l.parts;
                                                if (l.render.visible)
                                                    if (c.showAxes)
                                                        for (o = u.length > 1 ? 1 : 0; o < u.length; o++)
                                                            for (i = u[o], a = 0; a < i.axes.length; a++) {
                                                                var h = i.axes[a];
                                                                s.moveTo(i.position.x, i.position.y), s.lineTo(i.position.x + 20 * h.x, i.position.y + 20 * h.y);
                                                            }
                                                    else
                                                        for (o = u.length > 1 ? 1 : 0; o < u.length; o++)
                                                            for (i = u[o], a = 0; a < i.axes.length; a++)
                                                                s.moveTo(i.position.x, i.position.y), s.lineTo((i.vertices[0].x + i.vertices[i.vertices.length - 1].x) / 2, (i.vertices[0].y + i.vertices[i.vertices.length - 1].y) / 2);
                                            }
                                            c.wireframes ? ((s.strokeStyle = "indianred"), (s.lineWidth = 1)) : ((s.strokeStyle = "rgba(255, 255, 255, 0.4)"), (s.globalCompositeOperation = "overlay"), (s.lineWidth = 2)),
                                                s.stroke(),
                                                (s.globalCompositeOperation = "source-over");
                                        }),
                                        (n.bodyPositions = function (t, e, n) {
                                            var i,
                                                r,
                                                o,
                                                a,
                                                s = n,
                                                c = (t.engine, t.options);
                                            for (s.beginPath(), o = 0; o < e.length; o++)
                                                if ((i = e[o]).render.visible) for (a = 0; a < i.parts.length; a++) (r = i.parts[a]), s.arc(r.position.x, r.position.y, 3, 0, 2 * Math.PI, !1), s.closePath();
                                            for (c.wireframes ? (s.fillStyle = "indianred") : (s.fillStyle = "rgba(0,0,0,0.5)"), s.fill(), s.beginPath(), o = 0; o < e.length; o++)
                                                (i = e[o]).render.visible && (s.arc(i.positionPrev.x, i.positionPrev.y, 2, 0, 2 * Math.PI, !1), s.closePath());
                                            (s.fillStyle = "rgba(255,165,0,0.8)"), s.fill();
                                        }),
                                        (n.bodyVelocity = function (t, e, n) {
                                            var i = n;
                                            i.beginPath();
                                            for (var r = 0; r < e.length; r++) {
                                                var o = e[r];
                                                o.render.visible && (i.moveTo(o.position.x, o.position.y), i.lineTo(o.position.x + 2 * (o.position.x - o.positionPrev.x), o.position.y + 2 * (o.position.y - o.positionPrev.y)));
                                            }
                                            (i.lineWidth = 3), (i.strokeStyle = "cornflowerblue"), i.stroke();
                                        }),
                                        (n.bodyIds = function (t, e, n) {
                                            var i,
                                                r,
                                                o = n;
                                            for (i = 0; i < e.length; i++)
                                                if (e[i].render.visible) {
                                                    var a = e[i].parts;
                                                    for (r = a.length > 1 ? 1 : 0; r < a.length; r++) {
                                                        var s = a[r];
                                                        (o.font = "12px Arial"), (o.fillStyle = "rgba(255,255,255,0.5)"), o.fillText(s.id, s.position.x + 10, s.position.y - 10);
                                                    }
                                                }
                                        }),
                                        (n.collisions = function (t, e, n) {
                                            var i,
                                                r,
                                                o,
                                                a,
                                                s = n,
                                                c = t.options;
                                            for (s.beginPath(), o = 0; o < e.length; o++)
                                                if ((i = e[o]).isActive)
                                                    for (r = i.collision, a = 0; a < i.activeContacts.length; a++) {
                                                        var l = i.activeContacts[a],
                                                            u = l.vertex;
                                                        s.rect(u.x - 1.5, u.y - 1.5, 3.5, 3.5);
                                                    }
                                            for (c.wireframes ? (s.fillStyle = "rgba(255,255,255,0.7)") : (s.fillStyle = "orange"), s.fill(), s.beginPath(), o = 0; o < e.length; o++)
                                                if ((i = e[o]).isActive && ((r = i.collision), i.activeContacts.length > 0)) {
                                                    var h = i.activeContacts[0].vertex.x,
                                                        p = i.activeContacts[0].vertex.y;
                                                    2 === i.activeContacts.length && ((h = (i.activeContacts[0].vertex.x + i.activeContacts[1].vertex.x) / 2), (p = (i.activeContacts[0].vertex.y + i.activeContacts[1].vertex.y) / 2)),
                                                        r.bodyB === r.supports[0].body || !0 === r.bodyA.isStatic ? s.moveTo(h - 8 * r.normal.x, p - 8 * r.normal.y) : s.moveTo(h + 8 * r.normal.x, p + 8 * r.normal.y),
                                                        s.lineTo(h, p);
                                                }
                                            c.wireframes ? (s.strokeStyle = "rgba(255,165,0,0.7)") : (s.strokeStyle = "orange"), (s.lineWidth = 1), s.stroke();
                                        }),
                                        (n.separations = function (t, e, n) {
                                            var i,
                                                r,
                                                o,
                                                a,
                                                s,
                                                c = n,
                                                l = t.options;
                                            for (c.beginPath(), s = 0; s < e.length; s++)
                                                if ((i = e[s]).isActive) {
                                                    (r = i.collision), (o = r.bodyA);
                                                    var u = 1;
                                                    (a = r.bodyB).isStatic || o.isStatic || (u = 0.5),
                                                        a.isStatic && (u = 0),
                                                        c.moveTo(a.position.x, a.position.y),
                                                        c.lineTo(a.position.x - r.penetration.x * u, a.position.y - r.penetration.y * u),
                                                        (u = 1),
                                                        a.isStatic || o.isStatic || (u = 0.5),
                                                        o.isStatic && (u = 0),
                                                        c.moveTo(o.position.x, o.position.y),
                                                        c.lineTo(o.position.x + r.penetration.x * u, o.position.y + r.penetration.y * u);
                                                }
                                            l.wireframes ? (c.strokeStyle = "rgba(255,165,0,0.5)") : (c.strokeStyle = "orange"), c.stroke();
                                        }),
                                        (n.grid = function (t, e, n) {
                                            var r = n,
                                                o = t.options;
                                            o.wireframes ? (r.strokeStyle = "rgba(255,180,0,0.1)") : (r.strokeStyle = "rgba(255,180,0,0.5)"), r.beginPath();
                                            for (var a = i.keys(e.buckets), s = 0; s < a.length; s++) {
                                                var c = a[s];
                                                if (!(e.buckets[c].length < 2)) {
                                                    var l = c.split(/C|R/);
                                                    r.rect(0.5 + parseInt(l[1], 10) * e.bucketWidth, 0.5 + parseInt(l[2], 10) * e.bucketHeight, e.bucketWidth, e.bucketHeight);
                                                }
                                            }
                                            (r.lineWidth = 1), r.stroke();
                                        }),
                                        (n.inspector = function (t, e) {
                                            t.engine;
                                            var n,
                                                i = t.selected,
                                                r = t.render,
                                                o = r.options;
                                            if (o.hasBounds) {
                                                var a = r.bounds.max.x - r.bounds.min.x,
                                                    s = r.bounds.max.y - r.bounds.min.y,
                                                    c = a / r.options.width,
                                                    l = s / r.options.height;
                                                e.scale(1 / c, 1 / l), e.translate(-r.bounds.min.x, -r.bounds.min.y);
                                            }
                                            for (var u = 0; u < i.length; u++) {
                                                var h = i[u].data;
                                                switch ((e.translate(0.5, 0.5), (e.lineWidth = 1), (e.strokeStyle = "rgba(255,165,0,0.9)"), e.setLineDash([1, 2]), h.type)) {
                                                    case "body":
                                                        (n = h.bounds),
                                                            e.beginPath(),
                                                            e.rect(Math.floor(n.min.x - 3), Math.floor(n.min.y - 3), Math.floor(n.max.x - n.min.x + 6), Math.floor(n.max.y - n.min.y + 6)),
                                                            e.closePath(),
                                                            e.stroke();
                                                        break;
                                                    case "constraint":
                                                        var p = h.pointA;
                                                        h.bodyA && (p = h.pointB), e.beginPath(), e.arc(p.x, p.y, 10, 0, 2 * Math.PI), e.closePath(), e.stroke();
                                                }
                                                e.setLineDash([]), e.translate(-0.5, -0.5);
                                            }
                                            null !== t.selectStart &&
                                                (e.translate(0.5, 0.5),
                                                (e.lineWidth = 1),
                                                (e.strokeStyle = "rgba(255,165,0,0.6)"),
                                                (e.fillStyle = "rgba(255,165,0,0.1)"),
                                                (n = t.selectBounds),
                                                e.beginPath(),
                                                e.rect(Math.floor(n.min.x), Math.floor(n.min.y), Math.floor(n.max.x - n.min.x), Math.floor(n.max.y - n.min.y)),
                                                e.closePath(),
                                                e.stroke(),
                                                e.fill(),
                                                e.translate(-0.5, -0.5)),
                                                o.hasBounds && e.setTransform(1, 0, 0, 1, 0, 0);
                                        });
                                    var u = function (t, e) {
                                            var n = document.createElement("canvas");
                                            return (
                                                (n.width = t),
                                                (n.height = e),
                                                (n.oncontextmenu = function () {
                                                    return !1;
                                                }),
                                                (n.onselectstart = function () {
                                                    return !1;
                                                }),
                                                n
                                            );
                                        },
                                        h = function (t) {
                                            var e = t.getContext("2d"),
                                                n = window.devicePixelRatio || 1,
                                                i = e.webkitBackingStorePixelRatio || e.mozBackingStorePixelRatio || e.msBackingStorePixelRatio || e.oBackingStorePixelRatio || e.backingStorePixelRatio || 1;
                                            return n / i;
                                        },
                                        p = function (t, e) {
                                            var n = t.textures[e];
                                            return n || (((n = t.textures[e] = new Image()).src = e), n);
                                        },
                                        d = function (t, e) {
                                            var n = e;
                                            /(jpg|gif|png)$/.test(e) && (n = "url(" + e + ")"), (t.canvas.style.background = n), (t.canvas.style.backgroundSize = "contain"), (t.currentBackground = e);
                                        };
                                })();
                            },
                            { "../body/Composite": 2, "../collision/Grid": 6, "../core/Common": 14, "../core/Events": 16, "../core/Mouse": 19, "../geometry/Bounds": 26, "../geometry/Vector": 28 },
                        ],
                        32: [
                            function (t, e) {
                                var n = {};
                                e.exports = n;
                                var i = t("../geometry/Bounds"),
                                    r = t("../body/Composite"),
                                    o = t("../core/Common"),
                                    a = t("../core/Events"),
                                    s = t("../geometry/Vector");
                                !(function () {
                                    var t, e;
                                    "undefined" != typeof window &&
                                        ((t =
                                            window.requestAnimationFrame ||
                                            window.webkitRequestAnimationFrame ||
                                            window.mozRequestAnimationFrame ||
                                            window.msRequestAnimationFrame ||
                                            function (t) {
                                                window.setTimeout(function () {
                                                    t(o.now());
                                                }, 1e3 / 60);
                                            }),
                                        (e = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame)),
                                        (n.create = function (t) {
                                            o.warn("RenderPixi.create: Matter.RenderPixi is deprecated (see docs)");
                                            var e = {
                                                    controller: n,
                                                    engine: null,
                                                    element: null,
                                                    frameRequestId: null,
                                                    canvas: null,
                                                    renderer: null,
                                                    container: null,
                                                    spriteContainer: null,
                                                    pixiOptions: null,
                                                    options: {
                                                        width: 800,
                                                        height: 600,
                                                        background: "#fafafa",
                                                        wireframeBackground: "#222",
                                                        hasBounds: !1,
                                                        enabled: !0,
                                                        wireframes: !0,
                                                        showSleeping: !0,
                                                        showDebug: !1,
                                                        showBroadphase: !1,
                                                        showBounds: !1,
                                                        showVelocity: !1,
                                                        showCollisions: !1,
                                                        showAxes: !1,
                                                        showPositions: !1,
                                                        showAngleIndicator: !1,
                                                        showIds: !1,
                                                        showShadows: !1,
                                                    },
                                                },
                                                i = o.extend(e, t),
                                                r = !i.options.wireframes && "transparent" === i.options.background;
                                            return (
                                                (i.pixiOptions = i.pixiOptions || { view: i.canvas, transparent: r, antialias: !0, backgroundColor: t.background }),
                                                (i.mouse = t.mouse),
                                                (i.engine = t.engine),
                                                (i.renderer = i.renderer || new PIXI.WebGLRenderer(i.options.width, i.options.height, i.pixiOptions)),
                                                (i.container = i.container || new PIXI.Container()),
                                                (i.spriteContainer = i.spriteContainer || new PIXI.Container()),
                                                (i.canvas = i.canvas || i.renderer.view),
                                                (i.bounds = i.bounds || { min: { x: 0, y: 0 }, max: { x: i.options.width, y: i.options.height } }),
                                                a.on(i.engine, "beforeUpdate", function () {
                                                    n.clear(i);
                                                }),
                                                (i.textures = {}),
                                                (i.sprites = {}),
                                                (i.primitives = {}),
                                                i.container.addChild(i.spriteContainer),
                                                o.isElement(i.element) ? i.element.appendChild(i.canvas) : o.warn('No "render.element" passed, "render.canvas" was not inserted into document.'),
                                                (i.canvas.oncontextmenu = function () {
                                                    return !1;
                                                }),
                                                (i.canvas.onselectstart = function () {
                                                    return !1;
                                                }),
                                                i
                                            );
                                        }),
                                        (n.run = function (e) {
                                            !(function i() {
                                                (e.frameRequestId = t(i)), n.world(e);
                                            })();
                                        }),
                                        (n.stop = function (t) {
                                            e(t.frameRequestId);
                                        }),
                                        (n.clear = function (t) {
                                            for (var e = t.container, n = t.spriteContainer; e.children[0]; ) e.removeChild(e.children[0]);
                                            for (; n.children[0]; ) n.removeChild(n.children[0]);
                                            var i = t.sprites["bg-0"];
                                            (t.textures = {}),
                                                (t.sprites = {}),
                                                (t.primitives = {}),
                                                (t.sprites["bg-0"] = i),
                                                i && e.addChildAt(i, 0),
                                                t.container.addChild(t.spriteContainer),
                                                (t.currentBackground = null),
                                                e.scale.set(1, 1),
                                                e.position.set(0, 0);
                                        }),
                                        (n.setBackground = function (t, e) {
                                            if (t.currentBackground !== e) {
                                                var n = e.indexOf && -1 !== e.indexOf("#"),
                                                    i = t.sprites["bg-0"];
                                                if (n) {
                                                    var r = o.colorToNumber(e);
                                                    (t.renderer.backgroundColor = r), i && t.container.removeChild(i);
                                                } else if (!i) {
                                                    var a = u(t, e);
                                                    ((i = t.sprites["bg-0"] = new PIXI.Sprite(a)).position.x = 0), (i.position.y = 0), t.container.addChildAt(i, 0);
                                                }
                                                t.currentBackground = e;
                                            }
                                        }),
                                        (n.world = function (t) {
                                            var e,
                                                o = t.engine,
                                                a = o.world,
                                                c = t.renderer,
                                                l = t.container,
                                                u = t.options,
                                                h = r.allBodies(a),
                                                p = r.allConstraints(a),
                                                d = [];
                                            u.wireframes ? n.setBackground(t, u.wireframeBackground) : n.setBackground(t, u.background);
                                            var f = t.bounds.max.x - t.bounds.min.x,
                                                m = t.bounds.max.y - t.bounds.min.y,
                                                v = f / t.options.width,
                                                g = m / t.options.height;
                                            if (u.hasBounds) {
                                                for (e = 0; e < h.length; e++) {
                                                    var y = h[e];
                                                    y.render.sprite.visible = i.overlaps(y.bounds, t.bounds);
                                                }
                                                for (e = 0; e < p.length; e++) {
                                                    var x = p[e],
                                                        _ = x.bodyA,
                                                        b = x.bodyB,
                                                        w = x.pointA,
                                                        M = x.pointB;
                                                    _ && (w = s.add(_.position, x.pointA)), b && (M = s.add(b.position, x.pointB)), w && M && (i.contains(t.bounds, w) || i.contains(t.bounds, M)) && d.push(x);
                                                }
                                                l.scale.set(1 / v, 1 / g), l.position.set(-t.bounds.min.x * (1 / v), -t.bounds.min.y * (1 / g));
                                            } else d = p;
                                            for (e = 0; e < h.length; e++) n.body(t, h[e]);
                                            for (e = 0; e < d.length; e++) n.constraint(t, d[e]);
                                            c.render(l);
                                        }),
                                        (n.constraint = function (t, e) {
                                            t.engine;
                                            var n = e.bodyA,
                                                i = e.bodyB,
                                                r = e.pointA,
                                                a = e.pointB,
                                                s = t.container,
                                                c = e.render,
                                                l = "c-" + e.id,
                                                u = t.primitives[l];
                                            u || (u = t.primitives[l] = new PIXI.Graphics()),
                                                c.visible && e.pointA && e.pointB
                                                    ? (-1 === o.indexOf(s.children, u) && s.addChild(u),
                                                      u.clear(),
                                                      u.beginFill(0, 0),
                                                      u.lineStyle(c.lineWidth, o.colorToNumber(c.strokeStyle), 1),
                                                      n ? u.moveTo(n.position.x + r.x, n.position.y + r.y) : u.moveTo(r.x, r.y),
                                                      i ? u.lineTo(i.position.x + a.x, i.position.y + a.y) : u.lineTo(a.x, a.y),
                                                      u.endFill())
                                                    : u.clear();
                                        }),
                                        (n.body = function (t, e) {
                                            t.engine;
                                            var n = e.render;
                                            if (n.visible)
                                                if (n.sprite && n.sprite.texture) {
                                                    var i = "b-" + e.id,
                                                        r = t.sprites[i],
                                                        a = t.spriteContainer;
                                                    r || (r = t.sprites[i] = c(t, e)),
                                                        -1 === o.indexOf(a.children, r) && a.addChild(r),
                                                        (r.position.x = e.position.x),
                                                        (r.position.y = e.position.y),
                                                        (r.rotation = e.angle),
                                                        (r.scale.x = n.sprite.xScale || 1),
                                                        (r.scale.y = n.sprite.yScale || 1);
                                                } else {
                                                    var s = "b-" + e.id,
                                                        u = t.primitives[s],
                                                        h = t.container;
                                                    u || ((u = t.primitives[s] = l(t, e)).initialAngle = e.angle),
                                                        -1 === o.indexOf(h.children, u) && h.addChild(u),
                                                        (u.position.x = e.position.x),
                                                        (u.position.y = e.position.y),
                                                        (u.rotation = e.angle - u.initialAngle);
                                                }
                                        });
                                    var c = function (t, e) {
                                            var n = e.render,
                                                i = n.sprite.texture,
                                                r = u(t, i),
                                                o = new PIXI.Sprite(r);
                                            return (o.anchor.x = e.render.sprite.xOffset), (o.anchor.y = e.render.sprite.yOffset), o;
                                        },
                                        l = function (t, e) {
                                            var n,
                                                i = e.render,
                                                r = t.options,
                                                a = new PIXI.Graphics(),
                                                s = o.colorToNumber(i.fillStyle),
                                                c = o.colorToNumber(i.strokeStyle),
                                                l = o.colorToNumber(i.strokeStyle),
                                                u = o.colorToNumber("#bbb"),
                                                h = o.colorToNumber("#CD5C5C");
                                            a.clear();
                                            for (var p = e.parts.length > 1 ? 1 : 0; p < e.parts.length; p++) {
                                                (n = e.parts[p]),
                                                    r.wireframes ? (a.beginFill(0, 0), a.lineStyle(1, u, 1)) : (a.beginFill(s, 1), a.lineStyle(i.lineWidth, c, 1)),
                                                    a.moveTo(n.vertices[0].x - e.position.x, n.vertices[0].y - e.position.y);
                                                for (var d = 1; d < n.vertices.length; d++) a.lineTo(n.vertices[d].x - e.position.x, n.vertices[d].y - e.position.y);
                                                a.lineTo(n.vertices[0].x - e.position.x, n.vertices[0].y - e.position.y),
                                                    a.endFill(),
                                                    (r.showAngleIndicator || r.showAxes) &&
                                                        (a.beginFill(0, 0),
                                                        r.wireframes ? a.lineStyle(1, h, 1) : a.lineStyle(1, l),
                                                        a.moveTo(n.position.x - e.position.x, n.position.y - e.position.y),
                                                        a.lineTo((n.vertices[0].x + n.vertices[n.vertices.length - 1].x) / 2 - e.position.x, (n.vertices[0].y + n.vertices[n.vertices.length - 1].y) / 2 - e.position.y),
                                                        a.endFill());
                                            }
                                            return a;
                                        },
                                        u = function (t, e) {
                                            var n = t.textures[e];
                                            return n || (n = t.textures[e] = PIXI.Texture.fromImage(e)), n;
                                        };
                                })();
                            },
                            { "../body/Composite": 2, "../core/Common": 14, "../core/Events": 16, "../geometry/Bounds": 26, "../geometry/Vector": 28 },
                        ],
                    },
                    {},
                    [30]
                )(30);
            }.call(this, n(36)));
        },
        function (t, e, n) {
            "use strict";
            n.d(e, "a", function () {
                return a;
            });
            var i = n(59),
                r = n(60),
                o = n(62),
                a = function (t, e, n, a) {
                    r.a.call(this),
                        (this.scene = t),
                        (this.camera = e),
                        (this.sampleLevel = 4),
                        (this.unbiased = !0),
                        (this.clearColor = void 0 !== n ? n : 0),
                        (this.clearAlpha = void 0 !== a ? a : 0),
                        void 0 === o.a && console.error("SSAARenderPass relies on CopyShader");
                    var s = o.a;
                    (this.copyUniforms = i.q.clone(s.uniforms)),
                        (this.copyMaterial = new i.o({ uniforms: this.copyUniforms, vertexShader: s.vertexShader, fragmentShader: s.fragmentShader, premultipliedAlpha: !0, transparent: !0, blending: i.a, depthTest: !1, depthWrite: !1 })),
                        (this.fsQuad = new r.a.FullScreenQuad(this.copyMaterial));
                };
            (a.prototype = Object.assign(Object.create(r.a.prototype), {
                constructor: a,
                dispose: function () {
                    this.sampleRenderTarget && (this.sampleRenderTarget.dispose(), (this.sampleRenderTarget = null));
                },
                setSize: function (t, e) {
                    this.sampleRenderTarget && this.sampleRenderTarget.setSize(t, e);
                },
                render: function (t, e, n) {
                    this.sampleRenderTarget || ((this.sampleRenderTarget = new i.t(n.width, n.height, { minFilter: i.g, magFilter: i.g, format: i.m })), (this.sampleRenderTarget.texture.name = "SSAARenderPass.sample"));
                    var r = a.JitterVectors[Math.max(0, Math.min(this.sampleLevel, 5))],
                        o = t.autoClear;
                    t.autoClear = !1;
                    var s = t.getClearColor().getHex(),
                        c = t.getClearAlpha(),
                        l = 1 / r.length;
                    this.copyUniforms.tDiffuse.value = this.sampleRenderTarget.texture;
                    for (var u = n.width, h = n.height, p = 0; p < r.length; p++) {
                        var d = r[p];
                        this.camera.setViewOffset && this.camera.setViewOffset(u, h, 0.0625 * d[0], 0.0625 * d[1], u, h);
                        var f = l;
                        if (this.unbiased) f += (1 / 32) * ((p + 0.5) / r.length - 0.5);
                        (this.copyUniforms.opacity.value = f),
                            t.setClearColor(this.clearColor, this.clearAlpha),
                            t.setRenderTarget(this.sampleRenderTarget),
                            t.clear(),
                            t.render(this.scene, this.camera),
                            t.setRenderTarget(this.renderToScreen ? null : e),
                            0 === p && (t.setClearColor(0, 0), t.clear()),
                            this.fsQuad.render(t);
                    }
                    this.camera.clearViewOffset && this.camera.clearViewOffset(), (t.autoClear = o), t.setClearColor(s, c);
                },
            })),
                (a.JitterVectors = [
                    [[0, 0]],
                    [
                        [4, 4],
                        [-4, -4],
                    ],
                    [
                        [-2, -6],
                        [6, -2],
                        [-6, 2],
                        [2, 6],
                    ],
                    [
                        [1, -3],
                        [-1, 3],
                        [5, 1],
                        [-3, -5],
                        [-5, 5],
                        [-7, -1],
                        [3, 7],
                        [7, -7],
                    ],
                    [
                        [1, 1],
                        [-1, -3],
                        [-3, 2],
                        [4, -1],
                        [-5, -2],
                        [2, 5],
                        [5, 3],
                        [3, -5],
                        [-2, 6],
                        [0, -7],
                        [-4, -6],
                        [-6, 4],
                        [-8, 0],
                        [7, -4],
                        [6, 7],
                        [-7, -8],
                    ],
                    [
                        [-4, -7],
                        [-7, -5],
                        [-3, -5],
                        [-5, -4],
                        [-1, -4],
                        [-2, -2],
                        [-6, -1],
                        [-4, 0],
                        [-7, 1],
                        [-1, 2],
                        [-6, 3],
                        [-3, 3],
                        [-7, 6],
                        [-3, 6],
                        [-5, 7],
                        [-1, 7],
                        [5, -7],
                        [1, -6],
                        [6, -5],
                        [4, -4],
                        [2, -3],
                        [7, -2],
                        [1, -1],
                        [4, -1],
                        [2, 1],
                        [6, 2],
                        [0, 4],
                        [4, 4],
                        [2, 5],
                        [7, 5],
                        [5, 6],
                        [3, 7],
                    ],
                ]);
        },
        function (t, e, n) {
            "use strict";
            n.d(e, "a", function () {
                return r;
            });
            var i = n(60),
                r = function (t, e, n, r, o) {
                    i.a.call(this), (this.scene = t), (this.camera = e), (this.overrideMaterial = n), (this.clearColor = r), (this.clearAlpha = void 0 !== o ? o : 0), (this.clear = !0), (this.clearDepth = !1), (this.needsSwap = !1);
                };
            r.prototype = Object.assign(Object.create(i.a.prototype), {
                constructor: r,
                render: function (t, e, n) {
                    var i,
                        r,
                        o,
                        a = t.autoClear;
                    (t.autoClear = !1),
                        void 0 !== this.overrideMaterial && ((o = this.scene.overrideMaterial), (this.scene.overrideMaterial = this.overrideMaterial)),
                        this.clearColor && ((i = t.getClearColor().getHex()), (r = t.getClearAlpha()), t.setClearColor(this.clearColor, this.clearAlpha)),
                        this.clearDepth && t.clearDepth(),
                        t.setRenderTarget(this.renderToScreen ? null : n),
                        this.clear && t.clear(t.autoClearColor, t.autoClearDepth, t.autoClearStencil),
                        t.render(this.scene, this.camera),
                        this.clearColor && t.setClearColor(i, r),
                        void 0 !== this.overrideMaterial && (this.scene.overrideMaterial = o),
                        (t.autoClear = a);
                },
            });
        },
        function (t, e, n) {
            "use strict";
            Object.defineProperty(e, "__esModule", { value: !0 }), (e.default = void 0);
            var i = a(n(14)),
                r = a(n(4)),
                o = a(n(7));
            function a(t) {
                return t && t.__esModule ? t : { default: t };
            }
            function s(t) {
                return (s =
                    "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                        ? function (t) {
                              return typeof t;
                          }
                        : function (t) {
                              return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                          })(t);
            }
            function c(t, e) {
                for (var n = 0; n < e.length; n++) {
                    var i = e[n];
                    (i.enumerable = i.enumerable || !1), (i.configurable = !0), "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);
                }
            }
            function l(t, e) {
                return !e || ("object" !== s(e) && "function" != typeof e)
                    ? (function (t) {
                          if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                          return t;
                      })(t)
                    : e;
            }
            function u(t, e, n) {
                return (u =
                    "undefined" != typeof Reflect && Reflect.get
                        ? Reflect.get
                        : function (t, e, n) {
                              var i = (function (t, e) {
                                  for (; !Object.prototype.hasOwnProperty.call(t, e) && null !== (t = h(t)); );
                                  return t;
                              })(t, e);
                              if (i) {
                                  var r = Object.getOwnPropertyDescriptor(i, e);
                                  return r.get ? r.get.call(n) : r.value;
                              }
                          })(t, e, n || t);
            }
            function h(t) {
                return (h = Object.setPrototypeOf
                    ? Object.getPrototypeOf
                    : function (t) {
                          return t.__proto__ || Object.getPrototypeOf(t);
                      })(t);
            }
            function p(t, e) {
                return (p =
                    Object.setPrototypeOf ||
                    function (t, e) {
                        return (t.__proto__ = e), t;
                    })(t, e);
            }
            var d = n(1),
                f = (function () {
                    function t(e) {
                        return (
                            (function (t, e) {
                                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                            })(this, t),
                            l(this, h(t).call(this, e))
                        );
                    }
                    var e, n, a;
                    return (
                        (function (t, e) {
                            if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                            (t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } })), e && p(t, e);
                        })(t, i.default),
                        (e = t),
                        (n = [
                            {
                                key: "_extra",
                                value: function () {
                                    u(h(t.prototype), "_extra", this).call(this), (this._shown = !1), this._getElements();
                                },
                            },
                            {
                                key: "_getElements",
                                value: function () {
                                    var t = this._prop.selectors;
                                    (this._outer = d.one(t.outer)), (this._button = d.one(t.button));
                                },
                            },
                            {
                                key: "_setEvents",
                                value: function () {
                                    u(h(t.prototype), "_setEvents", this).call(this), this._button && this.listener(this._button, "click", this._buttonClick.bind(this));
                                },
                            },
                            {
                                key: "_buttonClick",
                                value: function (t) {
                                    this._prop.events && (t.preventDefault(), this.toggle());
                                },
                            },
                            {
                                key: "show",
                                value: function () {
                                    return !this._shown && this.toggle();
                                },
                            },
                            {
                                key: "hide",
                                value: function () {
                                    return !!this._shown && this.toggle();
                                },
                            },
                            {
                                key: "toggle",
                                value: function () {
                                    var t = this._prop.delays;
                                    return this._shown ? (0, o.default)(this._hide.bind(this), t.hide) : (0, o.default)(this._show.bind(this), t.show), !0;
                                },
                            },
                            {
                                key: "_show",
                                value: function () {
                                    this.lbt("show"), (this._shown = !0);
                                },
                            },
                            {
                                key: "_hide",
                                value: function () {
                                    this.lbt("hide"), (this._shown = !1);
                                },
                            },
                            {
                                key: "prefix",
                                get: function () {
                                    return "".concat(this._v.prefix, "menu");
                                },
                            },
                            {
                                key: "defaultProp",
                                get: function () {
                                    return (0, r.default)(u(h(t.prototype), "defaultProp", this), { events: !0, selectors: { outer: ".".concat(this._prefix), button: ".".concat(this._prefix, "-button") }, delays: { show: 0, hide: 0 } });
                                },
                            },
                            {
                                key: "shown",
                                get: function () {
                                    return this._shown;
                                },
                            },
                        ]) && c(e.prototype, n),
                        a && c(e, a),
                        t
                    );
                })();
            e.default = f;
        },
        function (t, e) {
            "use strict";
            Object.defineProperty(e, "__esModule", { value: !0 }), (e.default = void 0);
            var n = function (t, e) {
                for (var n = [], i = 1 / (t - e * (t - 1)), r = 0; r < t; r++) {
                    var o = i * (1 - e) * r,
                        a = o + i;
                    n.push([o, a]);
                }
                return n;
            };
            e.default = n;
        },
        function (t, e, n) {
            "use strict";
            Object.defineProperty(e, "__esModule", { value: !0 }), (e.default = void 0);
            var i = s(n(14)),
                r = s(n(4)),
                o = s(n(7)),
                a = s(n(66));
            function s(t) {
                return t && t.__esModule ? t : { default: t };
            }
            function c(t) {
                return (c =
                    "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                        ? function (t) {
                              return typeof t;
                          }
                        : function (t) {
                              return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                          })(t);
            }
            function l(t, e) {
                for (var n = 0; n < e.length; n++) {
                    var i = e[n];
                    (i.enumerable = i.enumerable || !1), (i.configurable = !0), "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);
                }
            }
            function u(t, e) {
                return !e || ("object" !== c(e) && "function" != typeof e)
                    ? (function (t) {
                          if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                          return t;
                      })(t)
                    : e;
            }
            function h(t, e, n) {
                return (h =
                    "undefined" != typeof Reflect && Reflect.get
                        ? Reflect.get
                        : function (t, e, n) {
                              var i = (function (t, e) {
                                  for (; !Object.prototype.hasOwnProperty.call(t, e) && null !== (t = p(t)); );
                                  return t;
                              })(t, e);
                              if (i) {
                                  var r = Object.getOwnPropertyDescriptor(i, e);
                                  return r.get ? r.get.call(n) : r.value;
                              }
                          })(t, e, n || t);
            }
            function p(t) {
                return (p = Object.setPrototypeOf
                    ? Object.getPrototypeOf
                    : function (t) {
                          return t.__proto__ || Object.getPrototypeOf(t);
                      })(t);
            }
            function d(t, e) {
                return (d =
                    Object.setPrototypeOf ||
                    function (t, e) {
                        return (t.__proto__ = e), t;
                    })(t, e);
            }
            var f = n(63),
                m = n(1),
                v = n(35),
                g = (function () {
                    function t(e) {
                        return (
                            (function (t, e) {
                                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                            })(this, t),
                            u(this, p(t).call(this, e))
                        );
                    }
                    var e, n, s;
                    return (
                        (function (t, e) {
                            if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                            (t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } })), e && d(t, e);
                        })(t, i.default),
                        (e = t),
                        (n = [
                            {
                                key: "_extra",
                                value: function () {
                                    h(p(t.prototype), "_extra", this).call(this);
                                    var e = this._prefix;
                                    (this._data = { ease: "data-".concat(e, "-ease") }),
                                        (this._properties = { current: "".concat(e, "-current"), ease: "".concat(e, "-ease") }),
                                        (this._targetTop = 0),
                                        (this._targetLeft = 0),
                                        (this._scrollTop = 0),
                                        (this._scrollLeft = 0),
                                        (this._instant = !1),
                                        (this._direction = 1),
                                        (this._width = 1),
                                        (this._height = 1),
                                        (this._widthOuter = 1),
                                        (this._heightOuter = 1),
                                        (this._frame = !1),
                                        this._elGet(),
                                        this._elCreate();
                                },
                            },
                            {
                                key: "_init",
                                value: function () {
                                    h(p(t.prototype), "_init", this).call(this), this._run();
                                },
                            },
                            {
                                key: "_changeProp",
                                value: function (e) {
                                    h(p(t.prototype), "_changeProp", this).call(this, e), this._elGet(!0), this.setSize(), this._run();
                                },
                            },
                            {
                                key: "_elGet",
                                value: function () {
                                    var t = this._prop,
                                        e = t.selectors;
                                    (this._outer = m.one(e.outer)), this._outer.classList.add(this._prefix), (this._el = m.all(e.elements));
                                    var n = this._el;
                                    this._length = n.length;
                                    var i = "";
                                    t.willChange && (i = t.useTransform ? "transform" : "top, left");
                                    for (var r = 0; r < n.length; r++) n[r].style.willChange = i;
                                },
                            },
                            {
                                key: "_elProp",
                                value: function () {
                                    for (var t = 0; t < this._length; t++) {
                                        var e = this._el[t],
                                            n = this._properties,
                                            i = n.current,
                                            r = this._data.ease;
                                        e[i] = [this._scrollLeft, this.scrollTop];
                                        var o = e.getAttribute(r);
                                        (r = o ? parseFloat(o) : this._prop.ease), (e[n.ease] = r);
                                    }
                                },
                            },
                            {
                                key: "_elCreate",
                                value: function () {
                                    for (this._container = f({ selector: "div", styles: "".concat(this._prefix, "__container") }); this._outer.firstChild; ) this._container.appendChild(this._outer.firstChild);
                                    this._outer.appendChild(this._container);
                                },
                            },
                            {
                                key: "_setEvents",
                                value: function () {
                                    var t = this;
                                    this.setSize(),
                                        this.addEvent("viewport", {
                                            target: "",
                                            name: this.name,
                                            do: function () {
                                                (0, o.default)(function () {
                                                    t.setSize(!0);
                                                }, t._prop.resizeTimeout);
                                            },
                                        }),
                                        this.addEventListener({ el: this._outer, target: "wheel", do: this._wheel.bind(this), passive: !0 }),
                                        this.addEventListener({ el: this._outer, target: "scroll", do: this._onScroll.bind(this), passive: !0 });
                                },
                            },
                            {
                                key: "setSize",
                                value: function () {
                                    var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                                    if (this._prop.run) {
                                        var e = this._container,
                                            n = this._outer;
                                        (this._width = e.clientWidth),
                                            (this._height = e.clientHeight),
                                            (this._widthOuter = n.clientWidth),
                                            (this._heightOuter = n.clientHeight),
                                            this._width < this._widthOuter && (this._width = this._widthOuter),
                                            this._height < this._heightOuter && (this._height = this._heightOuter),
                                            t && (this._instant = !0),
                                            t && (this._boundaries(!1), this._boundaries(!0)),
                                            this._elProp(),
                                            this.lbt("size");
                                    }
                                },
                            },
                            {
                                key: "_wheel",
                                value: function (t) {
                                    var e = this._prop;
                                    if (e.run & e.scroll) {
                                        e.propagation || t.stopPropagation();
                                        var n = (0, a.default)(t),
                                            i = n.pixelX,
                                            r = n.pixelY;
                                        e.horizontal && ((i = n.pixelY), (r = n.pixelX)), (this.targetLeft += i), (this.targetTop += r), this._boundaries(!1), this._boundaries(!0);
                                        var o = "pixelY";
                                        e.horizontal && (o = "pixelX"), n[o] < 0 ? (this._direction = -1) : (this._direction = 1), this.play(), this.lbt("wheel", t);
                                    }
                                },
                            },
                            {
                                key: "_onScroll",
                                value: function () {
                                    this._prop.run && ((this._outer.scrollTop = 0), (this._outer.scrollLeft = 0));
                                },
                            },
                            {
                                key: "_boundaries",
                                value: function () {
                                    var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
                                        e = this._targetTop,
                                        n = this._targetLeft;
                                    if (t) {
                                        var i = this._height - this._heightOuter;
                                        e < 0 && (this.targetTop = 0), e > i && (this.targetTop = i);
                                    } else {
                                        var r = this._width - this._widthOuter;
                                        n < 0 && (this.targetLeft = 0), n > r && (this.targetLeft = r);
                                    }
                                },
                            },
                            {
                                key: "_boundariesBoth",
                                value: function () {
                                    this._boundaries(!1), this._boundaries();
                                },
                            },
                            {
                                key: "_run",
                                value: function () {
                                    this._prop.run ? this.play() : this.stop();
                                },
                            },
                            {
                                key: "play",
                                value: function () {
                                    !this._frame & this._prop.run && (this._prop.frame ? (this._frame = this._prop.frame.on("frame", this.animate.bind(this))) : (this._frame = window.requestAnimationFrame(this.animate.bind(this))));
                                },
                            },
                            {
                                key: "stop",
                                value: function () {
                                    var t = this._frame;
                                    t && (this._prop.frame ? this._prop.frame.remove(this._frame) : window.cancelAnimationFrame(t), (this._frame = !1));
                                },
                            },
                            {
                                key: "animate",
                                value: function () {
                                    this._autoResize();
                                    var t = !1;
                                    this._instant && ((t = !0), (this._instant = !1)),
                                        this._calcScrollValues(t),
                                        this._calcElValues(t),
                                        this._render(),
                                        this.lbt("update", { left: this._scrollLeft, top: this._scrollTop }),
                                        this._prop.frame || (this._frame = window.requestAnimationFrame(this.animate.bind(this))),
                                        (Math.abs(this._targetTop - this._scrollTop) < 0.01) & (Math.abs(this._targetLeft - this._scrollLeft) < 0.01) && (this._prop.autoStop && this.stop(), this.lbt("approximate"));
                                },
                            },
                            {
                                key: "_autoResize",
                                value: function () {
                                    var t = this._prop,
                                        e = this._container;
                                    if (t.resizeOnUpdate) {
                                        var n = e.clientHeight,
                                            i = e.clientWidth;
                                        (n == this._height && i == this._width) || this.setSize();
                                    }
                                },
                            },
                            {
                                key: "_calcElValues",
                                value: function (t) {
                                    for (var e = this._properties, n = 0; n < this._length; n++) {
                                        var i = this._el[n],
                                            r = this._getEase(i, t),
                                            o = i[e.current];
                                        r === this._prop.ease
                                            ? ((o[0] = this._scrollLeft), (o[1] = this._scrollTop))
                                            : ((o[0] = this._r(v(o[0], this._targetLeft, r))), (o[1] = this._r(v(o[1], this._targetTop, r))), this._prop.round && ((o[0] = Math.round(o[0])), (o[1] = Math.round(o[1]))));
                                    }
                                },
                            },
                            {
                                key: "_calcScrollValues",
                                value: function (t) {
                                    var e = this._getEase(null, t);
                                    (this._scrollLeft = this._r(v(this._scrollLeft, this._targetLeft, e))),
                                        (this._scrollTop = this._r(v(this._scrollTop, this._targetTop, e))),
                                        this._prop.round && ((this._scrollLeft = Math.round(this._scrollLeft)), (this._scrollTop = Math.round(this._scrollTop)));
                                },
                            },
                            {
                                key: "_r",
                                value: function (t, e) {
                                    return (e = void 0 !== e ? Math.pow(10, e) : 1e3), Math.round(t * e) / e;
                                },
                            },
                            {
                                key: "_getEase",
                                value: function (t, e) {
                                    return e ? 1 : null == t ? this._prop.ease : t[this._properties.ease];
                                },
                            },
                            {
                                key: "_render",
                                value: function () {
                                    for (var t = 0; t < this._length; t++) {
                                        var e = this._el[t],
                                            n = e[this._properties.current],
                                            i = -n[0],
                                            r = -n[1];
                                        this._prop.useTransform
                                            ? (e.style.transform = "\n                    matrix3d(1,0,0.00,0,0.00,1,0.00,0,0,0,1,0, ".concat(i, ", ").concat(r, ", 0,1)\n                "))
                                            : ((e.style.left = i + "px"), (e.style.top = r + "px"));
                                    }
                                },
                            },
                            {
                                key: "destroy",
                                value: function () {
                                    h(p(t.prototype), "destroy", this).call(this), (this._prop.run = !1), this._run();
                                    for (var e = this._container, n = e.children, i = this._outer, r = 0; r < n.length; r++) i.appendChild(n[r]);
                                    i.removeChild(e), i.classList.remove(this._prefix);
                                    for (var o = 0; o < this._el.length; o++) {
                                        var a = this._el[o];
                                        (a.style.transform = ""), (a.style.willChange = "");
                                    }
                                },
                            },
                            {
                                key: "prefix",
                                get: function () {
                                    return "".concat(this._v.prefix, "scroll");
                                },
                            },
                            {
                                key: "defaultProp",
                                get: function () {
                                    var e = this._prefix;
                                    return (0, r.default)(h(p(t.prototype), "defaultProp", this), {
                                        selectors: { outer: ".".concat(e), elements: ".".concat(e, "__el") },
                                        run: !0,
                                        frame: !1,
                                        resizeOnUpdate: !0,
                                        resizeTimeout: 0,
                                        scroll: !0,
                                        autoStop: !0,
                                        horizontal: !1,
                                        ease: 0.1,
                                        propagation: !1,
                                        willChange: !1,
                                        round: !1,
                                        useTransform: !0,
                                    });
                                },
                            },
                            {
                                key: "outer",
                                get: function () {
                                    return this._outer;
                                },
                            },
                            {
                                key: "elements",
                                get: function () {
                                    return this._el;
                                },
                            },
                            {
                                key: "sizes",
                                get: function () {
                                    return [this._width, this._height];
                                },
                            },
                            {
                                key: "scrollWidth",
                                get: function () {
                                    return this._width;
                                },
                            },
                            {
                                key: "scrollHeight",
                                get: function () {
                                    return this._height;
                                },
                            },
                            {
                                key: "outerSizes",
                                get: function () {
                                    return [this._widthOuter, this._heightOuter];
                                },
                            },
                            {
                                key: "width",
                                get: function () {
                                    return this._widthOuter;
                                },
                            },
                            {
                                key: "height",
                                get: function () {
                                    return this._heightOuter;
                                },
                            },
                            {
                                key: "scrollTop",
                                get: function () {
                                    return this._scrollTop;
                                },
                                set: function (t) {
                                    (this._targetTop = t), this._boundaries(!0), (this._instant = !0), this.play();
                                },
                            },
                            {
                                key: "scrollLeft",
                                get: function () {
                                    return this._scrollLeft;
                                },
                                set: function (t) {
                                    (this._targetLeft = t), this._boundaries(!1), (this._instant = !0), this.play();
                                },
                            },
                            {
                                key: "scrollValues",
                                set: function (t) {
                                    (this._targetLeft = t[0]), (this._targetTop = t[1]), this._boundaries(!1), this._boundaries(), (this._instant = !0), this.play();
                                },
                            },
                            {
                                key: "targetLeft",
                                get: function () {
                                    return this._targetLeft;
                                },
                                set: function (t) {
                                    (this._targetLeft = t), this.play();
                                },
                            },
                            {
                                key: "targetTop",
                                get: function () {
                                    return this._targetTop;
                                },
                                set: function (t) {
                                    (this._targetTop = t), this.play();
                                },
                            },
                        ]) && l(e.prototype, n),
                        s && l(e, s),
                        t
                    );
                })();
            e.default = g;
        },
        function (t, e, n) {
            "use strict";
            Object.defineProperty(e, "__esModule", { value: !0 }), (e.default = void 0);
            var i = a(n(14)),
                r = a(n(4)),
                o = a(n(99));
            function a(t) {
                return t && t.__esModule ? t : { default: t };
            }
            function s(t) {
                return (s =
                    "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                        ? function (t) {
                              return typeof t;
                          }
                        : function (t) {
                              return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                          })(t);
            }
            function c(t, e) {
                for (var n = 0; n < e.length; n++) {
                    var i = e[n];
                    (i.enumerable = i.enumerable || !1), (i.configurable = !0), "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);
                }
            }
            function l(t, e) {
                return !e || ("object" !== s(e) && "function" != typeof e)
                    ? (function (t) {
                          if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                          return t;
                      })(t)
                    : e;
            }
            function u(t, e, n) {
                return (u =
                    "undefined" != typeof Reflect && Reflect.get
                        ? Reflect.get
                        : function (t, e, n) {
                              var i = (function (t, e) {
                                  for (; !Object.prototype.hasOwnProperty.call(t, e) && null !== (t = h(t)); );
                                  return t;
                              })(t, e);
                              if (i) {
                                  var r = Object.getOwnPropertyDescriptor(i, e);
                                  return r.get ? r.get.call(n) : r.value;
                              }
                          })(t, e, n || t);
            }
            function h(t) {
                return (h = Object.setPrototypeOf
                    ? Object.getPrototypeOf
                    : function (t) {
                          return t.__proto__ || Object.getPrototypeOf(t);
                      })(t);
            }
            function p(t, e) {
                return (p =
                    Object.setPrototypeOf ||
                    function (t, e) {
                        return (t.__proto__ = e), t;
                    })(t, e);
            }
            var d = n(63),
                f = n(1),
                m = (function () {
                    function t(e) {
                        return (
                            (function (t, e) {
                                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                            })(this, t),
                            l(this, h(t).call(this, e))
                        );
                    }
                    var e, n, a;
                    return (
                        (function (t, e) {
                            if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                            (t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } })), e && p(t, e);
                        })(t, i.default),
                        (e = t),
                        (n = [
                            {
                                key: "_callbackData",
                                value: function () {
                                    return { active: this.active, value: this.value, options: this._options, select: this._select, outer: this._outer };
                                },
                            },
                            {
                                key: "_extra",
                                value: function () {
                                    u(h(t.prototype), "_extra", this).call(this),
                                        (this._multiple = !1),
                                        (this._opened = !1),
                                        (this._animating = !1),
                                        (this._actives = []),
                                        (this._li = []),
                                        this._elementsGet(),
                                        this._elementsCreate(),
                                        this._setClasses();
                                },
                            },
                            {
                                key: "_changeProp",
                                value: function (e) {
                                    u(h(t.prototype), "_changeProp", this).call(this, e), this._setClasses();
                                },
                            },
                            {
                                key: "_setClasses",
                                value: function () {
                                    var t = this._prop,
                                        e = this._prefix,
                                        n = "".concat(e, "__search_hide"),
                                        i = "".concat(e, "__values_hide-active");
                                    t.search.on ? this._search.classList.remove(n) : this._search.classList.add(n), t.showSelected ? this._values.classList.remove(i) : this._values.classList.add(i);
                                },
                            },
                            {
                                key: "_elementsGet",
                                value: function () {
                                    (this._select = f.one(this._prop.selector)),
                                        (this._select.style.display = "none"),
                                        this._select.multiple && (this._multiple = !0),
                                        (this._options = this._select.querySelectorAll("option")),
                                        (this._parent = this._select.parentElement);
                                },
                            },
                            {
                                key: "_elementsCreate",
                                value: function () {
                                    var t = this._prefix;
                                    (this._outer = d({ selector: "div", styles: "".concat(t) })),
                                        this._parent.insertBefore(this._outer, this._select),
                                        (this._placeholder = d({ selector: "div", styles: "".concat(t, "__placeholder") })),
                                        this._outer.appendChild(this._placeholder),
                                        (this._container = d({ selector: "div", styles: "".concat(t, "__container") })),
                                        this._outer.appendChild(this._container),
                                        (this._content = d({ selector: "div", styles: "".concat(t, "__content") })),
                                        this._container.appendChild(this._content),
                                        (this._search = d({ selector: "div", styles: "".concat(t, "__search") })),
                                        this._content.appendChild(this._search),
                                        (this._input = d({ selector: "input", attr: { type: "text", placeholder: this._prop.search.placeholder }, styles: "".concat(t, "__input") })),
                                        this._search.appendChild(this._input),
                                        (this._values = d({ selector: "ul", styles: "".concat(t, "__values") })),
                                        this._content.appendChild(this._values);
                                    for (var e = 0; e < this._options.length; e++) {
                                        var n = this._options[e],
                                            i = n.innerHTML,
                                            r = d({ selector: "li", styles: "".concat(t, "__value") });
                                        (r.innerHTML = i), n.selected && (r.classList.add("".concat(t, "__value_active")), this._actives.push(e)), this._li.push(r), this._values.appendChild(r);
                                    }
                                    (0 === this._actives.length) & (this._options.length > 0) && ((this._options[0].selected = !0), (this._actives = [0])), this._change(!1);
                                },
                            },
                            {
                                key: "_setEvents",
                                value: function () {
                                    var t = this;
                                    this._placeholder.addEventListener("click", function () {
                                        t.toggle();
                                    });
                                    for (
                                        var e = function (e) {
                                                t._li[e].addEventListener("click", function () {
                                                    t._changeValue(e);
                                                });
                                            },
                                            n = 0;
                                        n < this._li.length;
                                        n++
                                    )
                                        e(n);
                                    this.listener(window, "click", this._windowClick.bind(this)),
                                        this.listener(this._select, "change", this._changeSelect.bind(this)),
                                        this._input.addEventListener("keyup", function () {
                                            t._searchKeyup();
                                        });
                                },
                            },
                            {
                                key: "_windowClick",
                                value: function (t) {
                                    !(0, o.default)(t.target, this._outer) & this._opened & this._prop.close.out && this.close();
                                },
                            },
                            {
                                key: "_searchKeyup",
                                value: function () {
                                    if (this._prop.search.on) {
                                        var t = "".concat(this._prefix, "__value_hide"),
                                            e = this._input.value;
                                        0 === e.length
                                            ? this._li.forEach(function (e) {
                                                  e.classList.remove(t);
                                              })
                                            : this._li.forEach(function (n) {
                                                  n.innerText.toLowerCase().includes(e.toLowerCase()) ? n.classList.remove(t) : n.classList.add(t);
                                              });
                                    }
                                },
                            },
                            {
                                key: "_searchReset",
                                value: function () {
                                    (this._input.value = ""), this._searchKeyup();
                                },
                            },
                            {
                                key: "_getValues",
                                value: function () {
                                    for (var t = [], e = 0; e < this._options.length; e++) this._actives.includes(e) && t.push(this._options[e].value);
                                    return t;
                                },
                            },
                            {
                                key: "_getTexts",
                                value: function () {
                                    for (var t = [], e = 0; e < this._options.length; e++) this._actives.includes(e) && t.push(this._options[e].innerText);
                                    return t;
                                },
                            },
                            {
                                key: "_change",
                                value: function () {
                                    var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
                                        e = this._prefix,
                                        n = "".concat(e, "__value_active");
                                    this._prop.changePlaceholder && (this._placeholder.innerHTML = "<span>".concat(this._getTexts().join(", "), '</span> <div class="').concat(e, '__arrow"></div>'));
                                    for (var i = 0; i < this._li.length; i++) {
                                        var r = this._li[i];
                                        this._actives.includes(i) ? r.classList.add(n) : r.classList.remove(n);
                                    }
                                    t && this.lbt("change", this._callbackData());
                                },
                            },
                            {
                                key: "_changeValue",
                                value: function (t) {
                                    var e = this._options[t];
                                    this._multiple && e.selected ? (e.selected = !1) : (e.selected = !0), this._select.dispatchEvent(new Event("change")), this._prop.close.change && this.close();
                                },
                            },
                            {
                                key: "_changeSelect",
                                value: function () {
                                    var t = [],
                                        e = 0;
                                    this._options.forEach(function (n) {
                                        n.selected && t.push(e), e++;
                                    }),
                                        (this._actives = t),
                                        this._change();
                                },
                            },
                            {
                                key: "toggle",
                                value: function () {
                                    return !this._animating && (this._opened ? this.close() : this.open(), !0);
                                },
                            },
                            {
                                key: "open",
                                value: function () {
                                    var t = this;
                                    if (this._opened || this._animating) return !1;
                                    var e = this._prefix;
                                    return (
                                        this._searchReset(),
                                        (this._opened = !0),
                                        (this._animating = !0),
                                        this._outer.classList.add("".concat(e, "_opened")),
                                        this._container.classList.add("".concat(e, "__container_opened")),
                                        setTimeout(function () {
                                            t._outer.classList.add("".concat(e, "_animate")),
                                                t._container.classList.add("".concat(e, "__container_animate")),
                                                t.lbt("open", t._callbackData()),
                                                setTimeout(function () {
                                                    (t._animating = !1), t.lbt("opened", t._callbackData());
                                                }, t._prop.duration);
                                        }, 15),
                                        !0
                                    );
                                },
                            },
                            {
                                key: "close",
                                value: function () {
                                    var t = this;
                                    if (!this._opened || this._animating) return !1;
                                    (this._opened = !1), (this._animating = !0);
                                    var e = this._prefix;
                                    return (
                                        this._outer.classList.remove("".concat(e, "_animate")),
                                        this._container.classList.remove("".concat(e, "__container_animate")),
                                        this.lbt("close", this._callbackData()),
                                        setTimeout(function () {
                                            t._outer.classList.remove("".concat(e, "_opened")), t._container.classList.remove("".concat(e, "__container_opened")), (t._animating = !1), t.lbt("closed", t._callbackData());
                                        }, this._prop.duration),
                                        !0
                                    );
                                },
                            },
                            {
                                key: "destroy",
                                value: function () {
                                    u(h(t.prototype), "destroy", this).call(this), this._outer.remove(), (this._select.style.display = "");
                                },
                            },
                            {
                                key: "prefix",
                                get: function () {
                                    return "".concat(this._v.prefix, "select");
                                },
                            },
                            {
                                key: "defaultProp",
                                get: function () {
                                    return (0, r.default)(u(h(t.prototype), "defaultProp", this), {
                                        selector: ".".concat(this._prefix),
                                        showSelected: !0,
                                        changePlaceholder: !0,
                                        duration: 250,
                                        search: { on: !1, placeholder: "Type to search" },
                                        close: { change: !0, out: !0 },
                                    });
                                },
                            },
                            {
                                key: "select",
                                get: function () {
                                    return this._select;
                                },
                            },
                            {
                                key: "options",
                                get: function () {
                                    return this._options;
                                },
                            },
                            {
                                key: "opened",
                                get: function () {
                                    return this._opened;
                                },
                            },
                            {
                                key: "multiple",
                                get: function () {
                                    return this._multiple;
                                },
                            },
                            {
                                key: "animating",
                                get: function () {
                                    return this._animating;
                                },
                            },
                            {
                                key: "active",
                                get: function () {
                                    return this._actives.length > 1 ? this._actives : this._actives.length > 0 && this._actives[0];
                                },
                            },
                            {
                                key: "value",
                                get: function () {
                                    var t = this._getValues();
                                    return t.length > 1 ? t : t.length > 0 && t[0];
                                },
                            },
                        ]) && c(e.prototype, n),
                        a && c(e, a),
                        t
                    );
                })();
            e.default = m;
        },
        function (t, e) {
            "use strict";
            Object.defineProperty(e, "__esModule", { value: !0 }), (e.default = void 0);
            var n = function (t, e) {
                return (function t(e, n) {
                    var i = !1;
                    return e === n && (i = !0), !0 === i || (null !== e && t(e.parentNode, n));
                })(t, e);
            };
            e.default = n;
        },
        function (t, e, n) {
            "use strict";
            Object.defineProperty(e, "__esModule", { value: !0 }), (e.default = void 0);
            var i = c(n(70)),
                r = c(n(4)),
                o = c(n(16)),
                a = c(n(34)),
                s = c(n(18));
            function c(t) {
                return t && t.__esModule ? t : { default: t };
            }
            function l(t) {
                return (l =
                    "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                        ? function (t) {
                              return typeof t;
                          }
                        : function (t) {
                              return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                          })(t);
            }
            function u(t, e) {
                for (var n = 0; n < e.length; n++) {
                    var i = e[n];
                    (i.enumerable = i.enumerable || !1), (i.configurable = !0), "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);
                }
            }
            function h(t, e) {
                return !e || ("object" !== l(e) && "function" != typeof e)
                    ? (function (t) {
                          if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                          return t;
                      })(t)
                    : e;
            }
            function p(t, e, n) {
                return (p =
                    "undefined" != typeof Reflect && Reflect.get
                        ? Reflect.get
                        : function (t, e, n) {
                              var i = (function (t, e) {
                                  for (; !Object.prototype.hasOwnProperty.call(t, e) && null !== (t = d(t)); );
                                  return t;
                              })(t, e);
                              if (i) {
                                  var r = Object.getOwnPropertyDescriptor(i, e);
                                  return r.get ? r.get.call(n) : r.value;
                              }
                          })(t, e, n || t);
            }
            function d(t) {
                return (d = Object.setPrototypeOf
                    ? Object.getPrototypeOf
                    : function (t) {
                          return t.__proto__ || Object.getPrototypeOf(t);
                      })(t);
            }
            function f(t, e) {
                return (f =
                    Object.setPrototypeOf ||
                    function (t, e) {
                        return (t.__proto__ = e), t;
                    })(t, e);
            }
            var m = n(10),
                v = n(102),
                g = n(103),
                y = (function () {
                    function t(e) {
                        return (
                            (function (t, e) {
                                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                            })(this, t),
                            h(this, d(t).call(this, e))
                        );
                    }
                    var e, n, c;
                    return (
                        (function (t, e) {
                            if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                            (t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } })), e && f(t, e);
                        })(t, i.default),
                        (e = t),
                        (n = [
                            {
                                key: "_extra",
                                value: function () {
                                    (this._playing = !1), (this._timeline = !1), p(d(t.prototype), "_extra", this).call(this);
                                },
                            },
                            {
                                key: "_resize",
                                value: function () {
                                    var t = this;
                                    setTimeout(function () {
                                        t._resizeText();
                                    }, this._prop.resizeTimeout);
                                },
                            },
                            {
                                key: "_resizeText",
                                value: function () {
                                    var t = this;
                                    this._playing
                                        ? this._timeline.add({
                                              target: "end",
                                              do: function () {
                                                  t._resizeFunc();
                                              },
                                              once: !0,
                                          })
                                        : this._resizeFunc();
                                },
                            },
                            {
                                key: "play",
                                value: function (t) {
                                    if (this._playing) return this._timeline;
                                    var e = {
                                        types: ["letter"],
                                        durationElement: 250,
                                        durationAuto: !0,
                                        duration: 2500,
                                        easing: "linear",
                                        easingEl: this._vp.easing,
                                        letter: [],
                                        word: [],
                                        line: [],
                                        shift: 0.2,
                                        shiftLine: 0.2,
                                        reverse: !1,
                                        reverseComposite: !1,
                                        shuffle: !1,
                                        center: !1,
                                        callbacks: [],
                                    };
                                    ((e = (0, r.default)(e, t)).letter = this._mergeSettingStyle(e.letter)), (e.word = this._mergeSettingStyle(e.word)), (e.line = this._mergeSettingStyle(e.line));
                                    for (var n = [], i = 0; i < e.types.length; i++) {
                                        var o = e.types[i],
                                            a = o;
                                        ("letter" !== o && "word" !== o && "line" !== o) || (a = "elementary"),
                                            ("lineletter" !== o && "lineword" !== o && "wordletter" !== o) || (a = "composite_elementary"),
                                            void 0 !== this["animate_".concat(a)] && n.push(this["animate_".concat(a)](e, o));
                                    }
                                    if (0 === n.length) return !1;
                                    var s = this._calcTypesTime(n);
                                    return (this._timeline = this._animate(s, e)), this._timeline;
                                },
                            },
                            {
                                key: "_mergeSettingStyle",
                                value: function (t) {
                                    for (var e = 0; e < t.length; e++) {
                                        var n = t[e];
                                        void 0 === n.scope && (n.scope = [0, 1]), void 0 === n.remove && (n.remove = !1);
                                    }
                                    return t;
                                },
                            },
                            {
                                key: "_animationInfo",
                                value: function (t) {
                                    var e = t.el.length,
                                        n = t.el.slice(),
                                        i = t.duration,
                                        r = [];
                                    if (t.durationAuto) {
                                        i = e * t.durationElement - (e - 1) * t.shift * t.durationElement;
                                        for (var o = 0; o < e; o++) {
                                            var a = t.durationElement * (1 - t.shift) * o,
                                                s = a + t.durationElement;
                                            r.push({ start: a / i, end: s / i });
                                        }
                                    } else
                                        for (var c = 1 / (e - t.shift * (e - 1)), l = 0; l < e; l++) {
                                            var u = c * (1 - t.shift) * l,
                                                h = u + c;
                                            r.push({ start: u, end: h });
                                        }
                                    for (var p = 0; p < r.length; p++) r[p].el = n[p];
                                    return { duration: i, timelines: r, styles: t.styles };
                                },
                            },
                            {
                                key: "_calcTypesTime",
                                value: function (t) {
                                    for (var e = [], n = 0; n < t.length; n++) e.push(t[n].duration);
                                    for (var i = Math.max.apply(Math, e), r = 0; r < t.length; r++) t[r].scope = [0, t[r].duration / i];
                                    return { animations: t, duration: i };
                                },
                            },
                            {
                                key: "_animate",
                                value: function (t, e) {
                                    var n = this,
                                        i = new o.default();
                                    i.add({ target: "progress", do: this._animateTypes.bind(this, t, e) });
                                    for (var r = e.callbacks.slice(), a = 0; a < r.length; a++) r[a].proceeded = !1;
                                    return (
                                        i.add({ target: "progress", do: this._callbacks.bind(this, r) }),
                                        i.add({
                                            target: "end",
                                            do: function () {
                                                n._playing = !1;
                                            },
                                        }),
                                        (this._playing = !0),
                                        i.play({ duration: t.duration, easing: e.easing }),
                                        i
                                    );
                                },
                            },
                            {
                                key: "_animateTypes",
                                value: function (t, e, n) {
                                    for (var i = t.animations, r = 0; r < i.length; r++) {
                                        var o = 0,
                                            s = i[r].scope;
                                        (n.se >= s[0]) & (n.se <= s[1]) ? (o = (0, a.default)(n.se, s)) : n.se > s[1] && (o = 1), this._animateType(o, i[r], e);
                                    }
                                },
                            },
                            {
                                key: "_animateType",
                                value: function (t, e, n) {
                                    for (var i = 0; i < e.timelines.length; i++) {
                                        var r = 0,
                                            o = e.timelines[i];
                                        (t >= o.start) & (t <= o.end) ? (r = (0, a.default)(t, [o.start, o.end])) : t > o.end && (r = 1);
                                        var s = { styles: e.styles, p: r, prop: n, position: i, total: e.timelines.length },
                                            c = o.el;
                                        if (m(c)) for (var l = 0; l < c.length; l++) this._animateTypeChildren(Object.assign(s, { el: c[l] }));
                                        else this._animateTypeChildren(Object.assign(s, { el: c }));
                                    }
                                },
                            },
                            {
                                key: "_animateTypeChildren",
                                value: function (t) {
                                    this._animateEl({ el: t.el, styles: t.styles, p: t.p, prop: t.prop, position: t.position, total: t.total });
                                },
                            },
                            {
                                key: "_animateEl",
                                value: function (t) {
                                    for (var e = t.p, n = t.el.el, i = t.prop, r = 0; r < t.styles.length; r++) {
                                        var o = t.styles[r],
                                            c = o.scope,
                                            l = o.property,
                                            u = o.value,
                                            h = o.remove,
                                            p = 0,
                                            d = 0;
                                        (e >= c[0]) & (e <= c[1]) ? ((p = (0, a.default)(e, c)), (d = (0, s.default)(p, i.easingEl))) : e > c[1] && ((p = 1), (d = 1));
                                        var f = !1;
                                        if (((1 == p) & h && (f = !0), f)) l && (n.style[l] = "");
                                        else {
                                            var m = u({ p: p, e: d, position: t.position, total: t.total, el: n });
                                            l && (n.style[l] = m);
                                        }
                                    }
                                },
                            },
                            {
                                key: "_callbacks",
                                value: function (t, e) {
                                    for (var n = 0; n < t.length; n++) {
                                        var i = t[n];
                                        e.se >= i.target && (i.proceeded || ((i.proceeded = !0), i.do()));
                                    }
                                },
                            },
                            {
                                key: "prefix",
                                get: function () {
                                    return "".concat(this._v.prefix, "text");
                                },
                            },
                            {
                                key: "playing",
                                get: function () {
                                    return this._playing;
                                },
                            },
                        ]) && u(e.prototype, n),
                        c && u(e, c),
                        t
                    );
                })();
            (e.default = y), (y.prototype.animate_elementary = v), (y.prototype.animate_composite_elementary = g);
        },
        function (t, e) {
            "use strict";
            Object.defineProperty(e, "__esModule", { value: !0 }), (e.default = void 0);
            var n = function (t, e) {
                var n = e.parentNode,
                    i = e.nextSibling;
                i ? n.insertBefore(t, i) : n.appendChild(t);
            };
            e.default = n;
        },
        function (t) {
            "use strict";
            t.exports = function (t, e) {
                var n, i;
                if (
                    ((n = "letter" === e ? this._el.letters : "word" === e ? this._el.words : this._el.lines),
                    (i = "letter" === e ? t.letter : "word" === e ? t.word : t.line),
                    (n = n.slice()),
                    t.reverse && n.reverse(),
                    t.shuffle &&
                        n.sort(function () {
                            return Math.random() - 0.5;
                        }),
                    t.center)
                ) {
                    var r = [],
                        o = Math.ceil(n.length / 2) - 1,
                        a = [],
                        s = (r = n.length % 2 == 0 ? [o, o + 1] : [o])[0],
                        c = r[0];
                    1 === r.length ? a.push(n[r[0]]) : (a.push([n[r[0]], n[r[1]]]), (c = r[1]));
                    for (var l = (n.length - r.length) / 2, u = 1; u <= l; u++) {
                        var h = [];
                        h.push(n[c + u]), h.push(n[s - u]), a.push(h);
                    }
                    n = a;
                }
                return this._animationInfo(Object.assign(t, { el: n, styles: i, type: e }));
            };
        },
        function (t) {
            "use strict";
            function e(t, e, n) {
                var i = [];
                if ("lineletter" == e.type)
                    if (n.appendWords)
                        for (var r = 0; r < t.children.length; r++)
                            for (var o = t.children[r], a = 0; a < o.children.length; a++) {
                                var s = o.children[a];
                                i.push(s);
                            }
                    else i = t.children;
                else ("lineword" != e.type && "wordletter" != e.type) || (i = t.children);
                var c = i.length,
                    l = i.slice();
                return (
                    (l = l.slice()),
                    e.reverse && l.reverse(),
                    e.shuffle &&
                        l.sort(function () {
                            return Math.random() - 0.5;
                        }),
                    { amount: c, el: l }
                );
            }
            t.exports = function (t, n) {
                var i, r;
                return (
                    "lineletter" === n || "wordletter" === n ? (i = t.letter) : "lineword" === n && (i = t.word),
                    "lineletter" === n || "lineword" === n ? (r = this._el.lines.slice()) : "wordletter" === n && (r = this._el.words.slice()),
                    t.reverseComposite && r.reverse(),
                    t.shuffle &&
                        r.sort(function () {
                            return Math.random() - 0.5;
                        }),
                    (function (t, n) {
                        var i = (function (t) {
                                var e = t.parents.length,
                                    n = t.parents.slice();
                                return { amount: e, el: n };
                            })(t),
                            r = t.duration,
                            o = [];
                        if (t.durationAuto) {
                            for (var a = 0, s = 0, c = [], l = [], u = 0; u < i.amount; u++) {
                                var h = e(i.el[u], t, n),
                                    p = h.amount * t.durationElement,
                                    d = (h.amount - 1) * t.shift * t.durationElement,
                                    f = p - d;
                                (a += f), u > 0 && (s += f * t.shiftLine), c.push(f), l.push(h);
                            }
                            r = a - s;
                            for (var m = 0; m < i.amount; m++) {
                                for (var v = 0, g = 0; g < m; g++) v += c[g] - c[g] * t.shiftLine;
                                for (var y = 0; y < l[m].amount; y++) {
                                    var x = v + t.durationElement * (1 - t.shift) * y,
                                        _ = x + t.durationElement;
                                    o.push({ start: x / r, end: _ / r, el: l[m].el[y] });
                                }
                            }
                        } else
                            for (var b = 1 / (i.amount - t.shiftLine * (i.amount - 1)), w = 0; w < i.amount; w++)
                                for (var M = b * (1 - t.shiftLine) * w, S = e(i.el[w], t, n), T = b / (S.amount - t.shift * (S.amount - 1)), E = 0; E < S.amount; E++) {
                                    var A = M + T * (1 - t.shift) * E,
                                        P = A + T;
                                    o.push({ start: A, end: P, el: S.el[E] });
                                }
                        return { duration: r, timelines: o, styles: t.styles };
                    })(Object.assign(t, { styles: i, type: n, parents: r }), this._prop)
                );
            };
        },
        function (t, e, n) {
            "use strict";
            n.d(e, "a", function () {
                return mt;
            });
            var i,
                r,
                o,
                a,
                s,
                c,
                l,
                u,
                h = n(58),
                p = {},
                d = 180 / Math.PI,
                f = Math.PI / 180,
                m = Math.atan2,
                v = /([A-Z])/g,
                g = /(?:left|right|width|margin|padding|x)/i,
                y = /[\s,\(]\S/,
                x = { autoAlpha: "opacity,visibility", scale: "scaleX,scaleY", alpha: "opacity" },
                _ = function (t, e) {
                    return e.set(e.t, e.p, Math.round(1e4 * (e.s + e.c * t)) / 1e4 + e.u, e);
                },
                b = function (t, e) {
                    return e.set(e.t, e.p, 1 === t ? e.e : Math.round(1e4 * (e.s + e.c * t)) / 1e4 + e.u, e);
                },
                w = function (t, e) {
                    return e.set(e.t, e.p, t ? Math.round(1e4 * (e.s + e.c * t)) / 1e4 + e.u : e.b, e);
                },
                M = function (t, e) {
                    var n = e.s + e.c * t;
                    e.set(e.t, e.p, ~~(n + (n < 0 ? -0.5 : 0.5)) + e.u, e);
                },
                S = function (t, e) {
                    return e.set(e.t, e.p, t ? e.e : e.b, e);
                },
                T = function (t, e) {
                    return e.set(e.t, e.p, 1 !== t ? e.b : e.e, e);
                },
                E = function (t, e, n) {
                    return (t.style[e] = n);
                },
                A = function (t, e, n) {
                    return t.style.setProperty(e, n);
                },
                P = function (t, e, n) {
                    return (t._gsap[e] = n);
                },
                L = function (t, e, n) {
                    return (t._gsap.scaleX = t._gsap.scaleY = n);
                },
                C = function (t, e, n, i, r) {
                    var o = t._gsap;
                    (o.scaleX = o.scaleY = n), o.renderTransform(r, o);
                },
                R = function (t, e, n, i, r) {
                    var o = t._gsap;
                    (o[e] = n), o.renderTransform(r, o);
                },
                O = "transform",
                D = O + "Origin",
                I = function (t, e) {
                    var n = r.createElementNS ? r.createElementNS((e || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), t) : r.createElement(t);
                    return n.style ? n : r.createElement(t);
                },
                N = function t(e, n, i) {
                    var r = getComputedStyle(e);
                    return r[n] || r.getPropertyValue(n.replace(v, "-$1").toLowerCase()) || r.getPropertyValue(n) || (!i && t(e, B(n) || n, 1)) || "";
                },
                k = "O,Moz,ms,Ms,Webkit".split(","),
                B = function (t, e, n) {
                    var i = (e || s).style,
                        r = 5;
                    if (t in i && !n) return t;
                    for (t = t.charAt(0).toUpperCase() + t.substr(1); r-- && !(k[r] + t in i); );
                    return r < 0 ? null : (3 === r ? "ms" : r >= 0 ? k[r] : "") + t;
                },
                z = function () {
                    "undefined" != typeof window &&
                        window.document &&
                        ((i = window),
                        (r = i.document),
                        (o = r.documentElement),
                        (s = I("div") || { style: {} }),
                        (c = I("div")),
                        (O = B(O)),
                        (D = B(D)),
                        (s.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0"),
                        (u = !!B("perspective")),
                        (a = 1));
                },
                F = function t(e) {
                    var n,
                        i = I("svg", (this.ownerSVGElement && this.ownerSVGElement.getAttribute("xmlns")) || "http://www.w3.org/2000/svg"),
                        r = this.parentNode,
                        a = this.nextSibling,
                        s = this.style.cssText;
                    if ((o.appendChild(i), i.appendChild(this), (this.style.display = "block"), e))
                        try {
                            (n = this.getBBox()), (this._gsapBBox = this.getBBox), (this.getBBox = t);
                        } catch (t) {}
                    else this._gsapBBox && (n = this._gsapBBox());
                    return r && (a ? r.insertBefore(this, a) : r.appendChild(this)), o.removeChild(i), (this.style.cssText = s), n;
                },
                U = function (t, e) {
                    for (var n = e.length; n--; ) if (t.hasAttribute(e[n])) return t.getAttribute(e[n]);
                },
                j = function (t) {
                    var e;
                    try {
                        e = t.getBBox();
                    } catch (n) {
                        e = F.call(t, !0);
                    }
                    return (e && (e.width || e.height)) || t.getBBox === F || (e = F.call(t, !0)), !e || e.width || e.x || e.y ? e : { x: +U(t, ["x", "cx", "x1"]) || 0, y: +U(t, ["y", "cy", "y1"]) || 0, width: 0, height: 0 };
                },
                G = function (t) {
                    return !(!t.getCTM || (t.parentNode && !t.ownerSVGElement) || !j(t));
                },
                H = function (t, e) {
                    if (e) {
                        var n = t.style;
                        e in p && (e = O), n.removeProperty ? (("ms" !== e.substr(0, 2) && "webkit" !== e.substr(0, 6)) || (e = "-" + e), n.removeProperty(e.replace(v, "-$1").toLowerCase())) : n.removeAttribute(e);
                    }
                },
                V = function (t, e, n, i, r, o) {
                    var a = new h.c(t._pt, e, n, 0, 1, o ? T : S);
                    return (t._pt = a), (a.b = i), (a.e = r), t._props.push(n), a;
                },
                W = { deg: 1, rad: 1, turn: 1 },
                q = function t(e, n, i, o) {
                    var a,
                        c,
                        l,
                        u,
                        d = parseFloat(i) || 0,
                        f = (i + "").trim().substr((d + "").length) || "px",
                        m = s.style,
                        v = g.test(n),
                        y = "svg" === e.tagName.toLowerCase(),
                        x = (y ? "client" : "offset") + (v ? "Width" : "Height"),
                        _ = "px" === o,
                        b = "%" === o;
                    return o === f || !d || W[o] || W[f]
                        ? d
                        : ("px" !== f && !_ && (d = t(e, n, i, "px")),
                          (u = e.getCTM && G(e)),
                          b && (p[n] || ~n.indexOf("adius"))
                              ? Object(h.t)((d / (u ? e.getBBox()[v ? "width" : "height"] : e[x])) * 100)
                              : ((m[v ? "width" : "height"] = 100 + (_ ? f : o)),
                                (c = ~n.indexOf("adius") || ("em" === o && e.appendChild && !y) ? e : e.parentNode),
                                u && (c = (e.ownerSVGElement || {}).parentNode),
                                (c && c !== r && c.appendChild) || (c = r.body),
                                (l = c._gsap) && b && l.width && v && l.time === h.v.time
                                    ? Object(h.t)((d / l.width) * 100)
                                    : ((b || "%" === f) && (m.position = N(e, "position")),
                                      c === e && (m.position = "static"),
                                      c.appendChild(s),
                                      (a = s[x]),
                                      c.removeChild(s),
                                      (m.position = "absolute"),
                                      v && b && (((l = Object(h.h)(c)).time = h.v.time), (l.width = c[x])),
                                      Object(h.t)(_ ? (a * d) / 100 : a && d ? (100 / a) * d : 0))));
                },
                X = function (t, e, n, i) {
                    var r;
                    return (
                        a || z(),
                        e in x && "transform" !== e && ~(e = x[e]).indexOf(",") && (e = e.split(",")[0]),
                        p[e] && "transform" !== e
                            ? ((r = rt(t, i)), (r = "transformOrigin" !== e ? r[e] : ot(N(t, D)) + " " + r.zOrigin + "px"))
                            : (!(r = t.style[e]) || "auto" === r || i || ~(r + "").indexOf("calc(")) && (r = (Q[e] && Q[e](t, e, n)) || N(t, e) || Object(h.i)(t, e) || ("opacity" === e ? 1 : 0)),
                        n && !~(r + "").indexOf(" ") ? q(t, e, r, n) + n : r
                    );
                },
                Y = function (t, e, n, i) {
                    if (!n || "none" === n) {
                        var r = B(e, t, 1),
                            o = r && N(t, r, 1);
                        o && o !== n && ((e = r), (n = o));
                    }
                    var a,
                        s,
                        c,
                        l,
                        u,
                        p,
                        d,
                        f,
                        m,
                        v,
                        g,
                        y,
                        x = new h.c(this._pt, t.style, e, 0, 1, h.r),
                        _ = 0,
                        b = 0;
                    if (
                        ((x.b = n),
                        (x.e = i),
                        (n += ""),
                        "auto" === (i += "") && ((t.style[e] = i), (i = N(t, e) || i), (t.style[e] = n)),
                        (a = [n, i]),
                        Object(h.e)(a),
                        (i = a[1]),
                        (c = (n = a[0]).match(h.o) || []),
                        (i.match(h.o) || []).length)
                    ) {
                        for (; (s = h.o.exec(i)); )
                            (d = s[0]),
                                (m = i.substring(_, s.index)),
                                u ? (u = (u + 1) % 5) : ("rgba(" !== m.substr(-5) && "hsla(" !== m.substr(-5)) || (u = 1),
                                d !== (p = c[b++] || "") &&
                                    ((l = parseFloat(p) || 0),
                                    (g = p.substr((l + "").length)),
                                    (y = "=" === d.charAt(1) ? +(d.charAt(0) + "1") : 0) && (d = d.substr(2)),
                                    (f = parseFloat(d)),
                                    (v = d.substr((f + "").length)),
                                    (_ = h.o.lastIndex - v.length),
                                    v || ((v = v || h.f.units[e] || g), _ === i.length && ((i += v), (x.e += v))),
                                    g !== v && (l = q(t, e, p, v) || 0),
                                    (x._pt = { _next: x._pt, p: m || 1 === b ? m : ",", s: l, c: y ? y * f : f - l, m: u && u < 4 ? Math.round : 0 }));
                        x.c = _ < i.length ? i.substring(_, i.length) : "";
                    } else x.r = "display" === e && "none" === i ? T : S;
                    return h.q.test(i) && (x.e = 0), (this._pt = x), x;
                },
                Z = { top: "0%", bottom: "100%", left: "0%", right: "100%", center: "50%" },
                J = function (t, e) {
                    if (e.tween && e.tween._time === e.tween._dur) {
                        var n,
                            i,
                            r,
                            o = e.t,
                            a = o.style,
                            s = e.u,
                            c = o._gsap;
                        if ("all" === s || !0 === s) (a.cssText = ""), (i = 1);
                        else for (r = (s = s.split(",")).length; --r > -1; ) (n = s[r]), p[n] && ((i = 1), (n = "transformOrigin" === n ? D : O)), H(o, n);
                        i && (H(o, O), c && (c.svg && o.removeAttribute("transform"), rt(o, 1), (c.uncache = 1)));
                    }
                },
                Q = {
                    clearProps: function (t, e, n, i, r) {
                        if ("isFromStart" !== r.data) {
                            var o = (t._pt = new h.c(t._pt, e, n, 0, 0, J));
                            return (o.u = i), (o.pr = -10), (o.tween = r), t._props.push(n), 1;
                        }
                    },
                },
                K = [1, 0, 0, 1, 0, 0],
                $ = {},
                tt = function (t) {
                    return "matrix(1, 0, 0, 1, 0, 0)" === t || "none" === t || !t;
                },
                et = function (t) {
                    var e = N(t, O);
                    return tt(e) ? K : e.substr(7).match(h.n).map(h.t);
                },
                nt = function (t, e) {
                    var n,
                        i,
                        a,
                        s,
                        c = t._gsap || Object(h.h)(t),
                        l = t.style,
                        u = et(t);
                    return c.svg && t.getAttribute("transform")
                        ? "1,0,0,1,0,0" === (u = [(a = t.transform.baseVal.consolidate().matrix).a, a.b, a.c, a.d, a.e, a.f]).join(",")
                            ? K
                            : u
                        : (u !== K ||
                              t.offsetParent ||
                              t === o ||
                              c.svg ||
                              ((a = l.display),
                              (l.display = "block"),
                              ((n = t.parentNode) && r.body.contains(t)) || ((s = 1), (i = t.nextSibling), o.appendChild(t)),
                              (u = et(t)),
                              a ? (l.display = a) : H(t, "display"),
                              s && (i ? n.insertBefore(t, i) : n ? n.appendChild(t) : o.removeChild(t))),
                          e && u.length > 6 ? [u[0], u[1], u[4], u[5], u[12], u[13]] : u);
                },
                it = function (t, e, n, i, r, o) {
                    var a,
                        s,
                        c,
                        l = t._gsap,
                        u = r || nt(t, !0),
                        h = l.xOrigin || 0,
                        p = l.yOrigin || 0,
                        d = l.xOffset || 0,
                        f = l.yOffset || 0,
                        m = u[0],
                        v = u[1],
                        g = u[2],
                        y = u[3],
                        x = u[4],
                        _ = u[5],
                        b = e.split(" "),
                        w = parseFloat(b[0]) || 0,
                        M = parseFloat(b[1]) || 0;
                    n
                        ? u !== K && (s = m * y - v * g) && ((c = w * (-v / s) + M * (m / s) - (m * _ - v * x) / s), (w = w * (y / s) + M * (-g / s) + (g * _ - y * x) / s), (M = c))
                        : ((w = (a = j(t)).x + (~b[0].indexOf("%") ? (w / 100) * a.width : w)), (M = a.y + (~(b[1] || b[0]).indexOf("%") ? (M / 100) * a.height : M))),
                        i || (!1 !== i && l.smooth) ? ((x = w - h), (_ = M - p), (l.xOffset = d + (x * m + _ * g) - x), (l.yOffset = f + (x * v + _ * y) - _)) : (l.xOffset = l.yOffset = 0),
                        (l.xOrigin = w),
                        (l.yOrigin = M),
                        (l.smooth = !!i),
                        (l.origin = e),
                        (l.originIsAbsolute = !!n),
                        (t.style[D] = "0px 0px"),
                        o && (V(o, l, "xOrigin", h, w), V(o, l, "yOrigin", p, M), V(o, l, "xOffset", d, l.xOffset), V(o, l, "yOffset", f, l.yOffset)),
                        t.setAttribute("data-svg-origin", w + " " + M);
                },
                rt = function (t, e) {
                    var n = t._gsap || new h.a(t);
                    if ("x" in n && !e && !n.uncache) return n;
                    var i,
                        r,
                        o,
                        a,
                        s,
                        c,
                        l,
                        p,
                        v,
                        g,
                        y,
                        x,
                        _,
                        b,
                        w,
                        M,
                        S,
                        T,
                        E,
                        A,
                        P,
                        L,
                        C,
                        R,
                        I,
                        k,
                        B,
                        z,
                        F,
                        U,
                        j,
                        H,
                        V = t.style,
                        W = n.scaleX < 0,
                        q = N(t, D) || "0";
                    return (
                        (i = r = o = c = l = p = v = g = y = 0),
                        (a = s = 1),
                        (n.svg = !(!t.getCTM || !G(t))),
                        (b = nt(t, n.svg)),
                        n.svg && ((R = !n.uncache && t.getAttribute("data-svg-origin")), it(t, R || q, !!R || n.originIsAbsolute, !1 !== n.smooth, b)),
                        (x = n.xOrigin || 0),
                        (_ = n.yOrigin || 0),
                        b !== K &&
                            ((T = b[0]),
                            (E = b[1]),
                            (A = b[2]),
                            (P = b[3]),
                            (i = L = b[4]),
                            (r = C = b[5]),
                            6 === b.length
                                ? ((a = Math.sqrt(T * T + E * E)),
                                  (s = Math.sqrt(P * P + A * A)),
                                  (c = T || E ? m(E, T) * d : 0),
                                  (v = A || P ? m(A, P) * d + c : 0) && (s *= Math.cos(v * f)),
                                  n.svg && ((i -= x - (x * T + _ * A)), (r -= _ - (x * E + _ * P))))
                                : ((H = b[6]),
                                  (U = b[7]),
                                  (B = b[8]),
                                  (z = b[9]),
                                  (F = b[10]),
                                  (j = b[11]),
                                  (i = b[12]),
                                  (r = b[13]),
                                  (o = b[14]),
                                  (l = (w = m(H, F)) * d),
                                  w &&
                                      ((R = L * (M = Math.cos(-w)) + B * (S = Math.sin(-w))),
                                      (I = C * M + z * S),
                                      (k = H * M + F * S),
                                      (B = L * -S + B * M),
                                      (z = C * -S + z * M),
                                      (F = H * -S + F * M),
                                      (j = U * -S + j * M),
                                      (L = R),
                                      (C = I),
                                      (H = k)),
                                  (p = (w = m(-A, F)) * d),
                                  w && ((M = Math.cos(-w)), (j = P * (S = Math.sin(-w)) + j * M), (T = R = T * M - B * S), (E = I = E * M - z * S), (A = k = A * M - F * S)),
                                  (c = (w = m(E, T)) * d),
                                  w && ((R = T * (M = Math.cos(w)) + E * (S = Math.sin(w))), (I = L * M + C * S), (E = E * M - T * S), (C = C * M - L * S), (T = R), (L = I)),
                                  l && Math.abs(l) + Math.abs(c) > 359.9 && ((l = c = 0), (p = 180 - p)),
                                  (a = Object(h.t)(Math.sqrt(T * T + E * E + A * A))),
                                  (s = Object(h.t)(Math.sqrt(C * C + H * H))),
                                  (w = m(L, C)),
                                  (v = Math.abs(w) > 2e-4 ? w * d : 0),
                                  (y = j ? 1 / (j < 0 ? -j : j) : 0)),
                            n.svg && ((R = t.getAttribute("transform")), (n.forceCSS = t.setAttribute("transform", "") || !tt(N(t, O))), R && t.setAttribute("transform", R))),
                        Math.abs(v) > 90 && Math.abs(v) < 270 && (W ? ((a *= -1), (v += c <= 0 ? 180 : -180), (c += c <= 0 ? 180 : -180)) : ((s *= -1), (v += v <= 0 ? 180 : -180))),
                        (n.x = ((n.xPercent = i && Math.round(t.offsetWidth / 2) === Math.round(-i) ? -50 : 0) ? 0 : i) + "px"),
                        (n.y = ((n.yPercent = r && Math.round(t.offsetHeight / 2) === Math.round(-r) ? -50 : 0) ? 0 : r) + "px"),
                        (n.z = o + "px"),
                        (n.scaleX = Object(h.t)(a)),
                        (n.scaleY = Object(h.t)(s)),
                        (n.rotation = Object(h.t)(c) + "deg"),
                        (n.rotationX = Object(h.t)(l) + "deg"),
                        (n.rotationY = Object(h.t)(p) + "deg"),
                        (n.skewX = v + "deg"),
                        (n.skewY = g + "deg"),
                        (n.transformPerspective = y + "px"),
                        (n.zOrigin = parseFloat(q.split(" ")[2]) || 0) && (V[D] = ot(q)),
                        (n.xOffset = n.yOffset = 0),
                        (n.force3D = h.f.force3D),
                        (n.renderTransform = n.svg ? lt : u ? ct : st),
                        (n.uncache = 0),
                        n
                    );
                },
                ot = function (t) {
                    return (t = t.split(" "))[0] + " " + t[1];
                },
                at = function (t, e, n) {
                    var i = Object(h.x)(e);
                    return Object(h.t)(parseFloat(e) + parseFloat(q(t, "x", n + "px", i))) + i;
                },
                st = function (t, e) {
                    (e.z = "0px"), (e.rotationY = e.rotationX = "0deg"), (e.force3D = 0), ct(t, e);
                },
                ct = function (t, e) {
                    var n = e || this,
                        i = n.xPercent,
                        r = n.yPercent,
                        o = n.x,
                        a = n.y,
                        s = n.z,
                        c = n.rotation,
                        l = n.rotationY,
                        u = n.rotationX,
                        h = n.skewX,
                        p = n.skewY,
                        d = n.scaleX,
                        m = n.scaleY,
                        v = n.transformPerspective,
                        g = n.force3D,
                        y = n.target,
                        x = n.zOrigin,
                        _ = "",
                        b = ("auto" === g && t && 1 !== t) || !0 === g;
                    if (x && ("0deg" !== u || "0deg" !== l)) {
                        var w,
                            M = parseFloat(l) * f,
                            S = Math.sin(M),
                            T = Math.cos(M);
                        (M = parseFloat(u) * f), (w = Math.cos(M)), (o = at(y, o, S * w * -x)), (a = at(y, a, -Math.sin(M) * -x)), (s = at(y, s, T * w * -x + x));
                    }
                    "0px" !== v && (_ += "perspective(" + v + ") "),
                        (i || r) && (_ += "translate(" + i + "%, " + r + "%) "),
                        (b || "0px" !== o || "0px" !== a || "0px" !== s) && (_ += "0px" !== s || b ? "translate3d(" + o + ", " + a + ", " + s + ") " : "translate(" + o + ", " + a + ") "),
                        "0deg" !== c && (_ += "rotate(" + c + ") "),
                        "0deg" !== l && (_ += "rotateY(" + l + ") "),
                        "0deg" !== u && (_ += "rotateX(" + u + ") "),
                        ("0deg" === h && "0deg" === p) || (_ += "skew(" + h + ", " + p + ") "),
                        (1 === d && 1 === m) || (_ += "scale(" + d + ", " + m + ") "),
                        (y.style[O] = _ || "translate(0, 0)");
                },
                lt = function (t, e) {
                    var n,
                        i,
                        r,
                        o,
                        a,
                        s = e || this,
                        c = s.xPercent,
                        l = s.yPercent,
                        u = s.x,
                        p = s.y,
                        d = s.rotation,
                        m = s.skewX,
                        v = s.skewY,
                        g = s.scaleX,
                        y = s.scaleY,
                        x = s.target,
                        _ = s.xOrigin,
                        b = s.yOrigin,
                        w = s.xOffset,
                        M = s.yOffset,
                        S = s.forceCSS,
                        T = parseFloat(u),
                        E = parseFloat(p);
                    (d = parseFloat(d)),
                        (m = parseFloat(m)),
                        (v = parseFloat(v)) && ((m += v = parseFloat(v)), (d += v)),
                        d || m
                            ? ((d *= f),
                              (m *= f),
                              (n = Math.cos(d) * g),
                              (i = Math.sin(d) * g),
                              (r = Math.sin(d - m) * -y),
                              (o = Math.cos(d - m) * y),
                              m && ((v *= f), (a = Math.tan(m - v)), (r *= a = Math.sqrt(1 + a * a)), (o *= a), v && ((a = Math.tan(v)), (n *= a = Math.sqrt(1 + a * a)), (i *= a))),
                              (n = Object(h.t)(n)),
                              (i = Object(h.t)(i)),
                              (r = Object(h.t)(r)),
                              (o = Object(h.t)(o)))
                            : ((n = g), (o = y), (i = r = 0)),
                        ((T && !~(u + "").indexOf("px")) || (E && !~(p + "").indexOf("px"))) && ((T = q(x, "x", u, "px")), (E = q(x, "y", p, "px"))),
                        (_ || b || w || M) && ((T = Object(h.t)(T + _ - (_ * n + b * r) + w)), (E = Object(h.t)(E + b - (_ * i + b * o) + M))),
                        (c || l) && ((a = x.getBBox()), (T = Object(h.t)(T + (c / 100) * a.width)), (E = Object(h.t)(E + (l / 100) * a.height))),
                        (a = "matrix(" + n + "," + i + "," + r + "," + o + "," + T + "," + E + ")"),
                        x.setAttribute("transform", a),
                        S && (x.style[O] = a);
                },
                ut = function (t, e, n, i, r, o) {
                    var a,
                        s,
                        c = Object(h.k)(r),
                        l = parseFloat(r) * (c && ~r.indexOf("rad") ? d : 1),
                        u = o ? l * o : l - i,
                        p = i + u + "deg";
                    return (
                        c &&
                            ("short" === (a = r.split("_")[1]) && (u %= 360) !== u % 180 && (u += u < 0 ? 360 : -360),
                            "cw" === a && u < 0 ? (u = ((u + 36e9) % 360) - 360 * ~~(u / 360)) : "ccw" === a && u > 0 && (u = ((u - 36e9) % 360) - 360 * ~~(u / 360))),
                        (t._pt = s = new h.c(t._pt, e, n, i, u, b)),
                        (s.e = p),
                        (s.u = "deg"),
                        t._props.push(n),
                        s
                    );
                },
                ht = function (t, e, n) {
                    var i,
                        o,
                        a,
                        s,
                        l,
                        u,
                        d,
                        f = c.style,
                        m = n._gsap;
                    for (o in ((f.cssText = getComputedStyle(n).cssText + ";position:absolute;display:block;"), (f[O] = e), r.body.appendChild(c), (i = rt(c, 1)), p))
                        (a = m[o]) !== (s = i[o]) &&
                            "perspective,force3D,transformOrigin,svgOrigin".indexOf(o) < 0 &&
                            ((l = Object(h.x)(a) !== (d = Object(h.x)(s)) ? q(n, o, a, d) : parseFloat(a)), (u = parseFloat(s)), (t._pt = new h.c(t._pt, m, o, l, u - l, _)), (t._pt.u = d || 0), t._props.push(o));
                    r.body.removeChild(c);
                };
            Object(h.g)("padding,margin,Width,Radius", function (t, e) {
                var n = "Top",
                    i = "Right",
                    r = "Bottom",
                    o = "Left",
                    a = (e < 3 ? [n, i, r, o] : [n + o, n + i, r + i, r + o]).map(function (n) {
                        return e < 2 ? t + n : "border" + n + t;
                    });
                Q[e > 1 ? "border" + t : t] = function (t, e, n, i, r) {
                    var o, s;
                    if (arguments.length < 4)
                        return (
                            (o = a.map(function (e) {
                                return X(t, e, n);
                            })),
                            5 === (s = o.join(" ")).split(o[0]).length ? o[0] : s
                        );
                    (o = (i + "").split(" ")),
                        (s = {}),
                        a.forEach(function (t, e) {
                            return (s[t] = o[e] = o[e] || o[((e - 1) / 2) | 0]);
                        }),
                        t.init(e, s, r);
                };
            });
            var pt,
                dt,
                ft = {
                    name: "css",
                    register: z,
                    targetTest: function (t) {
                        return t.style && t.nodeType;
                    },
                    init: function (t, e, n, i, r) {
                        var o,
                            s,
                            c,
                            l,
                            u,
                            d,
                            f,
                            m,
                            v,
                            g,
                            b,
                            S,
                            T,
                            E,
                            A,
                            P,
                            L,
                            C,
                            R,
                            D = this._props,
                            I = t.style;
                        for (f in (a || z(), e))
                            if ("autoRound" !== f && ((s = e[f]), !h.p[f] || !Object(h.d)(f, e, n, i, t, r)))
                                if (((u = typeof s), (d = Q[f]), "function" === u && (u = typeof (s = s.call(n, i, t, r))), "string" === u && ~s.indexOf("random(") && (s = Object(h.s)(s)), d)) d(this, t, f, s, n) && (A = 1);
                                else if ("--" === f.substr(0, 2)) this.add(I, "setProperty", getComputedStyle(t).getPropertyValue(f) + "", s + "", i, r, 0, 0, f);
                                else {
                                    if (
                                        ((o = X(t, f)),
                                        (l = parseFloat(o)),
                                        (g = "string" === u && "=" === s.charAt(1) ? +(s.charAt(0) + "1") : 0) && (s = s.substr(2)),
                                        (c = parseFloat(s)),
                                        f in x &&
                                            ("autoAlpha" === f && (1 === l && "hidden" === X(t, "visibility") && c && (l = 0), V(this, I, "visibility", l ? "inherit" : "hidden", c ? "inherit" : "hidden", !c)),
                                            "scale" !== f && "transform" !== f && ~(f = x[f]).indexOf(",") && (f = f.split(",")[0])),
                                        (b = f in p))
                                    )
                                        if ((S || ((T = t._gsap).renderTransform || rt(t), (E = !1 !== e.smoothOrigin && T.smooth), ((S = this._pt = new h.c(this._pt, I, O, 0, 1, T.renderTransform, T, 0, -1)).dep = 1)), "scale" === f))
                                            (this._pt = new h.c(this._pt, T, "scaleY", T.scaleY, g ? g * c : c - T.scaleY)), D.push("scaleY", f), (f += "X");
                                        else {
                                            if ("transformOrigin" === f) {
                                                (L = void 0),
                                                    (C = void 0),
                                                    (R = void 0),
                                                    (L = (P = s).split(" ")),
                                                    (C = L[0]),
                                                    (R = L[1] || "50%"),
                                                    ("top" !== C && "bottom" !== C && "left" !== R && "right" !== R) || ((P = C), (C = R), (R = P)),
                                                    (L[0] = Z[C] || C),
                                                    (L[1] = Z[R] || R),
                                                    (s = L.join(" ")),
                                                    T.svg ? it(t, s, 0, E, 0, this) : ((v = parseFloat(s.split(" ")[2]) || 0) !== T.zOrigin && V(this, T, "zOrigin", T.zOrigin, v), V(this, I, f, ot(o), ot(s)));
                                                continue;
                                            }
                                            if ("svgOrigin" === f) {
                                                it(t, s, 1, E, 0, this);
                                                continue;
                                            }
                                            if (f in $) {
                                                ut(this, T, f, l, s, g);
                                                continue;
                                            }
                                            if ("smoothOrigin" === f) {
                                                V(this, T, "smooth", T.smooth, s);
                                                continue;
                                            }
                                            if ("force3D" === f) {
                                                T[f] = s;
                                                continue;
                                            }
                                            if ("transform" === f) {
                                                ht(this, s, t);
                                                continue;
                                            }
                                        }
                                    else f in I || (f = B(f) || f);
                                    if (b || ((c || 0 === c) && (l || 0 === l) && !y.test(s) && f in I))
                                        (m = (o + "").substr((l + "").length)),
                                            c || (c = 0),
                                            m !== (v = (s + "").substr((c + "").length) || (f in h.f.units ? h.f.units[f] : m)) && (l = q(t, f, o, v)),
                                            (this._pt = new h.c(this._pt, b ? T : I, f, l, g ? g * c : c - l, "px" !== v || !1 === e.autoRound || b ? _ : M)),
                                            (this._pt.u = v || 0),
                                            m !== v && ((this._pt.b = o), (this._pt.r = w));
                                    else if (f in I) Y.call(this, t, f, o, s);
                                    else {
                                        if (!(f in t)) {
                                            Object(h.m)(f, s);
                                            continue;
                                        }
                                        this.add(t, f, t[f], s, i, r);
                                    }
                                    D.push(f);
                                }
                        A && Object(h.u)(this);
                    },
                    get: X,
                    aliases: x,
                    getSetter: function (t, e, n) {
                        var i = x[e];
                        return (
                            i && i.indexOf(",") < 0 && (e = i),
                            e in p && e !== D && (t._gsap.x || X(t, "x"))
                                ? n && l === n
                                    ? "scale" === e
                                        ? L
                                        : P
                                    : (l = n || {}) && ("scale" === e ? C : R)
                                : t.style && !Object(h.l)(t.style[e])
                                ? E
                                : ~e.indexOf("-")
                                ? A
                                : Object(h.j)(t, e)
                        );
                    },
                    core: { _removeProperty: H, _getMatrix: nt },
                };
            (h.y.utils.checkPrefix = B),
                (pt = "rotation,rotationX,rotationY,skewX,skewY"),
                (dt = Object(h.g)("x,y,z,scale,scaleX,scaleY,xPercent,yPercent," + pt + ",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", function (t) {
                    p[t] = 1;
                })),
                Object(h.g)(pt, function (t) {
                    (h.f.units[t] = "deg"), ($[t] = 1);
                }),
                (x[dt[13]] = "x,y,z,scale,scaleX,scaleY,xPercent,yPercent," + pt),
                Object(h.g)("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY", function (t) {
                    var e = t.split(":");
                    x[e[1]] = dt[e[0]];
                }),
                Object(h.g)("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", function (t) {
                    h.f.units[t] = "px";
                }),
                h.y.registerPlugin(ft);
            var mt = (h.w.registerPlugin(ft) || h.w).core.Tween;
        },
        function (t, e, n) {
            "use strict";
            n.d(e, "a", function () {
                return l;
            });
            var i = n(59),
                r = n(62),
                o = n(68),
                a = n(60),
                s = function (t, e) {
                    a.a.call(this), (this.scene = t), (this.camera = e), (this.clear = !0), (this.needsSwap = !1), (this.inverse = !1);
                };
            s.prototype = Object.assign(Object.create(a.a.prototype), {
                constructor: s,
                render: function (t, e, n) {
                    var i,
                        r,
                        o = t.getContext(),
                        a = t.state;
                    a.buffers.color.setMask(!1),
                        a.buffers.depth.setMask(!1),
                        a.buffers.color.setLocked(!0),
                        a.buffers.depth.setLocked(!0),
                        this.inverse ? ((i = 0), (r = 1)) : ((i = 1), (r = 0)),
                        a.buffers.stencil.setTest(!0),
                        a.buffers.stencil.setOp(o.REPLACE, o.REPLACE, o.REPLACE),
                        a.buffers.stencil.setFunc(o.ALWAYS, i, 4294967295),
                        a.buffers.stencil.setClear(r),
                        a.buffers.stencil.setLocked(!0),
                        t.setRenderTarget(n),
                        this.clear && t.clear(),
                        t.render(this.scene, this.camera),
                        t.setRenderTarget(e),
                        this.clear && t.clear(),
                        t.render(this.scene, this.camera),
                        a.buffers.color.setLocked(!1),
                        a.buffers.depth.setLocked(!1),
                        a.buffers.stencil.setLocked(!1),
                        a.buffers.stencil.setFunc(o.EQUAL, 1, 4294967295),
                        a.buffers.stencil.setOp(o.KEEP, o.KEEP, o.KEEP),
                        a.buffers.stencil.setLocked(!0);
                },
            });
            var c = function () {
                a.a.call(this), (this.needsSwap = !1);
            };
            (c.prototype = Object.create(a.a.prototype)),
                Object.assign(c.prototype, {
                    render: function (t) {
                        t.state.buffers.stencil.setLocked(!1), t.state.buffers.stencil.setTest(!1);
                    },
                });
            var l = function (t, e) {
                if (((this.renderer = t), void 0 === e)) {
                    var n = { minFilter: i.g, magFilter: i.g, format: i.m, stencilBuffer: !1 },
                        a = t.getSize(new i.r());
                    (this._pixelRatio = t.getPixelRatio()), (this._width = a.width), (this._height = a.height), ((e = new i.t(this._width * this._pixelRatio, this._height * this._pixelRatio, n)).texture.name = "EffectComposer.rt1");
                } else (this._pixelRatio = 1), (this._width = e.width), (this._height = e.height);
                (this.renderTarget1 = e),
                    (this.renderTarget2 = e.clone()),
                    (this.renderTarget2.texture.name = "EffectComposer.rt2"),
                    (this.writeBuffer = this.renderTarget1),
                    (this.readBuffer = this.renderTarget2),
                    (this.renderToScreen = !0),
                    (this.passes = []),
                    void 0 === r.a && console.error("THREE.EffectComposer relies on CopyShader"),
                    void 0 === o.a && console.error("THREE.EffectComposer relies on ShaderPass"),
                    (this.copyPass = new o.a(r.a)),
                    (this.clock = new i.c());
            };
            Object.assign(l.prototype, {
                swapBuffers: function () {
                    var t = this.readBuffer;
                    (this.readBuffer = this.writeBuffer), (this.writeBuffer = t);
                },
                addPass: function (t) {
                    this.passes.push(t), t.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);
                },
                insertPass: function (t, e) {
                    this.passes.splice(e, 0, t);
                },
                isLastEnabledPass: function (t) {
                    for (var e = t + 1; e < this.passes.length; e++) if (this.passes[e].enabled) return !1;
                    return !0;
                },
                render: function (t) {
                    void 0 === t && (t = this.clock.getDelta());
                    var e,
                        n,
                        i = this.renderer.getRenderTarget(),
                        r = !1,
                        o = this.passes.length;
                    for (n = 0; n < o; n++)
                        if (!1 !== (e = this.passes[n]).enabled) {
                            if (((e.renderToScreen = this.renderToScreen && this.isLastEnabledPass(n)), e.render(this.renderer, this.writeBuffer, this.readBuffer, t, r), e.needsSwap)) {
                                if (r) {
                                    var a = this.renderer.getContext(),
                                        l = this.renderer.state.buffers.stencil;
                                    l.setFunc(a.NOTEQUAL, 1, 4294967295), this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, t), l.setFunc(a.EQUAL, 1, 4294967295);
                                }
                                this.swapBuffers();
                            }
                            void 0 !== s && (e instanceof s ? (r = !0) : e instanceof c && (r = !1));
                        }
                    this.renderer.setRenderTarget(i);
                },
                reset: function (t) {
                    if (void 0 === t) {
                        var e = this.renderer.getSize(new i.r());
                        (this._pixelRatio = this.renderer.getPixelRatio()), (this._width = e.width), (this._height = e.height), (t = this.renderTarget1.clone()).setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);
                    }
                    this.renderTarget1.dispose(), this.renderTarget2.dispose(), (this.renderTarget1 = t), (this.renderTarget2 = t.clone()), (this.writeBuffer = this.renderTarget1), (this.readBuffer = this.renderTarget2);
                },
                setSize: function (t, e) {
                    (this._width = t), (this._height = e);
                    var n = this._width * this._pixelRatio,
                        i = this._height * this._pixelRatio;
                    this.renderTarget1.setSize(n, i), this.renderTarget2.setSize(n, i);
                    for (var r = 0; r < this.passes.length; r++) this.passes[r].setSize(n, i);
                },
                setPixelRatio: function (t) {
                    (this._pixelRatio = t), this.setSize(this._width, this._height);
                },
            });
            var u,
                h,
                p,
                d = function () {
                    (this.enabled = !0), (this.needsSwap = !0), (this.clear = !1), (this.renderToScreen = !1);
                };
            Object.assign(d.prototype, {
                setSize: function () {},
                render: function () {
                    console.error("THREE.Pass: .render() must be implemented in derived pass.");
                },
            }),
                (d.FullScreenQuad =
                    ((u = new i.j(-1, 1, 1, -1, 0, 1)),
                    (h = new i.l(2, 2)),
                    (p = function (t) {
                        this._mesh = new i.h(h, t);
                    }),
                    Object.defineProperty(p.prototype, "material", {
                        get: function () {
                            return this._mesh.material;
                        },
                        set: function (t) {
                            this._mesh.material = t;
                        },
                    }),
                    Object.assign(p.prototype, {
                        dispose: function () {
                            this._mesh.geometry.dispose();
                        },
                        render: function (t) {
                            t.render(this._mesh, u);
                        },
                    }),
                    p));
        },
    ]),
]);
